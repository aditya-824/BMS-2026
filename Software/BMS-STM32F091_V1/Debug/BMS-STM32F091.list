
BMS-STM32F091.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b24  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08009be0  08009be0  0000abe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fc4  08009fc4  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08009fc4  08009fc4  0000b07c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08009fc4  08009fc4  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fc4  08009fc4  0000afc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fc8  08009fc8  0000afc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009fcc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000136c  2000007c  0800a048  0000b07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013e8  0800a048  0000b3e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015618  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b38  00000000  00000000  000206bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  000231f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001097  00000000  00000000  00024718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e21c  00000000  00000000  000257af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017422  00000000  00000000  000439cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3e7e  00000000  00000000  0005aded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ec6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000593c  00000000  00000000  0010ecb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001145ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000007c 	.word	0x2000007c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009bc8 	.word	0x08009bc8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000080 	.word	0x20000080
 8000100:	08009bc8 	.word	0x08009bc8

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_cdrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	0010      	movs	r0, r2
 8000234:	4662      	mov	r2, ip
 8000236:	468c      	mov	ip, r1
 8000238:	0019      	movs	r1, r3
 800023a:	4663      	mov	r3, ip
 800023c:	e000      	b.n	8000240 <__aeabi_cdcmpeq>
 800023e:	46c0      	nop			@ (mov r8, r8)

08000240 <__aeabi_cdcmpeq>:
 8000240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000242:	f000 ffe3 	bl	800120c <__ledf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	d401      	bmi.n	800024e <__aeabi_cdcmpeq+0xe>
 800024a:	2100      	movs	r1, #0
 800024c:	42c8      	cmn	r0, r1
 800024e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000250 <__aeabi_dcmpeq>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 ff27 	bl	80010a4 <__eqdf2>
 8000256:	4240      	negs	r0, r0
 8000258:	3001      	adds	r0, #1
 800025a:	bd10      	pop	{r4, pc}

0800025c <__aeabi_dcmplt>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f000 ffd5 	bl	800120c <__ledf2>
 8000262:	2800      	cmp	r0, #0
 8000264:	db01      	blt.n	800026a <__aeabi_dcmplt+0xe>
 8000266:	2000      	movs	r0, #0
 8000268:	bd10      	pop	{r4, pc}
 800026a:	2001      	movs	r0, #1
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__aeabi_dcmple>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f000 ffcb 	bl	800120c <__ledf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	dd01      	ble.n	800027e <__aeabi_dcmple+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__aeabi_dcmpgt>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f000 ff51 	bl	800112c <__gedf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dc01      	bgt.n	8000292 <__aeabi_dcmpgt+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			@ (mov r8, r8)

08000298 <__aeabi_dcmpge>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f000 ff47 	bl	800112c <__gedf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	da01      	bge.n	80002a6 <__aeabi_dcmpge+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			@ (mov r8, r8)

080002ac <__aeabi_d2uiz>:
 80002ac:	b570      	push	{r4, r5, r6, lr}
 80002ae:	2200      	movs	r2, #0
 80002b0:	4b0c      	ldr	r3, [pc, #48]	@ (80002e4 <__aeabi_d2uiz+0x38>)
 80002b2:	0004      	movs	r4, r0
 80002b4:	000d      	movs	r5, r1
 80002b6:	f7ff ffef 	bl	8000298 <__aeabi_dcmpge>
 80002ba:	2800      	cmp	r0, #0
 80002bc:	d104      	bne.n	80002c8 <__aeabi_d2uiz+0x1c>
 80002be:	0020      	movs	r0, r4
 80002c0:	0029      	movs	r1, r5
 80002c2:	f001 ff23 	bl	800210c <__aeabi_d2iz>
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	4b06      	ldr	r3, [pc, #24]	@ (80002e4 <__aeabi_d2uiz+0x38>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	0020      	movs	r0, r4
 80002ce:	0029      	movs	r1, r5
 80002d0:	f001 faf0 	bl	80018b4 <__aeabi_dsub>
 80002d4:	f001 ff1a 	bl	800210c <__aeabi_d2iz>
 80002d8:	2380      	movs	r3, #128	@ 0x80
 80002da:	061b      	lsls	r3, r3, #24
 80002dc:	469c      	mov	ip, r3
 80002de:	4460      	add	r0, ip
 80002e0:	e7f1      	b.n	80002c6 <__aeabi_d2uiz+0x1a>
 80002e2:	46c0      	nop			@ (mov r8, r8)
 80002e4:	41e00000 	.word	0x41e00000

080002e8 <__aeabi_dadd>:
 80002e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ea:	464f      	mov	r7, r9
 80002ec:	4646      	mov	r6, r8
 80002ee:	46d6      	mov	lr, sl
 80002f0:	b5c0      	push	{r6, r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	9000      	str	r0, [sp, #0]
 80002f6:	9101      	str	r1, [sp, #4]
 80002f8:	030e      	lsls	r6, r1, #12
 80002fa:	004c      	lsls	r4, r1, #1
 80002fc:	0fcd      	lsrs	r5, r1, #31
 80002fe:	0a71      	lsrs	r1, r6, #9
 8000300:	9e00      	ldr	r6, [sp, #0]
 8000302:	005f      	lsls	r7, r3, #1
 8000304:	0f76      	lsrs	r6, r6, #29
 8000306:	430e      	orrs	r6, r1
 8000308:	9900      	ldr	r1, [sp, #0]
 800030a:	9200      	str	r2, [sp, #0]
 800030c:	9301      	str	r3, [sp, #4]
 800030e:	00c9      	lsls	r1, r1, #3
 8000310:	4689      	mov	r9, r1
 8000312:	0319      	lsls	r1, r3, #12
 8000314:	0d7b      	lsrs	r3, r7, #21
 8000316:	4698      	mov	r8, r3
 8000318:	9b01      	ldr	r3, [sp, #4]
 800031a:	0a49      	lsrs	r1, r1, #9
 800031c:	0fdb      	lsrs	r3, r3, #31
 800031e:	469c      	mov	ip, r3
 8000320:	9b00      	ldr	r3, [sp, #0]
 8000322:	9a00      	ldr	r2, [sp, #0]
 8000324:	0f5b      	lsrs	r3, r3, #29
 8000326:	430b      	orrs	r3, r1
 8000328:	4641      	mov	r1, r8
 800032a:	0d64      	lsrs	r4, r4, #21
 800032c:	00d2      	lsls	r2, r2, #3
 800032e:	1a61      	subs	r1, r4, r1
 8000330:	4565      	cmp	r5, ip
 8000332:	d100      	bne.n	8000336 <__aeabi_dadd+0x4e>
 8000334:	e0a6      	b.n	8000484 <__aeabi_dadd+0x19c>
 8000336:	2900      	cmp	r1, #0
 8000338:	dd72      	ble.n	8000420 <__aeabi_dadd+0x138>
 800033a:	4647      	mov	r7, r8
 800033c:	2f00      	cmp	r7, #0
 800033e:	d100      	bne.n	8000342 <__aeabi_dadd+0x5a>
 8000340:	e0dd      	b.n	80004fe <__aeabi_dadd+0x216>
 8000342:	4fcc      	ldr	r7, [pc, #816]	@ (8000674 <__aeabi_dadd+0x38c>)
 8000344:	42bc      	cmp	r4, r7
 8000346:	d100      	bne.n	800034a <__aeabi_dadd+0x62>
 8000348:	e19a      	b.n	8000680 <__aeabi_dadd+0x398>
 800034a:	2701      	movs	r7, #1
 800034c:	2938      	cmp	r1, #56	@ 0x38
 800034e:	dc17      	bgt.n	8000380 <__aeabi_dadd+0x98>
 8000350:	2780      	movs	r7, #128	@ 0x80
 8000352:	043f      	lsls	r7, r7, #16
 8000354:	433b      	orrs	r3, r7
 8000356:	291f      	cmp	r1, #31
 8000358:	dd00      	ble.n	800035c <__aeabi_dadd+0x74>
 800035a:	e1dd      	b.n	8000718 <__aeabi_dadd+0x430>
 800035c:	2720      	movs	r7, #32
 800035e:	1a78      	subs	r0, r7, r1
 8000360:	001f      	movs	r7, r3
 8000362:	4087      	lsls	r7, r0
 8000364:	46ba      	mov	sl, r7
 8000366:	0017      	movs	r7, r2
 8000368:	40cf      	lsrs	r7, r1
 800036a:	4684      	mov	ip, r0
 800036c:	0038      	movs	r0, r7
 800036e:	4657      	mov	r7, sl
 8000370:	4307      	orrs	r7, r0
 8000372:	4660      	mov	r0, ip
 8000374:	4082      	lsls	r2, r0
 8000376:	40cb      	lsrs	r3, r1
 8000378:	1e50      	subs	r0, r2, #1
 800037a:	4182      	sbcs	r2, r0
 800037c:	1af6      	subs	r6, r6, r3
 800037e:	4317      	orrs	r7, r2
 8000380:	464b      	mov	r3, r9
 8000382:	1bdf      	subs	r7, r3, r7
 8000384:	45b9      	cmp	r9, r7
 8000386:	4180      	sbcs	r0, r0
 8000388:	4240      	negs	r0, r0
 800038a:	1a36      	subs	r6, r6, r0
 800038c:	0233      	lsls	r3, r6, #8
 800038e:	d400      	bmi.n	8000392 <__aeabi_dadd+0xaa>
 8000390:	e0ff      	b.n	8000592 <__aeabi_dadd+0x2aa>
 8000392:	0276      	lsls	r6, r6, #9
 8000394:	0a76      	lsrs	r6, r6, #9
 8000396:	2e00      	cmp	r6, #0
 8000398:	d100      	bne.n	800039c <__aeabi_dadd+0xb4>
 800039a:	e13c      	b.n	8000616 <__aeabi_dadd+0x32e>
 800039c:	0030      	movs	r0, r6
 800039e:	f001 ff1f 	bl	80021e0 <__clzsi2>
 80003a2:	0003      	movs	r3, r0
 80003a4:	3b08      	subs	r3, #8
 80003a6:	2120      	movs	r1, #32
 80003a8:	0038      	movs	r0, r7
 80003aa:	1aca      	subs	r2, r1, r3
 80003ac:	40d0      	lsrs	r0, r2
 80003ae:	409e      	lsls	r6, r3
 80003b0:	0002      	movs	r2, r0
 80003b2:	409f      	lsls	r7, r3
 80003b4:	4332      	orrs	r2, r6
 80003b6:	429c      	cmp	r4, r3
 80003b8:	dd00      	ble.n	80003bc <__aeabi_dadd+0xd4>
 80003ba:	e1a6      	b.n	800070a <__aeabi_dadd+0x422>
 80003bc:	1b18      	subs	r0, r3, r4
 80003be:	3001      	adds	r0, #1
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	003e      	movs	r6, r7
 80003c4:	408f      	lsls	r7, r1
 80003c6:	40c6      	lsrs	r6, r0
 80003c8:	1e7b      	subs	r3, r7, #1
 80003ca:	419f      	sbcs	r7, r3
 80003cc:	0013      	movs	r3, r2
 80003ce:	408b      	lsls	r3, r1
 80003d0:	4337      	orrs	r7, r6
 80003d2:	431f      	orrs	r7, r3
 80003d4:	40c2      	lsrs	r2, r0
 80003d6:	003b      	movs	r3, r7
 80003d8:	0016      	movs	r6, r2
 80003da:	2400      	movs	r4, #0
 80003dc:	4313      	orrs	r3, r2
 80003de:	d100      	bne.n	80003e2 <__aeabi_dadd+0xfa>
 80003e0:	e1df      	b.n	80007a2 <__aeabi_dadd+0x4ba>
 80003e2:	077b      	lsls	r3, r7, #29
 80003e4:	d100      	bne.n	80003e8 <__aeabi_dadd+0x100>
 80003e6:	e332      	b.n	8000a4e <__aeabi_dadd+0x766>
 80003e8:	230f      	movs	r3, #15
 80003ea:	003a      	movs	r2, r7
 80003ec:	403b      	ands	r3, r7
 80003ee:	2b04      	cmp	r3, #4
 80003f0:	d004      	beq.n	80003fc <__aeabi_dadd+0x114>
 80003f2:	1d3a      	adds	r2, r7, #4
 80003f4:	42ba      	cmp	r2, r7
 80003f6:	41bf      	sbcs	r7, r7
 80003f8:	427f      	negs	r7, r7
 80003fa:	19f6      	adds	r6, r6, r7
 80003fc:	0233      	lsls	r3, r6, #8
 80003fe:	d400      	bmi.n	8000402 <__aeabi_dadd+0x11a>
 8000400:	e323      	b.n	8000a4a <__aeabi_dadd+0x762>
 8000402:	4b9c      	ldr	r3, [pc, #624]	@ (8000674 <__aeabi_dadd+0x38c>)
 8000404:	3401      	adds	r4, #1
 8000406:	429c      	cmp	r4, r3
 8000408:	d100      	bne.n	800040c <__aeabi_dadd+0x124>
 800040a:	e0b4      	b.n	8000576 <__aeabi_dadd+0x28e>
 800040c:	4b9a      	ldr	r3, [pc, #616]	@ (8000678 <__aeabi_dadd+0x390>)
 800040e:	0564      	lsls	r4, r4, #21
 8000410:	401e      	ands	r6, r3
 8000412:	0d64      	lsrs	r4, r4, #21
 8000414:	0777      	lsls	r7, r6, #29
 8000416:	08d2      	lsrs	r2, r2, #3
 8000418:	0276      	lsls	r6, r6, #9
 800041a:	4317      	orrs	r7, r2
 800041c:	0b36      	lsrs	r6, r6, #12
 800041e:	e0ac      	b.n	800057a <__aeabi_dadd+0x292>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_dadd+0x13e>
 8000424:	e07e      	b.n	8000524 <__aeabi_dadd+0x23c>
 8000426:	4641      	mov	r1, r8
 8000428:	1b09      	subs	r1, r1, r4
 800042a:	2c00      	cmp	r4, #0
 800042c:	d000      	beq.n	8000430 <__aeabi_dadd+0x148>
 800042e:	e160      	b.n	80006f2 <__aeabi_dadd+0x40a>
 8000430:	0034      	movs	r4, r6
 8000432:	4648      	mov	r0, r9
 8000434:	4304      	orrs	r4, r0
 8000436:	d100      	bne.n	800043a <__aeabi_dadd+0x152>
 8000438:	e1c9      	b.n	80007ce <__aeabi_dadd+0x4e6>
 800043a:	1e4c      	subs	r4, r1, #1
 800043c:	2901      	cmp	r1, #1
 800043e:	d100      	bne.n	8000442 <__aeabi_dadd+0x15a>
 8000440:	e22e      	b.n	80008a0 <__aeabi_dadd+0x5b8>
 8000442:	4d8c      	ldr	r5, [pc, #560]	@ (8000674 <__aeabi_dadd+0x38c>)
 8000444:	42a9      	cmp	r1, r5
 8000446:	d100      	bne.n	800044a <__aeabi_dadd+0x162>
 8000448:	e224      	b.n	8000894 <__aeabi_dadd+0x5ac>
 800044a:	2701      	movs	r7, #1
 800044c:	2c38      	cmp	r4, #56	@ 0x38
 800044e:	dc11      	bgt.n	8000474 <__aeabi_dadd+0x18c>
 8000450:	0021      	movs	r1, r4
 8000452:	291f      	cmp	r1, #31
 8000454:	dd00      	ble.n	8000458 <__aeabi_dadd+0x170>
 8000456:	e20b      	b.n	8000870 <__aeabi_dadd+0x588>
 8000458:	2420      	movs	r4, #32
 800045a:	0037      	movs	r7, r6
 800045c:	4648      	mov	r0, r9
 800045e:	1a64      	subs	r4, r4, r1
 8000460:	40a7      	lsls	r7, r4
 8000462:	40c8      	lsrs	r0, r1
 8000464:	4307      	orrs	r7, r0
 8000466:	4648      	mov	r0, r9
 8000468:	40a0      	lsls	r0, r4
 800046a:	40ce      	lsrs	r6, r1
 800046c:	1e44      	subs	r4, r0, #1
 800046e:	41a0      	sbcs	r0, r4
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	4307      	orrs	r7, r0
 8000474:	1bd7      	subs	r7, r2, r7
 8000476:	42ba      	cmp	r2, r7
 8000478:	4192      	sbcs	r2, r2
 800047a:	4252      	negs	r2, r2
 800047c:	4665      	mov	r5, ip
 800047e:	4644      	mov	r4, r8
 8000480:	1a9e      	subs	r6, r3, r2
 8000482:	e783      	b.n	800038c <__aeabi_dadd+0xa4>
 8000484:	2900      	cmp	r1, #0
 8000486:	dc00      	bgt.n	800048a <__aeabi_dadd+0x1a2>
 8000488:	e09c      	b.n	80005c4 <__aeabi_dadd+0x2dc>
 800048a:	4647      	mov	r7, r8
 800048c:	2f00      	cmp	r7, #0
 800048e:	d167      	bne.n	8000560 <__aeabi_dadd+0x278>
 8000490:	001f      	movs	r7, r3
 8000492:	4317      	orrs	r7, r2
 8000494:	d100      	bne.n	8000498 <__aeabi_dadd+0x1b0>
 8000496:	e0e4      	b.n	8000662 <__aeabi_dadd+0x37a>
 8000498:	1e48      	subs	r0, r1, #1
 800049a:	2901      	cmp	r1, #1
 800049c:	d100      	bne.n	80004a0 <__aeabi_dadd+0x1b8>
 800049e:	e19b      	b.n	80007d8 <__aeabi_dadd+0x4f0>
 80004a0:	4f74      	ldr	r7, [pc, #464]	@ (8000674 <__aeabi_dadd+0x38c>)
 80004a2:	42b9      	cmp	r1, r7
 80004a4:	d100      	bne.n	80004a8 <__aeabi_dadd+0x1c0>
 80004a6:	e0eb      	b.n	8000680 <__aeabi_dadd+0x398>
 80004a8:	2701      	movs	r7, #1
 80004aa:	0001      	movs	r1, r0
 80004ac:	2838      	cmp	r0, #56	@ 0x38
 80004ae:	dc11      	bgt.n	80004d4 <__aeabi_dadd+0x1ec>
 80004b0:	291f      	cmp	r1, #31
 80004b2:	dd00      	ble.n	80004b6 <__aeabi_dadd+0x1ce>
 80004b4:	e1c7      	b.n	8000846 <__aeabi_dadd+0x55e>
 80004b6:	2720      	movs	r7, #32
 80004b8:	1a78      	subs	r0, r7, r1
 80004ba:	001f      	movs	r7, r3
 80004bc:	4684      	mov	ip, r0
 80004be:	4087      	lsls	r7, r0
 80004c0:	0010      	movs	r0, r2
 80004c2:	40c8      	lsrs	r0, r1
 80004c4:	4307      	orrs	r7, r0
 80004c6:	4660      	mov	r0, ip
 80004c8:	4082      	lsls	r2, r0
 80004ca:	40cb      	lsrs	r3, r1
 80004cc:	1e50      	subs	r0, r2, #1
 80004ce:	4182      	sbcs	r2, r0
 80004d0:	18f6      	adds	r6, r6, r3
 80004d2:	4317      	orrs	r7, r2
 80004d4:	444f      	add	r7, r9
 80004d6:	454f      	cmp	r7, r9
 80004d8:	4180      	sbcs	r0, r0
 80004da:	4240      	negs	r0, r0
 80004dc:	1836      	adds	r6, r6, r0
 80004de:	0233      	lsls	r3, r6, #8
 80004e0:	d557      	bpl.n	8000592 <__aeabi_dadd+0x2aa>
 80004e2:	4b64      	ldr	r3, [pc, #400]	@ (8000674 <__aeabi_dadd+0x38c>)
 80004e4:	3401      	adds	r4, #1
 80004e6:	429c      	cmp	r4, r3
 80004e8:	d045      	beq.n	8000576 <__aeabi_dadd+0x28e>
 80004ea:	2101      	movs	r1, #1
 80004ec:	4b62      	ldr	r3, [pc, #392]	@ (8000678 <__aeabi_dadd+0x390>)
 80004ee:	087a      	lsrs	r2, r7, #1
 80004f0:	401e      	ands	r6, r3
 80004f2:	4039      	ands	r1, r7
 80004f4:	430a      	orrs	r2, r1
 80004f6:	07f7      	lsls	r7, r6, #31
 80004f8:	4317      	orrs	r7, r2
 80004fa:	0876      	lsrs	r6, r6, #1
 80004fc:	e771      	b.n	80003e2 <__aeabi_dadd+0xfa>
 80004fe:	001f      	movs	r7, r3
 8000500:	4317      	orrs	r7, r2
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x21e>
 8000504:	e0ad      	b.n	8000662 <__aeabi_dadd+0x37a>
 8000506:	1e4f      	subs	r7, r1, #1
 8000508:	46bc      	mov	ip, r7
 800050a:	2901      	cmp	r1, #1
 800050c:	d100      	bne.n	8000510 <__aeabi_dadd+0x228>
 800050e:	e182      	b.n	8000816 <__aeabi_dadd+0x52e>
 8000510:	4f58      	ldr	r7, [pc, #352]	@ (8000674 <__aeabi_dadd+0x38c>)
 8000512:	42b9      	cmp	r1, r7
 8000514:	d100      	bne.n	8000518 <__aeabi_dadd+0x230>
 8000516:	e190      	b.n	800083a <__aeabi_dadd+0x552>
 8000518:	4661      	mov	r1, ip
 800051a:	2701      	movs	r7, #1
 800051c:	2938      	cmp	r1, #56	@ 0x38
 800051e:	dd00      	ble.n	8000522 <__aeabi_dadd+0x23a>
 8000520:	e72e      	b.n	8000380 <__aeabi_dadd+0x98>
 8000522:	e718      	b.n	8000356 <__aeabi_dadd+0x6e>
 8000524:	4f55      	ldr	r7, [pc, #340]	@ (800067c <__aeabi_dadd+0x394>)
 8000526:	1c61      	adds	r1, r4, #1
 8000528:	4239      	tst	r1, r7
 800052a:	d000      	beq.n	800052e <__aeabi_dadd+0x246>
 800052c:	e0d0      	b.n	80006d0 <__aeabi_dadd+0x3e8>
 800052e:	0031      	movs	r1, r6
 8000530:	4648      	mov	r0, r9
 8000532:	001f      	movs	r7, r3
 8000534:	4301      	orrs	r1, r0
 8000536:	4317      	orrs	r7, r2
 8000538:	2c00      	cmp	r4, #0
 800053a:	d000      	beq.n	800053e <__aeabi_dadd+0x256>
 800053c:	e13d      	b.n	80007ba <__aeabi_dadd+0x4d2>
 800053e:	2900      	cmp	r1, #0
 8000540:	d100      	bne.n	8000544 <__aeabi_dadd+0x25c>
 8000542:	e1bc      	b.n	80008be <__aeabi_dadd+0x5d6>
 8000544:	2f00      	cmp	r7, #0
 8000546:	d000      	beq.n	800054a <__aeabi_dadd+0x262>
 8000548:	e1bf      	b.n	80008ca <__aeabi_dadd+0x5e2>
 800054a:	464b      	mov	r3, r9
 800054c:	2100      	movs	r1, #0
 800054e:	08d8      	lsrs	r0, r3, #3
 8000550:	0777      	lsls	r7, r6, #29
 8000552:	4307      	orrs	r7, r0
 8000554:	08f0      	lsrs	r0, r6, #3
 8000556:	0306      	lsls	r6, r0, #12
 8000558:	054c      	lsls	r4, r1, #21
 800055a:	0b36      	lsrs	r6, r6, #12
 800055c:	0d64      	lsrs	r4, r4, #21
 800055e:	e00c      	b.n	800057a <__aeabi_dadd+0x292>
 8000560:	4f44      	ldr	r7, [pc, #272]	@ (8000674 <__aeabi_dadd+0x38c>)
 8000562:	42bc      	cmp	r4, r7
 8000564:	d100      	bne.n	8000568 <__aeabi_dadd+0x280>
 8000566:	e08b      	b.n	8000680 <__aeabi_dadd+0x398>
 8000568:	2701      	movs	r7, #1
 800056a:	2938      	cmp	r1, #56	@ 0x38
 800056c:	dcb2      	bgt.n	80004d4 <__aeabi_dadd+0x1ec>
 800056e:	2780      	movs	r7, #128	@ 0x80
 8000570:	043f      	lsls	r7, r7, #16
 8000572:	433b      	orrs	r3, r7
 8000574:	e79c      	b.n	80004b0 <__aeabi_dadd+0x1c8>
 8000576:	2600      	movs	r6, #0
 8000578:	2700      	movs	r7, #0
 800057a:	0524      	lsls	r4, r4, #20
 800057c:	4334      	orrs	r4, r6
 800057e:	07ed      	lsls	r5, r5, #31
 8000580:	432c      	orrs	r4, r5
 8000582:	0038      	movs	r0, r7
 8000584:	0021      	movs	r1, r4
 8000586:	b002      	add	sp, #8
 8000588:	bce0      	pop	{r5, r6, r7}
 800058a:	46ba      	mov	sl, r7
 800058c:	46b1      	mov	r9, r6
 800058e:	46a8      	mov	r8, r5
 8000590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000592:	077b      	lsls	r3, r7, #29
 8000594:	d004      	beq.n	80005a0 <__aeabi_dadd+0x2b8>
 8000596:	230f      	movs	r3, #15
 8000598:	403b      	ands	r3, r7
 800059a:	2b04      	cmp	r3, #4
 800059c:	d000      	beq.n	80005a0 <__aeabi_dadd+0x2b8>
 800059e:	e728      	b.n	80003f2 <__aeabi_dadd+0x10a>
 80005a0:	08f8      	lsrs	r0, r7, #3
 80005a2:	4b34      	ldr	r3, [pc, #208]	@ (8000674 <__aeabi_dadd+0x38c>)
 80005a4:	0777      	lsls	r7, r6, #29
 80005a6:	4307      	orrs	r7, r0
 80005a8:	08f0      	lsrs	r0, r6, #3
 80005aa:	429c      	cmp	r4, r3
 80005ac:	d000      	beq.n	80005b0 <__aeabi_dadd+0x2c8>
 80005ae:	e24a      	b.n	8000a46 <__aeabi_dadd+0x75e>
 80005b0:	003b      	movs	r3, r7
 80005b2:	4303      	orrs	r3, r0
 80005b4:	d059      	beq.n	800066a <__aeabi_dadd+0x382>
 80005b6:	2680      	movs	r6, #128	@ 0x80
 80005b8:	0336      	lsls	r6, r6, #12
 80005ba:	4306      	orrs	r6, r0
 80005bc:	0336      	lsls	r6, r6, #12
 80005be:	4c2d      	ldr	r4, [pc, #180]	@ (8000674 <__aeabi_dadd+0x38c>)
 80005c0:	0b36      	lsrs	r6, r6, #12
 80005c2:	e7da      	b.n	800057a <__aeabi_dadd+0x292>
 80005c4:	2900      	cmp	r1, #0
 80005c6:	d061      	beq.n	800068c <__aeabi_dadd+0x3a4>
 80005c8:	4641      	mov	r1, r8
 80005ca:	1b09      	subs	r1, r1, r4
 80005cc:	2c00      	cmp	r4, #0
 80005ce:	d100      	bne.n	80005d2 <__aeabi_dadd+0x2ea>
 80005d0:	e0b9      	b.n	8000746 <__aeabi_dadd+0x45e>
 80005d2:	4c28      	ldr	r4, [pc, #160]	@ (8000674 <__aeabi_dadd+0x38c>)
 80005d4:	45a0      	cmp	r8, r4
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0x2f2>
 80005d8:	e1a5      	b.n	8000926 <__aeabi_dadd+0x63e>
 80005da:	2701      	movs	r7, #1
 80005dc:	2938      	cmp	r1, #56	@ 0x38
 80005de:	dc13      	bgt.n	8000608 <__aeabi_dadd+0x320>
 80005e0:	2480      	movs	r4, #128	@ 0x80
 80005e2:	0424      	lsls	r4, r4, #16
 80005e4:	4326      	orrs	r6, r4
 80005e6:	291f      	cmp	r1, #31
 80005e8:	dd00      	ble.n	80005ec <__aeabi_dadd+0x304>
 80005ea:	e1c8      	b.n	800097e <__aeabi_dadd+0x696>
 80005ec:	2420      	movs	r4, #32
 80005ee:	0037      	movs	r7, r6
 80005f0:	4648      	mov	r0, r9
 80005f2:	1a64      	subs	r4, r4, r1
 80005f4:	40a7      	lsls	r7, r4
 80005f6:	40c8      	lsrs	r0, r1
 80005f8:	4307      	orrs	r7, r0
 80005fa:	4648      	mov	r0, r9
 80005fc:	40a0      	lsls	r0, r4
 80005fe:	40ce      	lsrs	r6, r1
 8000600:	1e44      	subs	r4, r0, #1
 8000602:	41a0      	sbcs	r0, r4
 8000604:	199b      	adds	r3, r3, r6
 8000606:	4307      	orrs	r7, r0
 8000608:	18bf      	adds	r7, r7, r2
 800060a:	4297      	cmp	r7, r2
 800060c:	4192      	sbcs	r2, r2
 800060e:	4252      	negs	r2, r2
 8000610:	4644      	mov	r4, r8
 8000612:	18d6      	adds	r6, r2, r3
 8000614:	e763      	b.n	80004de <__aeabi_dadd+0x1f6>
 8000616:	0038      	movs	r0, r7
 8000618:	f001 fde2 	bl	80021e0 <__clzsi2>
 800061c:	0003      	movs	r3, r0
 800061e:	3318      	adds	r3, #24
 8000620:	2b1f      	cmp	r3, #31
 8000622:	dc00      	bgt.n	8000626 <__aeabi_dadd+0x33e>
 8000624:	e6bf      	b.n	80003a6 <__aeabi_dadd+0xbe>
 8000626:	003a      	movs	r2, r7
 8000628:	3808      	subs	r0, #8
 800062a:	4082      	lsls	r2, r0
 800062c:	429c      	cmp	r4, r3
 800062e:	dd00      	ble.n	8000632 <__aeabi_dadd+0x34a>
 8000630:	e083      	b.n	800073a <__aeabi_dadd+0x452>
 8000632:	1b1b      	subs	r3, r3, r4
 8000634:	1c58      	adds	r0, r3, #1
 8000636:	281f      	cmp	r0, #31
 8000638:	dc00      	bgt.n	800063c <__aeabi_dadd+0x354>
 800063a:	e1b4      	b.n	80009a6 <__aeabi_dadd+0x6be>
 800063c:	0017      	movs	r7, r2
 800063e:	3b1f      	subs	r3, #31
 8000640:	40df      	lsrs	r7, r3
 8000642:	2820      	cmp	r0, #32
 8000644:	d005      	beq.n	8000652 <__aeabi_dadd+0x36a>
 8000646:	2340      	movs	r3, #64	@ 0x40
 8000648:	1a1b      	subs	r3, r3, r0
 800064a:	409a      	lsls	r2, r3
 800064c:	1e53      	subs	r3, r2, #1
 800064e:	419a      	sbcs	r2, r3
 8000650:	4317      	orrs	r7, r2
 8000652:	2400      	movs	r4, #0
 8000654:	2f00      	cmp	r7, #0
 8000656:	d00a      	beq.n	800066e <__aeabi_dadd+0x386>
 8000658:	077b      	lsls	r3, r7, #29
 800065a:	d000      	beq.n	800065e <__aeabi_dadd+0x376>
 800065c:	e6c4      	b.n	80003e8 <__aeabi_dadd+0x100>
 800065e:	0026      	movs	r6, r4
 8000660:	e79e      	b.n	80005a0 <__aeabi_dadd+0x2b8>
 8000662:	464b      	mov	r3, r9
 8000664:	000c      	movs	r4, r1
 8000666:	08d8      	lsrs	r0, r3, #3
 8000668:	e79b      	b.n	80005a2 <__aeabi_dadd+0x2ba>
 800066a:	2700      	movs	r7, #0
 800066c:	4c01      	ldr	r4, [pc, #4]	@ (8000674 <__aeabi_dadd+0x38c>)
 800066e:	2600      	movs	r6, #0
 8000670:	e783      	b.n	800057a <__aeabi_dadd+0x292>
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	000007ff 	.word	0x000007ff
 8000678:	ff7fffff 	.word	0xff7fffff
 800067c:	000007fe 	.word	0x000007fe
 8000680:	464b      	mov	r3, r9
 8000682:	0777      	lsls	r7, r6, #29
 8000684:	08d8      	lsrs	r0, r3, #3
 8000686:	4307      	orrs	r7, r0
 8000688:	08f0      	lsrs	r0, r6, #3
 800068a:	e791      	b.n	80005b0 <__aeabi_dadd+0x2c8>
 800068c:	4fcd      	ldr	r7, [pc, #820]	@ (80009c4 <__aeabi_dadd+0x6dc>)
 800068e:	1c61      	adds	r1, r4, #1
 8000690:	4239      	tst	r1, r7
 8000692:	d16b      	bne.n	800076c <__aeabi_dadd+0x484>
 8000694:	0031      	movs	r1, r6
 8000696:	4648      	mov	r0, r9
 8000698:	4301      	orrs	r1, r0
 800069a:	2c00      	cmp	r4, #0
 800069c:	d000      	beq.n	80006a0 <__aeabi_dadd+0x3b8>
 800069e:	e14b      	b.n	8000938 <__aeabi_dadd+0x650>
 80006a0:	001f      	movs	r7, r3
 80006a2:	4317      	orrs	r7, r2
 80006a4:	2900      	cmp	r1, #0
 80006a6:	d100      	bne.n	80006aa <__aeabi_dadd+0x3c2>
 80006a8:	e181      	b.n	80009ae <__aeabi_dadd+0x6c6>
 80006aa:	2f00      	cmp	r7, #0
 80006ac:	d100      	bne.n	80006b0 <__aeabi_dadd+0x3c8>
 80006ae:	e74c      	b.n	800054a <__aeabi_dadd+0x262>
 80006b0:	444a      	add	r2, r9
 80006b2:	454a      	cmp	r2, r9
 80006b4:	4180      	sbcs	r0, r0
 80006b6:	18f6      	adds	r6, r6, r3
 80006b8:	4240      	negs	r0, r0
 80006ba:	1836      	adds	r6, r6, r0
 80006bc:	0233      	lsls	r3, r6, #8
 80006be:	d500      	bpl.n	80006c2 <__aeabi_dadd+0x3da>
 80006c0:	e1b0      	b.n	8000a24 <__aeabi_dadd+0x73c>
 80006c2:	0017      	movs	r7, r2
 80006c4:	4691      	mov	r9, r2
 80006c6:	4337      	orrs	r7, r6
 80006c8:	d000      	beq.n	80006cc <__aeabi_dadd+0x3e4>
 80006ca:	e73e      	b.n	800054a <__aeabi_dadd+0x262>
 80006cc:	2600      	movs	r6, #0
 80006ce:	e754      	b.n	800057a <__aeabi_dadd+0x292>
 80006d0:	4649      	mov	r1, r9
 80006d2:	1a89      	subs	r1, r1, r2
 80006d4:	4688      	mov	r8, r1
 80006d6:	45c1      	cmp	r9, r8
 80006d8:	41bf      	sbcs	r7, r7
 80006da:	1af1      	subs	r1, r6, r3
 80006dc:	427f      	negs	r7, r7
 80006de:	1bc9      	subs	r1, r1, r7
 80006e0:	020f      	lsls	r7, r1, #8
 80006e2:	d461      	bmi.n	80007a8 <__aeabi_dadd+0x4c0>
 80006e4:	4647      	mov	r7, r8
 80006e6:	430f      	orrs	r7, r1
 80006e8:	d100      	bne.n	80006ec <__aeabi_dadd+0x404>
 80006ea:	e0bd      	b.n	8000868 <__aeabi_dadd+0x580>
 80006ec:	000e      	movs	r6, r1
 80006ee:	4647      	mov	r7, r8
 80006f0:	e651      	b.n	8000396 <__aeabi_dadd+0xae>
 80006f2:	4cb5      	ldr	r4, [pc, #724]	@ (80009c8 <__aeabi_dadd+0x6e0>)
 80006f4:	45a0      	cmp	r8, r4
 80006f6:	d100      	bne.n	80006fa <__aeabi_dadd+0x412>
 80006f8:	e100      	b.n	80008fc <__aeabi_dadd+0x614>
 80006fa:	2701      	movs	r7, #1
 80006fc:	2938      	cmp	r1, #56	@ 0x38
 80006fe:	dd00      	ble.n	8000702 <__aeabi_dadd+0x41a>
 8000700:	e6b8      	b.n	8000474 <__aeabi_dadd+0x18c>
 8000702:	2480      	movs	r4, #128	@ 0x80
 8000704:	0424      	lsls	r4, r4, #16
 8000706:	4326      	orrs	r6, r4
 8000708:	e6a3      	b.n	8000452 <__aeabi_dadd+0x16a>
 800070a:	4eb0      	ldr	r6, [pc, #704]	@ (80009cc <__aeabi_dadd+0x6e4>)
 800070c:	1ae4      	subs	r4, r4, r3
 800070e:	4016      	ands	r6, r2
 8000710:	077b      	lsls	r3, r7, #29
 8000712:	d000      	beq.n	8000716 <__aeabi_dadd+0x42e>
 8000714:	e73f      	b.n	8000596 <__aeabi_dadd+0x2ae>
 8000716:	e743      	b.n	80005a0 <__aeabi_dadd+0x2b8>
 8000718:	000f      	movs	r7, r1
 800071a:	0018      	movs	r0, r3
 800071c:	3f20      	subs	r7, #32
 800071e:	40f8      	lsrs	r0, r7
 8000720:	4684      	mov	ip, r0
 8000722:	2920      	cmp	r1, #32
 8000724:	d003      	beq.n	800072e <__aeabi_dadd+0x446>
 8000726:	2740      	movs	r7, #64	@ 0x40
 8000728:	1a79      	subs	r1, r7, r1
 800072a:	408b      	lsls	r3, r1
 800072c:	431a      	orrs	r2, r3
 800072e:	1e53      	subs	r3, r2, #1
 8000730:	419a      	sbcs	r2, r3
 8000732:	4663      	mov	r3, ip
 8000734:	0017      	movs	r7, r2
 8000736:	431f      	orrs	r7, r3
 8000738:	e622      	b.n	8000380 <__aeabi_dadd+0x98>
 800073a:	48a4      	ldr	r0, [pc, #656]	@ (80009cc <__aeabi_dadd+0x6e4>)
 800073c:	1ae1      	subs	r1, r4, r3
 800073e:	4010      	ands	r0, r2
 8000740:	0747      	lsls	r7, r0, #29
 8000742:	08c0      	lsrs	r0, r0, #3
 8000744:	e707      	b.n	8000556 <__aeabi_dadd+0x26e>
 8000746:	0034      	movs	r4, r6
 8000748:	4648      	mov	r0, r9
 800074a:	4304      	orrs	r4, r0
 800074c:	d100      	bne.n	8000750 <__aeabi_dadd+0x468>
 800074e:	e0fa      	b.n	8000946 <__aeabi_dadd+0x65e>
 8000750:	1e4c      	subs	r4, r1, #1
 8000752:	2901      	cmp	r1, #1
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x470>
 8000756:	e0d7      	b.n	8000908 <__aeabi_dadd+0x620>
 8000758:	4f9b      	ldr	r7, [pc, #620]	@ (80009c8 <__aeabi_dadd+0x6e0>)
 800075a:	42b9      	cmp	r1, r7
 800075c:	d100      	bne.n	8000760 <__aeabi_dadd+0x478>
 800075e:	e0e2      	b.n	8000926 <__aeabi_dadd+0x63e>
 8000760:	2701      	movs	r7, #1
 8000762:	2c38      	cmp	r4, #56	@ 0x38
 8000764:	dd00      	ble.n	8000768 <__aeabi_dadd+0x480>
 8000766:	e74f      	b.n	8000608 <__aeabi_dadd+0x320>
 8000768:	0021      	movs	r1, r4
 800076a:	e73c      	b.n	80005e6 <__aeabi_dadd+0x2fe>
 800076c:	4c96      	ldr	r4, [pc, #600]	@ (80009c8 <__aeabi_dadd+0x6e0>)
 800076e:	42a1      	cmp	r1, r4
 8000770:	d100      	bne.n	8000774 <__aeabi_dadd+0x48c>
 8000772:	e0dd      	b.n	8000930 <__aeabi_dadd+0x648>
 8000774:	444a      	add	r2, r9
 8000776:	454a      	cmp	r2, r9
 8000778:	4180      	sbcs	r0, r0
 800077a:	18f3      	adds	r3, r6, r3
 800077c:	4240      	negs	r0, r0
 800077e:	1818      	adds	r0, r3, r0
 8000780:	07c7      	lsls	r7, r0, #31
 8000782:	0852      	lsrs	r2, r2, #1
 8000784:	4317      	orrs	r7, r2
 8000786:	0846      	lsrs	r6, r0, #1
 8000788:	0752      	lsls	r2, r2, #29
 800078a:	d005      	beq.n	8000798 <__aeabi_dadd+0x4b0>
 800078c:	220f      	movs	r2, #15
 800078e:	000c      	movs	r4, r1
 8000790:	403a      	ands	r2, r7
 8000792:	2a04      	cmp	r2, #4
 8000794:	d000      	beq.n	8000798 <__aeabi_dadd+0x4b0>
 8000796:	e62c      	b.n	80003f2 <__aeabi_dadd+0x10a>
 8000798:	0776      	lsls	r6, r6, #29
 800079a:	08ff      	lsrs	r7, r7, #3
 800079c:	4337      	orrs	r7, r6
 800079e:	0900      	lsrs	r0, r0, #4
 80007a0:	e6d9      	b.n	8000556 <__aeabi_dadd+0x26e>
 80007a2:	2700      	movs	r7, #0
 80007a4:	2600      	movs	r6, #0
 80007a6:	e6e8      	b.n	800057a <__aeabi_dadd+0x292>
 80007a8:	4649      	mov	r1, r9
 80007aa:	1a57      	subs	r7, r2, r1
 80007ac:	42ba      	cmp	r2, r7
 80007ae:	4192      	sbcs	r2, r2
 80007b0:	1b9e      	subs	r6, r3, r6
 80007b2:	4252      	negs	r2, r2
 80007b4:	4665      	mov	r5, ip
 80007b6:	1ab6      	subs	r6, r6, r2
 80007b8:	e5ed      	b.n	8000396 <__aeabi_dadd+0xae>
 80007ba:	2900      	cmp	r1, #0
 80007bc:	d000      	beq.n	80007c0 <__aeabi_dadd+0x4d8>
 80007be:	e0c6      	b.n	800094e <__aeabi_dadd+0x666>
 80007c0:	2f00      	cmp	r7, #0
 80007c2:	d167      	bne.n	8000894 <__aeabi_dadd+0x5ac>
 80007c4:	2680      	movs	r6, #128	@ 0x80
 80007c6:	2500      	movs	r5, #0
 80007c8:	4c7f      	ldr	r4, [pc, #508]	@ (80009c8 <__aeabi_dadd+0x6e0>)
 80007ca:	0336      	lsls	r6, r6, #12
 80007cc:	e6d5      	b.n	800057a <__aeabi_dadd+0x292>
 80007ce:	4665      	mov	r5, ip
 80007d0:	000c      	movs	r4, r1
 80007d2:	001e      	movs	r6, r3
 80007d4:	08d0      	lsrs	r0, r2, #3
 80007d6:	e6e4      	b.n	80005a2 <__aeabi_dadd+0x2ba>
 80007d8:	444a      	add	r2, r9
 80007da:	454a      	cmp	r2, r9
 80007dc:	4180      	sbcs	r0, r0
 80007de:	18f3      	adds	r3, r6, r3
 80007e0:	4240      	negs	r0, r0
 80007e2:	1818      	adds	r0, r3, r0
 80007e4:	0011      	movs	r1, r2
 80007e6:	0203      	lsls	r3, r0, #8
 80007e8:	d400      	bmi.n	80007ec <__aeabi_dadd+0x504>
 80007ea:	e096      	b.n	800091a <__aeabi_dadd+0x632>
 80007ec:	4b77      	ldr	r3, [pc, #476]	@ (80009cc <__aeabi_dadd+0x6e4>)
 80007ee:	0849      	lsrs	r1, r1, #1
 80007f0:	4018      	ands	r0, r3
 80007f2:	07c3      	lsls	r3, r0, #31
 80007f4:	430b      	orrs	r3, r1
 80007f6:	0844      	lsrs	r4, r0, #1
 80007f8:	0749      	lsls	r1, r1, #29
 80007fa:	d100      	bne.n	80007fe <__aeabi_dadd+0x516>
 80007fc:	e129      	b.n	8000a52 <__aeabi_dadd+0x76a>
 80007fe:	220f      	movs	r2, #15
 8000800:	401a      	ands	r2, r3
 8000802:	2a04      	cmp	r2, #4
 8000804:	d100      	bne.n	8000808 <__aeabi_dadd+0x520>
 8000806:	e0ea      	b.n	80009de <__aeabi_dadd+0x6f6>
 8000808:	1d1f      	adds	r7, r3, #4
 800080a:	429f      	cmp	r7, r3
 800080c:	41b6      	sbcs	r6, r6
 800080e:	4276      	negs	r6, r6
 8000810:	1936      	adds	r6, r6, r4
 8000812:	2402      	movs	r4, #2
 8000814:	e6c4      	b.n	80005a0 <__aeabi_dadd+0x2b8>
 8000816:	4649      	mov	r1, r9
 8000818:	1a8f      	subs	r7, r1, r2
 800081a:	45b9      	cmp	r9, r7
 800081c:	4180      	sbcs	r0, r0
 800081e:	1af6      	subs	r6, r6, r3
 8000820:	4240      	negs	r0, r0
 8000822:	1a36      	subs	r6, r6, r0
 8000824:	0233      	lsls	r3, r6, #8
 8000826:	d406      	bmi.n	8000836 <__aeabi_dadd+0x54e>
 8000828:	0773      	lsls	r3, r6, #29
 800082a:	08ff      	lsrs	r7, r7, #3
 800082c:	2101      	movs	r1, #1
 800082e:	431f      	orrs	r7, r3
 8000830:	08f0      	lsrs	r0, r6, #3
 8000832:	e690      	b.n	8000556 <__aeabi_dadd+0x26e>
 8000834:	4665      	mov	r5, ip
 8000836:	2401      	movs	r4, #1
 8000838:	e5ab      	b.n	8000392 <__aeabi_dadd+0xaa>
 800083a:	464b      	mov	r3, r9
 800083c:	0777      	lsls	r7, r6, #29
 800083e:	08d8      	lsrs	r0, r3, #3
 8000840:	4307      	orrs	r7, r0
 8000842:	08f0      	lsrs	r0, r6, #3
 8000844:	e6b4      	b.n	80005b0 <__aeabi_dadd+0x2c8>
 8000846:	000f      	movs	r7, r1
 8000848:	0018      	movs	r0, r3
 800084a:	3f20      	subs	r7, #32
 800084c:	40f8      	lsrs	r0, r7
 800084e:	4684      	mov	ip, r0
 8000850:	2920      	cmp	r1, #32
 8000852:	d003      	beq.n	800085c <__aeabi_dadd+0x574>
 8000854:	2740      	movs	r7, #64	@ 0x40
 8000856:	1a79      	subs	r1, r7, r1
 8000858:	408b      	lsls	r3, r1
 800085a:	431a      	orrs	r2, r3
 800085c:	1e53      	subs	r3, r2, #1
 800085e:	419a      	sbcs	r2, r3
 8000860:	4663      	mov	r3, ip
 8000862:	0017      	movs	r7, r2
 8000864:	431f      	orrs	r7, r3
 8000866:	e635      	b.n	80004d4 <__aeabi_dadd+0x1ec>
 8000868:	2500      	movs	r5, #0
 800086a:	2400      	movs	r4, #0
 800086c:	2600      	movs	r6, #0
 800086e:	e684      	b.n	800057a <__aeabi_dadd+0x292>
 8000870:	000c      	movs	r4, r1
 8000872:	0035      	movs	r5, r6
 8000874:	3c20      	subs	r4, #32
 8000876:	40e5      	lsrs	r5, r4
 8000878:	2920      	cmp	r1, #32
 800087a:	d005      	beq.n	8000888 <__aeabi_dadd+0x5a0>
 800087c:	2440      	movs	r4, #64	@ 0x40
 800087e:	1a61      	subs	r1, r4, r1
 8000880:	408e      	lsls	r6, r1
 8000882:	4649      	mov	r1, r9
 8000884:	4331      	orrs	r1, r6
 8000886:	4689      	mov	r9, r1
 8000888:	4648      	mov	r0, r9
 800088a:	1e41      	subs	r1, r0, #1
 800088c:	4188      	sbcs	r0, r1
 800088e:	0007      	movs	r7, r0
 8000890:	432f      	orrs	r7, r5
 8000892:	e5ef      	b.n	8000474 <__aeabi_dadd+0x18c>
 8000894:	08d2      	lsrs	r2, r2, #3
 8000896:	075f      	lsls	r7, r3, #29
 8000898:	4665      	mov	r5, ip
 800089a:	4317      	orrs	r7, r2
 800089c:	08d8      	lsrs	r0, r3, #3
 800089e:	e687      	b.n	80005b0 <__aeabi_dadd+0x2c8>
 80008a0:	1a17      	subs	r7, r2, r0
 80008a2:	42ba      	cmp	r2, r7
 80008a4:	4192      	sbcs	r2, r2
 80008a6:	1b9e      	subs	r6, r3, r6
 80008a8:	4252      	negs	r2, r2
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	0233      	lsls	r3, r6, #8
 80008ae:	d4c1      	bmi.n	8000834 <__aeabi_dadd+0x54c>
 80008b0:	0773      	lsls	r3, r6, #29
 80008b2:	08ff      	lsrs	r7, r7, #3
 80008b4:	4665      	mov	r5, ip
 80008b6:	2101      	movs	r1, #1
 80008b8:	431f      	orrs	r7, r3
 80008ba:	08f0      	lsrs	r0, r6, #3
 80008bc:	e64b      	b.n	8000556 <__aeabi_dadd+0x26e>
 80008be:	2f00      	cmp	r7, #0
 80008c0:	d07b      	beq.n	80009ba <__aeabi_dadd+0x6d2>
 80008c2:	4665      	mov	r5, ip
 80008c4:	001e      	movs	r6, r3
 80008c6:	4691      	mov	r9, r2
 80008c8:	e63f      	b.n	800054a <__aeabi_dadd+0x262>
 80008ca:	1a81      	subs	r1, r0, r2
 80008cc:	4688      	mov	r8, r1
 80008ce:	45c1      	cmp	r9, r8
 80008d0:	41a4      	sbcs	r4, r4
 80008d2:	1af1      	subs	r1, r6, r3
 80008d4:	4264      	negs	r4, r4
 80008d6:	1b09      	subs	r1, r1, r4
 80008d8:	2480      	movs	r4, #128	@ 0x80
 80008da:	0424      	lsls	r4, r4, #16
 80008dc:	4221      	tst	r1, r4
 80008de:	d077      	beq.n	80009d0 <__aeabi_dadd+0x6e8>
 80008e0:	1a10      	subs	r0, r2, r0
 80008e2:	4282      	cmp	r2, r0
 80008e4:	4192      	sbcs	r2, r2
 80008e6:	0007      	movs	r7, r0
 80008e8:	1b9e      	subs	r6, r3, r6
 80008ea:	4252      	negs	r2, r2
 80008ec:	1ab6      	subs	r6, r6, r2
 80008ee:	4337      	orrs	r7, r6
 80008f0:	d000      	beq.n	80008f4 <__aeabi_dadd+0x60c>
 80008f2:	e0a0      	b.n	8000a36 <__aeabi_dadd+0x74e>
 80008f4:	4665      	mov	r5, ip
 80008f6:	2400      	movs	r4, #0
 80008f8:	2600      	movs	r6, #0
 80008fa:	e63e      	b.n	800057a <__aeabi_dadd+0x292>
 80008fc:	075f      	lsls	r7, r3, #29
 80008fe:	08d2      	lsrs	r2, r2, #3
 8000900:	4665      	mov	r5, ip
 8000902:	4317      	orrs	r7, r2
 8000904:	08d8      	lsrs	r0, r3, #3
 8000906:	e653      	b.n	80005b0 <__aeabi_dadd+0x2c8>
 8000908:	1881      	adds	r1, r0, r2
 800090a:	4291      	cmp	r1, r2
 800090c:	4192      	sbcs	r2, r2
 800090e:	18f0      	adds	r0, r6, r3
 8000910:	4252      	negs	r2, r2
 8000912:	1880      	adds	r0, r0, r2
 8000914:	0203      	lsls	r3, r0, #8
 8000916:	d500      	bpl.n	800091a <__aeabi_dadd+0x632>
 8000918:	e768      	b.n	80007ec <__aeabi_dadd+0x504>
 800091a:	0747      	lsls	r7, r0, #29
 800091c:	08c9      	lsrs	r1, r1, #3
 800091e:	430f      	orrs	r7, r1
 8000920:	08c0      	lsrs	r0, r0, #3
 8000922:	2101      	movs	r1, #1
 8000924:	e617      	b.n	8000556 <__aeabi_dadd+0x26e>
 8000926:	08d2      	lsrs	r2, r2, #3
 8000928:	075f      	lsls	r7, r3, #29
 800092a:	4317      	orrs	r7, r2
 800092c:	08d8      	lsrs	r0, r3, #3
 800092e:	e63f      	b.n	80005b0 <__aeabi_dadd+0x2c8>
 8000930:	000c      	movs	r4, r1
 8000932:	2600      	movs	r6, #0
 8000934:	2700      	movs	r7, #0
 8000936:	e620      	b.n	800057a <__aeabi_dadd+0x292>
 8000938:	2900      	cmp	r1, #0
 800093a:	d156      	bne.n	80009ea <__aeabi_dadd+0x702>
 800093c:	075f      	lsls	r7, r3, #29
 800093e:	08d2      	lsrs	r2, r2, #3
 8000940:	4317      	orrs	r7, r2
 8000942:	08d8      	lsrs	r0, r3, #3
 8000944:	e634      	b.n	80005b0 <__aeabi_dadd+0x2c8>
 8000946:	000c      	movs	r4, r1
 8000948:	001e      	movs	r6, r3
 800094a:	08d0      	lsrs	r0, r2, #3
 800094c:	e629      	b.n	80005a2 <__aeabi_dadd+0x2ba>
 800094e:	08c1      	lsrs	r1, r0, #3
 8000950:	0770      	lsls	r0, r6, #29
 8000952:	4301      	orrs	r1, r0
 8000954:	08f0      	lsrs	r0, r6, #3
 8000956:	2f00      	cmp	r7, #0
 8000958:	d062      	beq.n	8000a20 <__aeabi_dadd+0x738>
 800095a:	2480      	movs	r4, #128	@ 0x80
 800095c:	0324      	lsls	r4, r4, #12
 800095e:	4220      	tst	r0, r4
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x68a>
 8000962:	08de      	lsrs	r6, r3, #3
 8000964:	4226      	tst	r6, r4
 8000966:	d104      	bne.n	8000972 <__aeabi_dadd+0x68a>
 8000968:	4665      	mov	r5, ip
 800096a:	0030      	movs	r0, r6
 800096c:	08d1      	lsrs	r1, r2, #3
 800096e:	075b      	lsls	r3, r3, #29
 8000970:	4319      	orrs	r1, r3
 8000972:	0f4f      	lsrs	r7, r1, #29
 8000974:	00c9      	lsls	r1, r1, #3
 8000976:	08c9      	lsrs	r1, r1, #3
 8000978:	077f      	lsls	r7, r7, #29
 800097a:	430f      	orrs	r7, r1
 800097c:	e618      	b.n	80005b0 <__aeabi_dadd+0x2c8>
 800097e:	000c      	movs	r4, r1
 8000980:	0030      	movs	r0, r6
 8000982:	3c20      	subs	r4, #32
 8000984:	40e0      	lsrs	r0, r4
 8000986:	4684      	mov	ip, r0
 8000988:	2920      	cmp	r1, #32
 800098a:	d005      	beq.n	8000998 <__aeabi_dadd+0x6b0>
 800098c:	2440      	movs	r4, #64	@ 0x40
 800098e:	1a61      	subs	r1, r4, r1
 8000990:	408e      	lsls	r6, r1
 8000992:	4649      	mov	r1, r9
 8000994:	4331      	orrs	r1, r6
 8000996:	4689      	mov	r9, r1
 8000998:	4648      	mov	r0, r9
 800099a:	1e41      	subs	r1, r0, #1
 800099c:	4188      	sbcs	r0, r1
 800099e:	4661      	mov	r1, ip
 80009a0:	0007      	movs	r7, r0
 80009a2:	430f      	orrs	r7, r1
 80009a4:	e630      	b.n	8000608 <__aeabi_dadd+0x320>
 80009a6:	2120      	movs	r1, #32
 80009a8:	2700      	movs	r7, #0
 80009aa:	1a09      	subs	r1, r1, r0
 80009ac:	e50e      	b.n	80003cc <__aeabi_dadd+0xe4>
 80009ae:	001e      	movs	r6, r3
 80009b0:	2f00      	cmp	r7, #0
 80009b2:	d000      	beq.n	80009b6 <__aeabi_dadd+0x6ce>
 80009b4:	e522      	b.n	80003fc <__aeabi_dadd+0x114>
 80009b6:	2400      	movs	r4, #0
 80009b8:	e758      	b.n	800086c <__aeabi_dadd+0x584>
 80009ba:	2500      	movs	r5, #0
 80009bc:	2400      	movs	r4, #0
 80009be:	2600      	movs	r6, #0
 80009c0:	e5db      	b.n	800057a <__aeabi_dadd+0x292>
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	000007fe 	.word	0x000007fe
 80009c8:	000007ff 	.word	0x000007ff
 80009cc:	ff7fffff 	.word	0xff7fffff
 80009d0:	4647      	mov	r7, r8
 80009d2:	430f      	orrs	r7, r1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x6f0>
 80009d6:	e747      	b.n	8000868 <__aeabi_dadd+0x580>
 80009d8:	000e      	movs	r6, r1
 80009da:	46c1      	mov	r9, r8
 80009dc:	e5b5      	b.n	800054a <__aeabi_dadd+0x262>
 80009de:	08df      	lsrs	r7, r3, #3
 80009e0:	0764      	lsls	r4, r4, #29
 80009e2:	2102      	movs	r1, #2
 80009e4:	4327      	orrs	r7, r4
 80009e6:	0900      	lsrs	r0, r0, #4
 80009e8:	e5b5      	b.n	8000556 <__aeabi_dadd+0x26e>
 80009ea:	0019      	movs	r1, r3
 80009ec:	08c0      	lsrs	r0, r0, #3
 80009ee:	0777      	lsls	r7, r6, #29
 80009f0:	4307      	orrs	r7, r0
 80009f2:	4311      	orrs	r1, r2
 80009f4:	08f0      	lsrs	r0, r6, #3
 80009f6:	2900      	cmp	r1, #0
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x714>
 80009fa:	e5d9      	b.n	80005b0 <__aeabi_dadd+0x2c8>
 80009fc:	2180      	movs	r1, #128	@ 0x80
 80009fe:	0309      	lsls	r1, r1, #12
 8000a00:	4208      	tst	r0, r1
 8000a02:	d007      	beq.n	8000a14 <__aeabi_dadd+0x72c>
 8000a04:	08dc      	lsrs	r4, r3, #3
 8000a06:	420c      	tst	r4, r1
 8000a08:	d104      	bne.n	8000a14 <__aeabi_dadd+0x72c>
 8000a0a:	08d2      	lsrs	r2, r2, #3
 8000a0c:	075b      	lsls	r3, r3, #29
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	0017      	movs	r7, r2
 8000a12:	0020      	movs	r0, r4
 8000a14:	0f7b      	lsrs	r3, r7, #29
 8000a16:	00ff      	lsls	r7, r7, #3
 8000a18:	08ff      	lsrs	r7, r7, #3
 8000a1a:	075b      	lsls	r3, r3, #29
 8000a1c:	431f      	orrs	r7, r3
 8000a1e:	e5c7      	b.n	80005b0 <__aeabi_dadd+0x2c8>
 8000a20:	000f      	movs	r7, r1
 8000a22:	e5c5      	b.n	80005b0 <__aeabi_dadd+0x2c8>
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <__aeabi_dadd+0x788>)
 8000a26:	08d2      	lsrs	r2, r2, #3
 8000a28:	4033      	ands	r3, r6
 8000a2a:	075f      	lsls	r7, r3, #29
 8000a2c:	025b      	lsls	r3, r3, #9
 8000a2e:	2401      	movs	r4, #1
 8000a30:	4317      	orrs	r7, r2
 8000a32:	0b1e      	lsrs	r6, r3, #12
 8000a34:	e5a1      	b.n	800057a <__aeabi_dadd+0x292>
 8000a36:	4226      	tst	r6, r4
 8000a38:	d012      	beq.n	8000a60 <__aeabi_dadd+0x778>
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <__aeabi_dadd+0x788>)
 8000a3c:	4665      	mov	r5, ip
 8000a3e:	0002      	movs	r2, r0
 8000a40:	2401      	movs	r4, #1
 8000a42:	401e      	ands	r6, r3
 8000a44:	e4e6      	b.n	8000414 <__aeabi_dadd+0x12c>
 8000a46:	0021      	movs	r1, r4
 8000a48:	e585      	b.n	8000556 <__aeabi_dadd+0x26e>
 8000a4a:	0017      	movs	r7, r2
 8000a4c:	e5a8      	b.n	80005a0 <__aeabi_dadd+0x2b8>
 8000a4e:	003a      	movs	r2, r7
 8000a50:	e4d4      	b.n	80003fc <__aeabi_dadd+0x114>
 8000a52:	08db      	lsrs	r3, r3, #3
 8000a54:	0764      	lsls	r4, r4, #29
 8000a56:	431c      	orrs	r4, r3
 8000a58:	0027      	movs	r7, r4
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	0900      	lsrs	r0, r0, #4
 8000a5e:	e57a      	b.n	8000556 <__aeabi_dadd+0x26e>
 8000a60:	08c0      	lsrs	r0, r0, #3
 8000a62:	0777      	lsls	r7, r6, #29
 8000a64:	4307      	orrs	r7, r0
 8000a66:	4665      	mov	r5, ip
 8000a68:	2100      	movs	r1, #0
 8000a6a:	08f0      	lsrs	r0, r6, #3
 8000a6c:	e573      	b.n	8000556 <__aeabi_dadd+0x26e>
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	ff7fffff 	.word	0xff7fffff

08000a74 <__aeabi_ddiv>:
 8000a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a76:	46de      	mov	lr, fp
 8000a78:	4645      	mov	r5, r8
 8000a7a:	4657      	mov	r7, sl
 8000a7c:	464e      	mov	r6, r9
 8000a7e:	b5e0      	push	{r5, r6, r7, lr}
 8000a80:	b087      	sub	sp, #28
 8000a82:	9200      	str	r2, [sp, #0]
 8000a84:	9301      	str	r3, [sp, #4]
 8000a86:	030b      	lsls	r3, r1, #12
 8000a88:	0b1b      	lsrs	r3, r3, #12
 8000a8a:	469b      	mov	fp, r3
 8000a8c:	0fca      	lsrs	r2, r1, #31
 8000a8e:	004b      	lsls	r3, r1, #1
 8000a90:	0004      	movs	r4, r0
 8000a92:	4680      	mov	r8, r0
 8000a94:	0d5b      	lsrs	r3, r3, #21
 8000a96:	9202      	str	r2, [sp, #8]
 8000a98:	d100      	bne.n	8000a9c <__aeabi_ddiv+0x28>
 8000a9a:	e098      	b.n	8000bce <__aeabi_ddiv+0x15a>
 8000a9c:	4a7c      	ldr	r2, [pc, #496]	@ (8000c90 <__aeabi_ddiv+0x21c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d037      	beq.n	8000b12 <__aeabi_ddiv+0x9e>
 8000aa2:	4659      	mov	r1, fp
 8000aa4:	0f42      	lsrs	r2, r0, #29
 8000aa6:	00c9      	lsls	r1, r1, #3
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	2180      	movs	r1, #128	@ 0x80
 8000aac:	0409      	lsls	r1, r1, #16
 8000aae:	4311      	orrs	r1, r2
 8000ab0:	00c2      	lsls	r2, r0, #3
 8000ab2:	4690      	mov	r8, r2
 8000ab4:	4a77      	ldr	r2, [pc, #476]	@ (8000c94 <__aeabi_ddiv+0x220>)
 8000ab6:	4689      	mov	r9, r1
 8000ab8:	4692      	mov	sl, r2
 8000aba:	449a      	add	sl, r3
 8000abc:	2300      	movs	r3, #0
 8000abe:	2400      	movs	r4, #0
 8000ac0:	9303      	str	r3, [sp, #12]
 8000ac2:	9e00      	ldr	r6, [sp, #0]
 8000ac4:	9f01      	ldr	r7, [sp, #4]
 8000ac6:	033b      	lsls	r3, r7, #12
 8000ac8:	0b1b      	lsrs	r3, r3, #12
 8000aca:	469b      	mov	fp, r3
 8000acc:	007b      	lsls	r3, r7, #1
 8000ace:	0030      	movs	r0, r6
 8000ad0:	0d5b      	lsrs	r3, r3, #21
 8000ad2:	0ffd      	lsrs	r5, r7, #31
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d059      	beq.n	8000b8c <__aeabi_ddiv+0x118>
 8000ad8:	4a6d      	ldr	r2, [pc, #436]	@ (8000c90 <__aeabi_ddiv+0x21c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d048      	beq.n	8000b70 <__aeabi_ddiv+0xfc>
 8000ade:	4659      	mov	r1, fp
 8000ae0:	0f72      	lsrs	r2, r6, #29
 8000ae2:	00c9      	lsls	r1, r1, #3
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	2180      	movs	r1, #128	@ 0x80
 8000ae8:	0409      	lsls	r1, r1, #16
 8000aea:	4311      	orrs	r1, r2
 8000aec:	468b      	mov	fp, r1
 8000aee:	4969      	ldr	r1, [pc, #420]	@ (8000c94 <__aeabi_ddiv+0x220>)
 8000af0:	00f2      	lsls	r2, r6, #3
 8000af2:	468c      	mov	ip, r1
 8000af4:	4651      	mov	r1, sl
 8000af6:	4463      	add	r3, ip
 8000af8:	1acb      	subs	r3, r1, r3
 8000afa:	469a      	mov	sl, r3
 8000afc:	2100      	movs	r1, #0
 8000afe:	9e02      	ldr	r6, [sp, #8]
 8000b00:	406e      	eors	r6, r5
 8000b02:	b2f6      	uxtb	r6, r6
 8000b04:	2c0f      	cmp	r4, #15
 8000b06:	d900      	bls.n	8000b0a <__aeabi_ddiv+0x96>
 8000b08:	e0ce      	b.n	8000ca8 <__aeabi_ddiv+0x234>
 8000b0a:	4b63      	ldr	r3, [pc, #396]	@ (8000c98 <__aeabi_ddiv+0x224>)
 8000b0c:	00a4      	lsls	r4, r4, #2
 8000b0e:	591b      	ldr	r3, [r3, r4]
 8000b10:	469f      	mov	pc, r3
 8000b12:	465a      	mov	r2, fp
 8000b14:	4302      	orrs	r2, r0
 8000b16:	4691      	mov	r9, r2
 8000b18:	d000      	beq.n	8000b1c <__aeabi_ddiv+0xa8>
 8000b1a:	e090      	b.n	8000c3e <__aeabi_ddiv+0x1ca>
 8000b1c:	469a      	mov	sl, r3
 8000b1e:	2302      	movs	r3, #2
 8000b20:	4690      	mov	r8, r2
 8000b22:	2408      	movs	r4, #8
 8000b24:	9303      	str	r3, [sp, #12]
 8000b26:	e7cc      	b.n	8000ac2 <__aeabi_ddiv+0x4e>
 8000b28:	46cb      	mov	fp, r9
 8000b2a:	4642      	mov	r2, r8
 8000b2c:	9d02      	ldr	r5, [sp, #8]
 8000b2e:	9903      	ldr	r1, [sp, #12]
 8000b30:	2902      	cmp	r1, #2
 8000b32:	d100      	bne.n	8000b36 <__aeabi_ddiv+0xc2>
 8000b34:	e1de      	b.n	8000ef4 <__aeabi_ddiv+0x480>
 8000b36:	2903      	cmp	r1, #3
 8000b38:	d100      	bne.n	8000b3c <__aeabi_ddiv+0xc8>
 8000b3a:	e08d      	b.n	8000c58 <__aeabi_ddiv+0x1e4>
 8000b3c:	2901      	cmp	r1, #1
 8000b3e:	d000      	beq.n	8000b42 <__aeabi_ddiv+0xce>
 8000b40:	e179      	b.n	8000e36 <__aeabi_ddiv+0x3c2>
 8000b42:	002e      	movs	r6, r5
 8000b44:	2200      	movs	r2, #0
 8000b46:	2300      	movs	r3, #0
 8000b48:	2400      	movs	r4, #0
 8000b4a:	4690      	mov	r8, r2
 8000b4c:	051b      	lsls	r3, r3, #20
 8000b4e:	4323      	orrs	r3, r4
 8000b50:	07f6      	lsls	r6, r6, #31
 8000b52:	4333      	orrs	r3, r6
 8000b54:	4640      	mov	r0, r8
 8000b56:	0019      	movs	r1, r3
 8000b58:	b007      	add	sp, #28
 8000b5a:	bcf0      	pop	{r4, r5, r6, r7}
 8000b5c:	46bb      	mov	fp, r7
 8000b5e:	46b2      	mov	sl, r6
 8000b60:	46a9      	mov	r9, r5
 8000b62:	46a0      	mov	r8, r4
 8000b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b66:	2200      	movs	r2, #0
 8000b68:	2400      	movs	r4, #0
 8000b6a:	4690      	mov	r8, r2
 8000b6c:	4b48      	ldr	r3, [pc, #288]	@ (8000c90 <__aeabi_ddiv+0x21c>)
 8000b6e:	e7ed      	b.n	8000b4c <__aeabi_ddiv+0xd8>
 8000b70:	465a      	mov	r2, fp
 8000b72:	9b00      	ldr	r3, [sp, #0]
 8000b74:	431a      	orrs	r2, r3
 8000b76:	4b49      	ldr	r3, [pc, #292]	@ (8000c9c <__aeabi_ddiv+0x228>)
 8000b78:	469c      	mov	ip, r3
 8000b7a:	44e2      	add	sl, ip
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	d159      	bne.n	8000c34 <__aeabi_ddiv+0x1c0>
 8000b80:	2302      	movs	r3, #2
 8000b82:	431c      	orrs	r4, r3
 8000b84:	2300      	movs	r3, #0
 8000b86:	2102      	movs	r1, #2
 8000b88:	469b      	mov	fp, r3
 8000b8a:	e7b8      	b.n	8000afe <__aeabi_ddiv+0x8a>
 8000b8c:	465a      	mov	r2, fp
 8000b8e:	9b00      	ldr	r3, [sp, #0]
 8000b90:	431a      	orrs	r2, r3
 8000b92:	d049      	beq.n	8000c28 <__aeabi_ddiv+0x1b4>
 8000b94:	465b      	mov	r3, fp
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d100      	bne.n	8000b9c <__aeabi_ddiv+0x128>
 8000b9a:	e19c      	b.n	8000ed6 <__aeabi_ddiv+0x462>
 8000b9c:	4658      	mov	r0, fp
 8000b9e:	f001 fb1f 	bl	80021e0 <__clzsi2>
 8000ba2:	0002      	movs	r2, r0
 8000ba4:	0003      	movs	r3, r0
 8000ba6:	3a0b      	subs	r2, #11
 8000ba8:	271d      	movs	r7, #29
 8000baa:	9e00      	ldr	r6, [sp, #0]
 8000bac:	1aba      	subs	r2, r7, r2
 8000bae:	0019      	movs	r1, r3
 8000bb0:	4658      	mov	r0, fp
 8000bb2:	40d6      	lsrs	r6, r2
 8000bb4:	3908      	subs	r1, #8
 8000bb6:	4088      	lsls	r0, r1
 8000bb8:	0032      	movs	r2, r6
 8000bba:	4302      	orrs	r2, r0
 8000bbc:	4693      	mov	fp, r2
 8000bbe:	9a00      	ldr	r2, [sp, #0]
 8000bc0:	408a      	lsls	r2, r1
 8000bc2:	4937      	ldr	r1, [pc, #220]	@ (8000ca0 <__aeabi_ddiv+0x22c>)
 8000bc4:	4453      	add	r3, sl
 8000bc6:	468a      	mov	sl, r1
 8000bc8:	2100      	movs	r1, #0
 8000bca:	449a      	add	sl, r3
 8000bcc:	e797      	b.n	8000afe <__aeabi_ddiv+0x8a>
 8000bce:	465b      	mov	r3, fp
 8000bd0:	4303      	orrs	r3, r0
 8000bd2:	4699      	mov	r9, r3
 8000bd4:	d021      	beq.n	8000c1a <__aeabi_ddiv+0x1a6>
 8000bd6:	465b      	mov	r3, fp
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d100      	bne.n	8000bde <__aeabi_ddiv+0x16a>
 8000bdc:	e169      	b.n	8000eb2 <__aeabi_ddiv+0x43e>
 8000bde:	4658      	mov	r0, fp
 8000be0:	f001 fafe 	bl	80021e0 <__clzsi2>
 8000be4:	230b      	movs	r3, #11
 8000be6:	425b      	negs	r3, r3
 8000be8:	469c      	mov	ip, r3
 8000bea:	0002      	movs	r2, r0
 8000bec:	4484      	add	ip, r0
 8000bee:	4666      	mov	r6, ip
 8000bf0:	231d      	movs	r3, #29
 8000bf2:	1b9b      	subs	r3, r3, r6
 8000bf4:	0026      	movs	r6, r4
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	4658      	mov	r0, fp
 8000bfa:	40de      	lsrs	r6, r3
 8000bfc:	3908      	subs	r1, #8
 8000bfe:	4088      	lsls	r0, r1
 8000c00:	0033      	movs	r3, r6
 8000c02:	4303      	orrs	r3, r0
 8000c04:	4699      	mov	r9, r3
 8000c06:	0023      	movs	r3, r4
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	4698      	mov	r8, r3
 8000c0c:	4b25      	ldr	r3, [pc, #148]	@ (8000ca4 <__aeabi_ddiv+0x230>)
 8000c0e:	2400      	movs	r4, #0
 8000c10:	1a9b      	subs	r3, r3, r2
 8000c12:	469a      	mov	sl, r3
 8000c14:	2300      	movs	r3, #0
 8000c16:	9303      	str	r3, [sp, #12]
 8000c18:	e753      	b.n	8000ac2 <__aeabi_ddiv+0x4e>
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	4698      	mov	r8, r3
 8000c1e:	469a      	mov	sl, r3
 8000c20:	3301      	adds	r3, #1
 8000c22:	2404      	movs	r4, #4
 8000c24:	9303      	str	r3, [sp, #12]
 8000c26:	e74c      	b.n	8000ac2 <__aeabi_ddiv+0x4e>
 8000c28:	2301      	movs	r3, #1
 8000c2a:	431c      	orrs	r4, r3
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	2101      	movs	r1, #1
 8000c30:	469b      	mov	fp, r3
 8000c32:	e764      	b.n	8000afe <__aeabi_ddiv+0x8a>
 8000c34:	2303      	movs	r3, #3
 8000c36:	0032      	movs	r2, r6
 8000c38:	2103      	movs	r1, #3
 8000c3a:	431c      	orrs	r4, r3
 8000c3c:	e75f      	b.n	8000afe <__aeabi_ddiv+0x8a>
 8000c3e:	469a      	mov	sl, r3
 8000c40:	2303      	movs	r3, #3
 8000c42:	46d9      	mov	r9, fp
 8000c44:	240c      	movs	r4, #12
 8000c46:	9303      	str	r3, [sp, #12]
 8000c48:	e73b      	b.n	8000ac2 <__aeabi_ddiv+0x4e>
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	2480      	movs	r4, #128	@ 0x80
 8000c4e:	4698      	mov	r8, r3
 8000c50:	2600      	movs	r6, #0
 8000c52:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <__aeabi_ddiv+0x21c>)
 8000c54:	0324      	lsls	r4, r4, #12
 8000c56:	e779      	b.n	8000b4c <__aeabi_ddiv+0xd8>
 8000c58:	2480      	movs	r4, #128	@ 0x80
 8000c5a:	465b      	mov	r3, fp
 8000c5c:	0324      	lsls	r4, r4, #12
 8000c5e:	431c      	orrs	r4, r3
 8000c60:	0324      	lsls	r4, r4, #12
 8000c62:	002e      	movs	r6, r5
 8000c64:	4690      	mov	r8, r2
 8000c66:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <__aeabi_ddiv+0x21c>)
 8000c68:	0b24      	lsrs	r4, r4, #12
 8000c6a:	e76f      	b.n	8000b4c <__aeabi_ddiv+0xd8>
 8000c6c:	2480      	movs	r4, #128	@ 0x80
 8000c6e:	464b      	mov	r3, r9
 8000c70:	0324      	lsls	r4, r4, #12
 8000c72:	4223      	tst	r3, r4
 8000c74:	d002      	beq.n	8000c7c <__aeabi_ddiv+0x208>
 8000c76:	465b      	mov	r3, fp
 8000c78:	4223      	tst	r3, r4
 8000c7a:	d0f0      	beq.n	8000c5e <__aeabi_ddiv+0x1ea>
 8000c7c:	2480      	movs	r4, #128	@ 0x80
 8000c7e:	464b      	mov	r3, r9
 8000c80:	0324      	lsls	r4, r4, #12
 8000c82:	431c      	orrs	r4, r3
 8000c84:	0324      	lsls	r4, r4, #12
 8000c86:	9e02      	ldr	r6, [sp, #8]
 8000c88:	4b01      	ldr	r3, [pc, #4]	@ (8000c90 <__aeabi_ddiv+0x21c>)
 8000c8a:	0b24      	lsrs	r4, r4, #12
 8000c8c:	e75e      	b.n	8000b4c <__aeabi_ddiv+0xd8>
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	000007ff 	.word	0x000007ff
 8000c94:	fffffc01 	.word	0xfffffc01
 8000c98:	08009d04 	.word	0x08009d04
 8000c9c:	fffff801 	.word	0xfffff801
 8000ca0:	000003f3 	.word	0x000003f3
 8000ca4:	fffffc0d 	.word	0xfffffc0d
 8000ca8:	45cb      	cmp	fp, r9
 8000caa:	d200      	bcs.n	8000cae <__aeabi_ddiv+0x23a>
 8000cac:	e0f8      	b.n	8000ea0 <__aeabi_ddiv+0x42c>
 8000cae:	d100      	bne.n	8000cb2 <__aeabi_ddiv+0x23e>
 8000cb0:	e0f3      	b.n	8000e9a <__aeabi_ddiv+0x426>
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	425b      	negs	r3, r3
 8000cb6:	469c      	mov	ip, r3
 8000cb8:	4644      	mov	r4, r8
 8000cba:	4648      	mov	r0, r9
 8000cbc:	2500      	movs	r5, #0
 8000cbe:	44e2      	add	sl, ip
 8000cc0:	465b      	mov	r3, fp
 8000cc2:	0e17      	lsrs	r7, r2, #24
 8000cc4:	021b      	lsls	r3, r3, #8
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	0c19      	lsrs	r1, r3, #16
 8000cca:	043b      	lsls	r3, r7, #16
 8000ccc:	0212      	lsls	r2, r2, #8
 8000cce:	9700      	str	r7, [sp, #0]
 8000cd0:	0c1f      	lsrs	r7, r3, #16
 8000cd2:	4691      	mov	r9, r2
 8000cd4:	9102      	str	r1, [sp, #8]
 8000cd6:	9703      	str	r7, [sp, #12]
 8000cd8:	f7ff faa4 	bl	8000224 <__aeabi_uidivmod>
 8000cdc:	0002      	movs	r2, r0
 8000cde:	437a      	muls	r2, r7
 8000ce0:	040b      	lsls	r3, r1, #16
 8000ce2:	0c21      	lsrs	r1, r4, #16
 8000ce4:	4680      	mov	r8, r0
 8000ce6:	4319      	orrs	r1, r3
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	d909      	bls.n	8000d00 <__aeabi_ddiv+0x28c>
 8000cec:	9f00      	ldr	r7, [sp, #0]
 8000cee:	2301      	movs	r3, #1
 8000cf0:	46bc      	mov	ip, r7
 8000cf2:	425b      	negs	r3, r3
 8000cf4:	4461      	add	r1, ip
 8000cf6:	469c      	mov	ip, r3
 8000cf8:	44e0      	add	r8, ip
 8000cfa:	428f      	cmp	r7, r1
 8000cfc:	d800      	bhi.n	8000d00 <__aeabi_ddiv+0x28c>
 8000cfe:	e15c      	b.n	8000fba <__aeabi_ddiv+0x546>
 8000d00:	1a88      	subs	r0, r1, r2
 8000d02:	9902      	ldr	r1, [sp, #8]
 8000d04:	f7ff fa8e 	bl	8000224 <__aeabi_uidivmod>
 8000d08:	9a03      	ldr	r2, [sp, #12]
 8000d0a:	0424      	lsls	r4, r4, #16
 8000d0c:	4342      	muls	r2, r0
 8000d0e:	0409      	lsls	r1, r1, #16
 8000d10:	0c24      	lsrs	r4, r4, #16
 8000d12:	0003      	movs	r3, r0
 8000d14:	430c      	orrs	r4, r1
 8000d16:	42a2      	cmp	r2, r4
 8000d18:	d906      	bls.n	8000d28 <__aeabi_ddiv+0x2b4>
 8000d1a:	9900      	ldr	r1, [sp, #0]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	468c      	mov	ip, r1
 8000d20:	4464      	add	r4, ip
 8000d22:	42a1      	cmp	r1, r4
 8000d24:	d800      	bhi.n	8000d28 <__aeabi_ddiv+0x2b4>
 8000d26:	e142      	b.n	8000fae <__aeabi_ddiv+0x53a>
 8000d28:	1aa0      	subs	r0, r4, r2
 8000d2a:	4642      	mov	r2, r8
 8000d2c:	0412      	lsls	r2, r2, #16
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	4693      	mov	fp, r2
 8000d32:	464b      	mov	r3, r9
 8000d34:	4659      	mov	r1, fp
 8000d36:	0c1b      	lsrs	r3, r3, #16
 8000d38:	001f      	movs	r7, r3
 8000d3a:	9304      	str	r3, [sp, #16]
 8000d3c:	040b      	lsls	r3, r1, #16
 8000d3e:	4649      	mov	r1, r9
 8000d40:	0409      	lsls	r1, r1, #16
 8000d42:	0c09      	lsrs	r1, r1, #16
 8000d44:	000c      	movs	r4, r1
 8000d46:	0c1b      	lsrs	r3, r3, #16
 8000d48:	435c      	muls	r4, r3
 8000d4a:	0c12      	lsrs	r2, r2, #16
 8000d4c:	437b      	muls	r3, r7
 8000d4e:	4688      	mov	r8, r1
 8000d50:	4351      	muls	r1, r2
 8000d52:	437a      	muls	r2, r7
 8000d54:	0c27      	lsrs	r7, r4, #16
 8000d56:	46bc      	mov	ip, r7
 8000d58:	185b      	adds	r3, r3, r1
 8000d5a:	4463      	add	r3, ip
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	d903      	bls.n	8000d68 <__aeabi_ddiv+0x2f4>
 8000d60:	2180      	movs	r1, #128	@ 0x80
 8000d62:	0249      	lsls	r1, r1, #9
 8000d64:	468c      	mov	ip, r1
 8000d66:	4462      	add	r2, ip
 8000d68:	0c19      	lsrs	r1, r3, #16
 8000d6a:	0424      	lsls	r4, r4, #16
 8000d6c:	041b      	lsls	r3, r3, #16
 8000d6e:	0c24      	lsrs	r4, r4, #16
 8000d70:	188a      	adds	r2, r1, r2
 8000d72:	191c      	adds	r4, r3, r4
 8000d74:	4290      	cmp	r0, r2
 8000d76:	d302      	bcc.n	8000d7e <__aeabi_ddiv+0x30a>
 8000d78:	d116      	bne.n	8000da8 <__aeabi_ddiv+0x334>
 8000d7a:	42a5      	cmp	r5, r4
 8000d7c:	d214      	bcs.n	8000da8 <__aeabi_ddiv+0x334>
 8000d7e:	465b      	mov	r3, fp
 8000d80:	9f00      	ldr	r7, [sp, #0]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	444d      	add	r5, r9
 8000d86:	9305      	str	r3, [sp, #20]
 8000d88:	454d      	cmp	r5, r9
 8000d8a:	419b      	sbcs	r3, r3
 8000d8c:	46bc      	mov	ip, r7
 8000d8e:	425b      	negs	r3, r3
 8000d90:	4463      	add	r3, ip
 8000d92:	18c0      	adds	r0, r0, r3
 8000d94:	4287      	cmp	r7, r0
 8000d96:	d300      	bcc.n	8000d9a <__aeabi_ddiv+0x326>
 8000d98:	e102      	b.n	8000fa0 <__aeabi_ddiv+0x52c>
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	d900      	bls.n	8000da0 <__aeabi_ddiv+0x32c>
 8000d9e:	e129      	b.n	8000ff4 <__aeabi_ddiv+0x580>
 8000da0:	d100      	bne.n	8000da4 <__aeabi_ddiv+0x330>
 8000da2:	e124      	b.n	8000fee <__aeabi_ddiv+0x57a>
 8000da4:	9b05      	ldr	r3, [sp, #20]
 8000da6:	469b      	mov	fp, r3
 8000da8:	1b2c      	subs	r4, r5, r4
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	41ad      	sbcs	r5, r5
 8000dae:	9b00      	ldr	r3, [sp, #0]
 8000db0:	1a80      	subs	r0, r0, r2
 8000db2:	426d      	negs	r5, r5
 8000db4:	1b40      	subs	r0, r0, r5
 8000db6:	4283      	cmp	r3, r0
 8000db8:	d100      	bne.n	8000dbc <__aeabi_ddiv+0x348>
 8000dba:	e10f      	b.n	8000fdc <__aeabi_ddiv+0x568>
 8000dbc:	9902      	ldr	r1, [sp, #8]
 8000dbe:	f7ff fa31 	bl	8000224 <__aeabi_uidivmod>
 8000dc2:	9a03      	ldr	r2, [sp, #12]
 8000dc4:	040b      	lsls	r3, r1, #16
 8000dc6:	4342      	muls	r2, r0
 8000dc8:	0c21      	lsrs	r1, r4, #16
 8000dca:	0005      	movs	r5, r0
 8000dcc:	4319      	orrs	r1, r3
 8000dce:	428a      	cmp	r2, r1
 8000dd0:	d900      	bls.n	8000dd4 <__aeabi_ddiv+0x360>
 8000dd2:	e0cb      	b.n	8000f6c <__aeabi_ddiv+0x4f8>
 8000dd4:	1a88      	subs	r0, r1, r2
 8000dd6:	9902      	ldr	r1, [sp, #8]
 8000dd8:	f7ff fa24 	bl	8000224 <__aeabi_uidivmod>
 8000ddc:	9a03      	ldr	r2, [sp, #12]
 8000dde:	0424      	lsls	r4, r4, #16
 8000de0:	4342      	muls	r2, r0
 8000de2:	0409      	lsls	r1, r1, #16
 8000de4:	0c24      	lsrs	r4, r4, #16
 8000de6:	0003      	movs	r3, r0
 8000de8:	430c      	orrs	r4, r1
 8000dea:	42a2      	cmp	r2, r4
 8000dec:	d900      	bls.n	8000df0 <__aeabi_ddiv+0x37c>
 8000dee:	e0ca      	b.n	8000f86 <__aeabi_ddiv+0x512>
 8000df0:	4641      	mov	r1, r8
 8000df2:	1aa4      	subs	r4, r4, r2
 8000df4:	042a      	lsls	r2, r5, #16
 8000df6:	431a      	orrs	r2, r3
 8000df8:	9f04      	ldr	r7, [sp, #16]
 8000dfa:	0413      	lsls	r3, r2, #16
 8000dfc:	0c1b      	lsrs	r3, r3, #16
 8000dfe:	4359      	muls	r1, r3
 8000e00:	4640      	mov	r0, r8
 8000e02:	437b      	muls	r3, r7
 8000e04:	469c      	mov	ip, r3
 8000e06:	0c15      	lsrs	r5, r2, #16
 8000e08:	4368      	muls	r0, r5
 8000e0a:	0c0b      	lsrs	r3, r1, #16
 8000e0c:	4484      	add	ip, r0
 8000e0e:	4463      	add	r3, ip
 8000e10:	437d      	muls	r5, r7
 8000e12:	4298      	cmp	r0, r3
 8000e14:	d903      	bls.n	8000e1e <__aeabi_ddiv+0x3aa>
 8000e16:	2080      	movs	r0, #128	@ 0x80
 8000e18:	0240      	lsls	r0, r0, #9
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	4465      	add	r5, ip
 8000e1e:	0c18      	lsrs	r0, r3, #16
 8000e20:	0409      	lsls	r1, r1, #16
 8000e22:	041b      	lsls	r3, r3, #16
 8000e24:	0c09      	lsrs	r1, r1, #16
 8000e26:	1940      	adds	r0, r0, r5
 8000e28:	185b      	adds	r3, r3, r1
 8000e2a:	4284      	cmp	r4, r0
 8000e2c:	d327      	bcc.n	8000e7e <__aeabi_ddiv+0x40a>
 8000e2e:	d023      	beq.n	8000e78 <__aeabi_ddiv+0x404>
 8000e30:	2301      	movs	r3, #1
 8000e32:	0035      	movs	r5, r6
 8000e34:	431a      	orrs	r2, r3
 8000e36:	4b94      	ldr	r3, [pc, #592]	@ (8001088 <__aeabi_ddiv+0x614>)
 8000e38:	4453      	add	r3, sl
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	dd60      	ble.n	8000f00 <__aeabi_ddiv+0x48c>
 8000e3e:	0751      	lsls	r1, r2, #29
 8000e40:	d000      	beq.n	8000e44 <__aeabi_ddiv+0x3d0>
 8000e42:	e086      	b.n	8000f52 <__aeabi_ddiv+0x4de>
 8000e44:	002e      	movs	r6, r5
 8000e46:	08d1      	lsrs	r1, r2, #3
 8000e48:	465a      	mov	r2, fp
 8000e4a:	01d2      	lsls	r2, r2, #7
 8000e4c:	d506      	bpl.n	8000e5c <__aeabi_ddiv+0x3e8>
 8000e4e:	465a      	mov	r2, fp
 8000e50:	4b8e      	ldr	r3, [pc, #568]	@ (800108c <__aeabi_ddiv+0x618>)
 8000e52:	401a      	ands	r2, r3
 8000e54:	2380      	movs	r3, #128	@ 0x80
 8000e56:	4693      	mov	fp, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	4453      	add	r3, sl
 8000e5c:	4a8c      	ldr	r2, [pc, #560]	@ (8001090 <__aeabi_ddiv+0x61c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	dd00      	ble.n	8000e64 <__aeabi_ddiv+0x3f0>
 8000e62:	e680      	b.n	8000b66 <__aeabi_ddiv+0xf2>
 8000e64:	465a      	mov	r2, fp
 8000e66:	0752      	lsls	r2, r2, #29
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	4690      	mov	r8, r2
 8000e6c:	465a      	mov	r2, fp
 8000e6e:	055b      	lsls	r3, r3, #21
 8000e70:	0254      	lsls	r4, r2, #9
 8000e72:	0b24      	lsrs	r4, r4, #12
 8000e74:	0d5b      	lsrs	r3, r3, #21
 8000e76:	e669      	b.n	8000b4c <__aeabi_ddiv+0xd8>
 8000e78:	0035      	movs	r5, r6
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0db      	beq.n	8000e36 <__aeabi_ddiv+0x3c2>
 8000e7e:	9d00      	ldr	r5, [sp, #0]
 8000e80:	1e51      	subs	r1, r2, #1
 8000e82:	46ac      	mov	ip, r5
 8000e84:	4464      	add	r4, ip
 8000e86:	42ac      	cmp	r4, r5
 8000e88:	d200      	bcs.n	8000e8c <__aeabi_ddiv+0x418>
 8000e8a:	e09e      	b.n	8000fca <__aeabi_ddiv+0x556>
 8000e8c:	4284      	cmp	r4, r0
 8000e8e:	d200      	bcs.n	8000e92 <__aeabi_ddiv+0x41e>
 8000e90:	e0e1      	b.n	8001056 <__aeabi_ddiv+0x5e2>
 8000e92:	d100      	bne.n	8000e96 <__aeabi_ddiv+0x422>
 8000e94:	e0ee      	b.n	8001074 <__aeabi_ddiv+0x600>
 8000e96:	000a      	movs	r2, r1
 8000e98:	e7ca      	b.n	8000e30 <__aeabi_ddiv+0x3bc>
 8000e9a:	4542      	cmp	r2, r8
 8000e9c:	d900      	bls.n	8000ea0 <__aeabi_ddiv+0x42c>
 8000e9e:	e708      	b.n	8000cb2 <__aeabi_ddiv+0x23e>
 8000ea0:	464b      	mov	r3, r9
 8000ea2:	07dc      	lsls	r4, r3, #31
 8000ea4:	0858      	lsrs	r0, r3, #1
 8000ea6:	4643      	mov	r3, r8
 8000ea8:	085b      	lsrs	r3, r3, #1
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	4643      	mov	r3, r8
 8000eae:	07dd      	lsls	r5, r3, #31
 8000eb0:	e706      	b.n	8000cc0 <__aeabi_ddiv+0x24c>
 8000eb2:	f001 f995 	bl	80021e0 <__clzsi2>
 8000eb6:	2315      	movs	r3, #21
 8000eb8:	469c      	mov	ip, r3
 8000eba:	4484      	add	ip, r0
 8000ebc:	0002      	movs	r2, r0
 8000ebe:	4663      	mov	r3, ip
 8000ec0:	3220      	adds	r2, #32
 8000ec2:	2b1c      	cmp	r3, #28
 8000ec4:	dc00      	bgt.n	8000ec8 <__aeabi_ddiv+0x454>
 8000ec6:	e692      	b.n	8000bee <__aeabi_ddiv+0x17a>
 8000ec8:	0023      	movs	r3, r4
 8000eca:	3808      	subs	r0, #8
 8000ecc:	4083      	lsls	r3, r0
 8000ece:	4699      	mov	r9, r3
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	4698      	mov	r8, r3
 8000ed4:	e69a      	b.n	8000c0c <__aeabi_ddiv+0x198>
 8000ed6:	f001 f983 	bl	80021e0 <__clzsi2>
 8000eda:	0002      	movs	r2, r0
 8000edc:	0003      	movs	r3, r0
 8000ede:	3215      	adds	r2, #21
 8000ee0:	3320      	adds	r3, #32
 8000ee2:	2a1c      	cmp	r2, #28
 8000ee4:	dc00      	bgt.n	8000ee8 <__aeabi_ddiv+0x474>
 8000ee6:	e65f      	b.n	8000ba8 <__aeabi_ddiv+0x134>
 8000ee8:	9900      	ldr	r1, [sp, #0]
 8000eea:	3808      	subs	r0, #8
 8000eec:	4081      	lsls	r1, r0
 8000eee:	2200      	movs	r2, #0
 8000ef0:	468b      	mov	fp, r1
 8000ef2:	e666      	b.n	8000bc2 <__aeabi_ddiv+0x14e>
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	002e      	movs	r6, r5
 8000ef8:	2400      	movs	r4, #0
 8000efa:	4690      	mov	r8, r2
 8000efc:	4b65      	ldr	r3, [pc, #404]	@ (8001094 <__aeabi_ddiv+0x620>)
 8000efe:	e625      	b.n	8000b4c <__aeabi_ddiv+0xd8>
 8000f00:	002e      	movs	r6, r5
 8000f02:	2101      	movs	r1, #1
 8000f04:	1ac9      	subs	r1, r1, r3
 8000f06:	2938      	cmp	r1, #56	@ 0x38
 8000f08:	dd00      	ble.n	8000f0c <__aeabi_ddiv+0x498>
 8000f0a:	e61b      	b.n	8000b44 <__aeabi_ddiv+0xd0>
 8000f0c:	291f      	cmp	r1, #31
 8000f0e:	dc7e      	bgt.n	800100e <__aeabi_ddiv+0x59a>
 8000f10:	4861      	ldr	r0, [pc, #388]	@ (8001098 <__aeabi_ddiv+0x624>)
 8000f12:	0014      	movs	r4, r2
 8000f14:	4450      	add	r0, sl
 8000f16:	465b      	mov	r3, fp
 8000f18:	4082      	lsls	r2, r0
 8000f1a:	4083      	lsls	r3, r0
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	1e50      	subs	r0, r2, #1
 8000f20:	4182      	sbcs	r2, r0
 8000f22:	4323      	orrs	r3, r4
 8000f24:	431a      	orrs	r2, r3
 8000f26:	465b      	mov	r3, fp
 8000f28:	40cb      	lsrs	r3, r1
 8000f2a:	0751      	lsls	r1, r2, #29
 8000f2c:	d009      	beq.n	8000f42 <__aeabi_ddiv+0x4ce>
 8000f2e:	210f      	movs	r1, #15
 8000f30:	4011      	ands	r1, r2
 8000f32:	2904      	cmp	r1, #4
 8000f34:	d005      	beq.n	8000f42 <__aeabi_ddiv+0x4ce>
 8000f36:	1d11      	adds	r1, r2, #4
 8000f38:	4291      	cmp	r1, r2
 8000f3a:	4192      	sbcs	r2, r2
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	189b      	adds	r3, r3, r2
 8000f40:	000a      	movs	r2, r1
 8000f42:	0219      	lsls	r1, r3, #8
 8000f44:	d400      	bmi.n	8000f48 <__aeabi_ddiv+0x4d4>
 8000f46:	e09b      	b.n	8001080 <__aeabi_ddiv+0x60c>
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	2400      	movs	r4, #0
 8000f4e:	4690      	mov	r8, r2
 8000f50:	e5fc      	b.n	8000b4c <__aeabi_ddiv+0xd8>
 8000f52:	210f      	movs	r1, #15
 8000f54:	4011      	ands	r1, r2
 8000f56:	2904      	cmp	r1, #4
 8000f58:	d100      	bne.n	8000f5c <__aeabi_ddiv+0x4e8>
 8000f5a:	e773      	b.n	8000e44 <__aeabi_ddiv+0x3d0>
 8000f5c:	1d11      	adds	r1, r2, #4
 8000f5e:	4291      	cmp	r1, r2
 8000f60:	4192      	sbcs	r2, r2
 8000f62:	4252      	negs	r2, r2
 8000f64:	002e      	movs	r6, r5
 8000f66:	08c9      	lsrs	r1, r1, #3
 8000f68:	4493      	add	fp, r2
 8000f6a:	e76d      	b.n	8000e48 <__aeabi_ddiv+0x3d4>
 8000f6c:	9b00      	ldr	r3, [sp, #0]
 8000f6e:	3d01      	subs	r5, #1
 8000f70:	469c      	mov	ip, r3
 8000f72:	4461      	add	r1, ip
 8000f74:	428b      	cmp	r3, r1
 8000f76:	d900      	bls.n	8000f7a <__aeabi_ddiv+0x506>
 8000f78:	e72c      	b.n	8000dd4 <__aeabi_ddiv+0x360>
 8000f7a:	428a      	cmp	r2, r1
 8000f7c:	d800      	bhi.n	8000f80 <__aeabi_ddiv+0x50c>
 8000f7e:	e729      	b.n	8000dd4 <__aeabi_ddiv+0x360>
 8000f80:	1e85      	subs	r5, r0, #2
 8000f82:	4461      	add	r1, ip
 8000f84:	e726      	b.n	8000dd4 <__aeabi_ddiv+0x360>
 8000f86:	9900      	ldr	r1, [sp, #0]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	468c      	mov	ip, r1
 8000f8c:	4464      	add	r4, ip
 8000f8e:	42a1      	cmp	r1, r4
 8000f90:	d900      	bls.n	8000f94 <__aeabi_ddiv+0x520>
 8000f92:	e72d      	b.n	8000df0 <__aeabi_ddiv+0x37c>
 8000f94:	42a2      	cmp	r2, r4
 8000f96:	d800      	bhi.n	8000f9a <__aeabi_ddiv+0x526>
 8000f98:	e72a      	b.n	8000df0 <__aeabi_ddiv+0x37c>
 8000f9a:	1e83      	subs	r3, r0, #2
 8000f9c:	4464      	add	r4, ip
 8000f9e:	e727      	b.n	8000df0 <__aeabi_ddiv+0x37c>
 8000fa0:	4287      	cmp	r7, r0
 8000fa2:	d000      	beq.n	8000fa6 <__aeabi_ddiv+0x532>
 8000fa4:	e6fe      	b.n	8000da4 <__aeabi_ddiv+0x330>
 8000fa6:	45a9      	cmp	r9, r5
 8000fa8:	d900      	bls.n	8000fac <__aeabi_ddiv+0x538>
 8000faa:	e6fb      	b.n	8000da4 <__aeabi_ddiv+0x330>
 8000fac:	e6f5      	b.n	8000d9a <__aeabi_ddiv+0x326>
 8000fae:	42a2      	cmp	r2, r4
 8000fb0:	d800      	bhi.n	8000fb4 <__aeabi_ddiv+0x540>
 8000fb2:	e6b9      	b.n	8000d28 <__aeabi_ddiv+0x2b4>
 8000fb4:	1e83      	subs	r3, r0, #2
 8000fb6:	4464      	add	r4, ip
 8000fb8:	e6b6      	b.n	8000d28 <__aeabi_ddiv+0x2b4>
 8000fba:	428a      	cmp	r2, r1
 8000fbc:	d800      	bhi.n	8000fc0 <__aeabi_ddiv+0x54c>
 8000fbe:	e69f      	b.n	8000d00 <__aeabi_ddiv+0x28c>
 8000fc0:	46bc      	mov	ip, r7
 8000fc2:	1e83      	subs	r3, r0, #2
 8000fc4:	4698      	mov	r8, r3
 8000fc6:	4461      	add	r1, ip
 8000fc8:	e69a      	b.n	8000d00 <__aeabi_ddiv+0x28c>
 8000fca:	000a      	movs	r2, r1
 8000fcc:	4284      	cmp	r4, r0
 8000fce:	d000      	beq.n	8000fd2 <__aeabi_ddiv+0x55e>
 8000fd0:	e72e      	b.n	8000e30 <__aeabi_ddiv+0x3bc>
 8000fd2:	454b      	cmp	r3, r9
 8000fd4:	d000      	beq.n	8000fd8 <__aeabi_ddiv+0x564>
 8000fd6:	e72b      	b.n	8000e30 <__aeabi_ddiv+0x3bc>
 8000fd8:	0035      	movs	r5, r6
 8000fda:	e72c      	b.n	8000e36 <__aeabi_ddiv+0x3c2>
 8000fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8001088 <__aeabi_ddiv+0x614>)
 8000fde:	4a2f      	ldr	r2, [pc, #188]	@ (800109c <__aeabi_ddiv+0x628>)
 8000fe0:	4453      	add	r3, sl
 8000fe2:	4592      	cmp	sl, r2
 8000fe4:	db43      	blt.n	800106e <__aeabi_ddiv+0x5fa>
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4493      	add	fp, r2
 8000fec:	e72c      	b.n	8000e48 <__aeabi_ddiv+0x3d4>
 8000fee:	42ac      	cmp	r4, r5
 8000ff0:	d800      	bhi.n	8000ff4 <__aeabi_ddiv+0x580>
 8000ff2:	e6d7      	b.n	8000da4 <__aeabi_ddiv+0x330>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	425b      	negs	r3, r3
 8000ff8:	469c      	mov	ip, r3
 8000ffa:	9900      	ldr	r1, [sp, #0]
 8000ffc:	444d      	add	r5, r9
 8000ffe:	454d      	cmp	r5, r9
 8001000:	419b      	sbcs	r3, r3
 8001002:	44e3      	add	fp, ip
 8001004:	468c      	mov	ip, r1
 8001006:	425b      	negs	r3, r3
 8001008:	4463      	add	r3, ip
 800100a:	18c0      	adds	r0, r0, r3
 800100c:	e6cc      	b.n	8000da8 <__aeabi_ddiv+0x334>
 800100e:	201f      	movs	r0, #31
 8001010:	4240      	negs	r0, r0
 8001012:	1ac3      	subs	r3, r0, r3
 8001014:	4658      	mov	r0, fp
 8001016:	40d8      	lsrs	r0, r3
 8001018:	2920      	cmp	r1, #32
 800101a:	d004      	beq.n	8001026 <__aeabi_ddiv+0x5b2>
 800101c:	4659      	mov	r1, fp
 800101e:	4b20      	ldr	r3, [pc, #128]	@ (80010a0 <__aeabi_ddiv+0x62c>)
 8001020:	4453      	add	r3, sl
 8001022:	4099      	lsls	r1, r3
 8001024:	430a      	orrs	r2, r1
 8001026:	1e53      	subs	r3, r2, #1
 8001028:	419a      	sbcs	r2, r3
 800102a:	2307      	movs	r3, #7
 800102c:	0019      	movs	r1, r3
 800102e:	4302      	orrs	r2, r0
 8001030:	2400      	movs	r4, #0
 8001032:	4011      	ands	r1, r2
 8001034:	4213      	tst	r3, r2
 8001036:	d009      	beq.n	800104c <__aeabi_ddiv+0x5d8>
 8001038:	3308      	adds	r3, #8
 800103a:	4013      	ands	r3, r2
 800103c:	2b04      	cmp	r3, #4
 800103e:	d01d      	beq.n	800107c <__aeabi_ddiv+0x608>
 8001040:	1d13      	adds	r3, r2, #4
 8001042:	4293      	cmp	r3, r2
 8001044:	4189      	sbcs	r1, r1
 8001046:	001a      	movs	r2, r3
 8001048:	4249      	negs	r1, r1
 800104a:	0749      	lsls	r1, r1, #29
 800104c:	08d2      	lsrs	r2, r2, #3
 800104e:	430a      	orrs	r2, r1
 8001050:	4690      	mov	r8, r2
 8001052:	2300      	movs	r3, #0
 8001054:	e57a      	b.n	8000b4c <__aeabi_ddiv+0xd8>
 8001056:	4649      	mov	r1, r9
 8001058:	9f00      	ldr	r7, [sp, #0]
 800105a:	004d      	lsls	r5, r1, #1
 800105c:	454d      	cmp	r5, r9
 800105e:	4189      	sbcs	r1, r1
 8001060:	46bc      	mov	ip, r7
 8001062:	4249      	negs	r1, r1
 8001064:	4461      	add	r1, ip
 8001066:	46a9      	mov	r9, r5
 8001068:	3a02      	subs	r2, #2
 800106a:	1864      	adds	r4, r4, r1
 800106c:	e7ae      	b.n	8000fcc <__aeabi_ddiv+0x558>
 800106e:	2201      	movs	r2, #1
 8001070:	4252      	negs	r2, r2
 8001072:	e746      	b.n	8000f02 <__aeabi_ddiv+0x48e>
 8001074:	4599      	cmp	r9, r3
 8001076:	d3ee      	bcc.n	8001056 <__aeabi_ddiv+0x5e2>
 8001078:	000a      	movs	r2, r1
 800107a:	e7aa      	b.n	8000fd2 <__aeabi_ddiv+0x55e>
 800107c:	2100      	movs	r1, #0
 800107e:	e7e5      	b.n	800104c <__aeabi_ddiv+0x5d8>
 8001080:	0759      	lsls	r1, r3, #29
 8001082:	025b      	lsls	r3, r3, #9
 8001084:	0b1c      	lsrs	r4, r3, #12
 8001086:	e7e1      	b.n	800104c <__aeabi_ddiv+0x5d8>
 8001088:	000003ff 	.word	0x000003ff
 800108c:	feffffff 	.word	0xfeffffff
 8001090:	000007fe 	.word	0x000007fe
 8001094:	000007ff 	.word	0x000007ff
 8001098:	0000041e 	.word	0x0000041e
 800109c:	fffffc02 	.word	0xfffffc02
 80010a0:	0000043e 	.word	0x0000043e

080010a4 <__eqdf2>:
 80010a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010a6:	4657      	mov	r7, sl
 80010a8:	46de      	mov	lr, fp
 80010aa:	464e      	mov	r6, r9
 80010ac:	4645      	mov	r5, r8
 80010ae:	b5e0      	push	{r5, r6, r7, lr}
 80010b0:	000d      	movs	r5, r1
 80010b2:	0004      	movs	r4, r0
 80010b4:	0fe8      	lsrs	r0, r5, #31
 80010b6:	4683      	mov	fp, r0
 80010b8:	0309      	lsls	r1, r1, #12
 80010ba:	0fd8      	lsrs	r0, r3, #31
 80010bc:	0b09      	lsrs	r1, r1, #12
 80010be:	4682      	mov	sl, r0
 80010c0:	4819      	ldr	r0, [pc, #100]	@ (8001128 <__eqdf2+0x84>)
 80010c2:	468c      	mov	ip, r1
 80010c4:	031f      	lsls	r7, r3, #12
 80010c6:	0069      	lsls	r1, r5, #1
 80010c8:	005e      	lsls	r6, r3, #1
 80010ca:	0d49      	lsrs	r1, r1, #21
 80010cc:	0b3f      	lsrs	r7, r7, #12
 80010ce:	0d76      	lsrs	r6, r6, #21
 80010d0:	4281      	cmp	r1, r0
 80010d2:	d018      	beq.n	8001106 <__eqdf2+0x62>
 80010d4:	4286      	cmp	r6, r0
 80010d6:	d00f      	beq.n	80010f8 <__eqdf2+0x54>
 80010d8:	2001      	movs	r0, #1
 80010da:	42b1      	cmp	r1, r6
 80010dc:	d10d      	bne.n	80010fa <__eqdf2+0x56>
 80010de:	45bc      	cmp	ip, r7
 80010e0:	d10b      	bne.n	80010fa <__eqdf2+0x56>
 80010e2:	4294      	cmp	r4, r2
 80010e4:	d109      	bne.n	80010fa <__eqdf2+0x56>
 80010e6:	45d3      	cmp	fp, sl
 80010e8:	d01c      	beq.n	8001124 <__eqdf2+0x80>
 80010ea:	2900      	cmp	r1, #0
 80010ec:	d105      	bne.n	80010fa <__eqdf2+0x56>
 80010ee:	4660      	mov	r0, ip
 80010f0:	4320      	orrs	r0, r4
 80010f2:	1e43      	subs	r3, r0, #1
 80010f4:	4198      	sbcs	r0, r3
 80010f6:	e000      	b.n	80010fa <__eqdf2+0x56>
 80010f8:	2001      	movs	r0, #1
 80010fa:	bcf0      	pop	{r4, r5, r6, r7}
 80010fc:	46bb      	mov	fp, r7
 80010fe:	46b2      	mov	sl, r6
 8001100:	46a9      	mov	r9, r5
 8001102:	46a0      	mov	r8, r4
 8001104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001106:	2001      	movs	r0, #1
 8001108:	428e      	cmp	r6, r1
 800110a:	d1f6      	bne.n	80010fa <__eqdf2+0x56>
 800110c:	4661      	mov	r1, ip
 800110e:	4339      	orrs	r1, r7
 8001110:	000f      	movs	r7, r1
 8001112:	4317      	orrs	r7, r2
 8001114:	4327      	orrs	r7, r4
 8001116:	d1f0      	bne.n	80010fa <__eqdf2+0x56>
 8001118:	465b      	mov	r3, fp
 800111a:	4652      	mov	r2, sl
 800111c:	1a98      	subs	r0, r3, r2
 800111e:	1e43      	subs	r3, r0, #1
 8001120:	4198      	sbcs	r0, r3
 8001122:	e7ea      	b.n	80010fa <__eqdf2+0x56>
 8001124:	2000      	movs	r0, #0
 8001126:	e7e8      	b.n	80010fa <__eqdf2+0x56>
 8001128:	000007ff 	.word	0x000007ff

0800112c <__gedf2>:
 800112c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112e:	4657      	mov	r7, sl
 8001130:	464e      	mov	r6, r9
 8001132:	4645      	mov	r5, r8
 8001134:	46de      	mov	lr, fp
 8001136:	b5e0      	push	{r5, r6, r7, lr}
 8001138:	000d      	movs	r5, r1
 800113a:	030e      	lsls	r6, r1, #12
 800113c:	0049      	lsls	r1, r1, #1
 800113e:	0d49      	lsrs	r1, r1, #21
 8001140:	468a      	mov	sl, r1
 8001142:	0fdf      	lsrs	r7, r3, #31
 8001144:	0fe9      	lsrs	r1, r5, #31
 8001146:	46bc      	mov	ip, r7
 8001148:	b083      	sub	sp, #12
 800114a:	4f2f      	ldr	r7, [pc, #188]	@ (8001208 <__gedf2+0xdc>)
 800114c:	0004      	movs	r4, r0
 800114e:	4680      	mov	r8, r0
 8001150:	9101      	str	r1, [sp, #4]
 8001152:	0058      	lsls	r0, r3, #1
 8001154:	0319      	lsls	r1, r3, #12
 8001156:	4691      	mov	r9, r2
 8001158:	0b36      	lsrs	r6, r6, #12
 800115a:	0b09      	lsrs	r1, r1, #12
 800115c:	0d40      	lsrs	r0, r0, #21
 800115e:	45ba      	cmp	sl, r7
 8001160:	d01d      	beq.n	800119e <__gedf2+0x72>
 8001162:	42b8      	cmp	r0, r7
 8001164:	d00d      	beq.n	8001182 <__gedf2+0x56>
 8001166:	4657      	mov	r7, sl
 8001168:	2f00      	cmp	r7, #0
 800116a:	d12a      	bne.n	80011c2 <__gedf2+0x96>
 800116c:	4334      	orrs	r4, r6
 800116e:	2800      	cmp	r0, #0
 8001170:	d124      	bne.n	80011bc <__gedf2+0x90>
 8001172:	430a      	orrs	r2, r1
 8001174:	d036      	beq.n	80011e4 <__gedf2+0xb8>
 8001176:	2c00      	cmp	r4, #0
 8001178:	d141      	bne.n	80011fe <__gedf2+0xd2>
 800117a:	4663      	mov	r3, ip
 800117c:	0058      	lsls	r0, r3, #1
 800117e:	3801      	subs	r0, #1
 8001180:	e015      	b.n	80011ae <__gedf2+0x82>
 8001182:	4311      	orrs	r1, r2
 8001184:	d138      	bne.n	80011f8 <__gedf2+0xcc>
 8001186:	4653      	mov	r3, sl
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <__gedf2+0x64>
 800118c:	4326      	orrs	r6, r4
 800118e:	d0f4      	beq.n	800117a <__gedf2+0x4e>
 8001190:	9b01      	ldr	r3, [sp, #4]
 8001192:	4563      	cmp	r3, ip
 8001194:	d107      	bne.n	80011a6 <__gedf2+0x7a>
 8001196:	9b01      	ldr	r3, [sp, #4]
 8001198:	0058      	lsls	r0, r3, #1
 800119a:	3801      	subs	r0, #1
 800119c:	e007      	b.n	80011ae <__gedf2+0x82>
 800119e:	4326      	orrs	r6, r4
 80011a0:	d12a      	bne.n	80011f8 <__gedf2+0xcc>
 80011a2:	4550      	cmp	r0, sl
 80011a4:	d021      	beq.n	80011ea <__gedf2+0xbe>
 80011a6:	2001      	movs	r0, #1
 80011a8:	9b01      	ldr	r3, [sp, #4]
 80011aa:	425f      	negs	r7, r3
 80011ac:	4338      	orrs	r0, r7
 80011ae:	b003      	add	sp, #12
 80011b0:	bcf0      	pop	{r4, r5, r6, r7}
 80011b2:	46bb      	mov	fp, r7
 80011b4:	46b2      	mov	sl, r6
 80011b6:	46a9      	mov	r9, r5
 80011b8:	46a0      	mov	r8, r4
 80011ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011bc:	2c00      	cmp	r4, #0
 80011be:	d0dc      	beq.n	800117a <__gedf2+0x4e>
 80011c0:	e7e6      	b.n	8001190 <__gedf2+0x64>
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d0ef      	beq.n	80011a6 <__gedf2+0x7a>
 80011c6:	9b01      	ldr	r3, [sp, #4]
 80011c8:	4563      	cmp	r3, ip
 80011ca:	d1ec      	bne.n	80011a6 <__gedf2+0x7a>
 80011cc:	4582      	cmp	sl, r0
 80011ce:	dcea      	bgt.n	80011a6 <__gedf2+0x7a>
 80011d0:	dbe1      	blt.n	8001196 <__gedf2+0x6a>
 80011d2:	428e      	cmp	r6, r1
 80011d4:	d8e7      	bhi.n	80011a6 <__gedf2+0x7a>
 80011d6:	d1de      	bne.n	8001196 <__gedf2+0x6a>
 80011d8:	45c8      	cmp	r8, r9
 80011da:	d8e4      	bhi.n	80011a6 <__gedf2+0x7a>
 80011dc:	2000      	movs	r0, #0
 80011de:	45c8      	cmp	r8, r9
 80011e0:	d2e5      	bcs.n	80011ae <__gedf2+0x82>
 80011e2:	e7d8      	b.n	8001196 <__gedf2+0x6a>
 80011e4:	2c00      	cmp	r4, #0
 80011e6:	d0e2      	beq.n	80011ae <__gedf2+0x82>
 80011e8:	e7dd      	b.n	80011a6 <__gedf2+0x7a>
 80011ea:	4311      	orrs	r1, r2
 80011ec:	d104      	bne.n	80011f8 <__gedf2+0xcc>
 80011ee:	9b01      	ldr	r3, [sp, #4]
 80011f0:	4563      	cmp	r3, ip
 80011f2:	d1d8      	bne.n	80011a6 <__gedf2+0x7a>
 80011f4:	2000      	movs	r0, #0
 80011f6:	e7da      	b.n	80011ae <__gedf2+0x82>
 80011f8:	2002      	movs	r0, #2
 80011fa:	4240      	negs	r0, r0
 80011fc:	e7d7      	b.n	80011ae <__gedf2+0x82>
 80011fe:	9b01      	ldr	r3, [sp, #4]
 8001200:	4563      	cmp	r3, ip
 8001202:	d0e6      	beq.n	80011d2 <__gedf2+0xa6>
 8001204:	e7cf      	b.n	80011a6 <__gedf2+0x7a>
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	000007ff 	.word	0x000007ff

0800120c <__ledf2>:
 800120c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120e:	4657      	mov	r7, sl
 8001210:	464e      	mov	r6, r9
 8001212:	4645      	mov	r5, r8
 8001214:	46de      	mov	lr, fp
 8001216:	b5e0      	push	{r5, r6, r7, lr}
 8001218:	000d      	movs	r5, r1
 800121a:	030e      	lsls	r6, r1, #12
 800121c:	0049      	lsls	r1, r1, #1
 800121e:	0d49      	lsrs	r1, r1, #21
 8001220:	468a      	mov	sl, r1
 8001222:	0fdf      	lsrs	r7, r3, #31
 8001224:	0fe9      	lsrs	r1, r5, #31
 8001226:	46bc      	mov	ip, r7
 8001228:	b083      	sub	sp, #12
 800122a:	4f2e      	ldr	r7, [pc, #184]	@ (80012e4 <__ledf2+0xd8>)
 800122c:	0004      	movs	r4, r0
 800122e:	4680      	mov	r8, r0
 8001230:	9101      	str	r1, [sp, #4]
 8001232:	0058      	lsls	r0, r3, #1
 8001234:	0319      	lsls	r1, r3, #12
 8001236:	4691      	mov	r9, r2
 8001238:	0b36      	lsrs	r6, r6, #12
 800123a:	0b09      	lsrs	r1, r1, #12
 800123c:	0d40      	lsrs	r0, r0, #21
 800123e:	45ba      	cmp	sl, r7
 8001240:	d01e      	beq.n	8001280 <__ledf2+0x74>
 8001242:	42b8      	cmp	r0, r7
 8001244:	d00d      	beq.n	8001262 <__ledf2+0x56>
 8001246:	4657      	mov	r7, sl
 8001248:	2f00      	cmp	r7, #0
 800124a:	d127      	bne.n	800129c <__ledf2+0x90>
 800124c:	4334      	orrs	r4, r6
 800124e:	2800      	cmp	r0, #0
 8001250:	d133      	bne.n	80012ba <__ledf2+0xae>
 8001252:	430a      	orrs	r2, r1
 8001254:	d034      	beq.n	80012c0 <__ledf2+0xb4>
 8001256:	2c00      	cmp	r4, #0
 8001258:	d140      	bne.n	80012dc <__ledf2+0xd0>
 800125a:	4663      	mov	r3, ip
 800125c:	0058      	lsls	r0, r3, #1
 800125e:	3801      	subs	r0, #1
 8001260:	e015      	b.n	800128e <__ledf2+0x82>
 8001262:	4311      	orrs	r1, r2
 8001264:	d112      	bne.n	800128c <__ledf2+0x80>
 8001266:	4653      	mov	r3, sl
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <__ledf2+0x64>
 800126c:	4326      	orrs	r6, r4
 800126e:	d0f4      	beq.n	800125a <__ledf2+0x4e>
 8001270:	9b01      	ldr	r3, [sp, #4]
 8001272:	4563      	cmp	r3, ip
 8001274:	d01d      	beq.n	80012b2 <__ledf2+0xa6>
 8001276:	2001      	movs	r0, #1
 8001278:	9b01      	ldr	r3, [sp, #4]
 800127a:	425f      	negs	r7, r3
 800127c:	4338      	orrs	r0, r7
 800127e:	e006      	b.n	800128e <__ledf2+0x82>
 8001280:	4326      	orrs	r6, r4
 8001282:	d103      	bne.n	800128c <__ledf2+0x80>
 8001284:	4550      	cmp	r0, sl
 8001286:	d1f6      	bne.n	8001276 <__ledf2+0x6a>
 8001288:	4311      	orrs	r1, r2
 800128a:	d01c      	beq.n	80012c6 <__ledf2+0xba>
 800128c:	2002      	movs	r0, #2
 800128e:	b003      	add	sp, #12
 8001290:	bcf0      	pop	{r4, r5, r6, r7}
 8001292:	46bb      	mov	fp, r7
 8001294:	46b2      	mov	sl, r6
 8001296:	46a9      	mov	r9, r5
 8001298:	46a0      	mov	r8, r4
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129c:	2800      	cmp	r0, #0
 800129e:	d0ea      	beq.n	8001276 <__ledf2+0x6a>
 80012a0:	9b01      	ldr	r3, [sp, #4]
 80012a2:	4563      	cmp	r3, ip
 80012a4:	d1e7      	bne.n	8001276 <__ledf2+0x6a>
 80012a6:	4582      	cmp	sl, r0
 80012a8:	dce5      	bgt.n	8001276 <__ledf2+0x6a>
 80012aa:	db02      	blt.n	80012b2 <__ledf2+0xa6>
 80012ac:	428e      	cmp	r6, r1
 80012ae:	d8e2      	bhi.n	8001276 <__ledf2+0x6a>
 80012b0:	d00e      	beq.n	80012d0 <__ledf2+0xc4>
 80012b2:	9b01      	ldr	r3, [sp, #4]
 80012b4:	0058      	lsls	r0, r3, #1
 80012b6:	3801      	subs	r0, #1
 80012b8:	e7e9      	b.n	800128e <__ledf2+0x82>
 80012ba:	2c00      	cmp	r4, #0
 80012bc:	d0cd      	beq.n	800125a <__ledf2+0x4e>
 80012be:	e7d7      	b.n	8001270 <__ledf2+0x64>
 80012c0:	2c00      	cmp	r4, #0
 80012c2:	d0e4      	beq.n	800128e <__ledf2+0x82>
 80012c4:	e7d7      	b.n	8001276 <__ledf2+0x6a>
 80012c6:	9b01      	ldr	r3, [sp, #4]
 80012c8:	2000      	movs	r0, #0
 80012ca:	4563      	cmp	r3, ip
 80012cc:	d0df      	beq.n	800128e <__ledf2+0x82>
 80012ce:	e7d2      	b.n	8001276 <__ledf2+0x6a>
 80012d0:	45c8      	cmp	r8, r9
 80012d2:	d8d0      	bhi.n	8001276 <__ledf2+0x6a>
 80012d4:	2000      	movs	r0, #0
 80012d6:	45c8      	cmp	r8, r9
 80012d8:	d2d9      	bcs.n	800128e <__ledf2+0x82>
 80012da:	e7ea      	b.n	80012b2 <__ledf2+0xa6>
 80012dc:	9b01      	ldr	r3, [sp, #4]
 80012de:	4563      	cmp	r3, ip
 80012e0:	d0e4      	beq.n	80012ac <__ledf2+0xa0>
 80012e2:	e7c8      	b.n	8001276 <__ledf2+0x6a>
 80012e4:	000007ff 	.word	0x000007ff

080012e8 <__aeabi_dmul>:
 80012e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ea:	4657      	mov	r7, sl
 80012ec:	464e      	mov	r6, r9
 80012ee:	46de      	mov	lr, fp
 80012f0:	4645      	mov	r5, r8
 80012f2:	b5e0      	push	{r5, r6, r7, lr}
 80012f4:	001f      	movs	r7, r3
 80012f6:	030b      	lsls	r3, r1, #12
 80012f8:	0b1b      	lsrs	r3, r3, #12
 80012fa:	0016      	movs	r6, r2
 80012fc:	469a      	mov	sl, r3
 80012fe:	0fca      	lsrs	r2, r1, #31
 8001300:	004b      	lsls	r3, r1, #1
 8001302:	0004      	movs	r4, r0
 8001304:	4691      	mov	r9, r2
 8001306:	b085      	sub	sp, #20
 8001308:	0d5b      	lsrs	r3, r3, #21
 800130a:	d100      	bne.n	800130e <__aeabi_dmul+0x26>
 800130c:	e1cf      	b.n	80016ae <__aeabi_dmul+0x3c6>
 800130e:	4acd      	ldr	r2, [pc, #820]	@ (8001644 <__aeabi_dmul+0x35c>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d055      	beq.n	80013c0 <__aeabi_dmul+0xd8>
 8001314:	4651      	mov	r1, sl
 8001316:	0f42      	lsrs	r2, r0, #29
 8001318:	00c9      	lsls	r1, r1, #3
 800131a:	430a      	orrs	r2, r1
 800131c:	2180      	movs	r1, #128	@ 0x80
 800131e:	0409      	lsls	r1, r1, #16
 8001320:	4311      	orrs	r1, r2
 8001322:	00c2      	lsls	r2, r0, #3
 8001324:	4690      	mov	r8, r2
 8001326:	4ac8      	ldr	r2, [pc, #800]	@ (8001648 <__aeabi_dmul+0x360>)
 8001328:	468a      	mov	sl, r1
 800132a:	4693      	mov	fp, r2
 800132c:	449b      	add	fp, r3
 800132e:	2300      	movs	r3, #0
 8001330:	2500      	movs	r5, #0
 8001332:	9302      	str	r3, [sp, #8]
 8001334:	033c      	lsls	r4, r7, #12
 8001336:	007b      	lsls	r3, r7, #1
 8001338:	0ffa      	lsrs	r2, r7, #31
 800133a:	9601      	str	r6, [sp, #4]
 800133c:	0b24      	lsrs	r4, r4, #12
 800133e:	0d5b      	lsrs	r3, r3, #21
 8001340:	9200      	str	r2, [sp, #0]
 8001342:	d100      	bne.n	8001346 <__aeabi_dmul+0x5e>
 8001344:	e188      	b.n	8001658 <__aeabi_dmul+0x370>
 8001346:	4abf      	ldr	r2, [pc, #764]	@ (8001644 <__aeabi_dmul+0x35c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d100      	bne.n	800134e <__aeabi_dmul+0x66>
 800134c:	e092      	b.n	8001474 <__aeabi_dmul+0x18c>
 800134e:	4abe      	ldr	r2, [pc, #760]	@ (8001648 <__aeabi_dmul+0x360>)
 8001350:	4694      	mov	ip, r2
 8001352:	4463      	add	r3, ip
 8001354:	449b      	add	fp, r3
 8001356:	2d0a      	cmp	r5, #10
 8001358:	dc42      	bgt.n	80013e0 <__aeabi_dmul+0xf8>
 800135a:	00e4      	lsls	r4, r4, #3
 800135c:	0f73      	lsrs	r3, r6, #29
 800135e:	4323      	orrs	r3, r4
 8001360:	2480      	movs	r4, #128	@ 0x80
 8001362:	4649      	mov	r1, r9
 8001364:	0424      	lsls	r4, r4, #16
 8001366:	431c      	orrs	r4, r3
 8001368:	00f3      	lsls	r3, r6, #3
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	9b00      	ldr	r3, [sp, #0]
 800136e:	2000      	movs	r0, #0
 8001370:	4059      	eors	r1, r3
 8001372:	b2cb      	uxtb	r3, r1
 8001374:	9303      	str	r3, [sp, #12]
 8001376:	2d02      	cmp	r5, #2
 8001378:	dc00      	bgt.n	800137c <__aeabi_dmul+0x94>
 800137a:	e094      	b.n	80014a6 <__aeabi_dmul+0x1be>
 800137c:	2301      	movs	r3, #1
 800137e:	40ab      	lsls	r3, r5
 8001380:	001d      	movs	r5, r3
 8001382:	23a6      	movs	r3, #166	@ 0xa6
 8001384:	002a      	movs	r2, r5
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	401a      	ands	r2, r3
 800138a:	421d      	tst	r5, r3
 800138c:	d000      	beq.n	8001390 <__aeabi_dmul+0xa8>
 800138e:	e229      	b.n	80017e4 <__aeabi_dmul+0x4fc>
 8001390:	2390      	movs	r3, #144	@ 0x90
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	421d      	tst	r5, r3
 8001396:	d100      	bne.n	800139a <__aeabi_dmul+0xb2>
 8001398:	e24d      	b.n	8001836 <__aeabi_dmul+0x54e>
 800139a:	2300      	movs	r3, #0
 800139c:	2480      	movs	r4, #128	@ 0x80
 800139e:	4699      	mov	r9, r3
 80013a0:	0324      	lsls	r4, r4, #12
 80013a2:	4ba8      	ldr	r3, [pc, #672]	@ (8001644 <__aeabi_dmul+0x35c>)
 80013a4:	0010      	movs	r0, r2
 80013a6:	464a      	mov	r2, r9
 80013a8:	051b      	lsls	r3, r3, #20
 80013aa:	4323      	orrs	r3, r4
 80013ac:	07d2      	lsls	r2, r2, #31
 80013ae:	4313      	orrs	r3, r2
 80013b0:	0019      	movs	r1, r3
 80013b2:	b005      	add	sp, #20
 80013b4:	bcf0      	pop	{r4, r5, r6, r7}
 80013b6:	46bb      	mov	fp, r7
 80013b8:	46b2      	mov	sl, r6
 80013ba:	46a9      	mov	r9, r5
 80013bc:	46a0      	mov	r8, r4
 80013be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c0:	4652      	mov	r2, sl
 80013c2:	4302      	orrs	r2, r0
 80013c4:	4690      	mov	r8, r2
 80013c6:	d000      	beq.n	80013ca <__aeabi_dmul+0xe2>
 80013c8:	e1ac      	b.n	8001724 <__aeabi_dmul+0x43c>
 80013ca:	469b      	mov	fp, r3
 80013cc:	2302      	movs	r3, #2
 80013ce:	4692      	mov	sl, r2
 80013d0:	2508      	movs	r5, #8
 80013d2:	9302      	str	r3, [sp, #8]
 80013d4:	e7ae      	b.n	8001334 <__aeabi_dmul+0x4c>
 80013d6:	9b00      	ldr	r3, [sp, #0]
 80013d8:	46a2      	mov	sl, r4
 80013da:	4699      	mov	r9, r3
 80013dc:	9b01      	ldr	r3, [sp, #4]
 80013de:	4698      	mov	r8, r3
 80013e0:	9b02      	ldr	r3, [sp, #8]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d100      	bne.n	80013e8 <__aeabi_dmul+0x100>
 80013e6:	e1ca      	b.n	800177e <__aeabi_dmul+0x496>
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d100      	bne.n	80013ee <__aeabi_dmul+0x106>
 80013ec:	e192      	b.n	8001714 <__aeabi_dmul+0x42c>
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d110      	bne.n	8001414 <__aeabi_dmul+0x12c>
 80013f2:	2300      	movs	r3, #0
 80013f4:	2400      	movs	r4, #0
 80013f6:	2200      	movs	r2, #0
 80013f8:	e7d4      	b.n	80013a4 <__aeabi_dmul+0xbc>
 80013fa:	2201      	movs	r2, #1
 80013fc:	087b      	lsrs	r3, r7, #1
 80013fe:	403a      	ands	r2, r7
 8001400:	4313      	orrs	r3, r2
 8001402:	4652      	mov	r2, sl
 8001404:	07d2      	lsls	r2, r2, #31
 8001406:	4313      	orrs	r3, r2
 8001408:	4698      	mov	r8, r3
 800140a:	4653      	mov	r3, sl
 800140c:	085b      	lsrs	r3, r3, #1
 800140e:	469a      	mov	sl, r3
 8001410:	9b03      	ldr	r3, [sp, #12]
 8001412:	4699      	mov	r9, r3
 8001414:	465b      	mov	r3, fp
 8001416:	1c58      	adds	r0, r3, #1
 8001418:	2380      	movs	r3, #128	@ 0x80
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	445b      	add	r3, fp
 800141e:	2b00      	cmp	r3, #0
 8001420:	dc00      	bgt.n	8001424 <__aeabi_dmul+0x13c>
 8001422:	e1b1      	b.n	8001788 <__aeabi_dmul+0x4a0>
 8001424:	4642      	mov	r2, r8
 8001426:	0752      	lsls	r2, r2, #29
 8001428:	d00b      	beq.n	8001442 <__aeabi_dmul+0x15a>
 800142a:	220f      	movs	r2, #15
 800142c:	4641      	mov	r1, r8
 800142e:	400a      	ands	r2, r1
 8001430:	2a04      	cmp	r2, #4
 8001432:	d006      	beq.n	8001442 <__aeabi_dmul+0x15a>
 8001434:	4642      	mov	r2, r8
 8001436:	1d11      	adds	r1, r2, #4
 8001438:	4541      	cmp	r1, r8
 800143a:	4192      	sbcs	r2, r2
 800143c:	4688      	mov	r8, r1
 800143e:	4252      	negs	r2, r2
 8001440:	4492      	add	sl, r2
 8001442:	4652      	mov	r2, sl
 8001444:	01d2      	lsls	r2, r2, #7
 8001446:	d506      	bpl.n	8001456 <__aeabi_dmul+0x16e>
 8001448:	4652      	mov	r2, sl
 800144a:	4b80      	ldr	r3, [pc, #512]	@ (800164c <__aeabi_dmul+0x364>)
 800144c:	401a      	ands	r2, r3
 800144e:	2380      	movs	r3, #128	@ 0x80
 8001450:	4692      	mov	sl, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	18c3      	adds	r3, r0, r3
 8001456:	4a7e      	ldr	r2, [pc, #504]	@ (8001650 <__aeabi_dmul+0x368>)
 8001458:	4293      	cmp	r3, r2
 800145a:	dd00      	ble.n	800145e <__aeabi_dmul+0x176>
 800145c:	e18f      	b.n	800177e <__aeabi_dmul+0x496>
 800145e:	4642      	mov	r2, r8
 8001460:	08d1      	lsrs	r1, r2, #3
 8001462:	4652      	mov	r2, sl
 8001464:	0752      	lsls	r2, r2, #29
 8001466:	430a      	orrs	r2, r1
 8001468:	4651      	mov	r1, sl
 800146a:	055b      	lsls	r3, r3, #21
 800146c:	024c      	lsls	r4, r1, #9
 800146e:	0b24      	lsrs	r4, r4, #12
 8001470:	0d5b      	lsrs	r3, r3, #21
 8001472:	e797      	b.n	80013a4 <__aeabi_dmul+0xbc>
 8001474:	4b73      	ldr	r3, [pc, #460]	@ (8001644 <__aeabi_dmul+0x35c>)
 8001476:	4326      	orrs	r6, r4
 8001478:	469c      	mov	ip, r3
 800147a:	44e3      	add	fp, ip
 800147c:	2e00      	cmp	r6, #0
 800147e:	d100      	bne.n	8001482 <__aeabi_dmul+0x19a>
 8001480:	e16f      	b.n	8001762 <__aeabi_dmul+0x47a>
 8001482:	2303      	movs	r3, #3
 8001484:	4649      	mov	r1, r9
 8001486:	431d      	orrs	r5, r3
 8001488:	9b00      	ldr	r3, [sp, #0]
 800148a:	4059      	eors	r1, r3
 800148c:	b2cb      	uxtb	r3, r1
 800148e:	9303      	str	r3, [sp, #12]
 8001490:	2d0a      	cmp	r5, #10
 8001492:	dd00      	ble.n	8001496 <__aeabi_dmul+0x1ae>
 8001494:	e133      	b.n	80016fe <__aeabi_dmul+0x416>
 8001496:	2301      	movs	r3, #1
 8001498:	40ab      	lsls	r3, r5
 800149a:	001d      	movs	r5, r3
 800149c:	2303      	movs	r3, #3
 800149e:	9302      	str	r3, [sp, #8]
 80014a0:	2288      	movs	r2, #136	@ 0x88
 80014a2:	422a      	tst	r2, r5
 80014a4:	d197      	bne.n	80013d6 <__aeabi_dmul+0xee>
 80014a6:	4642      	mov	r2, r8
 80014a8:	4643      	mov	r3, r8
 80014aa:	0412      	lsls	r2, r2, #16
 80014ac:	0c12      	lsrs	r2, r2, #16
 80014ae:	0016      	movs	r6, r2
 80014b0:	9801      	ldr	r0, [sp, #4]
 80014b2:	0c1d      	lsrs	r5, r3, #16
 80014b4:	0c03      	lsrs	r3, r0, #16
 80014b6:	0400      	lsls	r0, r0, #16
 80014b8:	0c00      	lsrs	r0, r0, #16
 80014ba:	4346      	muls	r6, r0
 80014bc:	46b4      	mov	ip, r6
 80014be:	001e      	movs	r6, r3
 80014c0:	436e      	muls	r6, r5
 80014c2:	9600      	str	r6, [sp, #0]
 80014c4:	0016      	movs	r6, r2
 80014c6:	0007      	movs	r7, r0
 80014c8:	435e      	muls	r6, r3
 80014ca:	4661      	mov	r1, ip
 80014cc:	46b0      	mov	r8, r6
 80014ce:	436f      	muls	r7, r5
 80014d0:	0c0e      	lsrs	r6, r1, #16
 80014d2:	44b8      	add	r8, r7
 80014d4:	4446      	add	r6, r8
 80014d6:	42b7      	cmp	r7, r6
 80014d8:	d905      	bls.n	80014e6 <__aeabi_dmul+0x1fe>
 80014da:	2180      	movs	r1, #128	@ 0x80
 80014dc:	0249      	lsls	r1, r1, #9
 80014de:	4688      	mov	r8, r1
 80014e0:	9f00      	ldr	r7, [sp, #0]
 80014e2:	4447      	add	r7, r8
 80014e4:	9700      	str	r7, [sp, #0]
 80014e6:	4661      	mov	r1, ip
 80014e8:	0409      	lsls	r1, r1, #16
 80014ea:	0c09      	lsrs	r1, r1, #16
 80014ec:	0c37      	lsrs	r7, r6, #16
 80014ee:	0436      	lsls	r6, r6, #16
 80014f0:	468c      	mov	ip, r1
 80014f2:	0031      	movs	r1, r6
 80014f4:	4461      	add	r1, ip
 80014f6:	9101      	str	r1, [sp, #4]
 80014f8:	0011      	movs	r1, r2
 80014fa:	0c26      	lsrs	r6, r4, #16
 80014fc:	0424      	lsls	r4, r4, #16
 80014fe:	0c24      	lsrs	r4, r4, #16
 8001500:	4361      	muls	r1, r4
 8001502:	468c      	mov	ip, r1
 8001504:	0021      	movs	r1, r4
 8001506:	4369      	muls	r1, r5
 8001508:	4689      	mov	r9, r1
 800150a:	4661      	mov	r1, ip
 800150c:	0c09      	lsrs	r1, r1, #16
 800150e:	4688      	mov	r8, r1
 8001510:	4372      	muls	r2, r6
 8001512:	444a      	add	r2, r9
 8001514:	4442      	add	r2, r8
 8001516:	4375      	muls	r5, r6
 8001518:	4591      	cmp	r9, r2
 800151a:	d903      	bls.n	8001524 <__aeabi_dmul+0x23c>
 800151c:	2180      	movs	r1, #128	@ 0x80
 800151e:	0249      	lsls	r1, r1, #9
 8001520:	4688      	mov	r8, r1
 8001522:	4445      	add	r5, r8
 8001524:	0c11      	lsrs	r1, r2, #16
 8001526:	4688      	mov	r8, r1
 8001528:	4661      	mov	r1, ip
 800152a:	0409      	lsls	r1, r1, #16
 800152c:	0c09      	lsrs	r1, r1, #16
 800152e:	468c      	mov	ip, r1
 8001530:	0412      	lsls	r2, r2, #16
 8001532:	4462      	add	r2, ip
 8001534:	18b9      	adds	r1, r7, r2
 8001536:	9102      	str	r1, [sp, #8]
 8001538:	4651      	mov	r1, sl
 800153a:	0c09      	lsrs	r1, r1, #16
 800153c:	468c      	mov	ip, r1
 800153e:	4651      	mov	r1, sl
 8001540:	040f      	lsls	r7, r1, #16
 8001542:	0c3f      	lsrs	r7, r7, #16
 8001544:	0039      	movs	r1, r7
 8001546:	4341      	muls	r1, r0
 8001548:	4445      	add	r5, r8
 800154a:	4688      	mov	r8, r1
 800154c:	4661      	mov	r1, ip
 800154e:	4341      	muls	r1, r0
 8001550:	468a      	mov	sl, r1
 8001552:	4641      	mov	r1, r8
 8001554:	4660      	mov	r0, ip
 8001556:	0c09      	lsrs	r1, r1, #16
 8001558:	4689      	mov	r9, r1
 800155a:	4358      	muls	r0, r3
 800155c:	437b      	muls	r3, r7
 800155e:	4453      	add	r3, sl
 8001560:	444b      	add	r3, r9
 8001562:	459a      	cmp	sl, r3
 8001564:	d903      	bls.n	800156e <__aeabi_dmul+0x286>
 8001566:	2180      	movs	r1, #128	@ 0x80
 8001568:	0249      	lsls	r1, r1, #9
 800156a:	4689      	mov	r9, r1
 800156c:	4448      	add	r0, r9
 800156e:	0c19      	lsrs	r1, r3, #16
 8001570:	4689      	mov	r9, r1
 8001572:	4641      	mov	r1, r8
 8001574:	0409      	lsls	r1, r1, #16
 8001576:	0c09      	lsrs	r1, r1, #16
 8001578:	4688      	mov	r8, r1
 800157a:	0039      	movs	r1, r7
 800157c:	4361      	muls	r1, r4
 800157e:	041b      	lsls	r3, r3, #16
 8001580:	4443      	add	r3, r8
 8001582:	4688      	mov	r8, r1
 8001584:	4661      	mov	r1, ip
 8001586:	434c      	muls	r4, r1
 8001588:	4371      	muls	r1, r6
 800158a:	468c      	mov	ip, r1
 800158c:	4641      	mov	r1, r8
 800158e:	4377      	muls	r7, r6
 8001590:	0c0e      	lsrs	r6, r1, #16
 8001592:	193f      	adds	r7, r7, r4
 8001594:	19f6      	adds	r6, r6, r7
 8001596:	4448      	add	r0, r9
 8001598:	42b4      	cmp	r4, r6
 800159a:	d903      	bls.n	80015a4 <__aeabi_dmul+0x2bc>
 800159c:	2180      	movs	r1, #128	@ 0x80
 800159e:	0249      	lsls	r1, r1, #9
 80015a0:	4689      	mov	r9, r1
 80015a2:	44cc      	add	ip, r9
 80015a4:	9902      	ldr	r1, [sp, #8]
 80015a6:	9f00      	ldr	r7, [sp, #0]
 80015a8:	4689      	mov	r9, r1
 80015aa:	0431      	lsls	r1, r6, #16
 80015ac:	444f      	add	r7, r9
 80015ae:	4689      	mov	r9, r1
 80015b0:	4641      	mov	r1, r8
 80015b2:	4297      	cmp	r7, r2
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	040c      	lsls	r4, r1, #16
 80015b8:	0c24      	lsrs	r4, r4, #16
 80015ba:	444c      	add	r4, r9
 80015bc:	18ff      	adds	r7, r7, r3
 80015be:	4252      	negs	r2, r2
 80015c0:	1964      	adds	r4, r4, r5
 80015c2:	18a1      	adds	r1, r4, r2
 80015c4:	429f      	cmp	r7, r3
 80015c6:	419b      	sbcs	r3, r3
 80015c8:	4688      	mov	r8, r1
 80015ca:	4682      	mov	sl, r0
 80015cc:	425b      	negs	r3, r3
 80015ce:	4699      	mov	r9, r3
 80015d0:	4590      	cmp	r8, r2
 80015d2:	4192      	sbcs	r2, r2
 80015d4:	42ac      	cmp	r4, r5
 80015d6:	41a4      	sbcs	r4, r4
 80015d8:	44c2      	add	sl, r8
 80015da:	44d1      	add	r9, sl
 80015dc:	4252      	negs	r2, r2
 80015de:	4264      	negs	r4, r4
 80015e0:	4314      	orrs	r4, r2
 80015e2:	4599      	cmp	r9, r3
 80015e4:	419b      	sbcs	r3, r3
 80015e6:	4582      	cmp	sl, r0
 80015e8:	4192      	sbcs	r2, r2
 80015ea:	425b      	negs	r3, r3
 80015ec:	4252      	negs	r2, r2
 80015ee:	4313      	orrs	r3, r2
 80015f0:	464a      	mov	r2, r9
 80015f2:	0c36      	lsrs	r6, r6, #16
 80015f4:	19a4      	adds	r4, r4, r6
 80015f6:	18e3      	adds	r3, r4, r3
 80015f8:	4463      	add	r3, ip
 80015fa:	025b      	lsls	r3, r3, #9
 80015fc:	0dd2      	lsrs	r2, r2, #23
 80015fe:	431a      	orrs	r2, r3
 8001600:	9901      	ldr	r1, [sp, #4]
 8001602:	4692      	mov	sl, r2
 8001604:	027a      	lsls	r2, r7, #9
 8001606:	430a      	orrs	r2, r1
 8001608:	1e50      	subs	r0, r2, #1
 800160a:	4182      	sbcs	r2, r0
 800160c:	0dff      	lsrs	r7, r7, #23
 800160e:	4317      	orrs	r7, r2
 8001610:	464a      	mov	r2, r9
 8001612:	0252      	lsls	r2, r2, #9
 8001614:	4317      	orrs	r7, r2
 8001616:	46b8      	mov	r8, r7
 8001618:	01db      	lsls	r3, r3, #7
 800161a:	d500      	bpl.n	800161e <__aeabi_dmul+0x336>
 800161c:	e6ed      	b.n	80013fa <__aeabi_dmul+0x112>
 800161e:	4b0d      	ldr	r3, [pc, #52]	@ (8001654 <__aeabi_dmul+0x36c>)
 8001620:	9a03      	ldr	r2, [sp, #12]
 8001622:	445b      	add	r3, fp
 8001624:	4691      	mov	r9, r2
 8001626:	2b00      	cmp	r3, #0
 8001628:	dc00      	bgt.n	800162c <__aeabi_dmul+0x344>
 800162a:	e0ac      	b.n	8001786 <__aeabi_dmul+0x49e>
 800162c:	003a      	movs	r2, r7
 800162e:	0752      	lsls	r2, r2, #29
 8001630:	d100      	bne.n	8001634 <__aeabi_dmul+0x34c>
 8001632:	e710      	b.n	8001456 <__aeabi_dmul+0x16e>
 8001634:	220f      	movs	r2, #15
 8001636:	4658      	mov	r0, fp
 8001638:	403a      	ands	r2, r7
 800163a:	2a04      	cmp	r2, #4
 800163c:	d000      	beq.n	8001640 <__aeabi_dmul+0x358>
 800163e:	e6f9      	b.n	8001434 <__aeabi_dmul+0x14c>
 8001640:	e709      	b.n	8001456 <__aeabi_dmul+0x16e>
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	000007ff 	.word	0x000007ff
 8001648:	fffffc01 	.word	0xfffffc01
 800164c:	feffffff 	.word	0xfeffffff
 8001650:	000007fe 	.word	0x000007fe
 8001654:	000003ff 	.word	0x000003ff
 8001658:	0022      	movs	r2, r4
 800165a:	4332      	orrs	r2, r6
 800165c:	d06f      	beq.n	800173e <__aeabi_dmul+0x456>
 800165e:	2c00      	cmp	r4, #0
 8001660:	d100      	bne.n	8001664 <__aeabi_dmul+0x37c>
 8001662:	e0c2      	b.n	80017ea <__aeabi_dmul+0x502>
 8001664:	0020      	movs	r0, r4
 8001666:	f000 fdbb 	bl	80021e0 <__clzsi2>
 800166a:	0002      	movs	r2, r0
 800166c:	0003      	movs	r3, r0
 800166e:	3a0b      	subs	r2, #11
 8001670:	201d      	movs	r0, #29
 8001672:	1a82      	subs	r2, r0, r2
 8001674:	0030      	movs	r0, r6
 8001676:	0019      	movs	r1, r3
 8001678:	40d0      	lsrs	r0, r2
 800167a:	3908      	subs	r1, #8
 800167c:	408c      	lsls	r4, r1
 800167e:	0002      	movs	r2, r0
 8001680:	4322      	orrs	r2, r4
 8001682:	0034      	movs	r4, r6
 8001684:	408c      	lsls	r4, r1
 8001686:	4659      	mov	r1, fp
 8001688:	1acb      	subs	r3, r1, r3
 800168a:	4986      	ldr	r1, [pc, #536]	@ (80018a4 <__aeabi_dmul+0x5bc>)
 800168c:	468b      	mov	fp, r1
 800168e:	449b      	add	fp, r3
 8001690:	2d0a      	cmp	r5, #10
 8001692:	dd00      	ble.n	8001696 <__aeabi_dmul+0x3ae>
 8001694:	e6a4      	b.n	80013e0 <__aeabi_dmul+0xf8>
 8001696:	4649      	mov	r1, r9
 8001698:	9b00      	ldr	r3, [sp, #0]
 800169a:	9401      	str	r4, [sp, #4]
 800169c:	4059      	eors	r1, r3
 800169e:	b2cb      	uxtb	r3, r1
 80016a0:	0014      	movs	r4, r2
 80016a2:	2000      	movs	r0, #0
 80016a4:	9303      	str	r3, [sp, #12]
 80016a6:	2d02      	cmp	r5, #2
 80016a8:	dd00      	ble.n	80016ac <__aeabi_dmul+0x3c4>
 80016aa:	e667      	b.n	800137c <__aeabi_dmul+0x94>
 80016ac:	e6fb      	b.n	80014a6 <__aeabi_dmul+0x1be>
 80016ae:	4653      	mov	r3, sl
 80016b0:	4303      	orrs	r3, r0
 80016b2:	4698      	mov	r8, r3
 80016b4:	d03c      	beq.n	8001730 <__aeabi_dmul+0x448>
 80016b6:	4653      	mov	r3, sl
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d100      	bne.n	80016be <__aeabi_dmul+0x3d6>
 80016bc:	e0a3      	b.n	8001806 <__aeabi_dmul+0x51e>
 80016be:	4650      	mov	r0, sl
 80016c0:	f000 fd8e 	bl	80021e0 <__clzsi2>
 80016c4:	230b      	movs	r3, #11
 80016c6:	425b      	negs	r3, r3
 80016c8:	469c      	mov	ip, r3
 80016ca:	0002      	movs	r2, r0
 80016cc:	4484      	add	ip, r0
 80016ce:	0011      	movs	r1, r2
 80016d0:	4650      	mov	r0, sl
 80016d2:	3908      	subs	r1, #8
 80016d4:	4088      	lsls	r0, r1
 80016d6:	231d      	movs	r3, #29
 80016d8:	4680      	mov	r8, r0
 80016da:	4660      	mov	r0, ip
 80016dc:	1a1b      	subs	r3, r3, r0
 80016de:	0020      	movs	r0, r4
 80016e0:	40d8      	lsrs	r0, r3
 80016e2:	0003      	movs	r3, r0
 80016e4:	4640      	mov	r0, r8
 80016e6:	4303      	orrs	r3, r0
 80016e8:	469a      	mov	sl, r3
 80016ea:	0023      	movs	r3, r4
 80016ec:	408b      	lsls	r3, r1
 80016ee:	4698      	mov	r8, r3
 80016f0:	4b6c      	ldr	r3, [pc, #432]	@ (80018a4 <__aeabi_dmul+0x5bc>)
 80016f2:	2500      	movs	r5, #0
 80016f4:	1a9b      	subs	r3, r3, r2
 80016f6:	469b      	mov	fp, r3
 80016f8:	2300      	movs	r3, #0
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	e61a      	b.n	8001334 <__aeabi_dmul+0x4c>
 80016fe:	2d0f      	cmp	r5, #15
 8001700:	d000      	beq.n	8001704 <__aeabi_dmul+0x41c>
 8001702:	e0c9      	b.n	8001898 <__aeabi_dmul+0x5b0>
 8001704:	2380      	movs	r3, #128	@ 0x80
 8001706:	4652      	mov	r2, sl
 8001708:	031b      	lsls	r3, r3, #12
 800170a:	421a      	tst	r2, r3
 800170c:	d002      	beq.n	8001714 <__aeabi_dmul+0x42c>
 800170e:	421c      	tst	r4, r3
 8001710:	d100      	bne.n	8001714 <__aeabi_dmul+0x42c>
 8001712:	e092      	b.n	800183a <__aeabi_dmul+0x552>
 8001714:	2480      	movs	r4, #128	@ 0x80
 8001716:	4653      	mov	r3, sl
 8001718:	0324      	lsls	r4, r4, #12
 800171a:	431c      	orrs	r4, r3
 800171c:	0324      	lsls	r4, r4, #12
 800171e:	4642      	mov	r2, r8
 8001720:	0b24      	lsrs	r4, r4, #12
 8001722:	e63e      	b.n	80013a2 <__aeabi_dmul+0xba>
 8001724:	469b      	mov	fp, r3
 8001726:	2303      	movs	r3, #3
 8001728:	4680      	mov	r8, r0
 800172a:	250c      	movs	r5, #12
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	e601      	b.n	8001334 <__aeabi_dmul+0x4c>
 8001730:	2300      	movs	r3, #0
 8001732:	469a      	mov	sl, r3
 8001734:	469b      	mov	fp, r3
 8001736:	3301      	adds	r3, #1
 8001738:	2504      	movs	r5, #4
 800173a:	9302      	str	r3, [sp, #8]
 800173c:	e5fa      	b.n	8001334 <__aeabi_dmul+0x4c>
 800173e:	2101      	movs	r1, #1
 8001740:	430d      	orrs	r5, r1
 8001742:	2d0a      	cmp	r5, #10
 8001744:	dd00      	ble.n	8001748 <__aeabi_dmul+0x460>
 8001746:	e64b      	b.n	80013e0 <__aeabi_dmul+0xf8>
 8001748:	4649      	mov	r1, r9
 800174a:	9800      	ldr	r0, [sp, #0]
 800174c:	4041      	eors	r1, r0
 800174e:	b2c9      	uxtb	r1, r1
 8001750:	9103      	str	r1, [sp, #12]
 8001752:	2d02      	cmp	r5, #2
 8001754:	dc00      	bgt.n	8001758 <__aeabi_dmul+0x470>
 8001756:	e096      	b.n	8001886 <__aeabi_dmul+0x59e>
 8001758:	2300      	movs	r3, #0
 800175a:	2400      	movs	r4, #0
 800175c:	2001      	movs	r0, #1
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	e60c      	b.n	800137c <__aeabi_dmul+0x94>
 8001762:	4649      	mov	r1, r9
 8001764:	2302      	movs	r3, #2
 8001766:	9a00      	ldr	r2, [sp, #0]
 8001768:	432b      	orrs	r3, r5
 800176a:	4051      	eors	r1, r2
 800176c:	b2ca      	uxtb	r2, r1
 800176e:	9203      	str	r2, [sp, #12]
 8001770:	2b0a      	cmp	r3, #10
 8001772:	dd00      	ble.n	8001776 <__aeabi_dmul+0x48e>
 8001774:	e634      	b.n	80013e0 <__aeabi_dmul+0xf8>
 8001776:	2d00      	cmp	r5, #0
 8001778:	d157      	bne.n	800182a <__aeabi_dmul+0x542>
 800177a:	9b03      	ldr	r3, [sp, #12]
 800177c:	4699      	mov	r9, r3
 800177e:	2400      	movs	r4, #0
 8001780:	2200      	movs	r2, #0
 8001782:	4b49      	ldr	r3, [pc, #292]	@ (80018a8 <__aeabi_dmul+0x5c0>)
 8001784:	e60e      	b.n	80013a4 <__aeabi_dmul+0xbc>
 8001786:	4658      	mov	r0, fp
 8001788:	2101      	movs	r1, #1
 800178a:	1ac9      	subs	r1, r1, r3
 800178c:	2938      	cmp	r1, #56	@ 0x38
 800178e:	dd00      	ble.n	8001792 <__aeabi_dmul+0x4aa>
 8001790:	e62f      	b.n	80013f2 <__aeabi_dmul+0x10a>
 8001792:	291f      	cmp	r1, #31
 8001794:	dd56      	ble.n	8001844 <__aeabi_dmul+0x55c>
 8001796:	221f      	movs	r2, #31
 8001798:	4654      	mov	r4, sl
 800179a:	4252      	negs	r2, r2
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	40dc      	lsrs	r4, r3
 80017a0:	2920      	cmp	r1, #32
 80017a2:	d007      	beq.n	80017b4 <__aeabi_dmul+0x4cc>
 80017a4:	4b41      	ldr	r3, [pc, #260]	@ (80018ac <__aeabi_dmul+0x5c4>)
 80017a6:	4642      	mov	r2, r8
 80017a8:	469c      	mov	ip, r3
 80017aa:	4653      	mov	r3, sl
 80017ac:	4460      	add	r0, ip
 80017ae:	4083      	lsls	r3, r0
 80017b0:	431a      	orrs	r2, r3
 80017b2:	4690      	mov	r8, r2
 80017b4:	4642      	mov	r2, r8
 80017b6:	2107      	movs	r1, #7
 80017b8:	1e53      	subs	r3, r2, #1
 80017ba:	419a      	sbcs	r2, r3
 80017bc:	000b      	movs	r3, r1
 80017be:	4322      	orrs	r2, r4
 80017c0:	4013      	ands	r3, r2
 80017c2:	2400      	movs	r4, #0
 80017c4:	4211      	tst	r1, r2
 80017c6:	d009      	beq.n	80017dc <__aeabi_dmul+0x4f4>
 80017c8:	230f      	movs	r3, #15
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d05d      	beq.n	800188c <__aeabi_dmul+0x5a4>
 80017d0:	1d11      	adds	r1, r2, #4
 80017d2:	4291      	cmp	r1, r2
 80017d4:	419b      	sbcs	r3, r3
 80017d6:	000a      	movs	r2, r1
 80017d8:	425b      	negs	r3, r3
 80017da:	075b      	lsls	r3, r3, #29
 80017dc:	08d2      	lsrs	r2, r2, #3
 80017de:	431a      	orrs	r2, r3
 80017e0:	2300      	movs	r3, #0
 80017e2:	e5df      	b.n	80013a4 <__aeabi_dmul+0xbc>
 80017e4:	9b03      	ldr	r3, [sp, #12]
 80017e6:	4699      	mov	r9, r3
 80017e8:	e5fa      	b.n	80013e0 <__aeabi_dmul+0xf8>
 80017ea:	9801      	ldr	r0, [sp, #4]
 80017ec:	f000 fcf8 	bl	80021e0 <__clzsi2>
 80017f0:	0002      	movs	r2, r0
 80017f2:	0003      	movs	r3, r0
 80017f4:	3215      	adds	r2, #21
 80017f6:	3320      	adds	r3, #32
 80017f8:	2a1c      	cmp	r2, #28
 80017fa:	dc00      	bgt.n	80017fe <__aeabi_dmul+0x516>
 80017fc:	e738      	b.n	8001670 <__aeabi_dmul+0x388>
 80017fe:	9a01      	ldr	r2, [sp, #4]
 8001800:	3808      	subs	r0, #8
 8001802:	4082      	lsls	r2, r0
 8001804:	e73f      	b.n	8001686 <__aeabi_dmul+0x39e>
 8001806:	f000 fceb 	bl	80021e0 <__clzsi2>
 800180a:	2315      	movs	r3, #21
 800180c:	469c      	mov	ip, r3
 800180e:	4484      	add	ip, r0
 8001810:	0002      	movs	r2, r0
 8001812:	4663      	mov	r3, ip
 8001814:	3220      	adds	r2, #32
 8001816:	2b1c      	cmp	r3, #28
 8001818:	dc00      	bgt.n	800181c <__aeabi_dmul+0x534>
 800181a:	e758      	b.n	80016ce <__aeabi_dmul+0x3e6>
 800181c:	2300      	movs	r3, #0
 800181e:	4698      	mov	r8, r3
 8001820:	0023      	movs	r3, r4
 8001822:	3808      	subs	r0, #8
 8001824:	4083      	lsls	r3, r0
 8001826:	469a      	mov	sl, r3
 8001828:	e762      	b.n	80016f0 <__aeabi_dmul+0x408>
 800182a:	001d      	movs	r5, r3
 800182c:	2300      	movs	r3, #0
 800182e:	2400      	movs	r4, #0
 8001830:	2002      	movs	r0, #2
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	e5a2      	b.n	800137c <__aeabi_dmul+0x94>
 8001836:	9002      	str	r0, [sp, #8]
 8001838:	e632      	b.n	80014a0 <__aeabi_dmul+0x1b8>
 800183a:	431c      	orrs	r4, r3
 800183c:	9b00      	ldr	r3, [sp, #0]
 800183e:	9a01      	ldr	r2, [sp, #4]
 8001840:	4699      	mov	r9, r3
 8001842:	e5ae      	b.n	80013a2 <__aeabi_dmul+0xba>
 8001844:	4b1a      	ldr	r3, [pc, #104]	@ (80018b0 <__aeabi_dmul+0x5c8>)
 8001846:	4652      	mov	r2, sl
 8001848:	18c3      	adds	r3, r0, r3
 800184a:	4640      	mov	r0, r8
 800184c:	409a      	lsls	r2, r3
 800184e:	40c8      	lsrs	r0, r1
 8001850:	4302      	orrs	r2, r0
 8001852:	4640      	mov	r0, r8
 8001854:	4098      	lsls	r0, r3
 8001856:	0003      	movs	r3, r0
 8001858:	1e58      	subs	r0, r3, #1
 800185a:	4183      	sbcs	r3, r0
 800185c:	4654      	mov	r4, sl
 800185e:	431a      	orrs	r2, r3
 8001860:	40cc      	lsrs	r4, r1
 8001862:	0753      	lsls	r3, r2, #29
 8001864:	d009      	beq.n	800187a <__aeabi_dmul+0x592>
 8001866:	230f      	movs	r3, #15
 8001868:	4013      	ands	r3, r2
 800186a:	2b04      	cmp	r3, #4
 800186c:	d005      	beq.n	800187a <__aeabi_dmul+0x592>
 800186e:	1d13      	adds	r3, r2, #4
 8001870:	4293      	cmp	r3, r2
 8001872:	4192      	sbcs	r2, r2
 8001874:	4252      	negs	r2, r2
 8001876:	18a4      	adds	r4, r4, r2
 8001878:	001a      	movs	r2, r3
 800187a:	0223      	lsls	r3, r4, #8
 800187c:	d508      	bpl.n	8001890 <__aeabi_dmul+0x5a8>
 800187e:	2301      	movs	r3, #1
 8001880:	2400      	movs	r4, #0
 8001882:	2200      	movs	r2, #0
 8001884:	e58e      	b.n	80013a4 <__aeabi_dmul+0xbc>
 8001886:	4689      	mov	r9, r1
 8001888:	2400      	movs	r4, #0
 800188a:	e58b      	b.n	80013a4 <__aeabi_dmul+0xbc>
 800188c:	2300      	movs	r3, #0
 800188e:	e7a5      	b.n	80017dc <__aeabi_dmul+0x4f4>
 8001890:	0763      	lsls	r3, r4, #29
 8001892:	0264      	lsls	r4, r4, #9
 8001894:	0b24      	lsrs	r4, r4, #12
 8001896:	e7a1      	b.n	80017dc <__aeabi_dmul+0x4f4>
 8001898:	9b00      	ldr	r3, [sp, #0]
 800189a:	46a2      	mov	sl, r4
 800189c:	4699      	mov	r9, r3
 800189e:	9b01      	ldr	r3, [sp, #4]
 80018a0:	4698      	mov	r8, r3
 80018a2:	e737      	b.n	8001714 <__aeabi_dmul+0x42c>
 80018a4:	fffffc0d 	.word	0xfffffc0d
 80018a8:	000007ff 	.word	0x000007ff
 80018ac:	0000043e 	.word	0x0000043e
 80018b0:	0000041e 	.word	0x0000041e

080018b4 <__aeabi_dsub>:
 80018b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b6:	4657      	mov	r7, sl
 80018b8:	464e      	mov	r6, r9
 80018ba:	4645      	mov	r5, r8
 80018bc:	46de      	mov	lr, fp
 80018be:	b5e0      	push	{r5, r6, r7, lr}
 80018c0:	b083      	sub	sp, #12
 80018c2:	9000      	str	r0, [sp, #0]
 80018c4:	9101      	str	r1, [sp, #4]
 80018c6:	030c      	lsls	r4, r1, #12
 80018c8:	004d      	lsls	r5, r1, #1
 80018ca:	0fce      	lsrs	r6, r1, #31
 80018cc:	0a61      	lsrs	r1, r4, #9
 80018ce:	9c00      	ldr	r4, [sp, #0]
 80018d0:	005f      	lsls	r7, r3, #1
 80018d2:	0f64      	lsrs	r4, r4, #29
 80018d4:	430c      	orrs	r4, r1
 80018d6:	9900      	ldr	r1, [sp, #0]
 80018d8:	9200      	str	r2, [sp, #0]
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	00c8      	lsls	r0, r1, #3
 80018de:	0319      	lsls	r1, r3, #12
 80018e0:	0d7b      	lsrs	r3, r7, #21
 80018e2:	4699      	mov	r9, r3
 80018e4:	9b01      	ldr	r3, [sp, #4]
 80018e6:	4fcc      	ldr	r7, [pc, #816]	@ (8001c18 <__aeabi_dsub+0x364>)
 80018e8:	0fdb      	lsrs	r3, r3, #31
 80018ea:	469c      	mov	ip, r3
 80018ec:	0a4b      	lsrs	r3, r1, #9
 80018ee:	9900      	ldr	r1, [sp, #0]
 80018f0:	4680      	mov	r8, r0
 80018f2:	0f49      	lsrs	r1, r1, #29
 80018f4:	4319      	orrs	r1, r3
 80018f6:	9b00      	ldr	r3, [sp, #0]
 80018f8:	468b      	mov	fp, r1
 80018fa:	00da      	lsls	r2, r3, #3
 80018fc:	4692      	mov	sl, r2
 80018fe:	0d6d      	lsrs	r5, r5, #21
 8001900:	45b9      	cmp	r9, r7
 8001902:	d100      	bne.n	8001906 <__aeabi_dsub+0x52>
 8001904:	e0bf      	b.n	8001a86 <__aeabi_dsub+0x1d2>
 8001906:	2301      	movs	r3, #1
 8001908:	4661      	mov	r1, ip
 800190a:	4059      	eors	r1, r3
 800190c:	464b      	mov	r3, r9
 800190e:	468c      	mov	ip, r1
 8001910:	1aeb      	subs	r3, r5, r3
 8001912:	428e      	cmp	r6, r1
 8001914:	d075      	beq.n	8001a02 <__aeabi_dsub+0x14e>
 8001916:	2b00      	cmp	r3, #0
 8001918:	dc00      	bgt.n	800191c <__aeabi_dsub+0x68>
 800191a:	e2a3      	b.n	8001e64 <__aeabi_dsub+0x5b0>
 800191c:	4649      	mov	r1, r9
 800191e:	2900      	cmp	r1, #0
 8001920:	d100      	bne.n	8001924 <__aeabi_dsub+0x70>
 8001922:	e0ce      	b.n	8001ac2 <__aeabi_dsub+0x20e>
 8001924:	42bd      	cmp	r5, r7
 8001926:	d100      	bne.n	800192a <__aeabi_dsub+0x76>
 8001928:	e200      	b.n	8001d2c <__aeabi_dsub+0x478>
 800192a:	2701      	movs	r7, #1
 800192c:	2b38      	cmp	r3, #56	@ 0x38
 800192e:	dc19      	bgt.n	8001964 <__aeabi_dsub+0xb0>
 8001930:	2780      	movs	r7, #128	@ 0x80
 8001932:	4659      	mov	r1, fp
 8001934:	043f      	lsls	r7, r7, #16
 8001936:	4339      	orrs	r1, r7
 8001938:	468b      	mov	fp, r1
 800193a:	2b1f      	cmp	r3, #31
 800193c:	dd00      	ble.n	8001940 <__aeabi_dsub+0x8c>
 800193e:	e1fa      	b.n	8001d36 <__aeabi_dsub+0x482>
 8001940:	2720      	movs	r7, #32
 8001942:	1af9      	subs	r1, r7, r3
 8001944:	468c      	mov	ip, r1
 8001946:	4659      	mov	r1, fp
 8001948:	4667      	mov	r7, ip
 800194a:	40b9      	lsls	r1, r7
 800194c:	000f      	movs	r7, r1
 800194e:	0011      	movs	r1, r2
 8001950:	40d9      	lsrs	r1, r3
 8001952:	430f      	orrs	r7, r1
 8001954:	4661      	mov	r1, ip
 8001956:	408a      	lsls	r2, r1
 8001958:	1e51      	subs	r1, r2, #1
 800195a:	418a      	sbcs	r2, r1
 800195c:	4659      	mov	r1, fp
 800195e:	40d9      	lsrs	r1, r3
 8001960:	4317      	orrs	r7, r2
 8001962:	1a64      	subs	r4, r4, r1
 8001964:	1bc7      	subs	r7, r0, r7
 8001966:	42b8      	cmp	r0, r7
 8001968:	4180      	sbcs	r0, r0
 800196a:	4240      	negs	r0, r0
 800196c:	1a24      	subs	r4, r4, r0
 800196e:	0223      	lsls	r3, r4, #8
 8001970:	d400      	bmi.n	8001974 <__aeabi_dsub+0xc0>
 8001972:	e140      	b.n	8001bf6 <__aeabi_dsub+0x342>
 8001974:	0264      	lsls	r4, r4, #9
 8001976:	0a64      	lsrs	r4, r4, #9
 8001978:	2c00      	cmp	r4, #0
 800197a:	d100      	bne.n	800197e <__aeabi_dsub+0xca>
 800197c:	e154      	b.n	8001c28 <__aeabi_dsub+0x374>
 800197e:	0020      	movs	r0, r4
 8001980:	f000 fc2e 	bl	80021e0 <__clzsi2>
 8001984:	0003      	movs	r3, r0
 8001986:	3b08      	subs	r3, #8
 8001988:	2120      	movs	r1, #32
 800198a:	0038      	movs	r0, r7
 800198c:	1aca      	subs	r2, r1, r3
 800198e:	40d0      	lsrs	r0, r2
 8001990:	409c      	lsls	r4, r3
 8001992:	0002      	movs	r2, r0
 8001994:	409f      	lsls	r7, r3
 8001996:	4322      	orrs	r2, r4
 8001998:	429d      	cmp	r5, r3
 800199a:	dd00      	ble.n	800199e <__aeabi_dsub+0xea>
 800199c:	e1a6      	b.n	8001cec <__aeabi_dsub+0x438>
 800199e:	1b58      	subs	r0, r3, r5
 80019a0:	3001      	adds	r0, #1
 80019a2:	1a09      	subs	r1, r1, r0
 80019a4:	003c      	movs	r4, r7
 80019a6:	408f      	lsls	r7, r1
 80019a8:	40c4      	lsrs	r4, r0
 80019aa:	1e7b      	subs	r3, r7, #1
 80019ac:	419f      	sbcs	r7, r3
 80019ae:	0013      	movs	r3, r2
 80019b0:	408b      	lsls	r3, r1
 80019b2:	4327      	orrs	r7, r4
 80019b4:	431f      	orrs	r7, r3
 80019b6:	40c2      	lsrs	r2, r0
 80019b8:	003b      	movs	r3, r7
 80019ba:	0014      	movs	r4, r2
 80019bc:	2500      	movs	r5, #0
 80019be:	4313      	orrs	r3, r2
 80019c0:	d100      	bne.n	80019c4 <__aeabi_dsub+0x110>
 80019c2:	e1f7      	b.n	8001db4 <__aeabi_dsub+0x500>
 80019c4:	077b      	lsls	r3, r7, #29
 80019c6:	d100      	bne.n	80019ca <__aeabi_dsub+0x116>
 80019c8:	e377      	b.n	80020ba <__aeabi_dsub+0x806>
 80019ca:	230f      	movs	r3, #15
 80019cc:	0038      	movs	r0, r7
 80019ce:	403b      	ands	r3, r7
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d004      	beq.n	80019de <__aeabi_dsub+0x12a>
 80019d4:	1d38      	adds	r0, r7, #4
 80019d6:	42b8      	cmp	r0, r7
 80019d8:	41bf      	sbcs	r7, r7
 80019da:	427f      	negs	r7, r7
 80019dc:	19e4      	adds	r4, r4, r7
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d400      	bmi.n	80019e4 <__aeabi_dsub+0x130>
 80019e2:	e368      	b.n	80020b6 <__aeabi_dsub+0x802>
 80019e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001c18 <__aeabi_dsub+0x364>)
 80019e6:	3501      	adds	r5, #1
 80019e8:	429d      	cmp	r5, r3
 80019ea:	d100      	bne.n	80019ee <__aeabi_dsub+0x13a>
 80019ec:	e0f4      	b.n	8001bd8 <__aeabi_dsub+0x324>
 80019ee:	4b8b      	ldr	r3, [pc, #556]	@ (8001c1c <__aeabi_dsub+0x368>)
 80019f0:	056d      	lsls	r5, r5, #21
 80019f2:	401c      	ands	r4, r3
 80019f4:	0d6d      	lsrs	r5, r5, #21
 80019f6:	0767      	lsls	r7, r4, #29
 80019f8:	08c0      	lsrs	r0, r0, #3
 80019fa:	0264      	lsls	r4, r4, #9
 80019fc:	4307      	orrs	r7, r0
 80019fe:	0b24      	lsrs	r4, r4, #12
 8001a00:	e0ec      	b.n	8001bdc <__aeabi_dsub+0x328>
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dc00      	bgt.n	8001a08 <__aeabi_dsub+0x154>
 8001a06:	e329      	b.n	800205c <__aeabi_dsub+0x7a8>
 8001a08:	4649      	mov	r1, r9
 8001a0a:	2900      	cmp	r1, #0
 8001a0c:	d000      	beq.n	8001a10 <__aeabi_dsub+0x15c>
 8001a0e:	e0d6      	b.n	8001bbe <__aeabi_dsub+0x30a>
 8001a10:	4659      	mov	r1, fp
 8001a12:	4311      	orrs	r1, r2
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dsub+0x164>
 8001a16:	e12e      	b.n	8001c76 <__aeabi_dsub+0x3c2>
 8001a18:	1e59      	subs	r1, r3, #1
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d100      	bne.n	8001a20 <__aeabi_dsub+0x16c>
 8001a1e:	e1e6      	b.n	8001dee <__aeabi_dsub+0x53a>
 8001a20:	42bb      	cmp	r3, r7
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dsub+0x172>
 8001a24:	e182      	b.n	8001d2c <__aeabi_dsub+0x478>
 8001a26:	2701      	movs	r7, #1
 8001a28:	000b      	movs	r3, r1
 8001a2a:	2938      	cmp	r1, #56	@ 0x38
 8001a2c:	dc14      	bgt.n	8001a58 <__aeabi_dsub+0x1a4>
 8001a2e:	2b1f      	cmp	r3, #31
 8001a30:	dd00      	ble.n	8001a34 <__aeabi_dsub+0x180>
 8001a32:	e23c      	b.n	8001eae <__aeabi_dsub+0x5fa>
 8001a34:	2720      	movs	r7, #32
 8001a36:	1af9      	subs	r1, r7, r3
 8001a38:	468c      	mov	ip, r1
 8001a3a:	4659      	mov	r1, fp
 8001a3c:	4667      	mov	r7, ip
 8001a3e:	40b9      	lsls	r1, r7
 8001a40:	000f      	movs	r7, r1
 8001a42:	0011      	movs	r1, r2
 8001a44:	40d9      	lsrs	r1, r3
 8001a46:	430f      	orrs	r7, r1
 8001a48:	4661      	mov	r1, ip
 8001a4a:	408a      	lsls	r2, r1
 8001a4c:	1e51      	subs	r1, r2, #1
 8001a4e:	418a      	sbcs	r2, r1
 8001a50:	4659      	mov	r1, fp
 8001a52:	40d9      	lsrs	r1, r3
 8001a54:	4317      	orrs	r7, r2
 8001a56:	1864      	adds	r4, r4, r1
 8001a58:	183f      	adds	r7, r7, r0
 8001a5a:	4287      	cmp	r7, r0
 8001a5c:	4180      	sbcs	r0, r0
 8001a5e:	4240      	negs	r0, r0
 8001a60:	1824      	adds	r4, r4, r0
 8001a62:	0223      	lsls	r3, r4, #8
 8001a64:	d400      	bmi.n	8001a68 <__aeabi_dsub+0x1b4>
 8001a66:	e0c6      	b.n	8001bf6 <__aeabi_dsub+0x342>
 8001a68:	4b6b      	ldr	r3, [pc, #428]	@ (8001c18 <__aeabi_dsub+0x364>)
 8001a6a:	3501      	adds	r5, #1
 8001a6c:	429d      	cmp	r5, r3
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dsub+0x1be>
 8001a70:	e0b2      	b.n	8001bd8 <__aeabi_dsub+0x324>
 8001a72:	2101      	movs	r1, #1
 8001a74:	4b69      	ldr	r3, [pc, #420]	@ (8001c1c <__aeabi_dsub+0x368>)
 8001a76:	087a      	lsrs	r2, r7, #1
 8001a78:	401c      	ands	r4, r3
 8001a7a:	4039      	ands	r1, r7
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	07e7      	lsls	r7, r4, #31
 8001a80:	4317      	orrs	r7, r2
 8001a82:	0864      	lsrs	r4, r4, #1
 8001a84:	e79e      	b.n	80019c4 <__aeabi_dsub+0x110>
 8001a86:	4b66      	ldr	r3, [pc, #408]	@ (8001c20 <__aeabi_dsub+0x36c>)
 8001a88:	4311      	orrs	r1, r2
 8001a8a:	468a      	mov	sl, r1
 8001a8c:	18eb      	adds	r3, r5, r3
 8001a8e:	2900      	cmp	r1, #0
 8001a90:	d028      	beq.n	8001ae4 <__aeabi_dsub+0x230>
 8001a92:	4566      	cmp	r6, ip
 8001a94:	d02c      	beq.n	8001af0 <__aeabi_dsub+0x23c>
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d05b      	beq.n	8001b52 <__aeabi_dsub+0x29e>
 8001a9a:	2d00      	cmp	r5, #0
 8001a9c:	d100      	bne.n	8001aa0 <__aeabi_dsub+0x1ec>
 8001a9e:	e12c      	b.n	8001cfa <__aeabi_dsub+0x446>
 8001aa0:	465b      	mov	r3, fp
 8001aa2:	4666      	mov	r6, ip
 8001aa4:	075f      	lsls	r7, r3, #29
 8001aa6:	08d2      	lsrs	r2, r2, #3
 8001aa8:	4317      	orrs	r7, r2
 8001aaa:	08dd      	lsrs	r5, r3, #3
 8001aac:	003b      	movs	r3, r7
 8001aae:	432b      	orrs	r3, r5
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_dsub+0x200>
 8001ab2:	e0e2      	b.n	8001c7a <__aeabi_dsub+0x3c6>
 8001ab4:	2480      	movs	r4, #128	@ 0x80
 8001ab6:	0324      	lsls	r4, r4, #12
 8001ab8:	432c      	orrs	r4, r5
 8001aba:	0324      	lsls	r4, r4, #12
 8001abc:	4d56      	ldr	r5, [pc, #344]	@ (8001c18 <__aeabi_dsub+0x364>)
 8001abe:	0b24      	lsrs	r4, r4, #12
 8001ac0:	e08c      	b.n	8001bdc <__aeabi_dsub+0x328>
 8001ac2:	4659      	mov	r1, fp
 8001ac4:	4311      	orrs	r1, r2
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dsub+0x216>
 8001ac8:	e0d5      	b.n	8001c76 <__aeabi_dsub+0x3c2>
 8001aca:	1e59      	subs	r1, r3, #1
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d100      	bne.n	8001ad2 <__aeabi_dsub+0x21e>
 8001ad0:	e1b9      	b.n	8001e46 <__aeabi_dsub+0x592>
 8001ad2:	42bb      	cmp	r3, r7
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_dsub+0x224>
 8001ad6:	e1b1      	b.n	8001e3c <__aeabi_dsub+0x588>
 8001ad8:	2701      	movs	r7, #1
 8001ada:	000b      	movs	r3, r1
 8001adc:	2938      	cmp	r1, #56	@ 0x38
 8001ade:	dd00      	ble.n	8001ae2 <__aeabi_dsub+0x22e>
 8001ae0:	e740      	b.n	8001964 <__aeabi_dsub+0xb0>
 8001ae2:	e72a      	b.n	800193a <__aeabi_dsub+0x86>
 8001ae4:	4661      	mov	r1, ip
 8001ae6:	2701      	movs	r7, #1
 8001ae8:	4079      	eors	r1, r7
 8001aea:	468c      	mov	ip, r1
 8001aec:	4566      	cmp	r6, ip
 8001aee:	d1d2      	bne.n	8001a96 <__aeabi_dsub+0x1e2>
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x242>
 8001af4:	e0c5      	b.n	8001c82 <__aeabi_dsub+0x3ce>
 8001af6:	2d00      	cmp	r5, #0
 8001af8:	d000      	beq.n	8001afc <__aeabi_dsub+0x248>
 8001afa:	e155      	b.n	8001da8 <__aeabi_dsub+0x4f4>
 8001afc:	464b      	mov	r3, r9
 8001afe:	0025      	movs	r5, r4
 8001b00:	4305      	orrs	r5, r0
 8001b02:	d100      	bne.n	8001b06 <__aeabi_dsub+0x252>
 8001b04:	e212      	b.n	8001f2c <__aeabi_dsub+0x678>
 8001b06:	1e59      	subs	r1, r3, #1
 8001b08:	468c      	mov	ip, r1
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_dsub+0x25c>
 8001b0e:	e249      	b.n	8001fa4 <__aeabi_dsub+0x6f0>
 8001b10:	4d41      	ldr	r5, [pc, #260]	@ (8001c18 <__aeabi_dsub+0x364>)
 8001b12:	42ab      	cmp	r3, r5
 8001b14:	d100      	bne.n	8001b18 <__aeabi_dsub+0x264>
 8001b16:	e28f      	b.n	8002038 <__aeabi_dsub+0x784>
 8001b18:	2701      	movs	r7, #1
 8001b1a:	2938      	cmp	r1, #56	@ 0x38
 8001b1c:	dc11      	bgt.n	8001b42 <__aeabi_dsub+0x28e>
 8001b1e:	4663      	mov	r3, ip
 8001b20:	2b1f      	cmp	r3, #31
 8001b22:	dd00      	ble.n	8001b26 <__aeabi_dsub+0x272>
 8001b24:	e25b      	b.n	8001fde <__aeabi_dsub+0x72a>
 8001b26:	4661      	mov	r1, ip
 8001b28:	2320      	movs	r3, #32
 8001b2a:	0027      	movs	r7, r4
 8001b2c:	1a5b      	subs	r3, r3, r1
 8001b2e:	0005      	movs	r5, r0
 8001b30:	4098      	lsls	r0, r3
 8001b32:	409f      	lsls	r7, r3
 8001b34:	40cd      	lsrs	r5, r1
 8001b36:	1e43      	subs	r3, r0, #1
 8001b38:	4198      	sbcs	r0, r3
 8001b3a:	40cc      	lsrs	r4, r1
 8001b3c:	432f      	orrs	r7, r5
 8001b3e:	4307      	orrs	r7, r0
 8001b40:	44a3      	add	fp, r4
 8001b42:	18bf      	adds	r7, r7, r2
 8001b44:	4297      	cmp	r7, r2
 8001b46:	4192      	sbcs	r2, r2
 8001b48:	4252      	negs	r2, r2
 8001b4a:	445a      	add	r2, fp
 8001b4c:	0014      	movs	r4, r2
 8001b4e:	464d      	mov	r5, r9
 8001b50:	e787      	b.n	8001a62 <__aeabi_dsub+0x1ae>
 8001b52:	4f34      	ldr	r7, [pc, #208]	@ (8001c24 <__aeabi_dsub+0x370>)
 8001b54:	1c6b      	adds	r3, r5, #1
 8001b56:	423b      	tst	r3, r7
 8001b58:	d000      	beq.n	8001b5c <__aeabi_dsub+0x2a8>
 8001b5a:	e0b6      	b.n	8001cca <__aeabi_dsub+0x416>
 8001b5c:	4659      	mov	r1, fp
 8001b5e:	0023      	movs	r3, r4
 8001b60:	4311      	orrs	r1, r2
 8001b62:	000f      	movs	r7, r1
 8001b64:	4303      	orrs	r3, r0
 8001b66:	2d00      	cmp	r5, #0
 8001b68:	d000      	beq.n	8001b6c <__aeabi_dsub+0x2b8>
 8001b6a:	e126      	b.n	8001dba <__aeabi_dsub+0x506>
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dsub+0x2be>
 8001b70:	e1c0      	b.n	8001ef4 <__aeabi_dsub+0x640>
 8001b72:	2900      	cmp	r1, #0
 8001b74:	d100      	bne.n	8001b78 <__aeabi_dsub+0x2c4>
 8001b76:	e0a1      	b.n	8001cbc <__aeabi_dsub+0x408>
 8001b78:	1a83      	subs	r3, r0, r2
 8001b7a:	4698      	mov	r8, r3
 8001b7c:	465b      	mov	r3, fp
 8001b7e:	4540      	cmp	r0, r8
 8001b80:	41ad      	sbcs	r5, r5
 8001b82:	1ae3      	subs	r3, r4, r3
 8001b84:	426d      	negs	r5, r5
 8001b86:	1b5b      	subs	r3, r3, r5
 8001b88:	2580      	movs	r5, #128	@ 0x80
 8001b8a:	042d      	lsls	r5, r5, #16
 8001b8c:	422b      	tst	r3, r5
 8001b8e:	d100      	bne.n	8001b92 <__aeabi_dsub+0x2de>
 8001b90:	e14b      	b.n	8001e2a <__aeabi_dsub+0x576>
 8001b92:	465b      	mov	r3, fp
 8001b94:	1a10      	subs	r0, r2, r0
 8001b96:	4282      	cmp	r2, r0
 8001b98:	4192      	sbcs	r2, r2
 8001b9a:	1b1c      	subs	r4, r3, r4
 8001b9c:	0007      	movs	r7, r0
 8001b9e:	2601      	movs	r6, #1
 8001ba0:	4663      	mov	r3, ip
 8001ba2:	4252      	negs	r2, r2
 8001ba4:	1aa4      	subs	r4, r4, r2
 8001ba6:	4327      	orrs	r7, r4
 8001ba8:	401e      	ands	r6, r3
 8001baa:	2f00      	cmp	r7, #0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dsub+0x2fc>
 8001bae:	e142      	b.n	8001e36 <__aeabi_dsub+0x582>
 8001bb0:	422c      	tst	r4, r5
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_dsub+0x302>
 8001bb4:	e26d      	b.n	8002092 <__aeabi_dsub+0x7de>
 8001bb6:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <__aeabi_dsub+0x368>)
 8001bb8:	2501      	movs	r5, #1
 8001bba:	401c      	ands	r4, r3
 8001bbc:	e71b      	b.n	80019f6 <__aeabi_dsub+0x142>
 8001bbe:	42bd      	cmp	r5, r7
 8001bc0:	d100      	bne.n	8001bc4 <__aeabi_dsub+0x310>
 8001bc2:	e13b      	b.n	8001e3c <__aeabi_dsub+0x588>
 8001bc4:	2701      	movs	r7, #1
 8001bc6:	2b38      	cmp	r3, #56	@ 0x38
 8001bc8:	dd00      	ble.n	8001bcc <__aeabi_dsub+0x318>
 8001bca:	e745      	b.n	8001a58 <__aeabi_dsub+0x1a4>
 8001bcc:	2780      	movs	r7, #128	@ 0x80
 8001bce:	4659      	mov	r1, fp
 8001bd0:	043f      	lsls	r7, r7, #16
 8001bd2:	4339      	orrs	r1, r7
 8001bd4:	468b      	mov	fp, r1
 8001bd6:	e72a      	b.n	8001a2e <__aeabi_dsub+0x17a>
 8001bd8:	2400      	movs	r4, #0
 8001bda:	2700      	movs	r7, #0
 8001bdc:	052d      	lsls	r5, r5, #20
 8001bde:	4325      	orrs	r5, r4
 8001be0:	07f6      	lsls	r6, r6, #31
 8001be2:	4335      	orrs	r5, r6
 8001be4:	0038      	movs	r0, r7
 8001be6:	0029      	movs	r1, r5
 8001be8:	b003      	add	sp, #12
 8001bea:	bcf0      	pop	{r4, r5, r6, r7}
 8001bec:	46bb      	mov	fp, r7
 8001bee:	46b2      	mov	sl, r6
 8001bf0:	46a9      	mov	r9, r5
 8001bf2:	46a0      	mov	r8, r4
 8001bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bf6:	077b      	lsls	r3, r7, #29
 8001bf8:	d004      	beq.n	8001c04 <__aeabi_dsub+0x350>
 8001bfa:	230f      	movs	r3, #15
 8001bfc:	403b      	ands	r3, r7
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d000      	beq.n	8001c04 <__aeabi_dsub+0x350>
 8001c02:	e6e7      	b.n	80019d4 <__aeabi_dsub+0x120>
 8001c04:	002b      	movs	r3, r5
 8001c06:	08f8      	lsrs	r0, r7, #3
 8001c08:	4a03      	ldr	r2, [pc, #12]	@ (8001c18 <__aeabi_dsub+0x364>)
 8001c0a:	0767      	lsls	r7, r4, #29
 8001c0c:	4307      	orrs	r7, r0
 8001c0e:	08e5      	lsrs	r5, r4, #3
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d100      	bne.n	8001c16 <__aeabi_dsub+0x362>
 8001c14:	e74a      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8001c16:	e0a5      	b.n	8001d64 <__aeabi_dsub+0x4b0>
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	ff7fffff 	.word	0xff7fffff
 8001c20:	fffff801 	.word	0xfffff801
 8001c24:	000007fe 	.word	0x000007fe
 8001c28:	0038      	movs	r0, r7
 8001c2a:	f000 fad9 	bl	80021e0 <__clzsi2>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	3318      	adds	r3, #24
 8001c32:	2b1f      	cmp	r3, #31
 8001c34:	dc00      	bgt.n	8001c38 <__aeabi_dsub+0x384>
 8001c36:	e6a7      	b.n	8001988 <__aeabi_dsub+0xd4>
 8001c38:	003a      	movs	r2, r7
 8001c3a:	3808      	subs	r0, #8
 8001c3c:	4082      	lsls	r2, r0
 8001c3e:	429d      	cmp	r5, r3
 8001c40:	dd00      	ble.n	8001c44 <__aeabi_dsub+0x390>
 8001c42:	e08a      	b.n	8001d5a <__aeabi_dsub+0x4a6>
 8001c44:	1b5b      	subs	r3, r3, r5
 8001c46:	1c58      	adds	r0, r3, #1
 8001c48:	281f      	cmp	r0, #31
 8001c4a:	dc00      	bgt.n	8001c4e <__aeabi_dsub+0x39a>
 8001c4c:	e1d8      	b.n	8002000 <__aeabi_dsub+0x74c>
 8001c4e:	0017      	movs	r7, r2
 8001c50:	3b1f      	subs	r3, #31
 8001c52:	40df      	lsrs	r7, r3
 8001c54:	2820      	cmp	r0, #32
 8001c56:	d005      	beq.n	8001c64 <__aeabi_dsub+0x3b0>
 8001c58:	2340      	movs	r3, #64	@ 0x40
 8001c5a:	1a1b      	subs	r3, r3, r0
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	1e53      	subs	r3, r2, #1
 8001c60:	419a      	sbcs	r2, r3
 8001c62:	4317      	orrs	r7, r2
 8001c64:	2500      	movs	r5, #0
 8001c66:	2f00      	cmp	r7, #0
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dsub+0x3b8>
 8001c6a:	e0e5      	b.n	8001e38 <__aeabi_dsub+0x584>
 8001c6c:	077b      	lsls	r3, r7, #29
 8001c6e:	d000      	beq.n	8001c72 <__aeabi_dsub+0x3be>
 8001c70:	e6ab      	b.n	80019ca <__aeabi_dsub+0x116>
 8001c72:	002c      	movs	r4, r5
 8001c74:	e7c6      	b.n	8001c04 <__aeabi_dsub+0x350>
 8001c76:	08c0      	lsrs	r0, r0, #3
 8001c78:	e7c6      	b.n	8001c08 <__aeabi_dsub+0x354>
 8001c7a:	2700      	movs	r7, #0
 8001c7c:	2400      	movs	r4, #0
 8001c7e:	4dd1      	ldr	r5, [pc, #836]	@ (8001fc4 <__aeabi_dsub+0x710>)
 8001c80:	e7ac      	b.n	8001bdc <__aeabi_dsub+0x328>
 8001c82:	4fd1      	ldr	r7, [pc, #836]	@ (8001fc8 <__aeabi_dsub+0x714>)
 8001c84:	1c6b      	adds	r3, r5, #1
 8001c86:	423b      	tst	r3, r7
 8001c88:	d171      	bne.n	8001d6e <__aeabi_dsub+0x4ba>
 8001c8a:	0023      	movs	r3, r4
 8001c8c:	4303      	orrs	r3, r0
 8001c8e:	2d00      	cmp	r5, #0
 8001c90:	d000      	beq.n	8001c94 <__aeabi_dsub+0x3e0>
 8001c92:	e14e      	b.n	8001f32 <__aeabi_dsub+0x67e>
 8001c94:	4657      	mov	r7, sl
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dsub+0x3e8>
 8001c9a:	e1b5      	b.n	8002008 <__aeabi_dsub+0x754>
 8001c9c:	2f00      	cmp	r7, #0
 8001c9e:	d00d      	beq.n	8001cbc <__aeabi_dsub+0x408>
 8001ca0:	1883      	adds	r3, r0, r2
 8001ca2:	4283      	cmp	r3, r0
 8001ca4:	4180      	sbcs	r0, r0
 8001ca6:	445c      	add	r4, fp
 8001ca8:	4240      	negs	r0, r0
 8001caa:	1824      	adds	r4, r4, r0
 8001cac:	0222      	lsls	r2, r4, #8
 8001cae:	d500      	bpl.n	8001cb2 <__aeabi_dsub+0x3fe>
 8001cb0:	e1c8      	b.n	8002044 <__aeabi_dsub+0x790>
 8001cb2:	001f      	movs	r7, r3
 8001cb4:	4698      	mov	r8, r3
 8001cb6:	4327      	orrs	r7, r4
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0x408>
 8001cba:	e0bc      	b.n	8001e36 <__aeabi_dsub+0x582>
 8001cbc:	4643      	mov	r3, r8
 8001cbe:	0767      	lsls	r7, r4, #29
 8001cc0:	08db      	lsrs	r3, r3, #3
 8001cc2:	431f      	orrs	r7, r3
 8001cc4:	08e5      	lsrs	r5, r4, #3
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e04c      	b.n	8001d64 <__aeabi_dsub+0x4b0>
 8001cca:	1a83      	subs	r3, r0, r2
 8001ccc:	4698      	mov	r8, r3
 8001cce:	465b      	mov	r3, fp
 8001cd0:	4540      	cmp	r0, r8
 8001cd2:	41bf      	sbcs	r7, r7
 8001cd4:	1ae3      	subs	r3, r4, r3
 8001cd6:	427f      	negs	r7, r7
 8001cd8:	1bdb      	subs	r3, r3, r7
 8001cda:	021f      	lsls	r7, r3, #8
 8001cdc:	d47c      	bmi.n	8001dd8 <__aeabi_dsub+0x524>
 8001cde:	4647      	mov	r7, r8
 8001ce0:	431f      	orrs	r7, r3
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dsub+0x432>
 8001ce4:	e0a6      	b.n	8001e34 <__aeabi_dsub+0x580>
 8001ce6:	001c      	movs	r4, r3
 8001ce8:	4647      	mov	r7, r8
 8001cea:	e645      	b.n	8001978 <__aeabi_dsub+0xc4>
 8001cec:	4cb7      	ldr	r4, [pc, #732]	@ (8001fcc <__aeabi_dsub+0x718>)
 8001cee:	1aed      	subs	r5, r5, r3
 8001cf0:	4014      	ands	r4, r2
 8001cf2:	077b      	lsls	r3, r7, #29
 8001cf4:	d000      	beq.n	8001cf8 <__aeabi_dsub+0x444>
 8001cf6:	e780      	b.n	8001bfa <__aeabi_dsub+0x346>
 8001cf8:	e784      	b.n	8001c04 <__aeabi_dsub+0x350>
 8001cfa:	464b      	mov	r3, r9
 8001cfc:	0025      	movs	r5, r4
 8001cfe:	4305      	orrs	r5, r0
 8001d00:	d066      	beq.n	8001dd0 <__aeabi_dsub+0x51c>
 8001d02:	1e5f      	subs	r7, r3, #1
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d100      	bne.n	8001d0a <__aeabi_dsub+0x456>
 8001d08:	e0fc      	b.n	8001f04 <__aeabi_dsub+0x650>
 8001d0a:	4dae      	ldr	r5, [pc, #696]	@ (8001fc4 <__aeabi_dsub+0x710>)
 8001d0c:	42ab      	cmp	r3, r5
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0x45e>
 8001d10:	e15e      	b.n	8001fd0 <__aeabi_dsub+0x71c>
 8001d12:	4666      	mov	r6, ip
 8001d14:	2f38      	cmp	r7, #56	@ 0x38
 8001d16:	dc00      	bgt.n	8001d1a <__aeabi_dsub+0x466>
 8001d18:	e0b4      	b.n	8001e84 <__aeabi_dsub+0x5d0>
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	1a17      	subs	r7, r2, r0
 8001d1e:	42ba      	cmp	r2, r7
 8001d20:	4192      	sbcs	r2, r2
 8001d22:	465b      	mov	r3, fp
 8001d24:	4252      	negs	r2, r2
 8001d26:	464d      	mov	r5, r9
 8001d28:	1a9c      	subs	r4, r3, r2
 8001d2a:	e620      	b.n	800196e <__aeabi_dsub+0xba>
 8001d2c:	0767      	lsls	r7, r4, #29
 8001d2e:	08c0      	lsrs	r0, r0, #3
 8001d30:	4307      	orrs	r7, r0
 8001d32:	08e5      	lsrs	r5, r4, #3
 8001d34:	e6ba      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8001d36:	001f      	movs	r7, r3
 8001d38:	4659      	mov	r1, fp
 8001d3a:	3f20      	subs	r7, #32
 8001d3c:	40f9      	lsrs	r1, r7
 8001d3e:	000f      	movs	r7, r1
 8001d40:	2b20      	cmp	r3, #32
 8001d42:	d005      	beq.n	8001d50 <__aeabi_dsub+0x49c>
 8001d44:	2140      	movs	r1, #64	@ 0x40
 8001d46:	1acb      	subs	r3, r1, r3
 8001d48:	4659      	mov	r1, fp
 8001d4a:	4099      	lsls	r1, r3
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	4692      	mov	sl, r2
 8001d50:	4653      	mov	r3, sl
 8001d52:	1e5a      	subs	r2, r3, #1
 8001d54:	4193      	sbcs	r3, r2
 8001d56:	431f      	orrs	r7, r3
 8001d58:	e604      	b.n	8001964 <__aeabi_dsub+0xb0>
 8001d5a:	1aeb      	subs	r3, r5, r3
 8001d5c:	4d9b      	ldr	r5, [pc, #620]	@ (8001fcc <__aeabi_dsub+0x718>)
 8001d5e:	4015      	ands	r5, r2
 8001d60:	076f      	lsls	r7, r5, #29
 8001d62:	08ed      	lsrs	r5, r5, #3
 8001d64:	032c      	lsls	r4, r5, #12
 8001d66:	055d      	lsls	r5, r3, #21
 8001d68:	0b24      	lsrs	r4, r4, #12
 8001d6a:	0d6d      	lsrs	r5, r5, #21
 8001d6c:	e736      	b.n	8001bdc <__aeabi_dsub+0x328>
 8001d6e:	4d95      	ldr	r5, [pc, #596]	@ (8001fc4 <__aeabi_dsub+0x710>)
 8001d70:	42ab      	cmp	r3, r5
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x4c2>
 8001d74:	e0d6      	b.n	8001f24 <__aeabi_dsub+0x670>
 8001d76:	1882      	adds	r2, r0, r2
 8001d78:	0021      	movs	r1, r4
 8001d7a:	4282      	cmp	r2, r0
 8001d7c:	4180      	sbcs	r0, r0
 8001d7e:	4459      	add	r1, fp
 8001d80:	4240      	negs	r0, r0
 8001d82:	1808      	adds	r0, r1, r0
 8001d84:	07c7      	lsls	r7, r0, #31
 8001d86:	0852      	lsrs	r2, r2, #1
 8001d88:	4317      	orrs	r7, r2
 8001d8a:	0844      	lsrs	r4, r0, #1
 8001d8c:	0752      	lsls	r2, r2, #29
 8001d8e:	d400      	bmi.n	8001d92 <__aeabi_dsub+0x4de>
 8001d90:	e185      	b.n	800209e <__aeabi_dsub+0x7ea>
 8001d92:	220f      	movs	r2, #15
 8001d94:	001d      	movs	r5, r3
 8001d96:	403a      	ands	r2, r7
 8001d98:	2a04      	cmp	r2, #4
 8001d9a:	d000      	beq.n	8001d9e <__aeabi_dsub+0x4ea>
 8001d9c:	e61a      	b.n	80019d4 <__aeabi_dsub+0x120>
 8001d9e:	08ff      	lsrs	r7, r7, #3
 8001da0:	0764      	lsls	r4, r4, #29
 8001da2:	4327      	orrs	r7, r4
 8001da4:	0905      	lsrs	r5, r0, #4
 8001da6:	e7dd      	b.n	8001d64 <__aeabi_dsub+0x4b0>
 8001da8:	465b      	mov	r3, fp
 8001daa:	08d2      	lsrs	r2, r2, #3
 8001dac:	075f      	lsls	r7, r3, #29
 8001dae:	4317      	orrs	r7, r2
 8001db0:	08dd      	lsrs	r5, r3, #3
 8001db2:	e67b      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8001db4:	2700      	movs	r7, #0
 8001db6:	2400      	movs	r4, #0
 8001db8:	e710      	b.n	8001bdc <__aeabi_dsub+0x328>
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d000      	beq.n	8001dc0 <__aeabi_dsub+0x50c>
 8001dbe:	e0d6      	b.n	8001f6e <__aeabi_dsub+0x6ba>
 8001dc0:	2900      	cmp	r1, #0
 8001dc2:	d000      	beq.n	8001dc6 <__aeabi_dsub+0x512>
 8001dc4:	e12f      	b.n	8002026 <__aeabi_dsub+0x772>
 8001dc6:	2480      	movs	r4, #128	@ 0x80
 8001dc8:	2600      	movs	r6, #0
 8001dca:	4d7e      	ldr	r5, [pc, #504]	@ (8001fc4 <__aeabi_dsub+0x710>)
 8001dcc:	0324      	lsls	r4, r4, #12
 8001dce:	e705      	b.n	8001bdc <__aeabi_dsub+0x328>
 8001dd0:	4666      	mov	r6, ip
 8001dd2:	465c      	mov	r4, fp
 8001dd4:	08d0      	lsrs	r0, r2, #3
 8001dd6:	e717      	b.n	8001c08 <__aeabi_dsub+0x354>
 8001dd8:	465b      	mov	r3, fp
 8001dda:	1a17      	subs	r7, r2, r0
 8001ddc:	42ba      	cmp	r2, r7
 8001dde:	4192      	sbcs	r2, r2
 8001de0:	1b1c      	subs	r4, r3, r4
 8001de2:	2601      	movs	r6, #1
 8001de4:	4663      	mov	r3, ip
 8001de6:	4252      	negs	r2, r2
 8001de8:	1aa4      	subs	r4, r4, r2
 8001dea:	401e      	ands	r6, r3
 8001dec:	e5c4      	b.n	8001978 <__aeabi_dsub+0xc4>
 8001dee:	1883      	adds	r3, r0, r2
 8001df0:	4283      	cmp	r3, r0
 8001df2:	4180      	sbcs	r0, r0
 8001df4:	445c      	add	r4, fp
 8001df6:	4240      	negs	r0, r0
 8001df8:	1825      	adds	r5, r4, r0
 8001dfa:	022a      	lsls	r2, r5, #8
 8001dfc:	d400      	bmi.n	8001e00 <__aeabi_dsub+0x54c>
 8001dfe:	e0da      	b.n	8001fb6 <__aeabi_dsub+0x702>
 8001e00:	4a72      	ldr	r2, [pc, #456]	@ (8001fcc <__aeabi_dsub+0x718>)
 8001e02:	085b      	lsrs	r3, r3, #1
 8001e04:	4015      	ands	r5, r2
 8001e06:	07ea      	lsls	r2, r5, #31
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	0869      	lsrs	r1, r5, #1
 8001e0c:	075b      	lsls	r3, r3, #29
 8001e0e:	d400      	bmi.n	8001e12 <__aeabi_dsub+0x55e>
 8001e10:	e14a      	b.n	80020a8 <__aeabi_dsub+0x7f4>
 8001e12:	230f      	movs	r3, #15
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d100      	bne.n	8001e1c <__aeabi_dsub+0x568>
 8001e1a:	e0fc      	b.n	8002016 <__aeabi_dsub+0x762>
 8001e1c:	1d17      	adds	r7, r2, #4
 8001e1e:	4297      	cmp	r7, r2
 8001e20:	41a4      	sbcs	r4, r4
 8001e22:	4264      	negs	r4, r4
 8001e24:	2502      	movs	r5, #2
 8001e26:	1864      	adds	r4, r4, r1
 8001e28:	e6ec      	b.n	8001c04 <__aeabi_dsub+0x350>
 8001e2a:	4647      	mov	r7, r8
 8001e2c:	001c      	movs	r4, r3
 8001e2e:	431f      	orrs	r7, r3
 8001e30:	d000      	beq.n	8001e34 <__aeabi_dsub+0x580>
 8001e32:	e743      	b.n	8001cbc <__aeabi_dsub+0x408>
 8001e34:	2600      	movs	r6, #0
 8001e36:	2500      	movs	r5, #0
 8001e38:	2400      	movs	r4, #0
 8001e3a:	e6cf      	b.n	8001bdc <__aeabi_dsub+0x328>
 8001e3c:	08c0      	lsrs	r0, r0, #3
 8001e3e:	0767      	lsls	r7, r4, #29
 8001e40:	4307      	orrs	r7, r0
 8001e42:	08e5      	lsrs	r5, r4, #3
 8001e44:	e632      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8001e46:	1a87      	subs	r7, r0, r2
 8001e48:	465b      	mov	r3, fp
 8001e4a:	42b8      	cmp	r0, r7
 8001e4c:	4180      	sbcs	r0, r0
 8001e4e:	1ae4      	subs	r4, r4, r3
 8001e50:	4240      	negs	r0, r0
 8001e52:	1a24      	subs	r4, r4, r0
 8001e54:	0223      	lsls	r3, r4, #8
 8001e56:	d428      	bmi.n	8001eaa <__aeabi_dsub+0x5f6>
 8001e58:	0763      	lsls	r3, r4, #29
 8001e5a:	08ff      	lsrs	r7, r7, #3
 8001e5c:	431f      	orrs	r7, r3
 8001e5e:	08e5      	lsrs	r5, r4, #3
 8001e60:	2301      	movs	r3, #1
 8001e62:	e77f      	b.n	8001d64 <__aeabi_dsub+0x4b0>
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x5b6>
 8001e68:	e673      	b.n	8001b52 <__aeabi_dsub+0x29e>
 8001e6a:	464b      	mov	r3, r9
 8001e6c:	1b5f      	subs	r7, r3, r5
 8001e6e:	003b      	movs	r3, r7
 8001e70:	2d00      	cmp	r5, #0
 8001e72:	d100      	bne.n	8001e76 <__aeabi_dsub+0x5c2>
 8001e74:	e742      	b.n	8001cfc <__aeabi_dsub+0x448>
 8001e76:	2f38      	cmp	r7, #56	@ 0x38
 8001e78:	dd00      	ble.n	8001e7c <__aeabi_dsub+0x5c8>
 8001e7a:	e0ec      	b.n	8002056 <__aeabi_dsub+0x7a2>
 8001e7c:	2380      	movs	r3, #128	@ 0x80
 8001e7e:	000e      	movs	r6, r1
 8001e80:	041b      	lsls	r3, r3, #16
 8001e82:	431c      	orrs	r4, r3
 8001e84:	2f1f      	cmp	r7, #31
 8001e86:	dc25      	bgt.n	8001ed4 <__aeabi_dsub+0x620>
 8001e88:	2520      	movs	r5, #32
 8001e8a:	0023      	movs	r3, r4
 8001e8c:	1bed      	subs	r5, r5, r7
 8001e8e:	0001      	movs	r1, r0
 8001e90:	40a8      	lsls	r0, r5
 8001e92:	40ab      	lsls	r3, r5
 8001e94:	40f9      	lsrs	r1, r7
 8001e96:	1e45      	subs	r5, r0, #1
 8001e98:	41a8      	sbcs	r0, r5
 8001e9a:	430b      	orrs	r3, r1
 8001e9c:	40fc      	lsrs	r4, r7
 8001e9e:	4318      	orrs	r0, r3
 8001ea0:	465b      	mov	r3, fp
 8001ea2:	1b1b      	subs	r3, r3, r4
 8001ea4:	469b      	mov	fp, r3
 8001ea6:	e739      	b.n	8001d1c <__aeabi_dsub+0x468>
 8001ea8:	4666      	mov	r6, ip
 8001eaa:	2501      	movs	r5, #1
 8001eac:	e562      	b.n	8001974 <__aeabi_dsub+0xc0>
 8001eae:	001f      	movs	r7, r3
 8001eb0:	4659      	mov	r1, fp
 8001eb2:	3f20      	subs	r7, #32
 8001eb4:	40f9      	lsrs	r1, r7
 8001eb6:	468c      	mov	ip, r1
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d005      	beq.n	8001ec8 <__aeabi_dsub+0x614>
 8001ebc:	2740      	movs	r7, #64	@ 0x40
 8001ebe:	4659      	mov	r1, fp
 8001ec0:	1afb      	subs	r3, r7, r3
 8001ec2:	4099      	lsls	r1, r3
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	4692      	mov	sl, r2
 8001ec8:	4657      	mov	r7, sl
 8001eca:	1e7b      	subs	r3, r7, #1
 8001ecc:	419f      	sbcs	r7, r3
 8001ece:	4663      	mov	r3, ip
 8001ed0:	431f      	orrs	r7, r3
 8001ed2:	e5c1      	b.n	8001a58 <__aeabi_dsub+0x1a4>
 8001ed4:	003b      	movs	r3, r7
 8001ed6:	0025      	movs	r5, r4
 8001ed8:	3b20      	subs	r3, #32
 8001eda:	40dd      	lsrs	r5, r3
 8001edc:	2f20      	cmp	r7, #32
 8001ede:	d004      	beq.n	8001eea <__aeabi_dsub+0x636>
 8001ee0:	2340      	movs	r3, #64	@ 0x40
 8001ee2:	1bdb      	subs	r3, r3, r7
 8001ee4:	409c      	lsls	r4, r3
 8001ee6:	4320      	orrs	r0, r4
 8001ee8:	4680      	mov	r8, r0
 8001eea:	4640      	mov	r0, r8
 8001eec:	1e43      	subs	r3, r0, #1
 8001eee:	4198      	sbcs	r0, r3
 8001ef0:	4328      	orrs	r0, r5
 8001ef2:	e713      	b.n	8001d1c <__aeabi_dsub+0x468>
 8001ef4:	2900      	cmp	r1, #0
 8001ef6:	d09d      	beq.n	8001e34 <__aeabi_dsub+0x580>
 8001ef8:	2601      	movs	r6, #1
 8001efa:	4663      	mov	r3, ip
 8001efc:	465c      	mov	r4, fp
 8001efe:	4690      	mov	r8, r2
 8001f00:	401e      	ands	r6, r3
 8001f02:	e6db      	b.n	8001cbc <__aeabi_dsub+0x408>
 8001f04:	1a17      	subs	r7, r2, r0
 8001f06:	465b      	mov	r3, fp
 8001f08:	42ba      	cmp	r2, r7
 8001f0a:	4192      	sbcs	r2, r2
 8001f0c:	1b1c      	subs	r4, r3, r4
 8001f0e:	4252      	negs	r2, r2
 8001f10:	1aa4      	subs	r4, r4, r2
 8001f12:	0223      	lsls	r3, r4, #8
 8001f14:	d4c8      	bmi.n	8001ea8 <__aeabi_dsub+0x5f4>
 8001f16:	0763      	lsls	r3, r4, #29
 8001f18:	08ff      	lsrs	r7, r7, #3
 8001f1a:	431f      	orrs	r7, r3
 8001f1c:	4666      	mov	r6, ip
 8001f1e:	2301      	movs	r3, #1
 8001f20:	08e5      	lsrs	r5, r4, #3
 8001f22:	e71f      	b.n	8001d64 <__aeabi_dsub+0x4b0>
 8001f24:	001d      	movs	r5, r3
 8001f26:	2400      	movs	r4, #0
 8001f28:	2700      	movs	r7, #0
 8001f2a:	e657      	b.n	8001bdc <__aeabi_dsub+0x328>
 8001f2c:	465c      	mov	r4, fp
 8001f2e:	08d0      	lsrs	r0, r2, #3
 8001f30:	e66a      	b.n	8001c08 <__aeabi_dsub+0x354>
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d100      	bne.n	8001f38 <__aeabi_dsub+0x684>
 8001f36:	e737      	b.n	8001da8 <__aeabi_dsub+0x4f4>
 8001f38:	4653      	mov	r3, sl
 8001f3a:	08c0      	lsrs	r0, r0, #3
 8001f3c:	0767      	lsls	r7, r4, #29
 8001f3e:	4307      	orrs	r7, r0
 8001f40:	08e5      	lsrs	r5, r4, #3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d100      	bne.n	8001f48 <__aeabi_dsub+0x694>
 8001f46:	e5b1      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	031b      	lsls	r3, r3, #12
 8001f4c:	421d      	tst	r5, r3
 8001f4e:	d008      	beq.n	8001f62 <__aeabi_dsub+0x6ae>
 8001f50:	4659      	mov	r1, fp
 8001f52:	08c8      	lsrs	r0, r1, #3
 8001f54:	4218      	tst	r0, r3
 8001f56:	d104      	bne.n	8001f62 <__aeabi_dsub+0x6ae>
 8001f58:	08d2      	lsrs	r2, r2, #3
 8001f5a:	0749      	lsls	r1, r1, #29
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	0017      	movs	r7, r2
 8001f60:	0005      	movs	r5, r0
 8001f62:	0f7b      	lsrs	r3, r7, #29
 8001f64:	00ff      	lsls	r7, r7, #3
 8001f66:	08ff      	lsrs	r7, r7, #3
 8001f68:	075b      	lsls	r3, r3, #29
 8001f6a:	431f      	orrs	r7, r3
 8001f6c:	e59e      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8001f6e:	08c0      	lsrs	r0, r0, #3
 8001f70:	0763      	lsls	r3, r4, #29
 8001f72:	4318      	orrs	r0, r3
 8001f74:	08e5      	lsrs	r5, r4, #3
 8001f76:	2900      	cmp	r1, #0
 8001f78:	d053      	beq.n	8002022 <__aeabi_dsub+0x76e>
 8001f7a:	2380      	movs	r3, #128	@ 0x80
 8001f7c:	031b      	lsls	r3, r3, #12
 8001f7e:	421d      	tst	r5, r3
 8001f80:	d00a      	beq.n	8001f98 <__aeabi_dsub+0x6e4>
 8001f82:	4659      	mov	r1, fp
 8001f84:	08cc      	lsrs	r4, r1, #3
 8001f86:	421c      	tst	r4, r3
 8001f88:	d106      	bne.n	8001f98 <__aeabi_dsub+0x6e4>
 8001f8a:	2601      	movs	r6, #1
 8001f8c:	4663      	mov	r3, ip
 8001f8e:	0025      	movs	r5, r4
 8001f90:	08d0      	lsrs	r0, r2, #3
 8001f92:	0749      	lsls	r1, r1, #29
 8001f94:	4308      	orrs	r0, r1
 8001f96:	401e      	ands	r6, r3
 8001f98:	0f47      	lsrs	r7, r0, #29
 8001f9a:	00c0      	lsls	r0, r0, #3
 8001f9c:	08c0      	lsrs	r0, r0, #3
 8001f9e:	077f      	lsls	r7, r7, #29
 8001fa0:	4307      	orrs	r7, r0
 8001fa2:	e583      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8001fa4:	1883      	adds	r3, r0, r2
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	4192      	sbcs	r2, r2
 8001faa:	445c      	add	r4, fp
 8001fac:	4252      	negs	r2, r2
 8001fae:	18a5      	adds	r5, r4, r2
 8001fb0:	022a      	lsls	r2, r5, #8
 8001fb2:	d500      	bpl.n	8001fb6 <__aeabi_dsub+0x702>
 8001fb4:	e724      	b.n	8001e00 <__aeabi_dsub+0x54c>
 8001fb6:	076f      	lsls	r7, r5, #29
 8001fb8:	08db      	lsrs	r3, r3, #3
 8001fba:	431f      	orrs	r7, r3
 8001fbc:	08ed      	lsrs	r5, r5, #3
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e6d0      	b.n	8001d64 <__aeabi_dsub+0x4b0>
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	000007ff 	.word	0x000007ff
 8001fc8:	000007fe 	.word	0x000007fe
 8001fcc:	ff7fffff 	.word	0xff7fffff
 8001fd0:	465b      	mov	r3, fp
 8001fd2:	08d2      	lsrs	r2, r2, #3
 8001fd4:	075f      	lsls	r7, r3, #29
 8001fd6:	4666      	mov	r6, ip
 8001fd8:	4317      	orrs	r7, r2
 8001fda:	08dd      	lsrs	r5, r3, #3
 8001fdc:	e566      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8001fde:	0025      	movs	r5, r4
 8001fe0:	3b20      	subs	r3, #32
 8001fe2:	40dd      	lsrs	r5, r3
 8001fe4:	4663      	mov	r3, ip
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	d005      	beq.n	8001ff6 <__aeabi_dsub+0x742>
 8001fea:	2340      	movs	r3, #64	@ 0x40
 8001fec:	4661      	mov	r1, ip
 8001fee:	1a5b      	subs	r3, r3, r1
 8001ff0:	409c      	lsls	r4, r3
 8001ff2:	4320      	orrs	r0, r4
 8001ff4:	4680      	mov	r8, r0
 8001ff6:	4647      	mov	r7, r8
 8001ff8:	1e7b      	subs	r3, r7, #1
 8001ffa:	419f      	sbcs	r7, r3
 8001ffc:	432f      	orrs	r7, r5
 8001ffe:	e5a0      	b.n	8001b42 <__aeabi_dsub+0x28e>
 8002000:	2120      	movs	r1, #32
 8002002:	2700      	movs	r7, #0
 8002004:	1a09      	subs	r1, r1, r0
 8002006:	e4d2      	b.n	80019ae <__aeabi_dsub+0xfa>
 8002008:	2f00      	cmp	r7, #0
 800200a:	d100      	bne.n	800200e <__aeabi_dsub+0x75a>
 800200c:	e713      	b.n	8001e36 <__aeabi_dsub+0x582>
 800200e:	465c      	mov	r4, fp
 8002010:	0017      	movs	r7, r2
 8002012:	2500      	movs	r5, #0
 8002014:	e5f6      	b.n	8001c04 <__aeabi_dsub+0x350>
 8002016:	08d7      	lsrs	r7, r2, #3
 8002018:	0749      	lsls	r1, r1, #29
 800201a:	2302      	movs	r3, #2
 800201c:	430f      	orrs	r7, r1
 800201e:	092d      	lsrs	r5, r5, #4
 8002020:	e6a0      	b.n	8001d64 <__aeabi_dsub+0x4b0>
 8002022:	0007      	movs	r7, r0
 8002024:	e542      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8002026:	465b      	mov	r3, fp
 8002028:	2601      	movs	r6, #1
 800202a:	075f      	lsls	r7, r3, #29
 800202c:	08dd      	lsrs	r5, r3, #3
 800202e:	4663      	mov	r3, ip
 8002030:	08d2      	lsrs	r2, r2, #3
 8002032:	4317      	orrs	r7, r2
 8002034:	401e      	ands	r6, r3
 8002036:	e539      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8002038:	465b      	mov	r3, fp
 800203a:	08d2      	lsrs	r2, r2, #3
 800203c:	075f      	lsls	r7, r3, #29
 800203e:	4317      	orrs	r7, r2
 8002040:	08dd      	lsrs	r5, r3, #3
 8002042:	e533      	b.n	8001aac <__aeabi_dsub+0x1f8>
 8002044:	4a1e      	ldr	r2, [pc, #120]	@ (80020c0 <__aeabi_dsub+0x80c>)
 8002046:	08db      	lsrs	r3, r3, #3
 8002048:	4022      	ands	r2, r4
 800204a:	0757      	lsls	r7, r2, #29
 800204c:	0252      	lsls	r2, r2, #9
 800204e:	2501      	movs	r5, #1
 8002050:	431f      	orrs	r7, r3
 8002052:	0b14      	lsrs	r4, r2, #12
 8002054:	e5c2      	b.n	8001bdc <__aeabi_dsub+0x328>
 8002056:	000e      	movs	r6, r1
 8002058:	2001      	movs	r0, #1
 800205a:	e65f      	b.n	8001d1c <__aeabi_dsub+0x468>
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00d      	beq.n	800207c <__aeabi_dsub+0x7c8>
 8002060:	464b      	mov	r3, r9
 8002062:	1b5b      	subs	r3, r3, r5
 8002064:	469c      	mov	ip, r3
 8002066:	2d00      	cmp	r5, #0
 8002068:	d100      	bne.n	800206c <__aeabi_dsub+0x7b8>
 800206a:	e548      	b.n	8001afe <__aeabi_dsub+0x24a>
 800206c:	2701      	movs	r7, #1
 800206e:	2b38      	cmp	r3, #56	@ 0x38
 8002070:	dd00      	ble.n	8002074 <__aeabi_dsub+0x7c0>
 8002072:	e566      	b.n	8001b42 <__aeabi_dsub+0x28e>
 8002074:	2380      	movs	r3, #128	@ 0x80
 8002076:	041b      	lsls	r3, r3, #16
 8002078:	431c      	orrs	r4, r3
 800207a:	e550      	b.n	8001b1e <__aeabi_dsub+0x26a>
 800207c:	1c6b      	adds	r3, r5, #1
 800207e:	4d11      	ldr	r5, [pc, #68]	@ (80020c4 <__aeabi_dsub+0x810>)
 8002080:	422b      	tst	r3, r5
 8002082:	d000      	beq.n	8002086 <__aeabi_dsub+0x7d2>
 8002084:	e673      	b.n	8001d6e <__aeabi_dsub+0x4ba>
 8002086:	4659      	mov	r1, fp
 8002088:	0023      	movs	r3, r4
 800208a:	4311      	orrs	r1, r2
 800208c:	468a      	mov	sl, r1
 800208e:	4303      	orrs	r3, r0
 8002090:	e600      	b.n	8001c94 <__aeabi_dsub+0x3e0>
 8002092:	0767      	lsls	r7, r4, #29
 8002094:	08c0      	lsrs	r0, r0, #3
 8002096:	2300      	movs	r3, #0
 8002098:	4307      	orrs	r7, r0
 800209a:	08e5      	lsrs	r5, r4, #3
 800209c:	e662      	b.n	8001d64 <__aeabi_dsub+0x4b0>
 800209e:	0764      	lsls	r4, r4, #29
 80020a0:	08ff      	lsrs	r7, r7, #3
 80020a2:	4327      	orrs	r7, r4
 80020a4:	0905      	lsrs	r5, r0, #4
 80020a6:	e65d      	b.n	8001d64 <__aeabi_dsub+0x4b0>
 80020a8:	08d2      	lsrs	r2, r2, #3
 80020aa:	0749      	lsls	r1, r1, #29
 80020ac:	4311      	orrs	r1, r2
 80020ae:	000f      	movs	r7, r1
 80020b0:	2302      	movs	r3, #2
 80020b2:	092d      	lsrs	r5, r5, #4
 80020b4:	e656      	b.n	8001d64 <__aeabi_dsub+0x4b0>
 80020b6:	0007      	movs	r7, r0
 80020b8:	e5a4      	b.n	8001c04 <__aeabi_dsub+0x350>
 80020ba:	0038      	movs	r0, r7
 80020bc:	e48f      	b.n	80019de <__aeabi_dsub+0x12a>
 80020be:	46c0      	nop			@ (mov r8, r8)
 80020c0:	ff7fffff 	.word	0xff7fffff
 80020c4:	000007fe 	.word	0x000007fe

080020c8 <__aeabi_dcmpun>:
 80020c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ca:	46c6      	mov	lr, r8
 80020cc:	031e      	lsls	r6, r3, #12
 80020ce:	0b36      	lsrs	r6, r6, #12
 80020d0:	46b0      	mov	r8, r6
 80020d2:	4e0d      	ldr	r6, [pc, #52]	@ (8002108 <__aeabi_dcmpun+0x40>)
 80020d4:	030c      	lsls	r4, r1, #12
 80020d6:	004d      	lsls	r5, r1, #1
 80020d8:	005f      	lsls	r7, r3, #1
 80020da:	b500      	push	{lr}
 80020dc:	0b24      	lsrs	r4, r4, #12
 80020de:	0d6d      	lsrs	r5, r5, #21
 80020e0:	0d7f      	lsrs	r7, r7, #21
 80020e2:	42b5      	cmp	r5, r6
 80020e4:	d00b      	beq.n	80020fe <__aeabi_dcmpun+0x36>
 80020e6:	4908      	ldr	r1, [pc, #32]	@ (8002108 <__aeabi_dcmpun+0x40>)
 80020e8:	2000      	movs	r0, #0
 80020ea:	428f      	cmp	r7, r1
 80020ec:	d104      	bne.n	80020f8 <__aeabi_dcmpun+0x30>
 80020ee:	4646      	mov	r6, r8
 80020f0:	4316      	orrs	r6, r2
 80020f2:	0030      	movs	r0, r6
 80020f4:	1e43      	subs	r3, r0, #1
 80020f6:	4198      	sbcs	r0, r3
 80020f8:	bc80      	pop	{r7}
 80020fa:	46b8      	mov	r8, r7
 80020fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020fe:	4304      	orrs	r4, r0
 8002100:	2001      	movs	r0, #1
 8002102:	2c00      	cmp	r4, #0
 8002104:	d1f8      	bne.n	80020f8 <__aeabi_dcmpun+0x30>
 8002106:	e7ee      	b.n	80020e6 <__aeabi_dcmpun+0x1e>
 8002108:	000007ff 	.word	0x000007ff

0800210c <__aeabi_d2iz>:
 800210c:	000b      	movs	r3, r1
 800210e:	0002      	movs	r2, r0
 8002110:	b570      	push	{r4, r5, r6, lr}
 8002112:	4d16      	ldr	r5, [pc, #88]	@ (800216c <__aeabi_d2iz+0x60>)
 8002114:	030c      	lsls	r4, r1, #12
 8002116:	b082      	sub	sp, #8
 8002118:	0049      	lsls	r1, r1, #1
 800211a:	2000      	movs	r0, #0
 800211c:	9200      	str	r2, [sp, #0]
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	0b24      	lsrs	r4, r4, #12
 8002122:	0d49      	lsrs	r1, r1, #21
 8002124:	0fde      	lsrs	r6, r3, #31
 8002126:	42a9      	cmp	r1, r5
 8002128:	dd04      	ble.n	8002134 <__aeabi_d2iz+0x28>
 800212a:	4811      	ldr	r0, [pc, #68]	@ (8002170 <__aeabi_d2iz+0x64>)
 800212c:	4281      	cmp	r1, r0
 800212e:	dd03      	ble.n	8002138 <__aeabi_d2iz+0x2c>
 8002130:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <__aeabi_d2iz+0x68>)
 8002132:	18f0      	adds	r0, r6, r3
 8002134:	b002      	add	sp, #8
 8002136:	bd70      	pop	{r4, r5, r6, pc}
 8002138:	2080      	movs	r0, #128	@ 0x80
 800213a:	0340      	lsls	r0, r0, #13
 800213c:	4320      	orrs	r0, r4
 800213e:	4c0e      	ldr	r4, [pc, #56]	@ (8002178 <__aeabi_d2iz+0x6c>)
 8002140:	1a64      	subs	r4, r4, r1
 8002142:	2c1f      	cmp	r4, #31
 8002144:	dd08      	ble.n	8002158 <__aeabi_d2iz+0x4c>
 8002146:	4b0d      	ldr	r3, [pc, #52]	@ (800217c <__aeabi_d2iz+0x70>)
 8002148:	1a5b      	subs	r3, r3, r1
 800214a:	40d8      	lsrs	r0, r3
 800214c:	0003      	movs	r3, r0
 800214e:	4258      	negs	r0, r3
 8002150:	2e00      	cmp	r6, #0
 8002152:	d1ef      	bne.n	8002134 <__aeabi_d2iz+0x28>
 8002154:	0018      	movs	r0, r3
 8002156:	e7ed      	b.n	8002134 <__aeabi_d2iz+0x28>
 8002158:	4b09      	ldr	r3, [pc, #36]	@ (8002180 <__aeabi_d2iz+0x74>)
 800215a:	9a00      	ldr	r2, [sp, #0]
 800215c:	469c      	mov	ip, r3
 800215e:	0003      	movs	r3, r0
 8002160:	4461      	add	r1, ip
 8002162:	408b      	lsls	r3, r1
 8002164:	40e2      	lsrs	r2, r4
 8002166:	4313      	orrs	r3, r2
 8002168:	e7f1      	b.n	800214e <__aeabi_d2iz+0x42>
 800216a:	46c0      	nop			@ (mov r8, r8)
 800216c:	000003fe 	.word	0x000003fe
 8002170:	0000041d 	.word	0x0000041d
 8002174:	7fffffff 	.word	0x7fffffff
 8002178:	00000433 	.word	0x00000433
 800217c:	00000413 	.word	0x00000413
 8002180:	fffffbed 	.word	0xfffffbed

08002184 <__aeabi_i2d>:
 8002184:	b570      	push	{r4, r5, r6, lr}
 8002186:	2800      	cmp	r0, #0
 8002188:	d016      	beq.n	80021b8 <__aeabi_i2d+0x34>
 800218a:	17c3      	asrs	r3, r0, #31
 800218c:	18c5      	adds	r5, r0, r3
 800218e:	405d      	eors	r5, r3
 8002190:	0fc4      	lsrs	r4, r0, #31
 8002192:	0028      	movs	r0, r5
 8002194:	f000 f824 	bl	80021e0 <__clzsi2>
 8002198:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <__aeabi_i2d+0x58>)
 800219a:	1a1b      	subs	r3, r3, r0
 800219c:	055b      	lsls	r3, r3, #21
 800219e:	0d5b      	lsrs	r3, r3, #21
 80021a0:	280a      	cmp	r0, #10
 80021a2:	dc14      	bgt.n	80021ce <__aeabi_i2d+0x4a>
 80021a4:	0002      	movs	r2, r0
 80021a6:	002e      	movs	r6, r5
 80021a8:	3215      	adds	r2, #21
 80021aa:	4096      	lsls	r6, r2
 80021ac:	220b      	movs	r2, #11
 80021ae:	1a12      	subs	r2, r2, r0
 80021b0:	40d5      	lsrs	r5, r2
 80021b2:	032d      	lsls	r5, r5, #12
 80021b4:	0b2d      	lsrs	r5, r5, #12
 80021b6:	e003      	b.n	80021c0 <__aeabi_i2d+0x3c>
 80021b8:	2400      	movs	r4, #0
 80021ba:	2300      	movs	r3, #0
 80021bc:	2500      	movs	r5, #0
 80021be:	2600      	movs	r6, #0
 80021c0:	051b      	lsls	r3, r3, #20
 80021c2:	432b      	orrs	r3, r5
 80021c4:	07e4      	lsls	r4, r4, #31
 80021c6:	4323      	orrs	r3, r4
 80021c8:	0030      	movs	r0, r6
 80021ca:	0019      	movs	r1, r3
 80021cc:	bd70      	pop	{r4, r5, r6, pc}
 80021ce:	380b      	subs	r0, #11
 80021d0:	4085      	lsls	r5, r0
 80021d2:	032d      	lsls	r5, r5, #12
 80021d4:	2600      	movs	r6, #0
 80021d6:	0b2d      	lsrs	r5, r5, #12
 80021d8:	e7f2      	b.n	80021c0 <__aeabi_i2d+0x3c>
 80021da:	46c0      	nop			@ (mov r8, r8)
 80021dc:	0000041e 	.word	0x0000041e

080021e0 <__clzsi2>:
 80021e0:	211c      	movs	r1, #28
 80021e2:	2301      	movs	r3, #1
 80021e4:	041b      	lsls	r3, r3, #16
 80021e6:	4298      	cmp	r0, r3
 80021e8:	d301      	bcc.n	80021ee <__clzsi2+0xe>
 80021ea:	0c00      	lsrs	r0, r0, #16
 80021ec:	3910      	subs	r1, #16
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	4298      	cmp	r0, r3
 80021f2:	d301      	bcc.n	80021f8 <__clzsi2+0x18>
 80021f4:	0a00      	lsrs	r0, r0, #8
 80021f6:	3908      	subs	r1, #8
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	4298      	cmp	r0, r3
 80021fc:	d301      	bcc.n	8002202 <__clzsi2+0x22>
 80021fe:	0900      	lsrs	r0, r0, #4
 8002200:	3904      	subs	r1, #4
 8002202:	a202      	add	r2, pc, #8	@ (adr r2, 800220c <__clzsi2+0x2c>)
 8002204:	5c10      	ldrb	r0, [r2, r0]
 8002206:	1840      	adds	r0, r0, r1
 8002208:	4770      	bx	lr
 800220a:	46c0      	nop			@ (mov r8, r8)
 800220c:	02020304 	.word	0x02020304
 8002210:	01010101 	.word	0x01010101
	...

0800221c <LTC6813_init_reg_limits>:
#include "LTC681x_HAL.h"

/* Helper function to initialize register limits. */
void LTC6813_init_reg_limits(uint8_t total_ic, //Number of ICs in the system
		cell_asic *ic // A two dimensional array that will store the data
		) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	0002      	movs	r2, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	1dfb      	adds	r3, r7, #7
 8002228:	701a      	strb	r2, [r3, #0]
	uint8_t cic = 0;
 800222a:	210f      	movs	r1, #15
 800222c:	187b      	adds	r3, r7, r1
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
	for (cic = 0; cic < total_ic; cic++) {
 8002232:	187b      	adds	r3, r7, r1
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
 8002238:	e03b      	b.n	80022b2 <LTC6813_init_reg_limits+0x96>
		ic[cic].ic_reg.cell_channels = 18;
 800223a:	200f      	movs	r0, #15
 800223c:	183b      	adds	r3, r7, r0
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	22e8      	movs	r2, #232	@ 0xe8
 8002242:	4353      	muls	r3, r2
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	18d3      	adds	r3, r2, r3
 8002248:	22dc      	movs	r2, #220	@ 0xdc
 800224a:	2112      	movs	r1, #18
 800224c:	5499      	strb	r1, [r3, r2]
		ic[cic].ic_reg.stat_channels = 4;
 800224e:	183b      	adds	r3, r7, r0
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	22e8      	movs	r2, #232	@ 0xe8
 8002254:	4353      	muls	r3, r2
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	18d3      	adds	r3, r2, r3
 800225a:	22dd      	movs	r2, #221	@ 0xdd
 800225c:	2104      	movs	r1, #4
 800225e:	5499      	strb	r1, [r3, r2]
		ic[cic].ic_reg.aux_channels = 9;
 8002260:	183b      	adds	r3, r7, r0
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	22e8      	movs	r2, #232	@ 0xe8
 8002266:	4353      	muls	r3, r2
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	18d3      	adds	r3, r2, r3
 800226c:	22de      	movs	r2, #222	@ 0xde
 800226e:	2109      	movs	r1, #9
 8002270:	5499      	strb	r1, [r3, r2]
		ic[cic].ic_reg.num_cv_reg = 6;
 8002272:	183b      	adds	r3, r7, r0
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	22e8      	movs	r2, #232	@ 0xe8
 8002278:	4353      	muls	r3, r2
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	18d3      	adds	r3, r2, r3
 800227e:	22df      	movs	r2, #223	@ 0xdf
 8002280:	2106      	movs	r1, #6
 8002282:	5499      	strb	r1, [r3, r2]
		ic[cic].ic_reg.num_gpio_reg = 4;
 8002284:	183b      	adds	r3, r7, r0
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	22e8      	movs	r2, #232	@ 0xe8
 800228a:	4353      	muls	r3, r2
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	18d3      	adds	r3, r2, r3
 8002290:	22e0      	movs	r2, #224	@ 0xe0
 8002292:	2104      	movs	r1, #4
 8002294:	5499      	strb	r1, [r3, r2]
		ic[cic].ic_reg.num_stat_reg = 2;
 8002296:	183b      	adds	r3, r7, r0
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	22e8      	movs	r2, #232	@ 0xe8
 800229c:	4353      	muls	r3, r2
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	18d3      	adds	r3, r2, r3
 80022a2:	22e1      	movs	r2, #225	@ 0xe1
 80022a4:	2102      	movs	r1, #2
 80022a6:	5499      	strb	r1, [r3, r2]
	for (cic = 0; cic < total_ic; cic++) {
 80022a8:	183b      	adds	r3, r7, r0
 80022aa:	781a      	ldrb	r2, [r3, #0]
 80022ac:	183b      	adds	r3, r7, r0
 80022ae:	3201      	adds	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
 80022b2:	230f      	movs	r3, #15
 80022b4:	18fa      	adds	r2, r7, r3
 80022b6:	1dfb      	adds	r3, r7, #7
 80022b8:	7812      	ldrb	r2, [r2, #0]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d3bc      	bcc.n	800223a <LTC6813_init_reg_limits+0x1e>
	}
}
 80022c0:	46c0      	nop			@ (mov r8, r8)
 80022c2:	46c0      	nop			@ (mov r8, r8)
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b004      	add	sp, #16
 80022c8:	bd80      	pop	{r7, pc}

080022ca <LTC6813_wrcfg>:
 connected in a daisy chain stack. The configuration is written in descending
 order so the last device's configuration is written first.
 */
void LTC6813_wrcfg(uint8_t total_ic, //The number of ICs being written to
		cell_asic *ic //A two dimensional array of the configuration data that will be written
		) {
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	0002      	movs	r2, r0
 80022d2:	6039      	str	r1, [r7, #0]
 80022d4:	1dfb      	adds	r3, r7, #7
 80022d6:	701a      	strb	r2, [r3, #0]
	LTC681x_wrcfg(total_ic, ic);
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	1dfb      	adds	r3, r7, #7
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	0011      	movs	r1, r2
 80022e0:	0018      	movs	r0, r3
 80022e2:	f000 fb81 	bl	80029e8 <LTC681x_wrcfg>
}
 80022e6:	46c0      	nop			@ (mov r8, r8)
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b002      	add	sp, #8
 80022ec:	bd80      	pop	{r7, pc}

080022ee <LTC6813_rdcfg>:
}

/* Reads configuration registers of a LTC6813 daisy chain */
int8_t LTC6813_rdcfg(uint8_t total_ic, //Number of ICs in the system
		cell_asic *ic //A two dimensional array that the function stores the read configuration data.
		) {
 80022ee:	b5b0      	push	{r4, r5, r7, lr}
 80022f0:	b084      	sub	sp, #16
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	0002      	movs	r2, r0
 80022f6:	6039      	str	r1, [r7, #0]
 80022f8:	1dfb      	adds	r3, r7, #7
 80022fa:	701a      	strb	r2, [r3, #0]
	int8_t pec_error = 0;
 80022fc:	250f      	movs	r5, #15
 80022fe:	197b      	adds	r3, r7, r5
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
	pec_error = LTC681x_rdcfg(total_ic, ic);
 8002304:	197c      	adds	r4, r7, r5
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	1dfb      	adds	r3, r7, #7
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	0011      	movs	r1, r2
 800230e:	0018      	movs	r0, r3
 8002310:	f000 fc08 	bl	8002b24 <LTC681x_rdcfg>
 8002314:	0003      	movs	r3, r0
 8002316:	7023      	strb	r3, [r4, #0]
	return (pec_error);
 8002318:	197b      	adds	r3, r7, r5
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b25b      	sxtb	r3, r3
}
 800231e:	0018      	movs	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	b004      	add	sp, #16
 8002324:	bdb0      	pop	{r4, r5, r7, pc}

08002326 <LTC6813_adcv>:

/* Starts cell voltage conversion */
void LTC6813_adcv(uint8_t MD, //ADC Mode
		uint8_t DCP, //Discharge Permit
		uint8_t CH //Cell Channels to be measured
		) {
 8002326:	b590      	push	{r4, r7, lr}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	0004      	movs	r4, r0
 800232e:	0008      	movs	r0, r1
 8002330:	0011      	movs	r1, r2
 8002332:	1dfb      	adds	r3, r7, #7
 8002334:	1c22      	adds	r2, r4, #0
 8002336:	701a      	strb	r2, [r3, #0]
 8002338:	1dbb      	adds	r3, r7, #6
 800233a:	1c02      	adds	r2, r0, #0
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	1d7b      	adds	r3, r7, #5
 8002340:	1c0a      	adds	r2, r1, #0
 8002342:	701a      	strb	r2, [r3, #0]
	LTC681x_adcv(MD, DCP, CH);
 8002344:	1d7b      	adds	r3, r7, #5
 8002346:	781a      	ldrb	r2, [r3, #0]
 8002348:	1dbb      	adds	r3, r7, #6
 800234a:	7819      	ldrb	r1, [r3, #0]
 800234c:	1dfb      	adds	r3, r7, #7
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	0018      	movs	r0, r3
 8002352:	f000 fce1 	bl	8002d18 <LTC681x_adcv>
}
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	46bd      	mov	sp, r7
 800235a:	b003      	add	sp, #12
 800235c:	bd90      	pop	{r4, r7, pc}

0800235e <LTC6813_adax>:

/* Start a GPIO and Vref2 Conversion */
void LTC6813_adax(uint8_t MD, //ADC Mode
		uint8_t CHG //GPIO Channels to be measured)
		) {
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	0002      	movs	r2, r0
 8002366:	1dfb      	adds	r3, r7, #7
 8002368:	701a      	strb	r2, [r3, #0]
 800236a:	1dbb      	adds	r3, r7, #6
 800236c:	1c0a      	adds	r2, r1, #0
 800236e:	701a      	strb	r2, [r3, #0]
	LTC681x_adax(MD, CHG);
 8002370:	1dbb      	adds	r3, r7, #6
 8002372:	781a      	ldrb	r2, [r3, #0]
 8002374:	1dfb      	adds	r3, r7, #7
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	0011      	movs	r1, r2
 800237a:	0018      	movs	r0, r3
 800237c:	f000 fd09 	bl	8002d92 <LTC681x_adax>
}
 8002380:	46c0      	nop			@ (mov r8, r8)
 8002382:	46bd      	mov	sp, r7
 8002384:	b002      	add	sp, #8
 8002386:	bd80      	pop	{r7, pc}

08002388 <LTC6813_adstat>:

/* Start a Status ADC Conversion */
void LTC6813_adstat(uint8_t MD, //ADC Mode
		uint8_t CHST //Stat Channels to be measured
		) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	0002      	movs	r2, r0
 8002390:	1dfb      	adds	r3, r7, #7
 8002392:	701a      	strb	r2, [r3, #0]
 8002394:	1dbb      	adds	r3, r7, #6
 8002396:	1c0a      	adds	r2, r1, #0
 8002398:	701a      	strb	r2, [r3, #0]
	LTC681x_adstat(MD, CHST);
 800239a:	1dbb      	adds	r3, r7, #6
 800239c:	781a      	ldrb	r2, [r3, #0]
 800239e:	1dfb      	adds	r3, r7, #7
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	0011      	movs	r1, r2
 80023a4:	0018      	movs	r0, r3
 80023a6:	f000 fd25 	bl	8002df4 <LTC681x_adstat>
}
 80023aa:	46c0      	nop			@ (mov r8, r8)
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b002      	add	sp, #8
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <LTC6813_rdcv>:

/*  Reads and parses the LTC6813 cell voltage registers */
uint8_t LTC6813_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
		uint8_t total_ic, // The number of ICs in the system
		cell_asic *ic // Array of the parsed cell codes
		) {
 80023b2:	b590      	push	{r4, r7, lr}
 80023b4:	b085      	sub	sp, #20
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	603a      	str	r2, [r7, #0]
 80023ba:	1dfb      	adds	r3, r7, #7
 80023bc:	1c02      	adds	r2, r0, #0
 80023be:	701a      	strb	r2, [r3, #0]
 80023c0:	1dbb      	adds	r3, r7, #6
 80023c2:	1c0a      	adds	r2, r1, #0
 80023c4:	701a      	strb	r2, [r3, #0]
	int8_t pec_error = 0;
 80023c6:	240f      	movs	r4, #15
 80023c8:	193b      	adds	r3, r7, r4
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
	pec_error = LTC681x_rdcv(reg, total_ic, ic);
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	1dbb      	adds	r3, r7, #6
 80023d2:	7819      	ldrb	r1, [r3, #0]
 80023d4:	1dfb      	adds	r3, r7, #7
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	0018      	movs	r0, r3
 80023da:	f000 fd3c 	bl	8002e56 <LTC681x_rdcv>
 80023de:	0003      	movs	r3, r0
 80023e0:	001a      	movs	r2, r3
 80023e2:	193b      	adds	r3, r7, r4
 80023e4:	701a      	strb	r2, [r3, #0]
	return (pec_error);
 80023e6:	193b      	adds	r3, r7, r4
 80023e8:	781b      	ldrb	r3, [r3, #0]
}
 80023ea:	0018      	movs	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b005      	add	sp, #20
 80023f0:	bd90      	pop	{r4, r7, pc}

080023f2 <LTC6813_rdaux>:
 read commands parse the data and store the gpio voltages in aux_codes variable
 */
int8_t LTC6813_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
		uint8_t total_ic, //The number of ICs in the system
		cell_asic *ic //A two dimensional array of the gpio voltage codes.
		) {
 80023f2:	b590      	push	{r4, r7, lr}
 80023f4:	b085      	sub	sp, #20
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	603a      	str	r2, [r7, #0]
 80023fa:	1dfb      	adds	r3, r7, #7
 80023fc:	1c02      	adds	r2, r0, #0
 80023fe:	701a      	strb	r2, [r3, #0]
 8002400:	1dbb      	adds	r3, r7, #6
 8002402:	1c0a      	adds	r2, r1, #0
 8002404:	701a      	strb	r2, [r3, #0]
	int8_t pec_error = 0;
 8002406:	240f      	movs	r4, #15
 8002408:	193b      	adds	r3, r7, r4
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
	LTC681x_rdaux(reg, total_ic, ic);
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	1dbb      	adds	r3, r7, #6
 8002412:	7819      	ldrb	r1, [r3, #0]
 8002414:	1dfb      	adds	r3, r7, #7
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	0018      	movs	r0, r3
 800241a:	f000 fe08 	bl	800302e <LTC681x_rdaux>
	return (pec_error);
 800241e:	193b      	adds	r3, r7, r4
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	b25b      	sxtb	r3, r3
}
 8002424:	0018      	movs	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	b005      	add	sp, #20
 800242a:	bd90      	pop	{r4, r7, pc}

0800242c <LTC6813_rdstat>:
 read commands parse the data and store the stat voltages in stat_codes variable
 */
int8_t LTC6813_rdstat(uint8_t reg, //Determines which Stat  register is read back.
		uint8_t total_ic, //The number of ICs in the system
		cell_asic *ic //A two dimensional array of the stat codes.
		) {
 800242c:	b5b0      	push	{r4, r5, r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	603a      	str	r2, [r7, #0]
 8002434:	1dfb      	adds	r3, r7, #7
 8002436:	1c02      	adds	r2, r0, #0
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	1dbb      	adds	r3, r7, #6
 800243c:	1c0a      	adds	r2, r1, #0
 800243e:	701a      	strb	r2, [r3, #0]
	int8_t pec_error = 0;
 8002440:	250f      	movs	r5, #15
 8002442:	197b      	adds	r3, r7, r5
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
	pec_error = LTC681x_rdstat(reg, total_ic, ic);
 8002448:	197c      	adds	r4, r7, r5
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	1dbb      	adds	r3, r7, #6
 800244e:	7819      	ldrb	r1, [r3, #0]
 8002450:	1dfb      	adds	r3, r7, #7
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	0018      	movs	r0, r3
 8002456:	f000 fec5 	bl	80031e4 <LTC681x_rdstat>
 800245a:	0003      	movs	r3, r0
 800245c:	7023      	strb	r3, [r4, #0]
	return (pec_error);
 800245e:	197b      	adds	r3, r7, r5
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	b25b      	sxtb	r3, r3
}
 8002464:	0018      	movs	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	b004      	add	sp, #16
 800246a:	bdb0      	pop	{r4, r5, r7, pc}

0800246c <LTC6813_pollAdc>:
uint8_t LTC6813_pladc() {
	return (LTC681x_pladc());
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC6813_pollAdc() {
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
	return (LTC681x_pollAdc());
 8002470:	f001 fb9c 	bl	8003bac <LTC681x_pollAdc>
 8002474:	0003      	movs	r3, r0
}
 8002476:	0018      	movs	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <LTC6813_reset_crc_count>:
}

/* Helper Function to reset PEC counters */
void LTC6813_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
		cell_asic *ic // A two dimensional array that will store the data
		) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	0002      	movs	r2, r0
 8002484:	6039      	str	r1, [r7, #0]
 8002486:	1dfb      	adds	r3, r7, #7
 8002488:	701a      	strb	r2, [r3, #0]
	LTC681x_reset_crc_count(total_ic, ic);
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	1dfb      	adds	r3, r7, #7
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	0011      	movs	r1, r2
 8002492:	0018      	movs	r0, r3
 8002494:	f001 fd74 	bl	8003f80 <LTC681x_reset_crc_count>
}
 8002498:	46c0      	nop			@ (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b002      	add	sp, #8
 800249e:	bd80      	pop	{r7, pc}

080024a0 <LTC6813_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC6813_init_cfg(uint8_t total_ic, cell_asic *ic) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	0002      	movs	r2, r0
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	1dfb      	adds	r3, r7, #7
 80024ac:	701a      	strb	r2, [r3, #0]
	LTC681x_init_cfg(total_ic, ic);
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	1dfb      	adds	r3, r7, #7
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	0011      	movs	r1, r2
 80024b6:	0018      	movs	r0, r3
 80024b8:	f001 fdc8 	bl	800404c <LTC681x_init_cfg>
}
 80024bc:	46c0      	nop			@ (mov r8, r8)
 80024be:	46bd      	mov	sp, r7
 80024c0:	b002      	add	sp, #8
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <LTC6813_set_cfgr>:

/* Helper function to set CFGR variable */
void LTC6813_set_cfgr(uint8_t nIC, cell_asic *ic, bool refon, bool adcopt,
bool gpio[5], bool dcc[12], bool dcto[4], uint16_t uv, uint16_t ov) {
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	0004      	movs	r4, r0
 80024cc:	6039      	str	r1, [r7, #0]
 80024ce:	0010      	movs	r0, r2
 80024d0:	0019      	movs	r1, r3
 80024d2:	1dfb      	adds	r3, r7, #7
 80024d4:	1c22      	adds	r2, r4, #0
 80024d6:	701a      	strb	r2, [r3, #0]
 80024d8:	1dbb      	adds	r3, r7, #6
 80024da:	1c02      	adds	r2, r0, #0
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	1d7b      	adds	r3, r7, #5
 80024e0:	1c0a      	adds	r2, r1, #0
 80024e2:	701a      	strb	r2, [r3, #0]
	LTC681x_set_cfgr_refon(nIC, ic, refon);
 80024e4:	1dbb      	adds	r3, r7, #6
 80024e6:	781a      	ldrb	r2, [r3, #0]
 80024e8:	6839      	ldr	r1, [r7, #0]
 80024ea:	1dfb      	adds	r3, r7, #7
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	0018      	movs	r0, r3
 80024f0:	f001 fde3 	bl	80040ba <LTC681x_set_cfgr_refon>
	LTC681x_set_cfgr_adcopt(nIC, ic, adcopt);
 80024f4:	1d7b      	adds	r3, r7, #5
 80024f6:	781a      	ldrb	r2, [r3, #0]
 80024f8:	6839      	ldr	r1, [r7, #0]
 80024fa:	1dfb      	adds	r3, r7, #7
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	0018      	movs	r0, r3
 8002500:	f001 fe11 	bl	8004126 <LTC681x_set_cfgr_adcopt>
	LTC681x_set_cfgr_gpio(nIC, ic, gpio);
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	6839      	ldr	r1, [r7, #0]
 8002508:	1dfb      	adds	r3, r7, #7
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	0018      	movs	r0, r3
 800250e:	f001 fe40 	bl	8004192 <LTC681x_set_cfgr_gpio>
	LTC681x_set_cfgr_dis(nIC, ic, dcc);
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	6839      	ldr	r1, [r7, #0]
 8002516:	1dfb      	adds	r3, r7, #7
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	0018      	movs	r0, r3
 800251c:	f001 fe8d 	bl	800423a <LTC681x_set_cfgr_dis>
	LTC681x_set_cfgr_dcto(nIC, ic, dcto);
 8002520:	6a3a      	ldr	r2, [r7, #32]
 8002522:	6839      	ldr	r1, [r7, #0]
 8002524:	1dfb      	adds	r3, r7, #7
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	0018      	movs	r0, r3
 800252a:	f001 ff1b 	bl	8004364 <LTC681x_set_cfgr_dcto>
	LTC681x_set_cfgr_uv(nIC, ic, uv);
 800252e:	2324      	movs	r3, #36	@ 0x24
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	881a      	ldrh	r2, [r3, #0]
 8002534:	6839      	ldr	r1, [r7, #0]
 8002536:	1dfb      	adds	r3, r7, #7
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	0018      	movs	r0, r3
 800253c:	f001 ff66 	bl	800440c <LTC681x_set_cfgr_uv>
	LTC681x_set_cfgr_ov(nIC, ic, ov);
 8002540:	2328      	movs	r3, #40	@ 0x28
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	881a      	ldrh	r2, [r3, #0]
 8002546:	6839      	ldr	r1, [r7, #0]
 8002548:	1dfb      	adds	r3, r7, #7
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	0018      	movs	r0, r3
 800254e:	f001 ffa9 	bl	80044a4 <LTC681x_set_cfgr_ov>
}
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	46bd      	mov	sp, r7
 8002556:	b003      	add	sp, #12
 8002558:	bd90      	pop	{r4, r7, pc}

0800255a <wakeup_idle>:
		0xba39, 0xb10b, 0x7492, 0x5368, 0x96f1, 0x9dc3, 0x585a, 0x8ba7, 0x4e3e,
		0x450c, 0x8095 };

/* Wake isoSPI up from IDlE state and enters the READY state */
void wakeup_idle(uint8_t total_ic) //Number of ICs in the system
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	0002      	movs	r2, r0
 8002562:	1dfb      	adds	r3, r7, #7
 8002564:	701a      	strb	r2, [r3, #0]
	int i = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < total_ic; i++) {
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	e00b      	b.n	8002588 <wakeup_idle+0x2e>
		cs_low(CS_PIN);
 8002570:	2004      	movs	r0, #4
 8002572:	f001 ffe0 	bl	8004536 <cs_low>
		spi_read_byte(0xff); //Guarantees the isoSPI will be in ready mode
 8002576:	20ff      	movs	r0, #255	@ 0xff
 8002578:	f002 f888 	bl	800468c <spi_read_byte>
		cs_high(CS_PIN);
 800257c:	2004      	movs	r0, #4
 800257e:	f001 ffed 	bl	800455c <cs_high>
	for (i = 0; i < total_ic; i++) {
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	3301      	adds	r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	1dfb      	adds	r3, r7, #7
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	429a      	cmp	r2, r3
 8002590:	dbee      	blt.n	8002570 <wakeup_idle+0x16>
	}
}
 8002592:	46c0      	nop			@ (mov r8, r8)
 8002594:	46c0      	nop			@ (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b004      	add	sp, #16
 800259a:	bd80      	pop	{r7, pc}

0800259c <cmd_68>:
	}
}

/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 800259c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	cmd[0] = tx_cmd[0];
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	781a      	ldrb	r2, [r3, #0]
 80025a8:	2508      	movs	r5, #8
 80025aa:	197b      	adds	r3, r7, r5
 80025ac:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	785a      	ldrb	r2, [r3, #1]
 80025b2:	197b      	adds	r3, r7, r5
 80025b4:	705a      	strb	r2, [r3, #1]
	cmd_pec = pec15_calc(2, cmd);
 80025b6:	260e      	movs	r6, #14
 80025b8:	19bc      	adds	r4, r7, r6
 80025ba:	197b      	adds	r3, r7, r5
 80025bc:	0019      	movs	r1, r3
 80025be:	2002      	movs	r0, #2
 80025c0:	f000 f9c6 	bl	8002950 <pec15_calc>
 80025c4:	0003      	movs	r3, r0
 80025c6:	8023      	strh	r3, [r4, #0]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 80025c8:	0031      	movs	r1, r6
 80025ca:	187b      	adds	r3, r7, r1
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	0a1b      	lsrs	r3, r3, #8
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	197b      	adds	r3, r7, r5
 80025d6:	709a      	strb	r2, [r3, #2]
	cmd[3] = (uint8_t) (cmd_pec);
 80025d8:	187b      	adds	r3, r7, r1
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	197b      	adds	r3, r7, r5
 80025e0:	70da      	strb	r2, [r3, #3]

	cs_low(CS_PIN);
 80025e2:	2004      	movs	r0, #4
 80025e4:	f001 ffa7 	bl	8004536 <cs_low>
	spi_write_array(4, cmd);
 80025e8:	197b      	adds	r3, r7, r5
 80025ea:	0019      	movs	r1, r3
 80025ec:	2004      	movs	r0, #4
 80025ee:	f001 ffc9 	bl	8004584 <spi_write_array>
	cs_high(CS_PIN);
 80025f2:	2004      	movs	r0, #4
 80025f4:	f001 ffb2 	bl	800455c <cs_high>
}
 80025f8:	46c0      	nop			@ (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b005      	add	sp, #20
 80025fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002600 <write_68>:
 Function calculates PEC for tx_cmd data and the data to be transmitted.
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
		uint8_t tx_cmd[2], //The command to be transmitted
		uint8_t data[] // Payload Data
		) {
 8002600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002602:	b089      	sub	sp, #36	@ 0x24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	250f      	movs	r5, #15
 800260c:	197b      	adds	r3, r7, r5
 800260e:	1c02      	adds	r2, r0, #0
 8002610:	701a      	strb	r2, [r3, #0]
	const uint8_t BYTES_IN_REG = 6;
 8002612:	231c      	movs	r3, #28
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	2206      	movs	r2, #6
 8002618:	701a      	strb	r2, [r3, #0]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 800261a:	197b      	adds	r3, r7, r5
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	b2da      	uxtb	r2, r3
 8002622:	211b      	movs	r1, #27
 8002624:	187b      	adds	r3, r7, r1
 8002626:	3204      	adds	r2, #4
 8002628:	701a      	strb	r2, [r3, #0]
	uint8_t *cmd;
	uint16_t data_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index;

	cmd = (uint8_t*) malloc(CMD_LEN * sizeof(uint8_t));
 800262a:	187b      	adds	r3, r7, r1
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	0018      	movs	r0, r3
 8002630:	f006 f8c8 	bl	80087c4 <malloc>
 8002634:	0003      	movs	r3, r0
 8002636:	617b      	str	r3, [r7, #20]
	cmd[0] = tx_cmd[0];
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	781a      	ldrb	r2, [r3, #0]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	3301      	adds	r3, #1
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	7852      	ldrb	r2, [r2, #1]
 8002648:	701a      	strb	r2, [r3, #0]
	cmd_pec = pec15_calc(2, cmd);
 800264a:	2612      	movs	r6, #18
 800264c:	19bc      	adds	r4, r7, r6
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	0019      	movs	r1, r3
 8002652:	2002      	movs	r0, #2
 8002654:	f000 f97c 	bl	8002950 <pec15_calc>
 8002658:	0003      	movs	r3, r0
 800265a:	8023      	strh	r3, [r4, #0]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800265c:	0031      	movs	r1, r6
 800265e:	187b      	adds	r3, r7, r1
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	b29a      	uxth	r2, r3
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	3302      	adds	r3, #2
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t) (cmd_pec);
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	3303      	adds	r3, #3
 8002672:	187a      	adds	r2, r7, r1
 8002674:	8812      	ldrh	r2, [r2, #0]
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 800267a:	231f      	movs	r3, #31
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	2204      	movs	r2, #4
 8002680:	701a      	strb	r2, [r3, #0]
	uint8_t current_ic = 0;
 8002682:	211e      	movs	r1, #30
 8002684:	187b      	adds	r3, r7, r1
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
	for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 800268a:	187b      	adds	r3, r7, r1
 800268c:	197a      	adds	r2, r7, r5
 800268e:	7812      	ldrb	r2, [r2, #0]
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	e062      	b.n	800275a <write_68+0x15a>
			{//The first configuration written is received by the last IC in the daisy chain
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 8002694:	231d      	movs	r3, #29
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
 800269c:	e020      	b.n	80026e0 <write_68+0xe0>
				current_byte++) {
			cmd[cmd_index] = data[((current_ic - 1) * 6) + current_byte];
 800269e:	231e      	movs	r3, #30
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	1e5a      	subs	r2, r3, #1
 80026a6:	0013      	movs	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	189b      	adds	r3, r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	001a      	movs	r2, r3
 80026b0:	201d      	movs	r0, #29
 80026b2:	183b      	adds	r3, r7, r0
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	18d3      	adds	r3, r2, r3
 80026b8:	001a      	movs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	189a      	adds	r2, r3, r2
 80026be:	241f      	movs	r4, #31
 80026c0:	193b      	adds	r3, r7, r4
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	6979      	ldr	r1, [r7, #20]
 80026c6:	18cb      	adds	r3, r1, r3
 80026c8:	7812      	ldrb	r2, [r2, #0]
 80026ca:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 80026cc:	193b      	adds	r3, r7, r4
 80026ce:	193a      	adds	r2, r7, r4
 80026d0:	7812      	ldrb	r2, [r2, #0]
 80026d2:	3201      	adds	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
				current_byte++) {
 80026d6:	183b      	adds	r3, r7, r0
 80026d8:	781a      	ldrb	r2, [r3, #0]
 80026da:	183b      	adds	r3, r7, r0
 80026dc:	3201      	adds	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80026e0:	231d      	movs	r3, #29
 80026e2:	18fa      	adds	r2, r7, r3
 80026e4:	211c      	movs	r1, #28
 80026e6:	187b      	adds	r3, r7, r1
 80026e8:	7812      	ldrb	r2, [r2, #0]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d3d6      	bcc.n	800269e <write_68+0x9e>
		}

		data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
				&data[(current_ic - 1) * 6]); // Calculating the PEC for each ICs configuration register data
 80026f0:	251e      	movs	r5, #30
 80026f2:	197b      	adds	r3, r7, r5
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	1e5a      	subs	r2, r3, #1
 80026f8:	0013      	movs	r3, r2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	189b      	adds	r3, r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	001a      	movs	r2, r3
		data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	189a      	adds	r2, r3, r2
 8002706:	2610      	movs	r6, #16
 8002708:	19bc      	adds	r4, r7, r6
 800270a:	187b      	adds	r3, r7, r1
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	0011      	movs	r1, r2
 8002710:	0018      	movs	r0, r3
 8002712:	f000 f91d 	bl	8002950 <pec15_calc>
 8002716:	0003      	movs	r3, r0
 8002718:	8023      	strh	r3, [r4, #0]
		cmd[cmd_index] = (uint8_t) (data_pec >> 8);
 800271a:	0034      	movs	r4, r6
 800271c:	193b      	adds	r3, r7, r4
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	b299      	uxth	r1, r3
 8002724:	201f      	movs	r0, #31
 8002726:	183b      	adds	r3, r7, r0
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	18d3      	adds	r3, r2, r3
 800272e:	b2ca      	uxtb	r2, r1
 8002730:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t) data_pec;
 8002732:	0001      	movs	r1, r0
 8002734:	187b      	adds	r3, r7, r1
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	3301      	adds	r3, #1
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	18d3      	adds	r3, r2, r3
 800273e:	193a      	adds	r2, r7, r4
 8002740:	8812      	ldrh	r2, [r2, #0]
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 8002746:	187b      	adds	r3, r7, r1
 8002748:	187a      	adds	r2, r7, r1
 800274a:	7812      	ldrb	r2, [r2, #0]
 800274c:	3202      	adds	r2, #2
 800274e:	701a      	strb	r2, [r3, #0]
	for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8002750:	197b      	adds	r3, r7, r5
 8002752:	781a      	ldrb	r2, [r3, #0]
 8002754:	197b      	adds	r3, r7, r5
 8002756:	3a01      	subs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]
 800275a:	231e      	movs	r3, #30
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d197      	bne.n	8002694 <write_68+0x94>
	}

	cs_low(CS_PIN);
 8002764:	2004      	movs	r0, #4
 8002766:	f001 fee6 	bl	8004536 <cs_low>
	spi_write_array(CMD_LEN, cmd);
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	231b      	movs	r3, #27
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	0011      	movs	r1, r2
 8002774:	0018      	movs	r0, r3
 8002776:	f001 ff05 	bl	8004584 <spi_write_array>
	cs_high(CS_PIN);
 800277a:	2004      	movs	r0, #4
 800277c:	f001 feee 	bl	800455c <cs_high>

	free(cmd);
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	0018      	movs	r0, r3
 8002784:	f006 f828 	bl	80087d8 <free>
}
 8002788:	46c0      	nop			@ (mov r8, r8)
 800278a:	46bd      	mov	sp, r7
 800278c:	b009      	add	sp, #36	@ 0x24
 800278e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002790 <read_68>:

/* Generic function to write 68xx commands and read data. Function calculated PEC for tx_cmd data */
int8_t read_68(uint8_t total_ic, // Number of ICs in the system
		uint8_t tx_cmd[2], // The command to be transmitted
		uint8_t *rx_data // Data to be read
		) {
 8002790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002792:	b0c9      	sub	sp, #292	@ 0x124
 8002794:	af00      	add	r7, sp, #0
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	4b6b      	ldr	r3, [pc, #428]	@ (8002948 <read_68+0x1b8>)
 800279c:	2690      	movs	r6, #144	@ 0x90
 800279e:	0076      	lsls	r6, r6, #1
 80027a0:	199b      	adds	r3, r3, r6
 80027a2:	19db      	adds	r3, r3, r7
 80027a4:	1c02      	adds	r2, r0, #0
 80027a6:	701a      	strb	r2, [r3, #0]
	const uint8_t BYTES_IN_REG = 8;
 80027a8:	238e      	movs	r3, #142	@ 0x8e
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	2208      	movs	r2, #8
 80027b0:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[4];
	uint8_t data[256];
	int8_t pec_error = 0;
 80027b2:	2220      	movs	r2, #32
 80027b4:	32ff      	adds	r2, #255	@ 0xff
 80027b6:	18bb      	adds	r3, r7, r2
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
	uint16_t cmd_pec;
	uint16_t data_pec;
	uint16_t received_pec;

	cmd[0] = tx_cmd[0];
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	781a      	ldrb	r2, [r3, #0]
 80027c0:	2588      	movs	r5, #136	@ 0x88
 80027c2:	006d      	lsls	r5, r5, #1
 80027c4:	197b      	adds	r3, r7, r5
 80027c6:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	785a      	ldrb	r2, [r3, #1]
 80027cc:	197b      	adds	r3, r7, r5
 80027ce:	705a      	strb	r2, [r3, #1]
	cmd_pec = pec15_calc(2, cmd);
 80027d0:	218d      	movs	r1, #141	@ 0x8d
 80027d2:	0049      	lsls	r1, r1, #1
 80027d4:	187c      	adds	r4, r7, r1
 80027d6:	197b      	adds	r3, r7, r5
 80027d8:	0019      	movs	r1, r3
 80027da:	2002      	movs	r0, #2
 80027dc:	f000 f8b8 	bl	8002950 <pec15_calc>
 80027e0:	0003      	movs	r3, r0
 80027e2:	8023      	strh	r3, [r4, #0]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 80027e4:	218d      	movs	r1, #141	@ 0x8d
 80027e6:	0049      	lsls	r1, r1, #1
 80027e8:	187b      	adds	r3, r7, r1
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	002c      	movs	r4, r5
 80027f4:	193b      	adds	r3, r7, r4
 80027f6:	709a      	strb	r2, [r3, #2]
	cmd[3] = (uint8_t) (cmd_pec);
 80027f8:	187b      	adds	r3, r7, r1
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	193b      	adds	r3, r7, r4
 8002800:	70da      	strb	r2, [r3, #3]

	cs_low(CS_PIN);
 8002802:	2004      	movs	r0, #4
 8002804:	f001 fe97 	bl	8004536 <cs_low>
	spi_write_read(cmd, 4, data, (BYTES_IN_REG * total_ic)); //Transmits the command and reads the configuration data of all ICs on the daisy chain into rx_data[] array
 8002808:	238e      	movs	r3, #142	@ 0x8e
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	18fb      	adds	r3, r7, r3
 800280e:	4a4e      	ldr	r2, [pc, #312]	@ (8002948 <read_68+0x1b8>)
 8002810:	1992      	adds	r2, r2, r6
 8002812:	19d2      	adds	r2, r2, r7
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	7812      	ldrb	r2, [r2, #0]
 8002818:	4353      	muls	r3, r2
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2210      	movs	r2, #16
 800281e:	18ba      	adds	r2, r7, r2
 8002820:	1938      	adds	r0, r7, r4
 8002822:	2104      	movs	r1, #4
 8002824:	f001 fedc 	bl	80045e0 <spi_write_read>
	cs_high(CS_PIN);
 8002828:	2004      	movs	r0, #4
 800282a:	f001 fe97 	bl	800455c <cs_high>

	uint8_t current_ic = 0;
 800282e:	218f      	movs	r1, #143	@ 0x8f
 8002830:	0049      	lsls	r1, r1, #1
 8002832:	187b      	adds	r3, r7, r1
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
	uint8_t current_byte = 0;
 8002838:	231e      	movs	r3, #30
 800283a:	33ff      	adds	r3, #255	@ 0xff
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
	for (current_ic = total_ic; current_ic > 0; current_ic--) //Executes for each LTC681x in the daisy chain and packs the data
 8002842:	187b      	adds	r3, r7, r1
 8002844:	4a40      	ldr	r2, [pc, #256]	@ (8002948 <read_68+0x1b8>)
 8002846:	1992      	adds	r2, r2, r6
 8002848:	19d2      	adds	r2, r2, r7
 800284a:	7812      	ldrb	r2, [r2, #0]
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	e06b      	b.n	8002928 <read_68+0x198>
			{//into the rx_data array as well as check the received data for any bit errors
		for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) {
 8002850:	231e      	movs	r3, #30
 8002852:	33ff      	adds	r3, #255	@ 0xff
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	e022      	b.n	80028a2 <read_68+0x112>
			rx_data[(current_ic * 8) + current_byte] = data[current_byte
					+ (current_ic * BYTES_IN_REG)];
 800285c:	201e      	movs	r0, #30
 800285e:	30ff      	adds	r0, #255	@ 0xff
 8002860:	183b      	adds	r3, r7, r0
 8002862:	781a      	ldrb	r2, [r3, #0]
 8002864:	248f      	movs	r4, #143	@ 0x8f
 8002866:	0064      	lsls	r4, r4, #1
 8002868:	193b      	adds	r3, r7, r4
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	218e      	movs	r1, #142	@ 0x8e
 800286e:	0049      	lsls	r1, r1, #1
 8002870:	1879      	adds	r1, r7, r1
 8002872:	7809      	ldrb	r1, [r1, #0]
 8002874:	434b      	muls	r3, r1
 8002876:	18d2      	adds	r2, r2, r3
			rx_data[(current_ic * 8) + current_byte] = data[current_byte
 8002878:	193b      	adds	r3, r7, r4
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	00d9      	lsls	r1, r3, #3
 800287e:	183b      	adds	r3, r7, r0
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	18cb      	adds	r3, r1, r3
 8002884:	0019      	movs	r1, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	185b      	adds	r3, r3, r1
 800288a:	4930      	ldr	r1, [pc, #192]	@ (800294c <read_68+0x1bc>)
 800288c:	2490      	movs	r4, #144	@ 0x90
 800288e:	0064      	lsls	r4, r4, #1
 8002890:	1909      	adds	r1, r1, r4
 8002892:	19c9      	adds	r1, r1, r7
 8002894:	5c8a      	ldrb	r2, [r1, r2]
 8002896:	701a      	strb	r2, [r3, #0]
		for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) {
 8002898:	183b      	adds	r3, r7, r0
 800289a:	781a      	ldrb	r2, [r3, #0]
 800289c:	183b      	adds	r3, r7, r0
 800289e:	3201      	adds	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	231e      	movs	r3, #30
 80028a4:	33ff      	adds	r3, #255	@ 0xff
 80028a6:	18fa      	adds	r2, r7, r3
 80028a8:	238e      	movs	r3, #142	@ 0x8e
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	7812      	ldrb	r2, [r2, #0]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d3d2      	bcc.n	800285c <read_68+0xcc>
		}

		received_pec = (rx_data[(current_ic * 8) + 6] << 8)
 80028b6:	208f      	movs	r0, #143	@ 0x8f
 80028b8:	0040      	lsls	r0, r0, #1
 80028ba:	183b      	adds	r3, r7, r0
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	3306      	adds	r3, #6
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	18d3      	adds	r3, r2, r3
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	b29a      	uxth	r2, r3
				+ rx_data[(current_ic * 8) + 7];
 80028cc:	183b      	adds	r3, r7, r0
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	3307      	adds	r3, #7
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	18cb      	adds	r3, r1, r3
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	0019      	movs	r1, r3
		received_pec = (rx_data[(current_ic * 8) + 6] << 8)
 80028dc:	258c      	movs	r5, #140	@ 0x8c
 80028de:	006d      	lsls	r5, r5, #1
 80028e0:	197b      	adds	r3, r7, r5
 80028e2:	1852      	adds	r2, r2, r1
 80028e4:	801a      	strh	r2, [r3, #0]
		data_pec = pec15_calc(6, &rx_data[current_ic * 8]);
 80028e6:	183b      	adds	r3, r7, r0
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	001a      	movs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	189b      	adds	r3, r3, r2
 80028f2:	268b      	movs	r6, #139	@ 0x8b
 80028f4:	0076      	lsls	r6, r6, #1
 80028f6:	19bc      	adds	r4, r7, r6
 80028f8:	0019      	movs	r1, r3
 80028fa:	2006      	movs	r0, #6
 80028fc:	f000 f828 	bl	8002950 <pec15_calc>
 8002900:	0003      	movs	r3, r0
 8002902:	8023      	strh	r3, [r4, #0]

		if (received_pec != data_pec) {
 8002904:	197a      	adds	r2, r7, r5
 8002906:	19bb      	adds	r3, r7, r6
 8002908:	8812      	ldrh	r2, [r2, #0]
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d004      	beq.n	800291a <read_68+0x18a>
			pec_error = -1;
 8002910:	2320      	movs	r3, #32
 8002912:	33ff      	adds	r3, #255	@ 0xff
 8002914:	18fb      	adds	r3, r7, r3
 8002916:	22ff      	movs	r2, #255	@ 0xff
 8002918:	701a      	strb	r2, [r3, #0]
	for (current_ic = total_ic; current_ic > 0; current_ic--) //Executes for each LTC681x in the daisy chain and packs the data
 800291a:	218f      	movs	r1, #143	@ 0x8f
 800291c:	0049      	lsls	r1, r1, #1
 800291e:	187b      	adds	r3, r7, r1
 8002920:	781a      	ldrb	r2, [r3, #0]
 8002922:	187b      	adds	r3, r7, r1
 8002924:	3a01      	subs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
 8002928:	238f      	movs	r3, #143	@ 0x8f
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d18d      	bne.n	8002850 <read_68+0xc0>
		}
	}

	return (pec_error);
 8002934:	2320      	movs	r3, #32
 8002936:	33ff      	adds	r3, #255	@ 0xff
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	b25b      	sxtb	r3, r3
}
 800293e:	0018      	movs	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	b049      	add	sp, #292	@ 0x124
 8002944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002946:	46c0      	nop			@ (mov r8, r8)
 8002948:	fffffeef 	.word	0xfffffeef
 800294c:	fffffef0 	.word	0xfffffef0

08002950 <pec15_calc>:

/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
		uint8_t *data //Array of data that will be used to calculate  a PEC
		) {
 8002950:	b5b0      	push	{r4, r5, r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	0002      	movs	r2, r0
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	1dfb      	adds	r3, r7, #7
 800295c:	701a      	strb	r2, [r3, #0]
	uint16_t remainder, addr;
	remainder = 16; //initialize the PEC
 800295e:	230e      	movs	r3, #14
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	2210      	movs	r2, #16
 8002964:	801a      	strh	r2, [r3, #0]

	uint8_t i = 0;
 8002966:	210d      	movs	r1, #13
 8002968:	187b      	adds	r3, r7, r1
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len; i++) // loops for each byte in data array
 800296e:	187b      	adds	r3, r7, r1
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
 8002974:	e025      	b.n	80029c2 <pec15_calc+0x72>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8002976:	200e      	movs	r0, #14
 8002978:	183b      	adds	r3, r7, r0
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	09db      	lsrs	r3, r3, #7
 800297e:	b29b      	uxth	r3, r3
 8002980:	240d      	movs	r4, #13
 8002982:	193a      	adds	r2, r7, r4
 8002984:	7812      	ldrb	r2, [r2, #0]
 8002986:	6839      	ldr	r1, [r7, #0]
 8002988:	188a      	adds	r2, r1, r2
 800298a:	7812      	ldrb	r2, [r2, #0]
 800298c:	4053      	eors	r3, r2
 800298e:	b29a      	uxth	r2, r3
 8002990:	250a      	movs	r5, #10
 8002992:	197b      	adds	r3, r7, r5
 8002994:	21ff      	movs	r1, #255	@ 0xff
 8002996:	400a      	ands	r2, r1
 8002998:	801a      	strh	r2, [r3, #0]
//		#ifdef MBED
		remainder = (remainder << 8) ^ crc15Table[addr];
 800299a:	183b      	adds	r3, r7, r0
 800299c:	2200      	movs	r2, #0
 800299e:	5e9b      	ldrsh	r3, [r3, r2]
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	b21a      	sxth	r2, r3
 80029a4:	197b      	adds	r3, r7, r5
 80029a6:	8819      	ldrh	r1, [r3, #0]
 80029a8:	4b0e      	ldr	r3, [pc, #56]	@ (80029e4 <pec15_calc+0x94>)
 80029aa:	0049      	lsls	r1, r1, #1
 80029ac:	5acb      	ldrh	r3, [r1, r3]
 80029ae:	b21b      	sxth	r3, r3
 80029b0:	4053      	eors	r3, r2
 80029b2:	b21a      	sxth	r2, r3
 80029b4:	183b      	adds	r3, r7, r0
 80029b6:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; i++) // loops for each byte in data array
 80029b8:	193b      	adds	r3, r7, r4
 80029ba:	781a      	ldrb	r2, [r3, #0]
 80029bc:	193b      	adds	r3, r7, r4
 80029be:	3201      	adds	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	230d      	movs	r3, #13
 80029c4:	18fa      	adds	r2, r7, r3
 80029c6:	1dfb      	adds	r3, r7, #7
 80029c8:	7812      	ldrb	r2, [r2, #0]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d3d2      	bcc.n	8002976 <pec15_calc+0x26>
//		#else
//			remainder = (remainder<<8)^pgm_read_word_near(crc15Table+addr); // what is pgm_read_word_near
//		#endif
	}

	return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80029d0:	230e      	movs	r3, #14
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	18db      	adds	r3, r3, r3
 80029d8:	b29b      	uxth	r3, r3
}
 80029da:	0018      	movs	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	b004      	add	sp, #16
 80029e0:	bdb0      	pop	{r4, r5, r7, pc}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	08009d44 	.word	0x08009d44

080029e8 <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
		cell_asic ic[] // A two dimensional array of the configuration data that will be written
		) {
 80029e8:	b5b0      	push	{r4, r5, r7, lr}
 80029ea:	b0c4      	sub	sp, #272	@ 0x110
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	0002      	movs	r2, r0
 80029f0:	6039      	str	r1, [r7, #0]
 80029f2:	4b4a      	ldr	r3, [pc, #296]	@ (8002b1c <LTC681x_wrcfg+0x134>)
 80029f4:	2188      	movs	r1, #136	@ 0x88
 80029f6:	0049      	lsls	r1, r1, #1
 80029f8:	185b      	adds	r3, r3, r1
 80029fa:	19db      	adds	r3, r3, r7
 80029fc:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = { 0x00, 0x01 };
 80029fe:	2384      	movs	r3, #132	@ 0x84
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	18fb      	adds	r3, r7, r3
 8002a04:	2280      	movs	r2, #128	@ 0x80
 8002a06:	0052      	lsls	r2, r2, #1
 8002a08:	801a      	strh	r2, [r3, #0]
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 8002a0a:	2310      	movs	r3, #16
 8002a0c:	33ff      	adds	r3, #255	@ 0xff
 8002a0e:	18fb      	adds	r3, r7, r3
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
	uint8_t c_ic = 0;
 8002a14:	2387      	movs	r3, #135	@ 0x87
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	18fb      	adds	r3, r7, r3
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]

	uint8_t current_ic = 0;
 8002a1e:	200e      	movs	r0, #14
 8002a20:	30ff      	adds	r0, #255	@ 0xff
 8002a22:	183b      	adds	r3, r7, r0
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
	uint8_t data = 0;
 8002a28:	2386      	movs	r3, #134	@ 0x86
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	2200      	movs	r2, #0
 8002a30:	701a      	strb	r2, [r3, #0]
	for (current_ic = total_ic; current_ic > 0; current_ic--) {
 8002a32:	183b      	adds	r3, r7, r0
 8002a34:	4a39      	ldr	r2, [pc, #228]	@ (8002b1c <LTC681x_wrcfg+0x134>)
 8002a36:	1852      	adds	r2, r2, r1
 8002a38:	19d2      	adds	r2, r2, r7
 8002a3a:	7812      	ldrb	r2, [r2, #0]
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	e055      	b.n	8002aec <LTC681x_wrcfg+0x104>
		if (ic->isospi_reverse == false) {
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	22bf      	movs	r2, #191	@ 0xbf
 8002a44:	5c9b      	ldrb	r3, [r3, r2]
 8002a46:	2201      	movs	r2, #1
 8002a48:	4053      	eors	r3, r2
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <LTC681x_wrcfg+0x7a>
			c_ic = current_ic;
 8002a50:	2387      	movs	r3, #135	@ 0x87
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	220e      	movs	r2, #14
 8002a58:	32ff      	adds	r2, #255	@ 0xff
 8002a5a:	18ba      	adds	r2, r7, r2
 8002a5c:	7812      	ldrb	r2, [r2, #0]
 8002a5e:	701a      	strb	r2, [r3, #0]
 8002a60:	e010      	b.n	8002a84 <LTC681x_wrcfg+0x9c>
		} else {
			c_ic = total_ic - current_ic - 1;
 8002a62:	4b2e      	ldr	r3, [pc, #184]	@ (8002b1c <LTC681x_wrcfg+0x134>)
 8002a64:	2288      	movs	r2, #136	@ 0x88
 8002a66:	0052      	lsls	r2, r2, #1
 8002a68:	189b      	adds	r3, r3, r2
 8002a6a:	19da      	adds	r2, r3, r7
 8002a6c:	230e      	movs	r3, #14
 8002a6e:	33ff      	adds	r3, #255	@ 0xff
 8002a70:	18fb      	adds	r3, r7, r3
 8002a72:	7812      	ldrb	r2, [r2, #0]
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	2387      	movs	r3, #135	@ 0x87
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	3a01      	subs	r2, #1
 8002a82:	701a      	strb	r2, [r3, #0]
		}

		for (data = 0; data < 6; data++) {
 8002a84:	2386      	movs	r3, #134	@ 0x86
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	e020      	b.n	8002ad2 <LTC681x_wrcfg+0xea>
			write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8002a90:	2387      	movs	r3, #135	@ 0x87
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	18fb      	adds	r3, r7, r3
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	22e8      	movs	r2, #232	@ 0xe8
 8002a9a:	4353      	muls	r3, r2
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	18d1      	adds	r1, r2, r3
 8002aa0:	2086      	movs	r0, #134	@ 0x86
 8002aa2:	0040      	lsls	r0, r0, #1
 8002aa4:	183b      	adds	r3, r7, r0
 8002aa6:	781a      	ldrb	r2, [r3, #0]
 8002aa8:	2410      	movs	r4, #16
 8002aaa:	34ff      	adds	r4, #255	@ 0xff
 8002aac:	193b      	adds	r3, r7, r4
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	5c89      	ldrb	r1, [r1, r2]
 8002ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b20 <LTC681x_wrcfg+0x138>)
 8002ab4:	2588      	movs	r5, #136	@ 0x88
 8002ab6:	006d      	lsls	r5, r5, #1
 8002ab8:	1952      	adds	r2, r2, r5
 8002aba:	19d2      	adds	r2, r2, r7
 8002abc:	54d1      	strb	r1, [r2, r3]
			write_count++;
 8002abe:	193b      	adds	r3, r7, r4
 8002ac0:	781a      	ldrb	r2, [r3, #0]
 8002ac2:	193b      	adds	r3, r7, r4
 8002ac4:	3201      	adds	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
		for (data = 0; data < 6; data++) {
 8002ac8:	183b      	adds	r3, r7, r0
 8002aca:	781a      	ldrb	r2, [r3, #0]
 8002acc:	183b      	adds	r3, r7, r0
 8002ace:	3201      	adds	r2, #1
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	2386      	movs	r3, #134	@ 0x86
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	d9d8      	bls.n	8002a90 <LTC681x_wrcfg+0xa8>
	for (current_ic = total_ic; current_ic > 0; current_ic--) {
 8002ade:	210e      	movs	r1, #14
 8002ae0:	31ff      	adds	r1, #255	@ 0xff
 8002ae2:	187b      	adds	r3, r7, r1
 8002ae4:	781a      	ldrb	r2, [r3, #0]
 8002ae6:	187b      	adds	r3, r7, r1
 8002ae8:	3a01      	subs	r2, #1
 8002aea:	701a      	strb	r2, [r3, #0]
 8002aec:	230e      	movs	r3, #14
 8002aee:	33ff      	adds	r3, #255	@ 0xff
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1a3      	bne.n	8002a40 <LTC681x_wrcfg+0x58>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 8002af8:	2308      	movs	r3, #8
 8002afa:	18fa      	adds	r2, r7, r3
 8002afc:	2384      	movs	r3, #132	@ 0x84
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	18f9      	adds	r1, r7, r3
 8002b02:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <LTC681x_wrcfg+0x134>)
 8002b04:	2088      	movs	r0, #136	@ 0x88
 8002b06:	0040      	lsls	r0, r0, #1
 8002b08:	181b      	adds	r3, r3, r0
 8002b0a:	19db      	adds	r3, r3, r7
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f7ff fd76 	bl	8002600 <write_68>
}
 8002b14:	46c0      	nop			@ (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b044      	add	sp, #272	@ 0x110
 8002b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b1c:	fffffef7 	.word	0xfffffef7
 8002b20:	fffffef8 	.word	0xfffffef8

08002b24 <LTC681x_rdcfg>:
}

/* Read the LTC681x CFGA */
int8_t LTC681x_rdcfg(uint8_t total_ic, //Number of ICs in the system
		cell_asic ic[] // A two dimensional array that the function stores the read configuration data.
		) {
 8002b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b26:	b0c7      	sub	sp, #284	@ 0x11c
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	6039      	str	r1, [r7, #0]
 8002b2e:	4b78      	ldr	r3, [pc, #480]	@ (8002d10 <LTC681x_rdcfg+0x1ec>)
 8002b30:	208c      	movs	r0, #140	@ 0x8c
 8002b32:	0040      	lsls	r0, r0, #1
 8002b34:	181b      	adds	r3, r3, r0
 8002b36:	19db      	adds	r3, r3, r7
 8002b38:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = { 0x00, 0x02 };
 8002b3a:	2184      	movs	r1, #132	@ 0x84
 8002b3c:	0049      	lsls	r1, r1, #1
 8002b3e:	187b      	adds	r3, r7, r1
 8002b40:	2280      	movs	r2, #128	@ 0x80
 8002b42:	0092      	lsls	r2, r2, #2
 8002b44:	801a      	strh	r2, [r3, #0]
	uint8_t read_buffer[256];
	int8_t pec_error = 0;
 8002b46:	2410      	movs	r4, #16
 8002b48:	34ff      	adds	r4, #255	@ 0xff
 8002b4a:	193b      	adds	r3, r7, r4
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
	uint16_t data_pec;
	uint16_t calc_pec;
	uint8_t c_ic = 0;
 8002b50:	2318      	movs	r3, #24
 8002b52:	33ff      	adds	r3, #255	@ 0xff
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]

	pec_error = read_68(total_ic, cmd, read_buffer);
 8002b5a:	193c      	adds	r4, r7, r4
 8002b5c:	2308      	movs	r3, #8
 8002b5e:	18fa      	adds	r2, r7, r3
 8002b60:	1879      	adds	r1, r7, r1
 8002b62:	4b6b      	ldr	r3, [pc, #428]	@ (8002d10 <LTC681x_rdcfg+0x1ec>)
 8002b64:	0005      	movs	r5, r0
 8002b66:	181b      	adds	r3, r3, r0
 8002b68:	19db      	adds	r3, r3, r7
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f7ff fe0f 	bl	8002790 <read_68>
 8002b72:	0003      	movs	r3, r0
 8002b74:	7023      	strb	r3, [r4, #0]

	uint8_t current_ic = 0;
 8002b76:	218b      	movs	r1, #139	@ 0x8b
 8002b78:	0049      	lsls	r1, r1, #1
 8002b7a:	187b      	adds	r3, r7, r1
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
	int byte = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	2288      	movs	r2, #136	@ 0x88
 8002b84:	0052      	lsls	r2, r2, #1
 8002b86:	18ba      	adds	r2, r7, r2
 8002b88:	6013      	str	r3, [r2, #0]
	for (current_ic = total_ic; current_ic > 0; current_ic--) {
 8002b8a:	187b      	adds	r3, r7, r1
 8002b8c:	4a60      	ldr	r2, [pc, #384]	@ (8002d10 <LTC681x_rdcfg+0x1ec>)
 8002b8e:	1952      	adds	r2, r2, r5
 8002b90:	19d2      	adds	r2, r2, r7
 8002b92:	7812      	ldrb	r2, [r2, #0]
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	e09f      	b.n	8002cd8 <LTC681x_rdcfg+0x1b4>
		if (ic->isospi_reverse == false) {
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	22bf      	movs	r2, #191	@ 0xbf
 8002b9c:	5c9b      	ldrb	r3, [r3, r2]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	4053      	eors	r3, r2
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <LTC681x_rdcfg+0x96>
			c_ic = current_ic;
 8002ba8:	2318      	movs	r3, #24
 8002baa:	33ff      	adds	r3, #255	@ 0xff
 8002bac:	18fb      	adds	r3, r7, r3
 8002bae:	228b      	movs	r2, #139	@ 0x8b
 8002bb0:	0052      	lsls	r2, r2, #1
 8002bb2:	18ba      	adds	r2, r7, r2
 8002bb4:	7812      	ldrb	r2, [r2, #0]
 8002bb6:	701a      	strb	r2, [r3, #0]
 8002bb8:	e010      	b.n	8002bdc <LTC681x_rdcfg+0xb8>
		} else {
			c_ic = total_ic - current_ic - 1;
 8002bba:	4b55      	ldr	r3, [pc, #340]	@ (8002d10 <LTC681x_rdcfg+0x1ec>)
 8002bbc:	228c      	movs	r2, #140	@ 0x8c
 8002bbe:	0052      	lsls	r2, r2, #1
 8002bc0:	189b      	adds	r3, r3, r2
 8002bc2:	19da      	adds	r2, r3, r7
 8002bc4:	238b      	movs	r3, #139	@ 0x8b
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	7812      	ldrb	r2, [r2, #0]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	2318      	movs	r3, #24
 8002bd4:	33ff      	adds	r3, #255	@ 0xff
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	3a01      	subs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
		}

		for (byte = 0; byte < 8; byte++) {
 8002bdc:	2300      	movs	r3, #0
 8002bde:	2288      	movs	r2, #136	@ 0x88
 8002be0:	0052      	lsls	r2, r2, #1
 8002be2:	18ba      	adds	r2, r7, r2
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e022      	b.n	8002c2e <LTC681x_rdcfg+0x10a>
			ic[c_ic].config.rx_data[byte] =
					read_buffer[byte + (8 * current_ic)];
 8002be8:	238b      	movs	r3, #139	@ 0x8b
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	00da      	lsls	r2, r3, #3
 8002bf2:	2088      	movs	r0, #136	@ 0x88
 8002bf4:	0040      	lsls	r0, r0, #1
 8002bf6:	183b      	adds	r3, r7, r0
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	18d3      	adds	r3, r2, r3
			ic[c_ic].config.rx_data[byte] =
 8002bfc:	2218      	movs	r2, #24
 8002bfe:	32ff      	adds	r2, #255	@ 0xff
 8002c00:	18ba      	adds	r2, r7, r2
 8002c02:	7812      	ldrb	r2, [r2, #0]
 8002c04:	21e8      	movs	r1, #232	@ 0xe8
 8002c06:	434a      	muls	r2, r1
 8002c08:	6839      	ldr	r1, [r7, #0]
 8002c0a:	188a      	adds	r2, r1, r2
					read_buffer[byte + (8 * current_ic)];
 8002c0c:	4941      	ldr	r1, [pc, #260]	@ (8002d14 <LTC681x_rdcfg+0x1f0>)
 8002c0e:	248c      	movs	r4, #140	@ 0x8c
 8002c10:	0064      	lsls	r4, r4, #1
 8002c12:	1909      	adds	r1, r1, r4
 8002c14:	19c9      	adds	r1, r1, r7
 8002c16:	5cc9      	ldrb	r1, [r1, r3]
			ic[c_ic].config.rx_data[byte] =
 8002c18:	183b      	adds	r3, r7, r0
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	18d3      	adds	r3, r2, r3
 8002c1e:	3306      	adds	r3, #6
 8002c20:	1c0a      	adds	r2, r1, #0
 8002c22:	701a      	strb	r2, [r3, #0]
		for (byte = 0; byte < 8; byte++) {
 8002c24:	183b      	adds	r3, r7, r0
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	183a      	adds	r2, r7, r0
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	2388      	movs	r3, #136	@ 0x88
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	18fb      	adds	r3, r7, r3
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b07      	cmp	r3, #7
 8002c38:	ddd6      	ble.n	8002be8 <LTC681x_rdcfg+0xc4>
		}

		calc_pec = pec15_calc(6, &read_buffer[8 * current_ic]);
 8002c3a:	258b      	movs	r5, #139	@ 0x8b
 8002c3c:	006d      	lsls	r5, r5, #1
 8002c3e:	197b      	adds	r3, r7, r5
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	2208      	movs	r2, #8
 8002c46:	18ba      	adds	r2, r7, r2
 8002c48:	18d3      	adds	r3, r2, r3
 8002c4a:	2686      	movs	r6, #134	@ 0x86
 8002c4c:	0076      	lsls	r6, r6, #1
 8002c4e:	19bc      	adds	r4, r7, r6
 8002c50:	0019      	movs	r1, r3
 8002c52:	2006      	movs	r0, #6
 8002c54:	f7ff fe7c 	bl	8002950 <pec15_calc>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	8023      	strh	r3, [r4, #0]
		data_pec = read_buffer[7 + (8 * current_ic)]
 8002c5c:	197b      	adds	r3, r7, r5
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	3307      	adds	r3, #7
 8002c64:	4a2b      	ldr	r2, [pc, #172]	@ (8002d14 <LTC681x_rdcfg+0x1f0>)
 8002c66:	208c      	movs	r0, #140	@ 0x8c
 8002c68:	0040      	lsls	r0, r0, #1
 8002c6a:	1812      	adds	r2, r2, r0
 8002c6c:	19d2      	adds	r2, r2, r7
 8002c6e:	5cd3      	ldrb	r3, [r2, r3]
 8002c70:	b21a      	sxth	r2, r3
				| (read_buffer[6 + (8 * current_ic)] << 8);
 8002c72:	197b      	adds	r3, r7, r5
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	3306      	adds	r3, #6
 8002c7a:	4926      	ldr	r1, [pc, #152]	@ (8002d14 <LTC681x_rdcfg+0x1f0>)
 8002c7c:	1809      	adds	r1, r1, r0
 8002c7e:	19c9      	adds	r1, r1, r7
 8002c80:	5ccb      	ldrb	r3, [r1, r3]
 8002c82:	b21b      	sxth	r3, r3
 8002c84:	021b      	lsls	r3, r3, #8
 8002c86:	b21b      	sxth	r3, r3
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	b21a      	sxth	r2, r3
		data_pec = read_buffer[7 + (8 * current_ic)]
 8002c8c:	2185      	movs	r1, #133	@ 0x85
 8002c8e:	0049      	lsls	r1, r1, #1
 8002c90:	187b      	adds	r3, r7, r1
 8002c92:	801a      	strh	r2, [r3, #0]
		if (calc_pec != data_pec) {
 8002c94:	19ba      	adds	r2, r7, r6
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	8812      	ldrh	r2, [r2, #0]
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d00a      	beq.n	8002cb6 <LTC681x_rdcfg+0x192>
			ic[c_ic].config.rx_pec_match = 1;
 8002ca0:	2318      	movs	r3, #24
 8002ca2:	33ff      	adds	r3, #255	@ 0xff
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	22e8      	movs	r2, #232	@ 0xe8
 8002caa:	4353      	muls	r3, r2
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	18d3      	adds	r3, r2, r3
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	739a      	strb	r2, [r3, #14]
 8002cb4:	e009      	b.n	8002cca <LTC681x_rdcfg+0x1a6>
		} else
			ic[c_ic].config.rx_pec_match = 0;
 8002cb6:	2318      	movs	r3, #24
 8002cb8:	33ff      	adds	r3, #255	@ 0xff
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	22e8      	movs	r2, #232	@ 0xe8
 8002cc0:	4353      	muls	r3, r2
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	18d3      	adds	r3, r2, r3
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	739a      	strb	r2, [r3, #14]
	for (current_ic = total_ic; current_ic > 0; current_ic--) {
 8002cca:	218b      	movs	r1, #139	@ 0x8b
 8002ccc:	0049      	lsls	r1, r1, #1
 8002cce:	187b      	adds	r3, r7, r1
 8002cd0:	781a      	ldrb	r2, [r3, #0]
 8002cd2:	187b      	adds	r3, r7, r1
 8002cd4:	3a01      	subs	r2, #1
 8002cd6:	701a      	strb	r2, [r3, #0]
 8002cd8:	238b      	movs	r3, #139	@ 0x8b
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d000      	beq.n	8002ce6 <LTC681x_rdcfg+0x1c2>
 8002ce4:	e758      	b.n	8002b98 <LTC681x_rdcfg+0x74>
	}
	LTC681x_check_pec(total_ic, CFGR, ic);
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	4b09      	ldr	r3, [pc, #36]	@ (8002d10 <LTC681x_rdcfg+0x1ec>)
 8002cea:	218c      	movs	r1, #140	@ 0x8c
 8002cec:	0049      	lsls	r1, r1, #1
 8002cee:	185b      	adds	r3, r3, r1
 8002cf0:	19db      	adds	r3, r3, r7
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f000 ffb0 	bl	8003c5c <LTC681x_check_pec>

	return (pec_error);
 8002cfc:	2310      	movs	r3, #16
 8002cfe:	33ff      	adds	r3, #255	@ 0xff
 8002d00:	18fb      	adds	r3, r7, r3
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	b25b      	sxtb	r3, r3
}
 8002d06:	0018      	movs	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b047      	add	sp, #284	@ 0x11c
 8002d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d0e:	46c0      	nop			@ (mov r8, r8)
 8002d10:	fffffeef 	.word	0xfffffeef
 8002d14:	fffffef0 	.word	0xfffffef0

08002d18 <LTC681x_adcv>:

/* Starts ADC conversion for cell voltage */
void LTC681x_adcv(uint8_t MD, //ADC Mode
		uint8_t DCP, //Discharge Permit
		uint8_t CH //Cell Channels to be measured
		) {
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	0004      	movs	r4, r0
 8002d20:	0008      	movs	r0, r1
 8002d22:	0011      	movs	r1, r2
 8002d24:	1dfb      	adds	r3, r7, #7
 8002d26:	1c22      	adds	r2, r4, #0
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	1dbb      	adds	r3, r7, #6
 8002d2c:	1c02      	adds	r2, r0, #0
 8002d2e:	701a      	strb	r2, [r3, #0]
 8002d30:	1d7b      	adds	r3, r7, #5
 8002d32:	1c0a      	adds	r2, r1, #0
 8002d34:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8002d36:	1dfb      	adds	r3, r7, #7
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	105b      	asrs	r3, r3, #1
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	200f      	movs	r0, #15
 8002d40:	183b      	adds	r3, r7, r0
 8002d42:	2101      	movs	r1, #1
 8002d44:	400a      	ands	r2, r1
 8002d46:	701a      	strb	r2, [r3, #0]
	cmd[0] = md_bits + 0x02;
 8002d48:	0001      	movs	r1, r0
 8002d4a:	187b      	adds	r3, r7, r1
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	3302      	adds	r3, #2
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	200c      	movs	r0, #12
 8002d54:	183b      	adds	r3, r7, r0
 8002d56:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8002d58:	187b      	adds	r3, r7, r1
 8002d5a:	1dfa      	adds	r2, r7, #7
 8002d5c:	7812      	ldrb	r2, [r2, #0]
 8002d5e:	01d2      	lsls	r2, r2, #7
 8002d60:	701a      	strb	r2, [r3, #0]
	cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 8002d62:	1dbb      	adds	r3, r7, #6
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	187b      	adds	r3, r7, r1
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	18d3      	adds	r3, r2, r3
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	1d7b      	adds	r3, r7, #5
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	18d3      	adds	r3, r2, r3
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	3360      	adds	r3, #96	@ 0x60
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	183b      	adds	r3, r7, r0
 8002d80:	705a      	strb	r2, [r3, #1]

	cmd_68(cmd);
 8002d82:	183b      	adds	r3, r7, r0
 8002d84:	0018      	movs	r0, r3
 8002d86:	f7ff fc09 	bl	800259c <cmd_68>
}
 8002d8a:	46c0      	nop			@ (mov r8, r8)
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b005      	add	sp, #20
 8002d90:	bd90      	pop	{r4, r7, pc}

08002d92 <LTC681x_adax>:

/* Start ADC Conversion for GPIO and Vref2  */
void LTC681x_adax(uint8_t MD, //ADC Mode
		uint8_t CHG //GPIO Channels to be measured
		) {
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	0002      	movs	r2, r0
 8002d9a:	1dfb      	adds	r3, r7, #7
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	1dbb      	adds	r3, r7, #6
 8002da0:	1c0a      	adds	r2, r1, #0
 8002da2:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[4];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8002da4:	1dfb      	adds	r3, r7, #7
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	105b      	asrs	r3, r3, #1
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	200f      	movs	r0, #15
 8002dae:	183b      	adds	r3, r7, r0
 8002db0:	2101      	movs	r1, #1
 8002db2:	400a      	ands	r2, r1
 8002db4:	701a      	strb	r2, [r3, #0]
	cmd[0] = md_bits + 0x04;
 8002db6:	0001      	movs	r1, r0
 8002db8:	187b      	adds	r3, r7, r1
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	2008      	movs	r0, #8
 8002dc2:	183b      	adds	r3, r7, r0
 8002dc4:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8002dc6:	187b      	adds	r3, r7, r1
 8002dc8:	1dfa      	adds	r2, r7, #7
 8002dca:	7812      	ldrb	r2, [r2, #0]
 8002dcc:	01d2      	lsls	r2, r2, #7
 8002dce:	701a      	strb	r2, [r3, #0]
	cmd[1] = md_bits + 0x60 + CHG;
 8002dd0:	187a      	adds	r2, r7, r1
 8002dd2:	1dbb      	adds	r3, r7, #6
 8002dd4:	7812      	ldrb	r2, [r2, #0]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	18d3      	adds	r3, r2, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	3360      	adds	r3, #96	@ 0x60
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	183b      	adds	r3, r7, r0
 8002de2:	705a      	strb	r2, [r3, #1]

	cmd_68(cmd);
 8002de4:	183b      	adds	r3, r7, r0
 8002de6:	0018      	movs	r0, r3
 8002de8:	f7ff fbd8 	bl	800259c <cmd_68>
}
 8002dec:	46c0      	nop			@ (mov r8, r8)
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b004      	add	sp, #16
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <LTC681x_adstat>:

/* Start ADC Conversion for Status  */
void LTC681x_adstat(uint8_t MD, //ADC Mode
		uint8_t CHST //Stat Channels to be measured
		) {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	0002      	movs	r2, r0
 8002dfc:	1dfb      	adds	r3, r7, #7
 8002dfe:	701a      	strb	r2, [r3, #0]
 8002e00:	1dbb      	adds	r3, r7, #6
 8002e02:	1c0a      	adds	r2, r1, #0
 8002e04:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[4];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8002e06:	1dfb      	adds	r3, r7, #7
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	105b      	asrs	r3, r3, #1
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	200f      	movs	r0, #15
 8002e10:	183b      	adds	r3, r7, r0
 8002e12:	2101      	movs	r1, #1
 8002e14:	400a      	ands	r2, r1
 8002e16:	701a      	strb	r2, [r3, #0]
	cmd[0] = md_bits + 0x04;
 8002e18:	0001      	movs	r1, r0
 8002e1a:	187b      	adds	r3, r7, r1
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	2008      	movs	r0, #8
 8002e24:	183b      	adds	r3, r7, r0
 8002e26:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8002e28:	187b      	adds	r3, r7, r1
 8002e2a:	1dfa      	adds	r2, r7, #7
 8002e2c:	7812      	ldrb	r2, [r2, #0]
 8002e2e:	01d2      	lsls	r2, r2, #7
 8002e30:	701a      	strb	r2, [r3, #0]
	cmd[1] = md_bits + 0x68 + CHST;
 8002e32:	187a      	adds	r2, r7, r1
 8002e34:	1dbb      	adds	r3, r7, #6
 8002e36:	7812      	ldrb	r2, [r2, #0]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	18d3      	adds	r3, r2, r3
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	3368      	adds	r3, #104	@ 0x68
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	183b      	adds	r3, r7, r0
 8002e44:	705a      	strb	r2, [r3, #1]

	cmd_68(cmd);
 8002e46:	183b      	adds	r3, r7, r0
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f7ff fba7 	bl	800259c <cmd_68>
}
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b004      	add	sp, #16
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <LTC681x_rdcv>:
 and store the cell voltages in c_codes variable.
 */
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
		uint8_t total_ic, // The number of ICs in the system
		cell_asic *ic // Array of the parsed cell codes
		) {
 8002e56:	b5b0      	push	{r4, r5, r7, lr}
 8002e58:	b088      	sub	sp, #32
 8002e5a:	af02      	add	r7, sp, #8
 8002e5c:	603a      	str	r2, [r7, #0]
 8002e5e:	1dfb      	adds	r3, r7, #7
 8002e60:	1c02      	adds	r2, r0, #0
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	1dbb      	adds	r3, r7, #6
 8002e66:	1c0a      	adds	r2, r1, #0
 8002e68:	701a      	strb	r2, [r3, #0]
	int8_t pec_error = 0;
 8002e6a:	2317      	movs	r3, #23
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	2200      	movs	r2, #0
 8002e70:	701a      	strb	r2, [r3, #0]
	uint8_t *cell_data;
	uint8_t c_ic = 0;
 8002e72:	2316      	movs	r3, #22
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
	cell_data = (uint8_t*) malloc((NUM_RX_BYT * total_ic) * sizeof(uint8_t));
 8002e7a:	1dbb      	adds	r3, r7, #6
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	0018      	movs	r0, r3
 8002e82:	f005 fc9f 	bl	80087c4 <malloc>
 8002e86:	0003      	movs	r3, r0
 8002e88:	60bb      	str	r3, [r7, #8]

	if (reg == 0) {
 8002e8a:	1dfb      	adds	r3, r7, #7
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d167      	bne.n	8002f62 <LTC681x_rdcv+0x10c>
		uint8_t cell_reg = 0;
 8002e92:	2115      	movs	r1, #21
 8002e94:	187b      	adds	r3, r7, r1
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
		int current_ic = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
		for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8002e9e:	187b      	adds	r3, r7, r1
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
 8002ea4:	e054      	b.n	8002f50 <LTC681x_rdcv+0xfa>
				{
			LTC681x_rdcv_reg(cell_reg, total_ic, cell_data);
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	1dbb      	adds	r3, r7, #6
 8002eaa:	7819      	ldrb	r1, [r3, #0]
 8002eac:	2315      	movs	r3, #21
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f000 fc7e 	bl	80037b4 <LTC681x_rdcv_reg>
			for (current_ic = 0; current_ic < total_ic; current_ic++) {
 8002eb8:	2300      	movs	r3, #0
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	e03d      	b.n	8002f3a <LTC681x_rdcv+0xe4>
				if (ic->isospi_reverse == false) {
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	22bf      	movs	r2, #191	@ 0xbf
 8002ec2:	5c9b      	ldrb	r3, [r3, r2]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	4053      	eors	r3, r2
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d004      	beq.n	8002ed8 <LTC681x_rdcv+0x82>
					c_ic = current_ic;
 8002ece:	2316      	movs	r3, #22
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	701a      	strb	r2, [r3, #0]
 8002ed6:	e009      	b.n	8002eec <LTC681x_rdcv+0x96>
				} else {
					c_ic = total_ic - current_ic - 1;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	1dba      	adds	r2, r7, #6
 8002ede:	7812      	ldrb	r2, [r2, #0]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	2316      	movs	r3, #22
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	3a01      	subs	r2, #1
 8002eea:	701a      	strb	r2, [r3, #0]
				}
				pec_error = pec_error
						+ parse_cells(current_ic, cell_reg, cell_data,
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	b2d8      	uxtb	r0, r3
								&ic[c_ic].cells.c_codes[0],
 8002ef0:	2116      	movs	r1, #22
 8002ef2:	187b      	adds	r3, r7, r1
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	22e8      	movs	r2, #232	@ 0xe8
 8002ef8:	4353      	muls	r3, r2
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	18d3      	adds	r3, r2, r3
						+ parse_cells(current_ic, cell_reg, cell_data,
 8002efe:	331e      	adds	r3, #30
 8002f00:	001d      	movs	r5, r3
								&ic[c_ic].cells.pec_match[0]);
 8002f02:	187b      	adds	r3, r7, r1
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	22e8      	movs	r2, #232	@ 0xe8
 8002f08:	4353      	muls	r3, r2
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	18d3      	adds	r3, r2, r3
						+ parse_cells(current_ic, cell_reg, cell_data,
 8002f0e:	3342      	adds	r3, #66	@ 0x42
 8002f10:	68bc      	ldr	r4, [r7, #8]
 8002f12:	2215      	movs	r2, #21
 8002f14:	18ba      	adds	r2, r7, r2
 8002f16:	7811      	ldrb	r1, [r2, #0]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	002b      	movs	r3, r5
 8002f1c:	0022      	movs	r2, r4
 8002f1e:	f000 fd97 	bl	8003a50 <parse_cells>
 8002f22:	0003      	movs	r3, r0
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	2117      	movs	r1, #23
 8002f28:	187b      	adds	r3, r7, r1
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	18d3      	adds	r3, r2, r3
 8002f2e:	b2da      	uxtb	r2, r3
				pec_error = pec_error
 8002f30:	187b      	adds	r3, r7, r1
 8002f32:	701a      	strb	r2, [r3, #0]
			for (current_ic = 0; current_ic < total_ic; current_ic++) {
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	3301      	adds	r3, #1
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	1dbb      	adds	r3, r7, #6
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	dbbc      	blt.n	8002ebe <LTC681x_rdcv+0x68>
		for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8002f44:	2115      	movs	r1, #21
 8002f46:	187b      	adds	r3, r7, r1
 8002f48:	781a      	ldrb	r2, [r3, #0]
 8002f4a:	187b      	adds	r3, r7, r1
 8002f4c:	3201      	adds	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	22df      	movs	r2, #223	@ 0xdf
 8002f54:	5c9b      	ldrb	r3, [r3, r2]
 8002f56:	2215      	movs	r2, #21
 8002f58:	18ba      	adds	r2, r7, r2
 8002f5a:	7812      	ldrb	r2, [r2, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d9a2      	bls.n	8002ea6 <LTC681x_rdcv+0x50>
 8002f60:	e053      	b.n	800300a <LTC681x_rdcv+0x1b4>
			}
		}
	}

	else {
		LTC681x_rdcv_reg(reg, total_ic, cell_data);
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	1dbb      	adds	r3, r7, #6
 8002f66:	7819      	ldrb	r1, [r3, #0]
 8002f68:	1dfb      	adds	r3, r7, #7
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f000 fc21 	bl	80037b4 <LTC681x_rdcv_reg>

		int current_ic = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
		for (current_ic = 0; current_ic < total_ic; current_ic++) {
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	e041      	b.n	8003000 <LTC681x_rdcv+0x1aa>
			if (ic->isospi_reverse == false) {
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	22bf      	movs	r2, #191	@ 0xbf
 8002f80:	5c9b      	ldrb	r3, [r3, r2]
 8002f82:	2201      	movs	r2, #1
 8002f84:	4053      	eors	r3, r2
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d004      	beq.n	8002f96 <LTC681x_rdcv+0x140>
				c_ic = current_ic;
 8002f8c:	2316      	movs	r3, #22
 8002f8e:	18fb      	adds	r3, r7, r3
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	701a      	strb	r2, [r3, #0]
 8002f94:	e009      	b.n	8002faa <LTC681x_rdcv+0x154>
			} else {
				c_ic = total_ic - current_ic - 1;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	1dba      	adds	r2, r7, #6
 8002f9c:	7812      	ldrb	r2, [r2, #0]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	2316      	movs	r3, #22
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	3a01      	subs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
			}
			pec_error = pec_error
					+ parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	b2d8      	uxtb	r0, r3
 8002fae:	2116      	movs	r1, #22
 8002fb0:	187b      	adds	r3, r7, r1
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	001a      	movs	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	189c      	adds	r4, r3, r2
							&ic[c_ic].cells.c_codes[0],
 8002fbc:	187b      	adds	r3, r7, r1
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	22e8      	movs	r2, #232	@ 0xe8
 8002fc2:	4353      	muls	r3, r2
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	18d3      	adds	r3, r2, r3
					+ parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 8002fc8:	331e      	adds	r3, #30
 8002fca:	001d      	movs	r5, r3
							&ic[c_ic].cells.pec_match[0]);
 8002fcc:	187b      	adds	r3, r7, r1
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	22e8      	movs	r2, #232	@ 0xe8
 8002fd2:	4353      	muls	r3, r2
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	18d3      	adds	r3, r2, r3
					+ parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 8002fd8:	3342      	adds	r3, #66	@ 0x42
 8002fda:	1dfa      	adds	r2, r7, #7
 8002fdc:	7811      	ldrb	r1, [r2, #0]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	002b      	movs	r3, r5
 8002fe2:	0022      	movs	r2, r4
 8002fe4:	f000 fd34 	bl	8003a50 <parse_cells>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	2117      	movs	r1, #23
 8002fee:	187b      	adds	r3, r7, r1
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	18d3      	adds	r3, r2, r3
 8002ff4:	b2da      	uxtb	r2, r3
			pec_error = pec_error
 8002ff6:	187b      	adds	r3, r7, r1
 8002ff8:	701a      	strb	r2, [r3, #0]
		for (current_ic = 0; current_ic < total_ic; current_ic++) {
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	1dbb      	adds	r3, r7, #6
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	429a      	cmp	r2, r3
 8003008:	dbb8      	blt.n	8002f7c <LTC681x_rdcv+0x126>
		}
	}
	LTC681x_check_pec(total_ic, CELL, ic);
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	1dbb      	adds	r3, r7, #6
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2101      	movs	r1, #1
 8003012:	0018      	movs	r0, r3
 8003014:	f000 fe22 	bl	8003c5c <LTC681x_check_pec>
	free(cell_data);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	0018      	movs	r0, r3
 800301c:	f005 fbdc 	bl	80087d8 <free>

	return (pec_error);
 8003020:	2317      	movs	r3, #23
 8003022:	18fb      	adds	r3, r7, r3
 8003024:	781b      	ldrb	r3, [r3, #0]
}
 8003026:	0018      	movs	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	b006      	add	sp, #24
 800302c:	bdb0      	pop	{r4, r5, r7, pc}

0800302e <LTC681x_rdaux>:
 and store the gpio voltages in a_codes variable.
 */
int8_t LTC681x_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
		uint8_t total_ic, //The number of ICs in the system
		cell_asic *ic //A two dimensional array of the gpio voltage codes.
		) {
 800302e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003030:	b089      	sub	sp, #36	@ 0x24
 8003032:	af02      	add	r7, sp, #8
 8003034:	603a      	str	r2, [r7, #0]
 8003036:	1dfb      	adds	r3, r7, #7
 8003038:	1c02      	adds	r2, r0, #0
 800303a:	701a      	strb	r2, [r3, #0]
 800303c:	1dbb      	adds	r3, r7, #6
 800303e:	1c0a      	adds	r2, r1, #0
 8003040:	701a      	strb	r2, [r3, #0]
	uint8_t *data;
	int8_t pec_error = 0;
 8003042:	2317      	movs	r3, #23
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	2200      	movs	r2, #0
 8003048:	701a      	strb	r2, [r3, #0]
	uint8_t c_ic = 0;
 800304a:	2316      	movs	r3, #22
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
	data = (uint8_t*) malloc((NUM_RX_BYT * total_ic) * sizeof(uint8_t));
 8003052:	1dbb      	adds	r3, r7, #6
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	0018      	movs	r0, r3
 800305a:	f005 fbb3 	bl	80087c4 <malloc>
 800305e:	0003      	movs	r3, r0
 8003060:	60bb      	str	r3, [r7, #8]

	if (reg == 0) {
 8003062:	1dfb      	adds	r3, r7, #7
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d15f      	bne.n	800312a <LTC681x_rdaux+0xfc>
		uint8_t gpio_reg = 0;
 800306a:	2315      	movs	r3, #21
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	2200      	movs	r2, #0
 8003070:	701a      	strb	r2, [r3, #0]
		int current_ic = 0;
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]
		for (gpio_reg; gpio_reg < ic[0].ic_reg.num_gpio_reg + 1;
 8003076:	e04f      	b.n	8003118 <LTC681x_rdaux+0xea>
				gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
				{
			LTC681x_rdaux_reg(gpio_reg, total_ic, data); //Reads the raw auxiliary register data into the data[] array
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	1dbb      	adds	r3, r7, #6
 800307c:	7819      	ldrb	r1, [r3, #0]
 800307e:	2315      	movs	r3, #21
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	0018      	movs	r0, r3
 8003086:	f000 fc17 	bl	80038b8 <LTC681x_rdaux_reg>
			for (current_ic = 0; current_ic < total_ic; current_ic++) {
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	e038      	b.n	8003102 <LTC681x_rdaux+0xd4>
				if (ic->isospi_reverse == false) {
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	22bf      	movs	r2, #191	@ 0xbf
 8003094:	5c9b      	ldrb	r3, [r3, r2]
 8003096:	2201      	movs	r2, #1
 8003098:	4053      	eors	r3, r2
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d004      	beq.n	80030aa <LTC681x_rdaux+0x7c>
					c_ic = current_ic;
 80030a0:	2316      	movs	r3, #22
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	e009      	b.n	80030be <LTC681x_rdaux+0x90>
				} else {
					c_ic = total_ic - current_ic - 1;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	1dba      	adds	r2, r7, #6
 80030b0:	7812      	ldrb	r2, [r2, #0]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	2316      	movs	r3, #22
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	3a01      	subs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
				}
				pec_error = parse_cells(current_ic, gpio_reg, data,
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	b2d8      	uxtb	r0, r3
						&ic[c_ic].aux.a_codes[0], &ic[c_ic].aux.pec_match[0]);
 80030c2:	2116      	movs	r1, #22
 80030c4:	187b      	adds	r3, r7, r1
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	22e8      	movs	r2, #232	@ 0xe8
 80030ca:	4353      	muls	r3, r2
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	18d3      	adds	r3, r2, r3
				pec_error = parse_cells(current_ic, gpio_reg, data,
 80030d0:	3348      	adds	r3, #72	@ 0x48
 80030d2:	001e      	movs	r6, r3
						&ic[c_ic].aux.a_codes[0], &ic[c_ic].aux.pec_match[0]);
 80030d4:	187b      	adds	r3, r7, r1
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	22e8      	movs	r2, #232	@ 0xe8
 80030da:	4353      	muls	r3, r2
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	18d3      	adds	r3, r2, r3
				pec_error = parse_cells(current_ic, gpio_reg, data,
 80030e0:	335a      	adds	r3, #90	@ 0x5a
 80030e2:	2217      	movs	r2, #23
 80030e4:	18bc      	adds	r4, r7, r2
 80030e6:	68bd      	ldr	r5, [r7, #8]
 80030e8:	2215      	movs	r2, #21
 80030ea:	18ba      	adds	r2, r7, r2
 80030ec:	7811      	ldrb	r1, [r2, #0]
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	0033      	movs	r3, r6
 80030f2:	002a      	movs	r2, r5
 80030f4:	f000 fcac 	bl	8003a50 <parse_cells>
 80030f8:	0003      	movs	r3, r0
 80030fa:	7023      	strb	r3, [r4, #0]
			for (current_ic = 0; current_ic < total_ic; current_ic++) {
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	3301      	adds	r3, #1
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	1dbb      	adds	r3, r7, #6
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	429a      	cmp	r2, r3
 800310a:	dbc1      	blt.n	8003090 <LTC681x_rdaux+0x62>
				gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 800310c:	2115      	movs	r1, #21
 800310e:	187b      	adds	r3, r7, r1
 8003110:	781a      	ldrb	r2, [r3, #0]
 8003112:	187b      	adds	r3, r7, r1
 8003114:	3201      	adds	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
		for (gpio_reg; gpio_reg < ic[0].ic_reg.num_gpio_reg + 1;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	22e0      	movs	r2, #224	@ 0xe0
 800311c:	5c9b      	ldrb	r3, [r3, r2]
 800311e:	2215      	movs	r2, #21
 8003120:	18ba      	adds	r2, r7, r2
 8003122:	7812      	ldrb	r2, [r2, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d9a7      	bls.n	8003078 <LTC681x_rdaux+0x4a>
 8003128:	e049      	b.n	80031be <LTC681x_rdaux+0x190>
			}
		}
	} else {
		LTC681x_rdaux_reg(reg, total_ic, data);
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	1dbb      	adds	r3, r7, #6
 800312e:	7819      	ldrb	r1, [r3, #0]
 8003130:	1dfb      	adds	r3, r7, #7
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	0018      	movs	r0, r3
 8003136:	f000 fbbf 	bl	80038b8 <LTC681x_rdaux_reg>

		int current_ic = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
		for (current_ic = 0; current_ic < total_ic; current_ic++) {
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	e037      	b.n	80031b4 <LTC681x_rdaux+0x186>
			if (ic->isospi_reverse == false) {
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	22bf      	movs	r2, #191	@ 0xbf
 8003148:	5c9b      	ldrb	r3, [r3, r2]
 800314a:	2201      	movs	r2, #1
 800314c:	4053      	eors	r3, r2
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d004      	beq.n	800315e <LTC681x_rdaux+0x130>
				c_ic = current_ic;
 8003154:	2316      	movs	r3, #22
 8003156:	18fb      	adds	r3, r7, r3
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	701a      	strb	r2, [r3, #0]
 800315c:	e009      	b.n	8003172 <LTC681x_rdaux+0x144>
			} else {
				c_ic = total_ic - current_ic - 1;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	1dba      	adds	r2, r7, #6
 8003164:	7812      	ldrb	r2, [r2, #0]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	b2da      	uxtb	r2, r3
 800316a:	2316      	movs	r3, #22
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	3a01      	subs	r2, #1
 8003170:	701a      	strb	r2, [r3, #0]
			}
			pec_error = parse_cells(current_ic, reg, data,
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	b2d8      	uxtb	r0, r3
					&ic[c_ic].aux.a_codes[0], &ic[c_ic].aux.pec_match[0]);
 8003176:	2116      	movs	r1, #22
 8003178:	187b      	adds	r3, r7, r1
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	22e8      	movs	r2, #232	@ 0xe8
 800317e:	4353      	muls	r3, r2
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	18d3      	adds	r3, r2, r3
			pec_error = parse_cells(current_ic, reg, data,
 8003184:	3348      	adds	r3, #72	@ 0x48
 8003186:	001e      	movs	r6, r3
					&ic[c_ic].aux.a_codes[0], &ic[c_ic].aux.pec_match[0]);
 8003188:	187b      	adds	r3, r7, r1
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	22e8      	movs	r2, #232	@ 0xe8
 800318e:	4353      	muls	r3, r2
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	18d3      	adds	r3, r2, r3
			pec_error = parse_cells(current_ic, reg, data,
 8003194:	335a      	adds	r3, #90	@ 0x5a
 8003196:	2217      	movs	r2, #23
 8003198:	18bc      	adds	r4, r7, r2
 800319a:	68bd      	ldr	r5, [r7, #8]
 800319c:	1dfa      	adds	r2, r7, #7
 800319e:	7811      	ldrb	r1, [r2, #0]
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	0033      	movs	r3, r6
 80031a4:	002a      	movs	r2, r5
 80031a6:	f000 fc53 	bl	8003a50 <parse_cells>
 80031aa:	0003      	movs	r3, r0
 80031ac:	7023      	strb	r3, [r4, #0]
		for (current_ic = 0; current_ic < total_ic; current_ic++) {
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	3301      	adds	r3, #1
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	1dbb      	adds	r3, r7, #6
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	dbc2      	blt.n	8003144 <LTC681x_rdaux+0x116>
		}
	}
	LTC681x_check_pec(total_ic, AUX, ic);
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	1dbb      	adds	r3, r7, #6
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2102      	movs	r1, #2
 80031c6:	0018      	movs	r0, r3
 80031c8:	f000 fd48 	bl	8003c5c <LTC681x_check_pec>
	free(data);
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	0018      	movs	r0, r3
 80031d0:	f005 fb02 	bl	80087d8 <free>

	return (pec_error);
 80031d4:	2317      	movs	r3, #23
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	b25b      	sxtb	r3, r3
}
 80031dc:	0018      	movs	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	b007      	add	sp, #28
 80031e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031e4 <LTC681x_rdstat>:
int8_t LTC681x_rdstat(uint8_t reg, //Determines which Stat  register is read back.
		uint8_t total_ic, //The number of ICs in the system
		cell_asic *ic //A two dimensional array of the stat codes.
		)

{
 80031e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031e6:	b08b      	sub	sp, #44	@ 0x2c
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	603a      	str	r2, [r7, #0]
 80031ec:	1dfb      	adds	r3, r7, #7
 80031ee:	1c02      	adds	r2, r0, #0
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	1dbb      	adds	r3, r7, #6
 80031f4:	1c0a      	adds	r2, r1, #0
 80031f6:	701a      	strb	r2, [r3, #0]
	const uint8_t BYT_IN_REG = 6;
 80031f8:	231a      	movs	r3, #26
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	2206      	movs	r2, #6
 80031fe:	701a      	strb	r2, [r3, #0]
	const uint8_t STAT_IN_REG = 3;
 8003200:	2319      	movs	r3, #25
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	2203      	movs	r2, #3
 8003206:	701a      	strb	r2, [r3, #0]
	uint8_t *data;
	uint8_t data_counter = 0;
 8003208:	2327      	movs	r3, #39	@ 0x27
 800320a:	18fb      	adds	r3, r7, r3
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]
	int8_t pec_error = 0;
 8003210:	2326      	movs	r3, #38	@ 0x26
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]
	uint16_t parsed_stat;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t c_ic = 0;
 8003218:	2325      	movs	r3, #37	@ 0x25
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	2200      	movs	r2, #0
 800321e:	701a      	strb	r2, [r3, #0]

	data = (uint8_t*) malloc((12 * total_ic) * sizeof(uint8_t));
 8003220:	1dbb      	adds	r3, r7, #6
 8003222:	781a      	ldrb	r2, [r3, #0]
 8003224:	0013      	movs	r3, r2
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	189b      	adds	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	0018      	movs	r0, r3
 800322e:	f005 fac9 	bl	80087c4 <malloc>
 8003232:	0003      	movs	r3, r0
 8003234:	617b      	str	r3, [r7, #20]

	if (reg == 0) {
 8003236:	1dfb      	adds	r3, r7, #7
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d000      	beq.n	8003240 <LTC681x_rdstat+0x5c>
 800323e:	e16e      	b.n	800351e <LTC681x_rdstat+0x33a>
		uint8_t stat_reg = 0;
 8003240:	2124      	movs	r1, #36	@ 0x24
 8003242:	187b      	adds	r3, r7, r1
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
		uint8_t current_ic = 0;
 8003248:	2323      	movs	r3, #35	@ 0x23
 800324a:	18fb      	adds	r3, r7, r3
 800324c:	2200      	movs	r2, #0
 800324e:	701a      	strb	r2, [r3, #0]
		uint8_t current_stat = 0;
 8003250:	2322      	movs	r3, #34	@ 0x22
 8003252:	18fb      	adds	r3, r7, r3
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]
		for (stat_reg = 1; stat_reg < 3; stat_reg++) //Executes once for each of the LTC681x stat voltage registers
 8003258:	187b      	adds	r3, r7, r1
 800325a:	2201      	movs	r2, #1
 800325c:	701a      	strb	r2, [r3, #0]
 800325e:	e157      	b.n	8003510 <LTC681x_rdstat+0x32c>
				{
			data_counter = 0;
 8003260:	2327      	movs	r3, #39	@ 0x27
 8003262:	18fb      	adds	r3, r7, r3
 8003264:	2200      	movs	r2, #0
 8003266:	701a      	strb	r2, [r3, #0]
			LTC681x_rdstat_reg(stat_reg, total_ic, data); //Reads the raw status register data into the data[] array
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	1dbb      	adds	r3, r7, #6
 800326c:	7819      	ldrb	r1, [r3, #0]
 800326e:	2324      	movs	r3, #36	@ 0x24
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	0018      	movs	r0, r3
 8003276:	f000 fb91 	bl	800399c <LTC681x_rdstat_reg>

			for (current_ic = 0; current_ic < total_ic; current_ic++) // Executes for every LTC681x in the daisy chain
 800327a:	2323      	movs	r3, #35	@ 0x23
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e137      	b.n	80034f4 <LTC681x_rdstat+0x310>
					{					// current_ic is used as the IC counter
				if (ic->isospi_reverse == false) {
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	22bf      	movs	r2, #191	@ 0xbf
 8003288:	5c9b      	ldrb	r3, [r3, r2]
 800328a:	2201      	movs	r2, #1
 800328c:	4053      	eors	r3, r2
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d006      	beq.n	80032a2 <LTC681x_rdstat+0xbe>
					c_ic = current_ic;
 8003294:	2325      	movs	r3, #37	@ 0x25
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	2223      	movs	r2, #35	@ 0x23
 800329a:	18ba      	adds	r2, r7, r2
 800329c:	7812      	ldrb	r2, [r2, #0]
 800329e:	701a      	strb	r2, [r3, #0]
 80032a0:	e00a      	b.n	80032b8 <LTC681x_rdstat+0xd4>
				} else {
					c_ic = total_ic - current_ic - 1;
 80032a2:	1dba      	adds	r2, r7, #6
 80032a4:	2323      	movs	r3, #35	@ 0x23
 80032a6:	18fb      	adds	r3, r7, r3
 80032a8:	7812      	ldrb	r2, [r2, #0]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	2325      	movs	r3, #37	@ 0x25
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	3a01      	subs	r2, #1
 80032b6:	701a      	strb	r2, [r3, #0]
				}

				if (stat_reg == 1) {
 80032b8:	2324      	movs	r3, #36	@ 0x24
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d13b      	bne.n	800333a <LTC681x_rdstat+0x156>
					for (current_stat = 0; current_stat < STAT_IN_REG;
 80032c2:	2322      	movs	r3, #34	@ 0x22
 80032c4:	18fb      	adds	r3, r7, r3
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
 80032ca:	e02d      	b.n	8003328 <LTC681x_rdstat+0x144>
							current_stat++) // This loop parses the read back data into Status registers,
							{// it loops once for each of the 3 stat codes in the register
						parsed_stat = data[data_counter]
 80032cc:	2027      	movs	r0, #39	@ 0x27
 80032ce:	183b      	adds	r3, r7, r0
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	18d3      	adds	r3, r2, r3
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	0019      	movs	r1, r3
								+ (data[data_counter + 1] << 8); //Each stat codes is received as two bytes and is combined to create the parsed status code
 80032da:	183b      	adds	r3, r7, r0
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	3301      	adds	r3, #1
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	18d3      	adds	r3, r2, r3
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	b29a      	uxth	r2, r3
						parsed_stat = data[data_counter]
 80032ea:	2412      	movs	r4, #18
 80032ec:	193b      	adds	r3, r7, r4
 80032ee:	188a      	adds	r2, r1, r2
 80032f0:	801a      	strh	r2, [r3, #0]
						ic[c_ic].stat.stat_codes[current_stat] = parsed_stat;
 80032f2:	2325      	movs	r3, #37	@ 0x25
 80032f4:	18fb      	adds	r3, r7, r3
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	22e8      	movs	r2, #232	@ 0xe8
 80032fa:	4353      	muls	r3, r2
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	18d2      	adds	r2, r2, r3
 8003300:	2122      	movs	r1, #34	@ 0x22
 8003302:	187b      	adds	r3, r7, r1
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	332c      	adds	r3, #44	@ 0x2c
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	18d3      	adds	r3, r2, r3
 800330c:	3306      	adds	r3, #6
 800330e:	193a      	adds	r2, r7, r4
 8003310:	8812      	ldrh	r2, [r2, #0]
 8003312:	801a      	strh	r2, [r3, #0]
						data_counter = data_counter + 2; //Because stat codes are two bytes the data counter
 8003314:	183b      	adds	r3, r7, r0
 8003316:	183a      	adds	r2, r7, r0
 8003318:	7812      	ldrb	r2, [r2, #0]
 800331a:	3202      	adds	r2, #2
 800331c:	701a      	strb	r2, [r3, #0]
							current_stat++) // This loop parses the read back data into Status registers,
 800331e:	187b      	adds	r3, r7, r1
 8003320:	781a      	ldrb	r2, [r3, #0]
 8003322:	187b      	adds	r3, r7, r1
 8003324:	3201      	adds	r2, #1
 8003326:	701a      	strb	r2, [r3, #0]
					for (current_stat = 0; current_stat < STAT_IN_REG;
 8003328:	2322      	movs	r3, #34	@ 0x22
 800332a:	18fa      	adds	r2, r7, r3
 800332c:	2319      	movs	r3, #25
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	7812      	ldrb	r2, [r2, #0]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d3c9      	bcc.n	80032cc <LTC681x_rdstat+0xe8>
 8003338:	e080      	b.n	800343c <LTC681x_rdstat+0x258>
					}
				} else if (stat_reg == 2) {
 800333a:	2324      	movs	r3, #36	@ 0x24
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b02      	cmp	r3, #2
 8003342:	d17b      	bne.n	800343c <LTC681x_rdstat+0x258>
					parsed_stat = data[data_counter]
 8003344:	2027      	movs	r0, #39	@ 0x27
 8003346:	183b      	adds	r3, r7, r0
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	18d3      	adds	r3, r2, r3
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	0019      	movs	r1, r3
							+ (data[data_counter + 1] << 8); //Each stat is received as two bytes and is combined to create the parsed status code
 8003352:	183b      	adds	r3, r7, r0
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	3301      	adds	r3, #1
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	18d3      	adds	r3, r2, r3
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	021b      	lsls	r3, r3, #8
 8003360:	b29a      	uxth	r2, r3
					parsed_stat = data[data_counter]
 8003362:	2512      	movs	r5, #18
 8003364:	197b      	adds	r3, r7, r5
 8003366:	188a      	adds	r2, r1, r2
 8003368:	801a      	strh	r2, [r3, #0]
					data_counter = data_counter + 2;
 800336a:	183b      	adds	r3, r7, r0
 800336c:	183a      	adds	r2, r7, r0
 800336e:	7812      	ldrb	r2, [r2, #0]
 8003370:	3202      	adds	r2, #2
 8003372:	701a      	strb	r2, [r3, #0]
					ic[c_ic].stat.stat_codes[3] = parsed_stat;
 8003374:	2425      	movs	r4, #37	@ 0x25
 8003376:	193b      	adds	r3, r7, r4
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	22e8      	movs	r2, #232	@ 0xe8
 800337c:	4353      	muls	r3, r2
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	18d3      	adds	r3, r2, r3
 8003382:	197a      	adds	r2, r7, r5
 8003384:	2164      	movs	r1, #100	@ 0x64
 8003386:	8812      	ldrh	r2, [r2, #0]
 8003388:	525a      	strh	r2, [r3, r1]
					ic[c_ic].stat.flags[0] = data[data_counter++];
 800338a:	183b      	adds	r3, r7, r0
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	183a      	adds	r2, r7, r0
 8003390:	1c59      	adds	r1, r3, #1
 8003392:	7011      	strb	r1, [r2, #0]
 8003394:	001a      	movs	r2, r3
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	189a      	adds	r2, r3, r2
 800339a:	193b      	adds	r3, r7, r4
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	21e8      	movs	r1, #232	@ 0xe8
 80033a0:	434b      	muls	r3, r1
 80033a2:	6839      	ldr	r1, [r7, #0]
 80033a4:	18cb      	adds	r3, r1, r3
 80033a6:	7811      	ldrb	r1, [r2, #0]
 80033a8:	2266      	movs	r2, #102	@ 0x66
 80033aa:	5499      	strb	r1, [r3, r2]
					ic[c_ic].stat.flags[1] = data[data_counter++];
 80033ac:	183b      	adds	r3, r7, r0
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	183a      	adds	r2, r7, r0
 80033b2:	1c59      	adds	r1, r3, #1
 80033b4:	7011      	strb	r1, [r2, #0]
 80033b6:	001a      	movs	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	189a      	adds	r2, r3, r2
 80033bc:	193b      	adds	r3, r7, r4
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	21e8      	movs	r1, #232	@ 0xe8
 80033c2:	434b      	muls	r3, r1
 80033c4:	6839      	ldr	r1, [r7, #0]
 80033c6:	18cb      	adds	r3, r1, r3
 80033c8:	7811      	ldrb	r1, [r2, #0]
 80033ca:	2267      	movs	r2, #103	@ 0x67
 80033cc:	5499      	strb	r1, [r3, r2]
					ic[c_ic].stat.flags[2] = data[data_counter++];
 80033ce:	183b      	adds	r3, r7, r0
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	183a      	adds	r2, r7, r0
 80033d4:	1c59      	adds	r1, r3, #1
 80033d6:	7011      	strb	r1, [r2, #0]
 80033d8:	001a      	movs	r2, r3
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	189a      	adds	r2, r3, r2
 80033de:	193b      	adds	r3, r7, r4
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	21e8      	movs	r1, #232	@ 0xe8
 80033e4:	434b      	muls	r3, r1
 80033e6:	6839      	ldr	r1, [r7, #0]
 80033e8:	18cb      	adds	r3, r1, r3
 80033ea:	7811      	ldrb	r1, [r2, #0]
 80033ec:	2268      	movs	r2, #104	@ 0x68
 80033ee:	5499      	strb	r1, [r3, r2]
					ic[c_ic].stat.mux_fail[0] = (data[data_counter] & 0x02)
 80033f0:	183b      	adds	r3, r7, r0
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	18d3      	adds	r3, r2, r3
 80033f8:	781b      	ldrb	r3, [r3, #0]
							>> 1;
 80033fa:	105b      	asrs	r3, r3, #1
 80033fc:	b2da      	uxtb	r2, r3
					ic[c_ic].stat.mux_fail[0] = (data[data_counter] & 0x02)
 80033fe:	193b      	adds	r3, r7, r4
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	21e8      	movs	r1, #232	@ 0xe8
 8003404:	434b      	muls	r3, r1
 8003406:	6839      	ldr	r1, [r7, #0]
 8003408:	18cb      	adds	r3, r1, r3
							>> 1;
 800340a:	2101      	movs	r1, #1
 800340c:	400a      	ands	r2, r1
 800340e:	b2d1      	uxtb	r1, r2
					ic[c_ic].stat.mux_fail[0] = (data[data_counter] & 0x02)
 8003410:	2269      	movs	r2, #105	@ 0x69
 8003412:	5499      	strb	r1, [r3, r2]
					ic[c_ic].stat.thsd[0] = data[data_counter++] & 0x01;
 8003414:	183b      	adds	r3, r7, r0
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	183a      	adds	r2, r7, r0
 800341a:	1c59      	adds	r1, r3, #1
 800341c:	7011      	strb	r1, [r2, #0]
 800341e:	001a      	movs	r2, r3
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	189b      	adds	r3, r3, r2
 8003424:	781a      	ldrb	r2, [r3, #0]
 8003426:	193b      	adds	r3, r7, r4
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	21e8      	movs	r1, #232	@ 0xe8
 800342c:	434b      	muls	r3, r1
 800342e:	6839      	ldr	r1, [r7, #0]
 8003430:	18cb      	adds	r3, r1, r3
 8003432:	2101      	movs	r1, #1
 8003434:	400a      	ands	r2, r1
 8003436:	b2d1      	uxtb	r1, r2
 8003438:	226a      	movs	r2, #106	@ 0x6a
 800343a:	5499      	strb	r1, [r3, r2]
				}

				received_pec = (data[data_counter] << 8)
 800343c:	2127      	movs	r1, #39	@ 0x27
 800343e:	187b      	adds	r3, r7, r1
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	18d3      	adds	r3, r2, r3
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	021b      	lsls	r3, r3, #8
 800344a:	b29a      	uxth	r2, r3
						+ data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 800344c:	187b      	adds	r3, r7, r1
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	3301      	adds	r3, #1
 8003452:	6979      	ldr	r1, [r7, #20]
 8003454:	18cb      	adds	r3, r1, r3
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	0019      	movs	r1, r3
				received_pec = (data[data_counter] << 8)
 800345a:	2510      	movs	r5, #16
 800345c:	197b      	adds	r3, r7, r5
 800345e:	1852      	adds	r2, r2, r1
 8003460:	801a      	strh	r2, [r3, #0]
												  //after the 6 status data bytes
				data_pec = pec15_calc(BYT_IN_REG,
						&data[current_ic * NUM_RX_BYT]);
 8003462:	2323      	movs	r3, #35	@ 0x23
 8003464:	18fb      	adds	r3, r7, r3
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	001a      	movs	r2, r3
				data_pec = pec15_calc(BYT_IN_REG,
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	189a      	adds	r2, r3, r2
 8003470:	260e      	movs	r6, #14
 8003472:	19bc      	adds	r4, r7, r6
 8003474:	231a      	movs	r3, #26
 8003476:	18fb      	adds	r3, r7, r3
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	0011      	movs	r1, r2
 800347c:	0018      	movs	r0, r3
 800347e:	f7ff fa67 	bl	8002950 <pec15_calc>
 8003482:	0003      	movs	r3, r0
 8003484:	8023      	strh	r3, [r4, #0]

				if (received_pec != data_pec) {
 8003486:	197a      	adds	r2, r7, r5
 8003488:	19bb      	adds	r3, r7, r6
 800348a:	8812      	ldrh	r2, [r2, #0]
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d014      	beq.n	80034bc <LTC681x_rdstat+0x2d8>
					pec_error = -1; //The pec_error variable is simply set negative if any PEC errors
 8003492:	2326      	movs	r3, #38	@ 0x26
 8003494:	18fb      	adds	r3, r7, r3
 8003496:	22ff      	movs	r2, #255	@ 0xff
 8003498:	701a      	strb	r2, [r3, #0]
					ic[c_ic].stat.pec_match[stat_reg - 1] = 1; //are detected in the received serial data
 800349a:	2325      	movs	r3, #37	@ 0x25
 800349c:	18fb      	adds	r3, r7, r3
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	22e8      	movs	r2, #232	@ 0xe8
 80034a2:	4353      	muls	r3, r2
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	18d2      	adds	r2, r2, r3
 80034a8:	2324      	movs	r3, #36	@ 0x24
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	216b      	movs	r1, #107	@ 0x6b
 80034b2:	18d3      	adds	r3, r2, r3
 80034b4:	185b      	adds	r3, r3, r1
 80034b6:	2201      	movs	r2, #1
 80034b8:	701a      	strb	r2, [r3, #0]
 80034ba:	e00f      	b.n	80034dc <LTC681x_rdstat+0x2f8>

				} else {
					ic[c_ic].stat.pec_match[stat_reg - 1] = 0;
 80034bc:	2325      	movs	r3, #37	@ 0x25
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	22e8      	movs	r2, #232	@ 0xe8
 80034c4:	4353      	muls	r3, r2
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	18d2      	adds	r2, r2, r3
 80034ca:	2324      	movs	r3, #36	@ 0x24
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	216b      	movs	r1, #107	@ 0x6b
 80034d4:	18d3      	adds	r3, r2, r3
 80034d6:	185b      	adds	r3, r3, r1
 80034d8:	2200      	movs	r2, #0
 80034da:	701a      	strb	r2, [r3, #0]
				}

				data_counter = data_counter + 2; //Because the transmitted PEC code is 2 bytes long the data_counter
 80034dc:	2227      	movs	r2, #39	@ 0x27
 80034de:	18bb      	adds	r3, r7, r2
 80034e0:	18ba      	adds	r2, r7, r2
 80034e2:	7812      	ldrb	r2, [r2, #0]
 80034e4:	3202      	adds	r2, #2
 80034e6:	701a      	strb	r2, [r3, #0]
			for (current_ic = 0; current_ic < total_ic; current_ic++) // Executes for every LTC681x in the daisy chain
 80034e8:	2123      	movs	r1, #35	@ 0x23
 80034ea:	187b      	adds	r3, r7, r1
 80034ec:	781a      	ldrb	r2, [r3, #0]
 80034ee:	187b      	adds	r3, r7, r1
 80034f0:	3201      	adds	r2, #1
 80034f2:	701a      	strb	r2, [r3, #0]
 80034f4:	2323      	movs	r3, #35	@ 0x23
 80034f6:	18fa      	adds	r2, r7, r3
 80034f8:	1dbb      	adds	r3, r7, #6
 80034fa:	7812      	ldrb	r2, [r2, #0]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d200      	bcs.n	8003504 <LTC681x_rdstat+0x320>
 8003502:	e6bf      	b.n	8003284 <LTC681x_rdstat+0xa0>
		for (stat_reg = 1; stat_reg < 3; stat_reg++) //Executes once for each of the LTC681x stat voltage registers
 8003504:	2124      	movs	r1, #36	@ 0x24
 8003506:	187b      	adds	r3, r7, r1
 8003508:	781a      	ldrb	r2, [r3, #0]
 800350a:	187b      	adds	r3, r7, r1
 800350c:	3201      	adds	r2, #1
 800350e:	701a      	strb	r2, [r3, #0]
 8003510:	2324      	movs	r3, #36	@ 0x24
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d800      	bhi.n	800351c <LTC681x_rdstat+0x338>
 800351a:	e6a1      	b.n	8003260 <LTC681x_rdstat+0x7c>
 800351c:	e137      	b.n	800378e <LTC681x_rdstat+0x5aa>
				//must be incremented by 2 bytes to point to the next ICs status data
			}
		}
	} else {
		LTC681x_rdstat_reg(reg, total_ic, data);
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	1dbb      	adds	r3, r7, #6
 8003522:	7819      	ldrb	r1, [r3, #0]
 8003524:	1dfb      	adds	r3, r7, #7
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	0018      	movs	r0, r3
 800352a:	f000 fa37 	bl	800399c <LTC681x_rdstat_reg>
		int current_ic = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
		uint8_t current_stat = 0;
 8003532:	231b      	movs	r3, #27
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	2200      	movs	r2, #0
 8003538:	701a      	strb	r2, [r3, #0]
		for (current_ic = 0; current_ic < total_ic; current_ic++) // Executes for every LTC681x in the daisy chain
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	e120      	b.n	8003782 <LTC681x_rdstat+0x59e>
				{						// current_ic is used as an IC counter
			if (ic->isospi_reverse == false) {
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	22bf      	movs	r2, #191	@ 0xbf
 8003544:	5c9b      	ldrb	r3, [r3, r2]
 8003546:	2201      	movs	r2, #1
 8003548:	4053      	eors	r3, r2
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d004      	beq.n	800355a <LTC681x_rdstat+0x376>
				c_ic = current_ic;
 8003550:	2325      	movs	r3, #37	@ 0x25
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	69fa      	ldr	r2, [r7, #28]
 8003556:	701a      	strb	r2, [r3, #0]
 8003558:	e009      	b.n	800356e <LTC681x_rdstat+0x38a>
			} else {
				c_ic = total_ic - current_ic - 1;
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	1dba      	adds	r2, r7, #6
 8003560:	7812      	ldrb	r2, [r2, #0]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	b2da      	uxtb	r2, r3
 8003566:	2325      	movs	r3, #37	@ 0x25
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	3a01      	subs	r2, #1
 800356c:	701a      	strb	r2, [r3, #0]
			}
			if (reg == 1) {
 800356e:	1dfb      	adds	r3, r7, #7
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d13b      	bne.n	80035ee <LTC681x_rdstat+0x40a>
				for (current_stat = 0; current_stat < STAT_IN_REG;
 8003576:	231b      	movs	r3, #27
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	2200      	movs	r2, #0
 800357c:	701a      	strb	r2, [r3, #0]
 800357e:	e02d      	b.n	80035dc <LTC681x_rdstat+0x3f8>
						current_stat++) // This loop parses the read back data into Status voltages, it
						{// loops once for each of the 3 stat codes in the register

					parsed_stat = data[data_counter]
 8003580:	2027      	movs	r0, #39	@ 0x27
 8003582:	183b      	adds	r3, r7, r0
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	18d3      	adds	r3, r2, r3
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	0019      	movs	r1, r3
							+ (data[data_counter + 1] << 8); //Each stat codes is received as two bytes and is combined to
 800358e:	183b      	adds	r3, r7, r0
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	3301      	adds	r3, #1
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	18d3      	adds	r3, r2, r3
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	021b      	lsls	r3, r3, #8
 800359c:	b29a      	uxth	r2, r3
					parsed_stat = data[data_counter]
 800359e:	2412      	movs	r4, #18
 80035a0:	193b      	adds	r3, r7, r4
 80035a2:	188a      	adds	r2, r1, r2
 80035a4:	801a      	strh	r2, [r3, #0]
															 // create the parsed stat code

					ic[c_ic].stat.stat_codes[current_stat] = parsed_stat;
 80035a6:	2325      	movs	r3, #37	@ 0x25
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	22e8      	movs	r2, #232	@ 0xe8
 80035ae:	4353      	muls	r3, r2
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	18d2      	adds	r2, r2, r3
 80035b4:	211b      	movs	r1, #27
 80035b6:	187b      	adds	r3, r7, r1
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	332c      	adds	r3, #44	@ 0x2c
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	18d3      	adds	r3, r2, r3
 80035c0:	3306      	adds	r3, #6
 80035c2:	193a      	adds	r2, r7, r4
 80035c4:	8812      	ldrh	r2, [r2, #0]
 80035c6:	801a      	strh	r2, [r3, #0]
					data_counter = data_counter + 2; //Because stat codes are two bytes the data counter
 80035c8:	183b      	adds	r3, r7, r0
 80035ca:	183a      	adds	r2, r7, r0
 80035cc:	7812      	ldrb	r2, [r2, #0]
 80035ce:	3202      	adds	r2, #2
 80035d0:	701a      	strb	r2, [r3, #0]
						current_stat++) // This loop parses the read back data into Status voltages, it
 80035d2:	187b      	adds	r3, r7, r1
 80035d4:	781a      	ldrb	r2, [r3, #0]
 80035d6:	187b      	adds	r3, r7, r1
 80035d8:	3201      	adds	r2, #1
 80035da:	701a      	strb	r2, [r3, #0]
				for (current_stat = 0; current_stat < STAT_IN_REG;
 80035dc:	231b      	movs	r3, #27
 80035de:	18fa      	adds	r2, r7, r3
 80035e0:	2319      	movs	r3, #25
 80035e2:	18fb      	adds	r3, r7, r3
 80035e4:	7812      	ldrb	r2, [r2, #0]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d3c9      	bcc.n	8003580 <LTC681x_rdstat+0x39c>
 80035ec:	e084      	b.n	80036f8 <LTC681x_rdstat+0x514>
													 //must increment by two for each parsed stat code
				}
			} else if (reg == 2) {
 80035ee:	1dfb      	adds	r3, r7, #7
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d000      	beq.n	80035f8 <LTC681x_rdstat+0x414>
 80035f6:	e07f      	b.n	80036f8 <LTC681x_rdstat+0x514>
				parsed_stat = data[data_counter++]
 80035f8:	2427      	movs	r4, #39	@ 0x27
 80035fa:	193b      	adds	r3, r7, r4
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	193a      	adds	r2, r7, r4
 8003600:	1c59      	adds	r1, r3, #1
 8003602:	7011      	strb	r1, [r2, #0]
 8003604:	001a      	movs	r2, r3
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	189b      	adds	r3, r3, r2
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	0019      	movs	r1, r3
						+ (data[data_counter++] << 8); //Each stat codes is received as two bytes and is combined to
 800360e:	193b      	adds	r3, r7, r4
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	193a      	adds	r2, r7, r4
 8003614:	1c58      	adds	r0, r3, #1
 8003616:	7010      	strb	r0, [r2, #0]
 8003618:	001a      	movs	r2, r3
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	189b      	adds	r3, r3, r2
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	021b      	lsls	r3, r3, #8
 8003622:	b29a      	uxth	r2, r3
				parsed_stat = data[data_counter++]
 8003624:	2012      	movs	r0, #18
 8003626:	183b      	adds	r3, r7, r0
 8003628:	188a      	adds	r2, r1, r2
 800362a:	801a      	strh	r2, [r3, #0]
				ic[c_ic].stat.stat_codes[3] = parsed_stat;
 800362c:	2525      	movs	r5, #37	@ 0x25
 800362e:	197b      	adds	r3, r7, r5
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	22e8      	movs	r2, #232	@ 0xe8
 8003634:	4353      	muls	r3, r2
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	18d3      	adds	r3, r2, r3
 800363a:	183a      	adds	r2, r7, r0
 800363c:	2164      	movs	r1, #100	@ 0x64
 800363e:	8812      	ldrh	r2, [r2, #0]
 8003640:	525a      	strh	r2, [r3, r1]
				ic[c_ic].stat.flags[0] = data[data_counter++];
 8003642:	0020      	movs	r0, r4
 8003644:	183b      	adds	r3, r7, r0
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	183a      	adds	r2, r7, r0
 800364a:	1c59      	adds	r1, r3, #1
 800364c:	7011      	strb	r1, [r2, #0]
 800364e:	001a      	movs	r2, r3
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	189a      	adds	r2, r3, r2
 8003654:	002c      	movs	r4, r5
 8003656:	193b      	adds	r3, r7, r4
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	21e8      	movs	r1, #232	@ 0xe8
 800365c:	434b      	muls	r3, r1
 800365e:	6839      	ldr	r1, [r7, #0]
 8003660:	18cb      	adds	r3, r1, r3
 8003662:	7811      	ldrb	r1, [r2, #0]
 8003664:	2266      	movs	r2, #102	@ 0x66
 8003666:	5499      	strb	r1, [r3, r2]
				ic[c_ic].stat.flags[1] = data[data_counter++];
 8003668:	183b      	adds	r3, r7, r0
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	183a      	adds	r2, r7, r0
 800366e:	1c59      	adds	r1, r3, #1
 8003670:	7011      	strb	r1, [r2, #0]
 8003672:	001a      	movs	r2, r3
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	189a      	adds	r2, r3, r2
 8003678:	193b      	adds	r3, r7, r4
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	21e8      	movs	r1, #232	@ 0xe8
 800367e:	434b      	muls	r3, r1
 8003680:	6839      	ldr	r1, [r7, #0]
 8003682:	18cb      	adds	r3, r1, r3
 8003684:	7811      	ldrb	r1, [r2, #0]
 8003686:	2267      	movs	r2, #103	@ 0x67
 8003688:	5499      	strb	r1, [r3, r2]
				ic[c_ic].stat.flags[2] = data[data_counter++];
 800368a:	183b      	adds	r3, r7, r0
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	183a      	adds	r2, r7, r0
 8003690:	1c59      	adds	r1, r3, #1
 8003692:	7011      	strb	r1, [r2, #0]
 8003694:	001a      	movs	r2, r3
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	189a      	adds	r2, r3, r2
 800369a:	193b      	adds	r3, r7, r4
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	21e8      	movs	r1, #232	@ 0xe8
 80036a0:	434b      	muls	r3, r1
 80036a2:	6839      	ldr	r1, [r7, #0]
 80036a4:	18cb      	adds	r3, r1, r3
 80036a6:	7811      	ldrb	r1, [r2, #0]
 80036a8:	2268      	movs	r2, #104	@ 0x68
 80036aa:	5499      	strb	r1, [r3, r2]
				ic[c_ic].stat.mux_fail[0] = (data[data_counter] & 0x02) >> 1;
 80036ac:	183b      	adds	r3, r7, r0
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	18d3      	adds	r3, r2, r3
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	105b      	asrs	r3, r3, #1
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	193b      	adds	r3, r7, r4
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	21e8      	movs	r1, #232	@ 0xe8
 80036c0:	434b      	muls	r3, r1
 80036c2:	6839      	ldr	r1, [r7, #0]
 80036c4:	18cb      	adds	r3, r1, r3
 80036c6:	2101      	movs	r1, #1
 80036c8:	400a      	ands	r2, r1
 80036ca:	b2d1      	uxtb	r1, r2
 80036cc:	2269      	movs	r2, #105	@ 0x69
 80036ce:	5499      	strb	r1, [r3, r2]
				ic[c_ic].stat.thsd[0] = data[data_counter++] & 0x01;
 80036d0:	183b      	adds	r3, r7, r0
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	183a      	adds	r2, r7, r0
 80036d6:	1c59      	adds	r1, r3, #1
 80036d8:	7011      	strb	r1, [r2, #0]
 80036da:	001a      	movs	r2, r3
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	189b      	adds	r3, r3, r2
 80036e0:	781a      	ldrb	r2, [r3, #0]
 80036e2:	193b      	adds	r3, r7, r4
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	21e8      	movs	r1, #232	@ 0xe8
 80036e8:	434b      	muls	r3, r1
 80036ea:	6839      	ldr	r1, [r7, #0]
 80036ec:	18cb      	adds	r3, r1, r3
 80036ee:	2101      	movs	r1, #1
 80036f0:	400a      	ands	r2, r1
 80036f2:	b2d1      	uxtb	r1, r2
 80036f4:	226a      	movs	r2, #106	@ 0x6a
 80036f6:	5499      	strb	r1, [r3, r2]
			}

			received_pec = (data[data_counter] << 8) + data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 80036f8:	2127      	movs	r1, #39	@ 0x27
 80036fa:	187b      	adds	r3, r7, r1
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	18d3      	adds	r3, r2, r3
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	021b      	lsls	r3, r3, #8
 8003706:	b29a      	uxth	r2, r3
 8003708:	187b      	adds	r3, r7, r1
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	3301      	adds	r3, #1
 800370e:	6979      	ldr	r1, [r7, #20]
 8003710:	18cb      	adds	r3, r1, r3
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	0019      	movs	r1, r3
 8003716:	2510      	movs	r5, #16
 8003718:	197b      	adds	r3, r7, r5
 800371a:	1852      	adds	r2, r2, r1
 800371c:	801a      	strh	r2, [r3, #0]
																			   //after the 6 status data bytes
			data_pec = pec15_calc(BYT_IN_REG, &data[current_ic * NUM_RX_BYT]);
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	001a      	movs	r2, r3
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	189a      	adds	r2, r3, r2
 8003728:	260e      	movs	r6, #14
 800372a:	19bc      	adds	r4, r7, r6
 800372c:	231a      	movs	r3, #26
 800372e:	18fb      	adds	r3, r7, r3
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	0011      	movs	r1, r2
 8003734:	0018      	movs	r0, r3
 8003736:	f7ff f90b 	bl	8002950 <pec15_calc>
 800373a:	0003      	movs	r3, r0
 800373c:	8023      	strh	r3, [r4, #0]
			if (received_pec != data_pec) {
 800373e:	197a      	adds	r2, r7, r5
 8003740:	19bb      	adds	r3, r7, r6
 8003742:	8812      	ldrh	r2, [r2, #0]
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d012      	beq.n	8003770 <LTC681x_rdstat+0x58c>
				pec_error = -1; //The pec_error variable is simply set negative if any PEC errors
 800374a:	2326      	movs	r3, #38	@ 0x26
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	22ff      	movs	r2, #255	@ 0xff
 8003750:	701a      	strb	r2, [r3, #0]
				ic[c_ic].stat.pec_match[reg - 1] = 1;
 8003752:	2325      	movs	r3, #37	@ 0x25
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	22e8      	movs	r2, #232	@ 0xe8
 800375a:	4353      	muls	r3, r2
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	18d2      	adds	r2, r2, r3
 8003760:	1dfb      	adds	r3, r7, #7
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	3b01      	subs	r3, #1
 8003766:	216b      	movs	r1, #107	@ 0x6b
 8003768:	18d3      	adds	r3, r2, r3
 800376a:	185b      	adds	r3, r3, r1
 800376c:	2201      	movs	r2, #1
 800376e:	701a      	strb	r2, [r3, #0]
			}

			data_counter = data_counter + 2;
 8003770:	2227      	movs	r2, #39	@ 0x27
 8003772:	18bb      	adds	r3, r7, r2
 8003774:	18ba      	adds	r2, r7, r2
 8003776:	7812      	ldrb	r2, [r2, #0]
 8003778:	3202      	adds	r2, #2
 800377a:	701a      	strb	r2, [r3, #0]
		for (current_ic = 0; current_ic < total_ic; current_ic++) // Executes for every LTC681x in the daisy chain
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	3301      	adds	r3, #1
 8003780:	61fb      	str	r3, [r7, #28]
 8003782:	1dbb      	adds	r3, r7, #6
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	429a      	cmp	r2, r3
 800378a:	da00      	bge.n	800378e <LTC681x_rdstat+0x5aa>
 800378c:	e6d8      	b.n	8003540 <LTC681x_rdstat+0x35c>
		}
	}
	LTC681x_check_pec(total_ic, STAT, ic);
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	1dbb      	adds	r3, r7, #6
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2103      	movs	r1, #3
 8003796:	0018      	movs	r0, r3
 8003798:	f000 fa60 	bl	8003c5c <LTC681x_check_pec>

	free(data);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	0018      	movs	r0, r3
 80037a0:	f005 f81a 	bl	80087d8 <free>

	return (pec_error);
 80037a4:	2326      	movs	r3, #38	@ 0x26
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	b25b      	sxtb	r3, r3
}
 80037ac:	0018      	movs	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b00b      	add	sp, #44	@ 0x2c
 80037b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037b4 <LTC681x_rdcv_reg>:

/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
		uint8_t total_ic, //the number of ICs in the
		uint8_t *data //An array of the unparsed cell codes
		) {
 80037b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	603a      	str	r2, [r7, #0]
 80037bc:	1dfb      	adds	r3, r7, #7
 80037be:	1c02      	adds	r2, r0, #0
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	1dbb      	adds	r3, r7, #6
 80037c4:	1c0a      	adds	r2, r1, #0
 80037c6:	701a      	strb	r2, [r3, #0]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 80037c8:	230f      	movs	r3, #15
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	2208      	movs	r2, #8
 80037ce:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //1: RDCVA
 80037d0:	1dfb      	adds	r3, r7, #7
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d107      	bne.n	80037e8 <LTC681x_rdcv_reg+0x34>
			{
		cmd[1] = 0x04;
 80037d8:	2108      	movs	r1, #8
 80037da:	187b      	adds	r3, r7, r1
 80037dc:	2204      	movs	r2, #4
 80037de:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 80037e0:	187b      	adds	r3, r7, r1
 80037e2:	2200      	movs	r2, #0
 80037e4:	701a      	strb	r2, [r3, #0]
 80037e6:	e03a      	b.n	800385e <LTC681x_rdcv_reg+0xaa>
	} else if (reg == 2) //2: RDCVB
 80037e8:	1dfb      	adds	r3, r7, #7
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d107      	bne.n	8003800 <LTC681x_rdcv_reg+0x4c>
			{
		cmd[1] = 0x06;
 80037f0:	2108      	movs	r1, #8
 80037f2:	187b      	adds	r3, r7, r1
 80037f4:	2206      	movs	r2, #6
 80037f6:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 80037f8:	187b      	adds	r3, r7, r1
 80037fa:	2200      	movs	r2, #0
 80037fc:	701a      	strb	r2, [r3, #0]
 80037fe:	e02e      	b.n	800385e <LTC681x_rdcv_reg+0xaa>
	} else if (reg == 3) //3: RDCVC
 8003800:	1dfb      	adds	r3, r7, #7
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b03      	cmp	r3, #3
 8003806:	d107      	bne.n	8003818 <LTC681x_rdcv_reg+0x64>
			{
		cmd[1] = 0x08;
 8003808:	2108      	movs	r1, #8
 800380a:	187b      	adds	r3, r7, r1
 800380c:	2208      	movs	r2, #8
 800380e:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 8003810:	187b      	adds	r3, r7, r1
 8003812:	2200      	movs	r2, #0
 8003814:	701a      	strb	r2, [r3, #0]
 8003816:	e022      	b.n	800385e <LTC681x_rdcv_reg+0xaa>
	} else if (reg == 4) //4: RDCVD
 8003818:	1dfb      	adds	r3, r7, #7
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b04      	cmp	r3, #4
 800381e:	d107      	bne.n	8003830 <LTC681x_rdcv_reg+0x7c>
			{
		cmd[1] = 0x0A;
 8003820:	2108      	movs	r1, #8
 8003822:	187b      	adds	r3, r7, r1
 8003824:	220a      	movs	r2, #10
 8003826:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 8003828:	187b      	adds	r3, r7, r1
 800382a:	2200      	movs	r2, #0
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	e016      	b.n	800385e <LTC681x_rdcv_reg+0xaa>
	} else if (reg == 5) //4: RDCVE
 8003830:	1dfb      	adds	r3, r7, #7
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b05      	cmp	r3, #5
 8003836:	d107      	bne.n	8003848 <LTC681x_rdcv_reg+0x94>
			{
		cmd[1] = 0x09;
 8003838:	2108      	movs	r1, #8
 800383a:	187b      	adds	r3, r7, r1
 800383c:	2209      	movs	r2, #9
 800383e:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 8003840:	187b      	adds	r3, r7, r1
 8003842:	2200      	movs	r2, #0
 8003844:	701a      	strb	r2, [r3, #0]
 8003846:	e00a      	b.n	800385e <LTC681x_rdcv_reg+0xaa>
	} else if (reg == 6) //4: RDCVF
 8003848:	1dfb      	adds	r3, r7, #7
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b06      	cmp	r3, #6
 800384e:	d106      	bne.n	800385e <LTC681x_rdcv_reg+0xaa>
			{
		cmd[1] = 0x0B;
 8003850:	2108      	movs	r1, #8
 8003852:	187b      	adds	r3, r7, r1
 8003854:	220b      	movs	r2, #11
 8003856:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 8003858:	187b      	adds	r3, r7, r1
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]
	}

	cmd_pec = pec15_calc(2, cmd);
 800385e:	260c      	movs	r6, #12
 8003860:	19bc      	adds	r4, r7, r6
 8003862:	2508      	movs	r5, #8
 8003864:	197b      	adds	r3, r7, r5
 8003866:	0019      	movs	r1, r3
 8003868:	2002      	movs	r0, #2
 800386a:	f7ff f871 	bl	8002950 <pec15_calc>
 800386e:	0003      	movs	r3, r0
 8003870:	8023      	strh	r3, [r4, #0]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8003872:	0031      	movs	r1, r6
 8003874:	187b      	adds	r3, r7, r1
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	0a1b      	lsrs	r3, r3, #8
 800387a:	b29b      	uxth	r3, r3
 800387c:	b2da      	uxtb	r2, r3
 800387e:	197b      	adds	r3, r7, r5
 8003880:	709a      	strb	r2, [r3, #2]
	cmd[3] = (uint8_t) (cmd_pec);
 8003882:	187b      	adds	r3, r7, r1
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	197b      	adds	r3, r7, r5
 800388a:	70da      	strb	r2, [r3, #3]

	cs_low(CS_PIN);
 800388c:	2004      	movs	r0, #4
 800388e:	f000 fe52 	bl	8004536 <cs_low>
	spi_write_read(cmd, 4, data, (REG_LEN * total_ic));
 8003892:	230f      	movs	r3, #15
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	1dba      	adds	r2, r7, #6
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	7812      	ldrb	r2, [r2, #0]
 800389c:	4353      	muls	r3, r2
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	1978      	adds	r0, r7, r5
 80038a4:	2104      	movs	r1, #4
 80038a6:	f000 fe9b 	bl	80045e0 <spi_write_read>
	cs_high(CS_PIN);
 80038aa:	2004      	movs	r0, #4
 80038ac:	f000 fe56 	bl	800455c <cs_high>
}
 80038b0:	46c0      	nop			@ (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b005      	add	sp, #20
 80038b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038b8 <LTC681x_rdaux_reg>:
 the LTC681x_rdaux() command.
 */
void LTC681x_rdaux_reg(uint8_t reg, //Determines which GPIO voltage register is read back
		uint8_t total_ic, //The number of ICs in the system
		uint8_t *data //Array of the unparsed auxiliary codes
		) {
 80038b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	603a      	str	r2, [r7, #0]
 80038c0:	1dfb      	adds	r3, r7, #7
 80038c2:	1c02      	adds	r2, r0, #0
 80038c4:	701a      	strb	r2, [r3, #0]
 80038c6:	1dbb      	adds	r3, r7, #6
 80038c8:	1c0a      	adds	r2, r1, #0
 80038ca:	701a      	strb	r2, [r3, #0]
	const uint8_t REG_LEN = 8; // Number of bytes in the register + 2 bytes for the PEC
 80038cc:	230f      	movs	r3, #15
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	2208      	movs	r2, #8
 80038d2:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back auxiliary group A
 80038d4:	1dfb      	adds	r3, r7, #7
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d107      	bne.n	80038ec <LTC681x_rdaux_reg+0x34>
			{
		cmd[1] = 0x0C;
 80038dc:	2108      	movs	r1, #8
 80038de:	187b      	adds	r3, r7, r1
 80038e0:	220c      	movs	r2, #12
 80038e2:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 80038e4:	187b      	adds	r3, r7, r1
 80038e6:	2200      	movs	r2, #0
 80038e8:	701a      	strb	r2, [r3, #0]
 80038ea:	e02a      	b.n	8003942 <LTC681x_rdaux_reg+0x8a>
	} else if (reg == 2)  //Read back auxiliary group B
 80038ec:	1dfb      	adds	r3, r7, #7
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d107      	bne.n	8003904 <LTC681x_rdaux_reg+0x4c>
			{
		cmd[1] = 0x0E;
 80038f4:	2108      	movs	r1, #8
 80038f6:	187b      	adds	r3, r7, r1
 80038f8:	220e      	movs	r2, #14
 80038fa:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 80038fc:	187b      	adds	r3, r7, r1
 80038fe:	2200      	movs	r2, #0
 8003900:	701a      	strb	r2, [r3, #0]
 8003902:	e01e      	b.n	8003942 <LTC681x_rdaux_reg+0x8a>
	} else if (reg == 3)  //Read back auxiliary group C
 8003904:	1dfb      	adds	r3, r7, #7
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d107      	bne.n	800391c <LTC681x_rdaux_reg+0x64>
			{
		cmd[1] = 0x0D;
 800390c:	2108      	movs	r1, #8
 800390e:	187b      	adds	r3, r7, r1
 8003910:	220d      	movs	r2, #13
 8003912:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 8003914:	187b      	adds	r3, r7, r1
 8003916:	2200      	movs	r2, #0
 8003918:	701a      	strb	r2, [r3, #0]
 800391a:	e012      	b.n	8003942 <LTC681x_rdaux_reg+0x8a>
	} else if (reg == 4)  //Read back auxiliary group D
 800391c:	1dfb      	adds	r3, r7, #7
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b04      	cmp	r3, #4
 8003922:	d107      	bne.n	8003934 <LTC681x_rdaux_reg+0x7c>
			{
		cmd[1] = 0x0F;
 8003924:	2108      	movs	r1, #8
 8003926:	187b      	adds	r3, r7, r1
 8003928:	220f      	movs	r2, #15
 800392a:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 800392c:	187b      	adds	r3, r7, r1
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	e006      	b.n	8003942 <LTC681x_rdaux_reg+0x8a>
	} else          //Read back auxiliary group A
	{
		cmd[1] = 0x0C;
 8003934:	2108      	movs	r1, #8
 8003936:	187b      	adds	r3, r7, r1
 8003938:	220c      	movs	r2, #12
 800393a:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 800393c:	187b      	adds	r3, r7, r1
 800393e:	2200      	movs	r2, #0
 8003940:	701a      	strb	r2, [r3, #0]
	}

	cmd_pec = pec15_calc(2, cmd);
 8003942:	260c      	movs	r6, #12
 8003944:	19bc      	adds	r4, r7, r6
 8003946:	2508      	movs	r5, #8
 8003948:	197b      	adds	r3, r7, r5
 800394a:	0019      	movs	r1, r3
 800394c:	2002      	movs	r0, #2
 800394e:	f7fe ffff 	bl	8002950 <pec15_calc>
 8003952:	0003      	movs	r3, r0
 8003954:	8023      	strh	r3, [r4, #0]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8003956:	0031      	movs	r1, r6
 8003958:	187b      	adds	r3, r7, r1
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	0a1b      	lsrs	r3, r3, #8
 800395e:	b29b      	uxth	r3, r3
 8003960:	b2da      	uxtb	r2, r3
 8003962:	197b      	adds	r3, r7, r5
 8003964:	709a      	strb	r2, [r3, #2]
	cmd[3] = (uint8_t) (cmd_pec);
 8003966:	187b      	adds	r3, r7, r1
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	b2da      	uxtb	r2, r3
 800396c:	197b      	adds	r3, r7, r5
 800396e:	70da      	strb	r2, [r3, #3]

	cs_low(CS_PIN);
 8003970:	2004      	movs	r0, #4
 8003972:	f000 fde0 	bl	8004536 <cs_low>
	spi_write_read(cmd, 4, data, (REG_LEN * total_ic));
 8003976:	230f      	movs	r3, #15
 8003978:	18fb      	adds	r3, r7, r3
 800397a:	1dba      	adds	r2, r7, #6
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	7812      	ldrb	r2, [r2, #0]
 8003980:	4353      	muls	r3, r2
 8003982:	b2db      	uxtb	r3, r3
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	1978      	adds	r0, r7, r5
 8003988:	2104      	movs	r1, #4
 800398a:	f000 fe29 	bl	80045e0 <spi_write_read>
	cs_high(CS_PIN);
 800398e:	2004      	movs	r0, #4
 8003990:	f000 fde4 	bl	800455c <cs_high>
}
 8003994:	46c0      	nop			@ (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	b005      	add	sp, #20
 800399a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800399c <LTC681x_rdstat_reg>:
 the LTC681x_rdstat() command.
 */
void LTC681x_rdstat_reg(uint8_t reg, //Determines which stat register is read back
		uint8_t total_ic, //The number of ICs in the system
		uint8_t *data //Array of the unparsed stat codes
		) {
 800399c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	603a      	str	r2, [r7, #0]
 80039a4:	1dfb      	adds	r3, r7, #7
 80039a6:	1c02      	adds	r2, r0, #0
 80039a8:	701a      	strb	r2, [r3, #0]
 80039aa:	1dbb      	adds	r3, r7, #6
 80039ac:	1c0a      	adds	r2, r1, #0
 80039ae:	701a      	strb	r2, [r3, #0]
	const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
 80039b0:	230f      	movs	r3, #15
 80039b2:	18fb      	adds	r3, r7, r3
 80039b4:	2208      	movs	r2, #8
 80039b6:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back status group A
 80039b8:	1dfb      	adds	r3, r7, #7
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d107      	bne.n	80039d0 <LTC681x_rdstat_reg+0x34>
			{
		cmd[1] = 0x10;
 80039c0:	2108      	movs	r1, #8
 80039c2:	187b      	adds	r3, r7, r1
 80039c4:	2210      	movs	r2, #16
 80039c6:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 80039c8:	187b      	adds	r3, r7, r1
 80039ca:	2200      	movs	r2, #0
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	e012      	b.n	80039f6 <LTC681x_rdstat_reg+0x5a>
	} else if (reg == 2)  //Read back status group B
 80039d0:	1dfb      	adds	r3, r7, #7
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d107      	bne.n	80039e8 <LTC681x_rdstat_reg+0x4c>
			{
		cmd[1] = 0x12;
 80039d8:	2108      	movs	r1, #8
 80039da:	187b      	adds	r3, r7, r1
 80039dc:	2212      	movs	r2, #18
 80039de:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 80039e0:	187b      	adds	r3, r7, r1
 80039e2:	2200      	movs	r2, #0
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	e006      	b.n	80039f6 <LTC681x_rdstat_reg+0x5a>
	}

	else          //Read back status group A
	{
		cmd[1] = 0x10;
 80039e8:	2108      	movs	r1, #8
 80039ea:	187b      	adds	r3, r7, r1
 80039ec:	2210      	movs	r2, #16
 80039ee:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 80039f0:	187b      	adds	r3, r7, r1
 80039f2:	2200      	movs	r2, #0
 80039f4:	701a      	strb	r2, [r3, #0]
	}

	cmd_pec = pec15_calc(2, cmd);
 80039f6:	260c      	movs	r6, #12
 80039f8:	19bc      	adds	r4, r7, r6
 80039fa:	2508      	movs	r5, #8
 80039fc:	197b      	adds	r3, r7, r5
 80039fe:	0019      	movs	r1, r3
 8003a00:	2002      	movs	r0, #2
 8003a02:	f7fe ffa5 	bl	8002950 <pec15_calc>
 8003a06:	0003      	movs	r3, r0
 8003a08:	8023      	strh	r3, [r4, #0]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8003a0a:	0031      	movs	r1, r6
 8003a0c:	187b      	adds	r3, r7, r1
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	0a1b      	lsrs	r3, r3, #8
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	197b      	adds	r3, r7, r5
 8003a18:	709a      	strb	r2, [r3, #2]
	cmd[3] = (uint8_t) (cmd_pec);
 8003a1a:	187b      	adds	r3, r7, r1
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	197b      	adds	r3, r7, r5
 8003a22:	70da      	strb	r2, [r3, #3]

	cs_low(CS_PIN);
 8003a24:	2004      	movs	r0, #4
 8003a26:	f000 fd86 	bl	8004536 <cs_low>
	spi_write_read(cmd, 4, data, (REG_LEN * total_ic));
 8003a2a:	230f      	movs	r3, #15
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	1dba      	adds	r2, r7, #6
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	7812      	ldrb	r2, [r2, #0]
 8003a34:	4353      	muls	r3, r2
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	1978      	adds	r0, r7, r5
 8003a3c:	2104      	movs	r1, #4
 8003a3e:	f000 fdcf 	bl	80045e0 <spi_write_read>
	cs_high(CS_PIN);
 8003a42:	2004      	movs	r0, #4
 8003a44:	f000 fd8a 	bl	800455c <cs_high>
}
 8003a48:	46c0      	nop			@ (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b005      	add	sp, #20
 8003a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a50 <parse_cells>:
int8_t parse_cells(uint8_t current_ic, // Current IC
		uint8_t cell_reg,  // Type of register
		uint8_t cell_data[], // Unparsed data
		uint16_t *cell_codes, // Parsed data
		uint8_t *ic_pec // PEC error
		) {
 8003a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a52:	b089      	sub	sp, #36	@ 0x24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60ba      	str	r2, [r7, #8]
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	240f      	movs	r4, #15
 8003a5c:	193b      	adds	r3, r7, r4
 8003a5e:	1c02      	adds	r2, r0, #0
 8003a60:	701a      	strb	r2, [r3, #0]
 8003a62:	230e      	movs	r3, #14
 8003a64:	18fb      	adds	r3, r7, r3
 8003a66:	1c0a      	adds	r2, r1, #0
 8003a68:	701a      	strb	r2, [r3, #0]
	const uint8_t BYT_IN_REG = 6;
 8003a6a:	231c      	movs	r3, #28
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	2206      	movs	r2, #6
 8003a70:	701a      	strb	r2, [r3, #0]
	const uint8_t CELL_IN_REG = 3;
 8003a72:	231b      	movs	r3, #27
 8003a74:	18fb      	adds	r3, r7, r3
 8003a76:	2203      	movs	r2, #3
 8003a78:	701a      	strb	r2, [r3, #0]
	int8_t pec_error = 0;
 8003a7a:	231f      	movs	r3, #31
 8003a7c:	18fb      	adds	r3, r7, r3
 8003a7e:	2200      	movs	r2, #0
 8003a80:	701a      	strb	r2, [r3, #0]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic * NUM_RX_BYT; //data counter
 8003a82:	231e      	movs	r3, #30
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	193a      	adds	r2, r7, r4
 8003a88:	7812      	ldrb	r2, [r2, #0]
 8003a8a:	00d2      	lsls	r2, r2, #3
 8003a8c:	701a      	strb	r2, [r3, #0]

	uint8_t current_cell = 0;
 8003a8e:	211d      	movs	r1, #29
 8003a90:	187b      	adds	r3, r7, r1
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
	for (current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8003a96:	187b      	adds	r3, r7, r1
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	e02e      	b.n	8003afc <parse_cells+0xac>
			{			// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter]
 8003a9e:	201e      	movs	r0, #30
 8003aa0:	183b      	adds	r3, r7, r0
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	18d3      	adds	r3, r2, r3
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	0019      	movs	r1, r3
				+ (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 8003aac:	183b      	adds	r3, r7, r0
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	18d3      	adds	r3, r2, r3
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	021b      	lsls	r3, r3, #8
 8003aba:	b29a      	uxth	r2, r3
		parsed_cell = cell_data[data_counter]
 8003abc:	2514      	movs	r5, #20
 8003abe:	197b      	adds	r3, r7, r5
 8003ac0:	188a      	adds	r2, r1, r2
 8003ac2:	801a      	strh	r2, [r3, #0]
													 // create the parsed code
		cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8003ac4:	241d      	movs	r4, #29
 8003ac6:	193b      	adds	r3, r7, r4
 8003ac8:	781a      	ldrb	r2, [r3, #0]
 8003aca:	230e      	movs	r3, #14
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	211b      	movs	r1, #27
 8003ad4:	1879      	adds	r1, r7, r1
 8003ad6:	7809      	ldrb	r1, [r1, #0]
 8003ad8:	434b      	muls	r3, r1
 8003ada:	18d3      	adds	r3, r2, r3
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	18d3      	adds	r3, r2, r3
 8003ae2:	197a      	adds	r2, r7, r5
 8003ae4:	8812      	ldrh	r2, [r2, #0]
 8003ae6:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2; //Because the codes are two bytes, the data counter
 8003ae8:	183b      	adds	r3, r7, r0
 8003aea:	183a      	adds	r2, r7, r0
 8003aec:	7812      	ldrb	r2, [r2, #0]
 8003aee:	3202      	adds	r2, #2
 8003af0:	701a      	strb	r2, [r3, #0]
	for (current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8003af2:	193b      	adds	r3, r7, r4
 8003af4:	781a      	ldrb	r2, [r3, #0]
 8003af6:	193b      	adds	r3, r7, r4
 8003af8:	3201      	adds	r2, #1
 8003afa:	701a      	strb	r2, [r3, #0]
 8003afc:	231d      	movs	r3, #29
 8003afe:	18fa      	adds	r2, r7, r3
 8003b00:	231b      	movs	r3, #27
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	7812      	ldrb	r2, [r2, #0]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d3c8      	bcc.n	8003a9e <parse_cells+0x4e>
										 //must increment by two for each parsed code
	}
	received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8003b0c:	211e      	movs	r1, #30
 8003b0e:	187b      	adds	r3, r7, r1
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	18d3      	adds	r3, r2, r3
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	b21b      	sxth	r3, r3
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	b21a      	sxth	r2, r3
 8003b1e:	187b      	adds	r3, r7, r1
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	3301      	adds	r3, #1
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	18cb      	adds	r3, r1, r3
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	b21b      	sxth	r3, r3
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	b21a      	sxth	r2, r3
 8003b30:	2518      	movs	r5, #24
 8003b32:	197b      	adds	r3, r7, r5
 8003b34:	801a      	strh	r2, [r3, #0]
																				 //after the 6 cell voltage data bytes
	data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8003b36:	230f      	movs	r3, #15
 8003b38:	18fb      	adds	r3, r7, r3
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	001a      	movs	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	189a      	adds	r2, r3, r2
 8003b44:	2616      	movs	r6, #22
 8003b46:	19bc      	adds	r4, r7, r6
 8003b48:	231c      	movs	r3, #28
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	0011      	movs	r1, r2
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7fe fefd 	bl	8002950 <pec15_calc>
 8003b56:	0003      	movs	r3, r0
 8003b58:	8023      	strh	r3, [r4, #0]

	if (received_pec != data_pec) {
 8003b5a:	197a      	adds	r2, r7, r5
 8003b5c:	19bb      	adds	r3, r7, r6
 8003b5e:	8812      	ldrh	r2, [r2, #0]
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d00c      	beq.n	8003b80 <parse_cells+0x130>
		pec_error = 1; //The pec_error variable is simply set negative if any PEC errors
 8003b66:	231f      	movs	r3, #31
 8003b68:	18fb      	adds	r3, r7, r3
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	701a      	strb	r2, [r3, #0]
		ic_pec[cell_reg - 1] = 1;
 8003b6e:	230e      	movs	r3, #14
 8003b70:	18fb      	adds	r3, r7, r3
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	3b01      	subs	r3, #1
 8003b76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b78:	18d3      	adds	r3, r2, r3
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	701a      	strb	r2, [r3, #0]
 8003b7e:	e007      	b.n	8003b90 <parse_cells+0x140>
	} else {
		ic_pec[cell_reg - 1] = 0;
 8003b80:	230e      	movs	r3, #14
 8003b82:	18fb      	adds	r3, r7, r3
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b8a:	18d3      	adds	r3, r2, r3
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
	}
	data_counter = data_counter + 2;
 8003b90:	221e      	movs	r2, #30
 8003b92:	18bb      	adds	r3, r7, r2
 8003b94:	18ba      	adds	r2, r7, r2
 8003b96:	7812      	ldrb	r2, [r2, #0]
 8003b98:	3202      	adds	r2, #2
 8003b9a:	701a      	strb	r2, [r3, #0]

	return (pec_error);
 8003b9c:	231f      	movs	r3, #31
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	b25b      	sxtb	r3, r3
}
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b009      	add	sp, #36	@ 0x24
 8003baa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bac <LTC681x_pollAdc>:

	return (adc_state);
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC681x_pollAdc() {
 8003bac:	b5b0      	push	{r4, r5, r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8003bb6:	230b      	movs	r3, #11
 8003bb8:	18fb      	adds	r3, r7, r3
 8003bba:	2200      	movs	r2, #0
 8003bbc:	701a      	strb	r2, [r3, #0]
	uint8_t current_time = 0;
 8003bbe:	230a      	movs	r3, #10
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8003bc6:	1d3b      	adds	r3, r7, #4
 8003bc8:	2207      	movs	r2, #7
 8003bca:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x14;
 8003bcc:	1d3b      	adds	r3, r7, #4
 8003bce:	2214      	movs	r2, #20
 8003bd0:	705a      	strb	r2, [r3, #1]
	cmd_pec = pec15_calc(2, cmd);
 8003bd2:	2508      	movs	r5, #8
 8003bd4:	197c      	adds	r4, r7, r5
 8003bd6:	1d3b      	adds	r3, r7, #4
 8003bd8:	0019      	movs	r1, r3
 8003bda:	2002      	movs	r0, #2
 8003bdc:	f7fe feb8 	bl	8002950 <pec15_calc>
 8003be0:	0003      	movs	r3, r0
 8003be2:	8023      	strh	r3, [r4, #0]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8003be4:	0029      	movs	r1, r5
 8003be6:	187b      	adds	r3, r7, r1
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	0a1b      	lsrs	r3, r3, #8
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	1d3b      	adds	r3, r7, #4
 8003bf2:	709a      	strb	r2, [r3, #2]
	cmd[3] = (uint8_t) (cmd_pec);
 8003bf4:	187b      	adds	r3, r7, r1
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	1d3b      	adds	r3, r7, #4
 8003bfc:	70da      	strb	r2, [r3, #3]

	cs_low(CS_PIN);
 8003bfe:	2004      	movs	r0, #4
 8003c00:	f000 fc99 	bl	8004536 <cs_low>
	spi_write_array(4, cmd);
 8003c04:	1d3b      	adds	r3, r7, #4
 8003c06:	0019      	movs	r1, r3
 8003c08:	2004      	movs	r0, #4
 8003c0a:	f000 fcbb 	bl	8004584 <spi_write_array>
	while ((counter < 200000) && (finished == 0)) {
 8003c0e:	e012      	b.n	8003c36 <LTC681x_pollAdc+0x8a>
		current_time = spi_read_byte(0xff);
 8003c10:	250a      	movs	r5, #10
 8003c12:	197c      	adds	r4, r7, r5
 8003c14:	20ff      	movs	r0, #255	@ 0xff
 8003c16:	f000 fd39 	bl	800468c <spi_read_byte>
 8003c1a:	0003      	movs	r3, r0
 8003c1c:	7023      	strb	r3, [r4, #0]
		if (current_time > 0) {
 8003c1e:	197b      	adds	r3, r7, r5
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d004      	beq.n	8003c30 <LTC681x_pollAdc+0x84>
			finished = 1;
 8003c26:	230b      	movs	r3, #11
 8003c28:	18fb      	adds	r3, r7, r3
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	701a      	strb	r2, [r3, #0]
 8003c2e:	e002      	b.n	8003c36 <LTC681x_pollAdc+0x8a>
		} else {
			counter = counter + 10;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	330a      	adds	r3, #10
 8003c34:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0)) {
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4a07      	ldr	r2, [pc, #28]	@ (8003c58 <LTC681x_pollAdc+0xac>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d804      	bhi.n	8003c48 <LTC681x_pollAdc+0x9c>
 8003c3e:	230b      	movs	r3, #11
 8003c40:	18fb      	adds	r3, r7, r3
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0e3      	beq.n	8003c10 <LTC681x_pollAdc+0x64>
		}
	}
	cs_high(CS_PIN);
 8003c48:	2004      	movs	r0, #4
 8003c4a:	f000 fc87 	bl	800455c <cs_high>

	return (counter);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
}
 8003c50:	0018      	movs	r0, r3
 8003c52:	46bd      	mov	sp, r7
 8003c54:	b004      	add	sp, #16
 8003c56:	bdb0      	pop	{r4, r5, r7, pc}
 8003c58:	00030d3f 	.word	0x00030d3f

08003c5c <LTC681x_check_pec>:
/* Helper function that increments PEC counters */
void LTC681x_check_pec(uint8_t total_ic, //Number of ICs in the system
					   uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	603a      	str	r2, [r7, #0]
 8003c64:	1dfb      	adds	r3, r7, #7
 8003c66:	1c02      	adds	r2, r0, #0
 8003c68:	701a      	strb	r2, [r3, #0]
 8003c6a:	1dbb      	adds	r3, r7, #6
 8003c6c:	1c0a      	adds	r2, r1, #0
 8003c6e:	701a      	strb	r2, [r3, #0]
	int current_ic = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
	int i = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	60bb      	str	r3, [r7, #8]
	switch (reg)
 8003c78:	1dbb      	adds	r3, r7, #6
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d900      	bls.n	8003c82 <LTC681x_check_pec+0x26>
 8003c80:	e176      	b.n	8003f70 <LTC681x_check_pec+0x314>
 8003c82:	009a      	lsls	r2, r3, #2
 8003c84:	4bbd      	ldr	r3, [pc, #756]	@ (8003f7c <LTC681x_check_pec+0x320>)
 8003c86:	18d3      	adds	r3, r2, r3
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	469f      	mov	pc, r3
	{
		case CFGR:
		  for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	e030      	b.n	8003cf4 <LTC681x_check_pec+0x98>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].config.rx_pec_match;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	22e8      	movs	r2, #232	@ 0xe8
 8003c96:	4353      	muls	r3, r2
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	18d3      	adds	r3, r2, r3
 8003c9c:	22c0      	movs	r2, #192	@ 0xc0
 8003c9e:	5a9a      	ldrh	r2, [r3, r2]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	21e8      	movs	r1, #232	@ 0xe8
 8003ca4:	434b      	muls	r3, r1
 8003ca6:	6839      	ldr	r1, [r7, #0]
 8003ca8:	18cb      	adds	r3, r1, r3
 8003caa:	7b9b      	ldrb	r3, [r3, #14]
 8003cac:	0018      	movs	r0, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	21e8      	movs	r1, #232	@ 0xe8
 8003cb2:	434b      	muls	r3, r1
 8003cb4:	6839      	ldr	r1, [r7, #0]
 8003cb6:	18cb      	adds	r3, r1, r3
 8003cb8:	1812      	adds	r2, r2, r0
 8003cba:	b291      	uxth	r1, r2
 8003cbc:	22c0      	movs	r2, #192	@ 0xc0
 8003cbe:	5299      	strh	r1, [r3, r2]
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].config.rx_pec_match;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	22e8      	movs	r2, #232	@ 0xe8
 8003cc4:	4353      	muls	r3, r2
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	18d3      	adds	r3, r2, r3
 8003cca:	22c2      	movs	r2, #194	@ 0xc2
 8003ccc:	5a9a      	ldrh	r2, [r3, r2]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	21e8      	movs	r1, #232	@ 0xe8
 8003cd2:	434b      	muls	r3, r1
 8003cd4:	6839      	ldr	r1, [r7, #0]
 8003cd6:	18cb      	adds	r3, r1, r3
 8003cd8:	7b9b      	ldrb	r3, [r3, #14]
 8003cda:	0018      	movs	r0, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	21e8      	movs	r1, #232	@ 0xe8
 8003ce0:	434b      	muls	r3, r1
 8003ce2:	6839      	ldr	r1, [r7, #0]
 8003ce4:	18cb      	adds	r3, r1, r3
 8003ce6:	1812      	adds	r2, r2, r0
 8003ce8:	b291      	uxth	r1, r2
 8003cea:	22c2      	movs	r2, #194	@ 0xc2
 8003cec:	5299      	strh	r1, [r3, r2]
		  for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	1dfb      	adds	r3, r7, #7
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	dbc9      	blt.n	8003c92 <LTC681x_check_pec+0x36>
		  }
		break;
 8003cfe:	e138      	b.n	8003f72 <LTC681x_check_pec+0x316>

		case CFGRB:
		  for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	e030      	b.n	8003d68 <LTC681x_check_pec+0x10c>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	22e8      	movs	r2, #232	@ 0xe8
 8003d0a:	4353      	muls	r3, r2
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	18d3      	adds	r3, r2, r3
 8003d10:	22c0      	movs	r2, #192	@ 0xc0
 8003d12:	5a9a      	ldrh	r2, [r3, r2]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	21e8      	movs	r1, #232	@ 0xe8
 8003d18:	434b      	muls	r3, r1
 8003d1a:	6839      	ldr	r1, [r7, #0]
 8003d1c:	18cb      	adds	r3, r1, r3
 8003d1e:	7f5b      	ldrb	r3, [r3, #29]
 8003d20:	0018      	movs	r0, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	21e8      	movs	r1, #232	@ 0xe8
 8003d26:	434b      	muls	r3, r1
 8003d28:	6839      	ldr	r1, [r7, #0]
 8003d2a:	18cb      	adds	r3, r1, r3
 8003d2c:	1812      	adds	r2, r2, r0
 8003d2e:	b291      	uxth	r1, r2
 8003d30:	22c0      	movs	r2, #192	@ 0xc0
 8003d32:	5299      	strh	r1, [r3, r2]
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	22e8      	movs	r2, #232	@ 0xe8
 8003d38:	4353      	muls	r3, r2
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	18d3      	adds	r3, r2, r3
 8003d3e:	22c2      	movs	r2, #194	@ 0xc2
 8003d40:	5a9a      	ldrh	r2, [r3, r2]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	21e8      	movs	r1, #232	@ 0xe8
 8003d46:	434b      	muls	r3, r1
 8003d48:	6839      	ldr	r1, [r7, #0]
 8003d4a:	18cb      	adds	r3, r1, r3
 8003d4c:	7f5b      	ldrb	r3, [r3, #29]
 8003d4e:	0018      	movs	r0, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	21e8      	movs	r1, #232	@ 0xe8
 8003d54:	434b      	muls	r3, r1
 8003d56:	6839      	ldr	r1, [r7, #0]
 8003d58:	18cb      	adds	r3, r1, r3
 8003d5a:	1812      	adds	r2, r2, r0
 8003d5c:	b291      	uxth	r1, r2
 8003d5e:	22c2      	movs	r2, #194	@ 0xc2
 8003d60:	5299      	strh	r1, [r3, r2]
		  for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3301      	adds	r3, #1
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	1dfb      	adds	r3, r7, #7
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	dbc9      	blt.n	8003d06 <LTC681x_check_pec+0xaa>
		  }
		break;
 8003d72:	e0fe      	b.n	8003f72 <LTC681x_check_pec+0x316>
		case CELL:
		  for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003d74:	2300      	movs	r3, #0
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	e04e      	b.n	8003e18 <LTC681x_check_pec+0x1bc>
		  {
			for (i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	e041      	b.n	8003e04 <LTC681x_check_pec+0x1a8>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	22e8      	movs	r2, #232	@ 0xe8
 8003d84:	4353      	muls	r3, r2
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	18d3      	adds	r3, r2, r3
 8003d8a:	22c0      	movs	r2, #192	@ 0xc0
 8003d8c:	5a9a      	ldrh	r2, [r3, r2]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	21e8      	movs	r1, #232	@ 0xe8
 8003d92:	434b      	muls	r3, r1
 8003d94:	6839      	ldr	r1, [r7, #0]
 8003d96:	18c9      	adds	r1, r1, r3
 8003d98:	2042      	movs	r0, #66	@ 0x42
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	18cb      	adds	r3, r1, r3
 8003d9e:	181b      	adds	r3, r3, r0
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	0018      	movs	r0, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	21e8      	movs	r1, #232	@ 0xe8
 8003da8:	434b      	muls	r3, r1
 8003daa:	6839      	ldr	r1, [r7, #0]
 8003dac:	18cb      	adds	r3, r1, r3
 8003dae:	1812      	adds	r2, r2, r0
 8003db0:	b291      	uxth	r1, r2
 8003db2:	22c0      	movs	r2, #192	@ 0xc0
 8003db4:	5299      	strh	r1, [r3, r2]
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	22e8      	movs	r2, #232	@ 0xe8
 8003dba:	4353      	muls	r3, r2
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	18d2      	adds	r2, r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	3360      	adds	r3, #96	@ 0x60
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	18d3      	adds	r3, r2, r3
 8003dc8:	3304      	adds	r3, #4
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	21e8      	movs	r1, #232	@ 0xe8
 8003dd0:	434a      	muls	r2, r1
 8003dd2:	6839      	ldr	r1, [r7, #0]
 8003dd4:	1889      	adds	r1, r1, r2
 8003dd6:	2042      	movs	r0, #66	@ 0x42
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	188a      	adds	r2, r1, r2
 8003ddc:	1812      	adds	r2, r2, r0
 8003dde:	7812      	ldrb	r2, [r2, #0]
 8003de0:	0010      	movs	r0, r2
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	21e8      	movs	r1, #232	@ 0xe8
 8003de6:	434a      	muls	r2, r1
 8003de8:	6839      	ldr	r1, [r7, #0]
 8003dea:	188a      	adds	r2, r1, r2
 8003dec:	181b      	adds	r3, r3, r0
 8003dee:	b299      	uxth	r1, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	3360      	adds	r3, #96	@ 0x60
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	18d3      	adds	r3, r2, r3
 8003df8:	3304      	adds	r3, #4
 8003dfa:	1c0a      	adds	r2, r1, #0
 8003dfc:	801a      	strh	r2, [r3, #0]
			for (i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	3301      	adds	r3, #1
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	22df      	movs	r2, #223	@ 0xdf
 8003e08:	5c9b      	ldrb	r3, [r3, r2]
 8003e0a:	001a      	movs	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	dbb6      	blt.n	8003d80 <LTC681x_check_pec+0x124>
		  for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	3301      	adds	r3, #1
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	dbab      	blt.n	8003d7a <LTC681x_check_pec+0x11e>
			}
		  }
		break;
 8003e22:	e0a6      	b.n	8003f72 <LTC681x_check_pec+0x316>
		case AUX:
		  for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	e049      	b.n	8003ebe <LTC681x_check_pec+0x262>
		  {
			for (i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	e03c      	b.n	8003eaa <LTC681x_check_pec+0x24e>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	22e8      	movs	r2, #232	@ 0xe8
 8003e34:	4353      	muls	r3, r2
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	18d3      	adds	r3, r2, r3
 8003e3a:	22c0      	movs	r2, #192	@ 0xc0
 8003e3c:	5a9a      	ldrh	r2, [r3, r2]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	21e8      	movs	r1, #232	@ 0xe8
 8003e42:	434b      	muls	r3, r1
 8003e44:	6839      	ldr	r1, [r7, #0]
 8003e46:	18c9      	adds	r1, r1, r3
 8003e48:	205a      	movs	r0, #90	@ 0x5a
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	18cb      	adds	r3, r1, r3
 8003e4e:	181b      	adds	r3, r3, r0
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	0018      	movs	r0, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	21e8      	movs	r1, #232	@ 0xe8
 8003e58:	434b      	muls	r3, r1
 8003e5a:	6839      	ldr	r1, [r7, #0]
 8003e5c:	18cb      	adds	r3, r1, r3
 8003e5e:	1812      	adds	r2, r2, r0
 8003e60:	b291      	uxth	r1, r2
 8003e62:	22c0      	movs	r2, #192	@ 0xc0
 8003e64:	5299      	strh	r1, [r3, r2]
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	22e8      	movs	r2, #232	@ 0xe8
 8003e6a:	4353      	muls	r3, r2
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	18d3      	adds	r3, r2, r3
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	3268      	adds	r2, #104	@ 0x68
 8003e74:	0052      	lsls	r2, r2, #1
 8003e76:	5ad2      	ldrh	r2, [r2, r3]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	21e8      	movs	r1, #232	@ 0xe8
 8003e7c:	434b      	muls	r3, r1
 8003e7e:	6839      	ldr	r1, [r7, #0]
 8003e80:	18c9      	adds	r1, r1, r3
 8003e82:	205a      	movs	r0, #90	@ 0x5a
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	18cb      	adds	r3, r1, r3
 8003e88:	181b      	adds	r3, r3, r0
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	21e8      	movs	r1, #232	@ 0xe8
 8003e92:	434b      	muls	r3, r1
 8003e94:	6839      	ldr	r1, [r7, #0]
 8003e96:	18cb      	adds	r3, r1, r3
 8003e98:	1812      	adds	r2, r2, r0
 8003e9a:	b291      	uxth	r1, r2
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	3268      	adds	r2, #104	@ 0x68
 8003ea0:	0052      	lsls	r2, r2, #1
 8003ea2:	52d1      	strh	r1, [r2, r3]
			for (i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	22e0      	movs	r2, #224	@ 0xe0
 8003eae:	5c9b      	ldrb	r3, [r3, r2]
 8003eb0:	001a      	movs	r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	dbbb      	blt.n	8003e30 <LTC681x_check_pec+0x1d4>
		  for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	1dfb      	adds	r3, r7, #7
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	dbb0      	blt.n	8003e2a <LTC681x_check_pec+0x1ce>
			}
		  }

		break;
 8003ec8:	e053      	b.n	8003f72 <LTC681x_check_pec+0x316>
		case STAT:
		  for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	e049      	b.n	8003f64 <LTC681x_check_pec+0x308>
		  {

			for (i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60bb      	str	r3, [r7, #8]
 8003ed4:	e03c      	b.n	8003f50 <LTC681x_check_pec+0x2f4>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	22e8      	movs	r2, #232	@ 0xe8
 8003eda:	4353      	muls	r3, r2
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	18d3      	adds	r3, r2, r3
 8003ee0:	22c0      	movs	r2, #192	@ 0xc0
 8003ee2:	5a9a      	ldrh	r2, [r3, r2]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	21e8      	movs	r1, #232	@ 0xe8
 8003ee8:	434b      	muls	r3, r1
 8003eea:	6839      	ldr	r1, [r7, #0]
 8003eec:	18c9      	adds	r1, r1, r3
 8003eee:	206b      	movs	r0, #107	@ 0x6b
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	18cb      	adds	r3, r1, r3
 8003ef4:	181b      	adds	r3, r3, r0
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	0018      	movs	r0, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	21e8      	movs	r1, #232	@ 0xe8
 8003efe:	434b      	muls	r3, r1
 8003f00:	6839      	ldr	r1, [r7, #0]
 8003f02:	18cb      	adds	r3, r1, r3
 8003f04:	1812      	adds	r2, r2, r0
 8003f06:	b291      	uxth	r1, r2
 8003f08:	22c0      	movs	r2, #192	@ 0xc0
 8003f0a:	5299      	strh	r1, [r3, r2]
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	22e8      	movs	r2, #232	@ 0xe8
 8003f10:	4353      	muls	r3, r2
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	18d3      	adds	r3, r2, r3
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	326c      	adds	r2, #108	@ 0x6c
 8003f1a:	0052      	lsls	r2, r2, #1
 8003f1c:	5ad2      	ldrh	r2, [r2, r3]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	21e8      	movs	r1, #232	@ 0xe8
 8003f22:	434b      	muls	r3, r1
 8003f24:	6839      	ldr	r1, [r7, #0]
 8003f26:	18c9      	adds	r1, r1, r3
 8003f28:	206b      	movs	r0, #107	@ 0x6b
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	18cb      	adds	r3, r1, r3
 8003f2e:	181b      	adds	r3, r3, r0
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	0018      	movs	r0, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	21e8      	movs	r1, #232	@ 0xe8
 8003f38:	434b      	muls	r3, r1
 8003f3a:	6839      	ldr	r1, [r7, #0]
 8003f3c:	18cb      	adds	r3, r1, r3
 8003f3e:	1812      	adds	r2, r2, r0
 8003f40:	b291      	uxth	r1, r2
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	326c      	adds	r2, #108	@ 0x6c
 8003f46:	0052      	lsls	r2, r2, #1
 8003f48:	52d1      	strh	r1, [r2, r3]
			for (i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	60bb      	str	r3, [r7, #8]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	22e1      	movs	r2, #225	@ 0xe1
 8003f54:	5c9b      	ldrb	r3, [r3, r2]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	dbbb      	blt.n	8003ed6 <LTC681x_check_pec+0x27a>
		  for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3301      	adds	r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	1dfb      	adds	r3, r7, #7
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	dbb0      	blt.n	8003ed0 <LTC681x_check_pec+0x274>
			}
		  }
		break;
 8003f6e:	e000      	b.n	8003f72 <LTC681x_check_pec+0x316>
		default:
		break;
 8003f70:	46c0      	nop			@ (mov r8, r8)
	}
}
 8003f72:	46c0      	nop			@ (mov r8, r8)
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b004      	add	sp, #16
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	46c0      	nop			@ (mov r8, r8)
 8003f7c:	08009f44 	.word	0x08009f44

08003f80 <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that stores the data
							 )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	0002      	movs	r2, r0
 8003f88:	6039      	str	r1, [r7, #0]
 8003f8a:	1dfb      	adds	r3, r7, #7
 8003f8c:	701a      	strb	r2, [r3, #0]
	int current_ic = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
	int i = 0;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60bb      	str	r3, [r7, #8]
	for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	e04d      	b.n	8004038 <LTC681x_reset_crc_count+0xb8>
	{
		ic[current_ic].crc_count.pec_count = 0;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	22e8      	movs	r2, #232	@ 0xe8
 8003fa0:	4353      	muls	r3, r2
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	18d3      	adds	r3, r2, r3
 8003fa6:	22c0      	movs	r2, #192	@ 0xc0
 8003fa8:	2100      	movs	r1, #0
 8003faa:	5299      	strh	r1, [r3, r2]
		ic[current_ic].crc_count.cfgr_pec = 0;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	22e8      	movs	r2, #232	@ 0xe8
 8003fb0:	4353      	muls	r3, r2
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	18d3      	adds	r3, r2, r3
 8003fb6:	22c2      	movs	r2, #194	@ 0xc2
 8003fb8:	2100      	movs	r1, #0
 8003fba:	5299      	strh	r1, [r3, r2]
		for (i=0; i<6; i++)
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60bb      	str	r3, [r7, #8]
 8003fc0:	e00e      	b.n	8003fe0 <LTC681x_reset_crc_count+0x60>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	22e8      	movs	r2, #232	@ 0xe8
 8003fc6:	4353      	muls	r3, r2
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	18d2      	adds	r2, r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	3360      	adds	r3, #96	@ 0x60
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	18d3      	adds	r3, r2, r3
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	801a      	strh	r2, [r3, #0]
		for (i=0; i<6; i++)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	60bb      	str	r3, [r7, #8]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b05      	cmp	r3, #5
 8003fe4:	dded      	ble.n	8003fc2 <LTC681x_reset_crc_count+0x42>

		}
		for (i=0; i<4; i++)
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	e00c      	b.n	8004006 <LTC681x_reset_crc_count+0x86>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	22e8      	movs	r2, #232	@ 0xe8
 8003ff0:	4353      	muls	r3, r2
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	18d3      	adds	r3, r2, r3
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	3268      	adds	r2, #104	@ 0x68
 8003ffa:	0052      	lsls	r2, r2, #1
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	52d1      	strh	r1, [r2, r3]
		for (i=0; i<4; i++)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	3301      	adds	r3, #1
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b03      	cmp	r3, #3
 800400a:	ddef      	ble.n	8003fec <LTC681x_reset_crc_count+0x6c>
		}
		for (i=0; i<2; i++)
 800400c:	2300      	movs	r3, #0
 800400e:	60bb      	str	r3, [r7, #8]
 8004010:	e00c      	b.n	800402c <LTC681x_reset_crc_count+0xac>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	22e8      	movs	r2, #232	@ 0xe8
 8004016:	4353      	muls	r3, r2
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	18d3      	adds	r3, r2, r3
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	326c      	adds	r2, #108	@ 0x6c
 8004020:	0052      	lsls	r2, r2, #1
 8004022:	2100      	movs	r1, #0
 8004024:	52d1      	strh	r1, [r2, r3]
		for (i=0; i<2; i++)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	3301      	adds	r3, #1
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2b01      	cmp	r3, #1
 8004030:	ddef      	ble.n	8004012 <LTC681x_reset_crc_count+0x92>
	for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3301      	adds	r3, #1
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	1dfb      	adds	r3, r7, #7
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	429a      	cmp	r2, r3
 8004040:	dbac      	blt.n	8003f9c <LTC681x_reset_crc_count+0x1c>
		}
	}
}
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	46c0      	nop			@ (mov r8, r8)
 8004046:	46bd      	mov	sp, r7
 8004048:	b004      	add	sp, #16
 800404a:	bd80      	pop	{r7, pc}

0800404c <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	0002      	movs	r2, r0
 8004054:	6039      	str	r1, [r7, #0]
 8004056:	1dfb      	adds	r3, r7, #7
 8004058:	701a      	strb	r2, [r3, #0]
	uint8_t current_ic = 0;
 800405a:	210f      	movs	r1, #15
 800405c:	187b      	adds	r3, r7, r1
 800405e:	2200      	movs	r2, #0
 8004060:	701a      	strb	r2, [r3, #0]
	int j = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	60bb      	str	r3, [r7, #8]
	for (current_ic = 0; current_ic<total_ic;current_ic++)
 8004066:	187b      	adds	r3, r7, r1
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
 800406c:	e019      	b.n	80040a2 <LTC681x_init_cfg+0x56>
	{
		for (j =0; j<6; j++)
 800406e:	2300      	movs	r3, #0
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	e00d      	b.n	8004090 <LTC681x_init_cfg+0x44>
		{
		  ic[current_ic].config.tx_data[j] = 0;
 8004074:	230f      	movs	r3, #15
 8004076:	18fb      	adds	r3, r7, r3
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	22e8      	movs	r2, #232	@ 0xe8
 800407c:	4353      	muls	r3, r2
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	18d2      	adds	r2, r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	18d3      	adds	r3, r2, r3
 8004086:	2200      	movs	r2, #0
 8004088:	701a      	strb	r2, [r3, #0]
		for (j =0; j<6; j++)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	3301      	adds	r3, #1
 800408e:	60bb      	str	r3, [r7, #8]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b05      	cmp	r3, #5
 8004094:	ddee      	ble.n	8004074 <LTC681x_init_cfg+0x28>
	for (current_ic = 0; current_ic<total_ic;current_ic++)
 8004096:	210f      	movs	r1, #15
 8004098:	187b      	adds	r3, r7, r1
 800409a:	781a      	ldrb	r2, [r3, #0]
 800409c:	187b      	adds	r3, r7, r1
 800409e:	3201      	adds	r2, #1
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	230f      	movs	r3, #15
 80040a4:	18fa      	adds	r2, r7, r3
 80040a6:	1dfb      	adds	r3, r7, #7
 80040a8:	7812      	ldrb	r2, [r2, #0]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d3de      	bcc.n	800406e <LTC681x_init_cfg+0x22>
		}
	}
}
 80040b0:	46c0      	nop			@ (mov r8, r8)
 80040b2:	46c0      	nop			@ (mov r8, r8)
 80040b4:	46bd      	mov	sp, r7
 80040b6:	b004      	add	sp, #16
 80040b8:	bd80      	pop	{r7, pc}

080040ba <LTC681x_set_cfgr_refon>:
	LTC681x_set_cfgr_ov(nIC, ic, ov);
}

/* Helper function to set the REFON bit */
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6039      	str	r1, [r7, #0]
 80040c2:	0011      	movs	r1, r2
 80040c4:	1dfb      	adds	r3, r7, #7
 80040c6:	1c02      	adds	r2, r0, #0
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	1dbb      	adds	r3, r7, #6
 80040cc:	1c0a      	adds	r2, r1, #0
 80040ce:	701a      	strb	r2, [r3, #0]
	if (refon) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x04;
 80040d0:	1dbb      	adds	r3, r7, #6
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d011      	beq.n	80040fc <LTC681x_set_cfgr_refon+0x42>
 80040d8:	1dfb      	adds	r3, r7, #7
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	22e8      	movs	r2, #232	@ 0xe8
 80040de:	4353      	muls	r3, r2
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	18d3      	adds	r3, r2, r3
 80040e4:	781a      	ldrb	r2, [r3, #0]
 80040e6:	1dfb      	adds	r3, r7, #7
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	21e8      	movs	r1, #232	@ 0xe8
 80040ec:	434b      	muls	r3, r1
 80040ee:	6839      	ldr	r1, [r7, #0]
 80040f0:	18cb      	adds	r3, r1, r3
 80040f2:	2104      	movs	r1, #4
 80040f4:	430a      	orrs	r2, r1
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
}
 80040fa:	e010      	b.n	800411e <LTC681x_set_cfgr_refon+0x64>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
 80040fc:	1dfb      	adds	r3, r7, #7
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	22e8      	movs	r2, #232	@ 0xe8
 8004102:	4353      	muls	r3, r2
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	18d3      	adds	r3, r2, r3
 8004108:	781a      	ldrb	r2, [r3, #0]
 800410a:	1dfb      	adds	r3, r7, #7
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	21e8      	movs	r1, #232	@ 0xe8
 8004110:	434b      	muls	r3, r1
 8004112:	6839      	ldr	r1, [r7, #0]
 8004114:	18cb      	adds	r3, r1, r3
 8004116:	2104      	movs	r1, #4
 8004118:	438a      	bics	r2, r1
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]
}
 800411e:	46c0      	nop			@ (mov r8, r8)
 8004120:	46bd      	mov	sp, r7
 8004122:	b002      	add	sp, #8
 8004124:	bd80      	pop	{r7, pc}

08004126 <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, bool adcopt)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6039      	str	r1, [r7, #0]
 800412e:	0011      	movs	r1, r2
 8004130:	1dfb      	adds	r3, r7, #7
 8004132:	1c02      	adds	r2, r0, #0
 8004134:	701a      	strb	r2, [r3, #0]
 8004136:	1dbb      	adds	r3, r7, #6
 8004138:	1c0a      	adds	r2, r1, #0
 800413a:	701a      	strb	r2, [r3, #0]
	if (adcopt) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x01;
 800413c:	1dbb      	adds	r3, r7, #6
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d011      	beq.n	8004168 <LTC681x_set_cfgr_adcopt+0x42>
 8004144:	1dfb      	adds	r3, r7, #7
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	22e8      	movs	r2, #232	@ 0xe8
 800414a:	4353      	muls	r3, r2
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	18d3      	adds	r3, r2, r3
 8004150:	781a      	ldrb	r2, [r3, #0]
 8004152:	1dfb      	adds	r3, r7, #7
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	21e8      	movs	r1, #232	@ 0xe8
 8004158:	434b      	muls	r3, r1
 800415a:	6839      	ldr	r1, [r7, #0]
 800415c:	18cb      	adds	r3, r1, r3
 800415e:	2101      	movs	r1, #1
 8004160:	430a      	orrs	r2, r1
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
}
 8004166:	e010      	b.n	800418a <LTC681x_set_cfgr_adcopt+0x64>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
 8004168:	1dfb      	adds	r3, r7, #7
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	22e8      	movs	r2, #232	@ 0xe8
 800416e:	4353      	muls	r3, r2
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	18d3      	adds	r3, r2, r3
 8004174:	781a      	ldrb	r2, [r3, #0]
 8004176:	1dfb      	adds	r3, r7, #7
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	21e8      	movs	r1, #232	@ 0xe8
 800417c:	434b      	muls	r3, r1
 800417e:	6839      	ldr	r1, [r7, #0]
 8004180:	18cb      	adds	r3, r1, r3
 8004182:	2101      	movs	r1, #1
 8004184:	438a      	bics	r2, r1
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]
}
 800418a:	46c0      	nop			@ (mov r8, r8)
 800418c:	46bd      	mov	sp, r7
 800418e:	b002      	add	sp, #8
 8004190:	bd80      	pop	{r7, pc}

08004192 <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic,bool gpio[5])
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b086      	sub	sp, #24
 8004196:	af00      	add	r7, sp, #0
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	230f      	movs	r3, #15
 800419e:	18fb      	adds	r3, r7, r3
 80041a0:	1c02      	adds	r2, r0, #0
 80041a2:	701a      	strb	r2, [r3, #0]
	int i = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]
	for (i =0; i<5; i++)
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	e03d      	b.n	800422a <LTC681x_set_cfgr_gpio+0x98>
	{
		if (gpio[i])ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|(0x01<<(i+3));
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	18d3      	adds	r3, r2, r3
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d019      	beq.n	80041ee <LTC681x_set_cfgr_gpio+0x5c>
 80041ba:	200f      	movs	r0, #15
 80041bc:	183b      	adds	r3, r7, r0
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	22e8      	movs	r2, #232	@ 0xe8
 80041c2:	4353      	muls	r3, r2
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	18d3      	adds	r3, r2, r3
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	b25a      	sxtb	r2, r3
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	3303      	adds	r3, #3
 80041d0:	2101      	movs	r1, #1
 80041d2:	4099      	lsls	r1, r3
 80041d4:	000b      	movs	r3, r1
 80041d6:	b25b      	sxtb	r3, r3
 80041d8:	4313      	orrs	r3, r2
 80041da:	b259      	sxtb	r1, r3
 80041dc:	183b      	adds	r3, r7, r0
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	22e8      	movs	r2, #232	@ 0xe8
 80041e2:	4353      	muls	r3, r2
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	18d3      	adds	r3, r2, r3
 80041e8:	b2ca      	uxtb	r2, r1
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	e01a      	b.n	8004224 <LTC681x_set_cfgr_gpio+0x92>
		else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&(~(0x01<<(i+3)));
 80041ee:	200f      	movs	r0, #15
 80041f0:	183b      	adds	r3, r7, r0
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	22e8      	movs	r2, #232	@ 0xe8
 80041f6:	4353      	muls	r3, r2
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	18d3      	adds	r3, r2, r3
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	b25b      	sxtb	r3, r3
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	3203      	adds	r2, #3
 8004204:	2101      	movs	r1, #1
 8004206:	4091      	lsls	r1, r2
 8004208:	000a      	movs	r2, r1
 800420a:	b252      	sxtb	r2, r2
 800420c:	43d2      	mvns	r2, r2
 800420e:	b252      	sxtb	r2, r2
 8004210:	4013      	ands	r3, r2
 8004212:	b259      	sxtb	r1, r3
 8004214:	183b      	adds	r3, r7, r0
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	22e8      	movs	r2, #232	@ 0xe8
 800421a:	4353      	muls	r3, r2
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	18d3      	adds	r3, r2, r3
 8004220:	b2ca      	uxtb	r2, r1
 8004222:	701a      	strb	r2, [r3, #0]
	for (i =0; i<5; i++)
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	3301      	adds	r3, #1
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b04      	cmp	r3, #4
 800422e:	ddbe      	ble.n	80041ae <LTC681x_set_cfgr_gpio+0x1c>
	}
}
 8004230:	46c0      	nop			@ (mov r8, r8)
 8004232:	46c0      	nop			@ (mov r8, r8)
 8004234:	46bd      	mov	sp, r7
 8004236:	b006      	add	sp, #24
 8004238:	bd80      	pop	{r7, pc}

0800423a <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic,bool dcc[12])
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b086      	sub	sp, #24
 800423e:	af00      	add	r7, sp, #0
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
 8004244:	230f      	movs	r3, #15
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	1c02      	adds	r2, r0, #0
 800424a:	701a      	strb	r2, [r3, #0]
	int i = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]
	for (i =0; i<8; i++)
 8004250:	2300      	movs	r3, #0
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	e03b      	b.n	80042ce <LTC681x_set_cfgr_dis+0x94>
	{
		if (dcc[i])ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]|(0x01<<i);
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	18d3      	adds	r3, r2, r3
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d018      	beq.n	8004294 <LTC681x_set_cfgr_dis+0x5a>
 8004262:	200f      	movs	r0, #15
 8004264:	183b      	adds	r3, r7, r0
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	22e8      	movs	r2, #232	@ 0xe8
 800426a:	4353      	muls	r3, r2
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	18d3      	adds	r3, r2, r3
 8004270:	791b      	ldrb	r3, [r3, #4]
 8004272:	b25a      	sxtb	r2, r3
 8004274:	2101      	movs	r1, #1
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	4099      	lsls	r1, r3
 800427a:	000b      	movs	r3, r1
 800427c:	b25b      	sxtb	r3, r3
 800427e:	4313      	orrs	r3, r2
 8004280:	b259      	sxtb	r1, r3
 8004282:	183b      	adds	r3, r7, r0
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	22e8      	movs	r2, #232	@ 0xe8
 8004288:	4353      	muls	r3, r2
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	18d3      	adds	r3, r2, r3
 800428e:	b2ca      	uxtb	r2, r1
 8004290:	711a      	strb	r2, [r3, #4]
 8004292:	e019      	b.n	80042c8 <LTC681x_set_cfgr_dis+0x8e>
		else ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]& (~(0x01<<i));
 8004294:	200f      	movs	r0, #15
 8004296:	183b      	adds	r3, r7, r0
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	22e8      	movs	r2, #232	@ 0xe8
 800429c:	4353      	muls	r3, r2
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	18d3      	adds	r3, r2, r3
 80042a2:	791b      	ldrb	r3, [r3, #4]
 80042a4:	b25b      	sxtb	r3, r3
 80042a6:	2101      	movs	r1, #1
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4091      	lsls	r1, r2
 80042ac:	000a      	movs	r2, r1
 80042ae:	b252      	sxtb	r2, r2
 80042b0:	43d2      	mvns	r2, r2
 80042b2:	b252      	sxtb	r2, r2
 80042b4:	4013      	ands	r3, r2
 80042b6:	b259      	sxtb	r1, r3
 80042b8:	183b      	adds	r3, r7, r0
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	22e8      	movs	r2, #232	@ 0xe8
 80042be:	4353      	muls	r3, r2
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	18d3      	adds	r3, r2, r3
 80042c4:	b2ca      	uxtb	r2, r1
 80042c6:	711a      	strb	r2, [r3, #4]
	for (i =0; i<8; i++)
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	3301      	adds	r3, #1
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2b07      	cmp	r3, #7
 80042d2:	ddc0      	ble.n	8004256 <LTC681x_set_cfgr_dis+0x1c>
	}
	for (i =0; i<4; i++)
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	e03c      	b.n	8004354 <LTC681x_set_cfgr_dis+0x11a>
	{
		if (dcc[i+8])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<i);
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	3308      	adds	r3, #8
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	18d3      	adds	r3, r2, r3
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d018      	beq.n	800431a <LTC681x_set_cfgr_dis+0xe0>
 80042e8:	200f      	movs	r0, #15
 80042ea:	183b      	adds	r3, r7, r0
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	22e8      	movs	r2, #232	@ 0xe8
 80042f0:	4353      	muls	r3, r2
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	18d3      	adds	r3, r2, r3
 80042f6:	795b      	ldrb	r3, [r3, #5]
 80042f8:	b25a      	sxtb	r2, r3
 80042fa:	2101      	movs	r1, #1
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	4099      	lsls	r1, r3
 8004300:	000b      	movs	r3, r1
 8004302:	b25b      	sxtb	r3, r3
 8004304:	4313      	orrs	r3, r2
 8004306:	b259      	sxtb	r1, r3
 8004308:	183b      	adds	r3, r7, r0
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	22e8      	movs	r2, #232	@ 0xe8
 800430e:	4353      	muls	r3, r2
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	18d3      	adds	r3, r2, r3
 8004314:	b2ca      	uxtb	r2, r1
 8004316:	715a      	strb	r2, [r3, #5]
 8004318:	e019      	b.n	800434e <LTC681x_set_cfgr_dis+0x114>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<i));
 800431a:	200f      	movs	r0, #15
 800431c:	183b      	adds	r3, r7, r0
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	22e8      	movs	r2, #232	@ 0xe8
 8004322:	4353      	muls	r3, r2
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	18d3      	adds	r3, r2, r3
 8004328:	795b      	ldrb	r3, [r3, #5]
 800432a:	b25b      	sxtb	r3, r3
 800432c:	2101      	movs	r1, #1
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4091      	lsls	r1, r2
 8004332:	000a      	movs	r2, r1
 8004334:	b252      	sxtb	r2, r2
 8004336:	43d2      	mvns	r2, r2
 8004338:	b252      	sxtb	r2, r2
 800433a:	4013      	ands	r3, r2
 800433c:	b259      	sxtb	r1, r3
 800433e:	183b      	adds	r3, r7, r0
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	22e8      	movs	r2, #232	@ 0xe8
 8004344:	4353      	muls	r3, r2
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	18d3      	adds	r3, r2, r3
 800434a:	b2ca      	uxtb	r2, r1
 800434c:	715a      	strb	r2, [r3, #5]
	for (i =0; i<4; i++)
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	3301      	adds	r3, #1
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	2b03      	cmp	r3, #3
 8004358:	ddbf      	ble.n	80042da <LTC681x_set_cfgr_dis+0xa0>
	}
}
 800435a:	46c0      	nop			@ (mov r8, r8)
 800435c:	46c0      	nop			@ (mov r8, r8)
 800435e:	46bd      	mov	sp, r7
 8004360:	b006      	add	sp, #24
 8004362:	bd80      	pop	{r7, pc}

08004364 <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic,bool dcto[4])
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	607a      	str	r2, [r7, #4]
 800436e:	230f      	movs	r3, #15
 8004370:	18fb      	adds	r3, r7, r3
 8004372:	1c02      	adds	r2, r0, #0
 8004374:	701a      	strb	r2, [r3, #0]
	int i = 0;
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
	for(i =0;i<4;i++)
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	e03d      	b.n	80043fc <LTC681x_set_cfgr_dcto+0x98>
	{
		if(dcto[i])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<(i+4));
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	18d3      	adds	r3, r2, r3
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d019      	beq.n	80043c0 <LTC681x_set_cfgr_dcto+0x5c>
 800438c:	200f      	movs	r0, #15
 800438e:	183b      	adds	r3, r7, r0
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	22e8      	movs	r2, #232	@ 0xe8
 8004394:	4353      	muls	r3, r2
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	18d3      	adds	r3, r2, r3
 800439a:	795b      	ldrb	r3, [r3, #5]
 800439c:	b25a      	sxtb	r2, r3
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	3304      	adds	r3, #4
 80043a2:	2101      	movs	r1, #1
 80043a4:	4099      	lsls	r1, r3
 80043a6:	000b      	movs	r3, r1
 80043a8:	b25b      	sxtb	r3, r3
 80043aa:	4313      	orrs	r3, r2
 80043ac:	b259      	sxtb	r1, r3
 80043ae:	183b      	adds	r3, r7, r0
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	22e8      	movs	r2, #232	@ 0xe8
 80043b4:	4353      	muls	r3, r2
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	18d3      	adds	r3, r2, r3
 80043ba:	b2ca      	uxtb	r2, r1
 80043bc:	715a      	strb	r2, [r3, #5]
 80043be:	e01a      	b.n	80043f6 <LTC681x_set_cfgr_dcto+0x92>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<(i+4)));
 80043c0:	200f      	movs	r0, #15
 80043c2:	183b      	adds	r3, r7, r0
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	22e8      	movs	r2, #232	@ 0xe8
 80043c8:	4353      	muls	r3, r2
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	18d3      	adds	r3, r2, r3
 80043ce:	795b      	ldrb	r3, [r3, #5]
 80043d0:	b25b      	sxtb	r3, r3
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	3204      	adds	r2, #4
 80043d6:	2101      	movs	r1, #1
 80043d8:	4091      	lsls	r1, r2
 80043da:	000a      	movs	r2, r1
 80043dc:	b252      	sxtb	r2, r2
 80043de:	43d2      	mvns	r2, r2
 80043e0:	b252      	sxtb	r2, r2
 80043e2:	4013      	ands	r3, r2
 80043e4:	b259      	sxtb	r1, r3
 80043e6:	183b      	adds	r3, r7, r0
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	22e8      	movs	r2, #232	@ 0xe8
 80043ec:	4353      	muls	r3, r2
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	18d3      	adds	r3, r2, r3
 80043f2:	b2ca      	uxtb	r2, r1
 80043f4:	715a      	strb	r2, [r3, #5]
	for(i =0;i<4;i++)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	3301      	adds	r3, #1
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2b03      	cmp	r3, #3
 8004400:	ddbe      	ble.n	8004380 <LTC681x_set_cfgr_dcto+0x1c>
	}
}
 8004402:	46c0      	nop			@ (mov r8, r8)
 8004404:	46c0      	nop			@ (mov r8, r8)
 8004406:	46bd      	mov	sp, r7
 8004408:	b006      	add	sp, #24
 800440a:	bd80      	pop	{r7, pc}

0800440c <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic,uint16_t uv)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6039      	str	r1, [r7, #0]
 8004414:	0011      	movs	r1, r2
 8004416:	1dfb      	adds	r3, r7, #7
 8004418:	1c02      	adds	r2, r0, #0
 800441a:	701a      	strb	r2, [r3, #0]
 800441c:	1d3b      	adds	r3, r7, #4
 800441e:	1c0a      	adds	r2, r1, #0
 8004420:	801a      	strh	r2, [r3, #0]
	uint16_t tmp = (uv/16)-1;
 8004422:	1d3b      	adds	r3, r7, #4
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	091b      	lsrs	r3, r3, #4
 8004428:	b29a      	uxth	r2, r3
 800442a:	200e      	movs	r0, #14
 800442c:	183b      	adds	r3, r7, r0
 800442e:	3a01      	subs	r2, #1
 8004430:	801a      	strh	r2, [r3, #0]
	ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 8004432:	1dfb      	adds	r3, r7, #7
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	22e8      	movs	r2, #232	@ 0xe8
 8004438:	4353      	muls	r3, r2
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	18d3      	adds	r3, r2, r3
 800443e:	183a      	adds	r2, r7, r0
 8004440:	8812      	ldrh	r2, [r2, #0]
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	705a      	strb	r2, [r3, #1]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0xF0;
 8004446:	1dfb      	adds	r3, r7, #7
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	22e8      	movs	r2, #232	@ 0xe8
 800444c:	4353      	muls	r3, r2
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	18d3      	adds	r3, r2, r3
 8004452:	789a      	ldrb	r2, [r3, #2]
 8004454:	1dfb      	adds	r3, r7, #7
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	21e8      	movs	r1, #232	@ 0xe8
 800445a:	434b      	muls	r3, r1
 800445c:	6839      	ldr	r1, [r7, #0]
 800445e:	18cb      	adds	r3, r1, r3
 8004460:	210f      	movs	r1, #15
 8004462:	438a      	bics	r2, r1
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x0F00 & tmp)>>8);
 8004468:	1dfb      	adds	r3, r7, #7
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	22e8      	movs	r2, #232	@ 0xe8
 800446e:	4353      	muls	r3, r2
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	18d3      	adds	r3, r2, r3
 8004474:	789b      	ldrb	r3, [r3, #2]
 8004476:	b25a      	sxtb	r2, r3
 8004478:	183b      	adds	r3, r7, r0
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	0a1b      	lsrs	r3, r3, #8
 800447e:	b29b      	uxth	r3, r3
 8004480:	b25b      	sxtb	r3, r3
 8004482:	210f      	movs	r1, #15
 8004484:	400b      	ands	r3, r1
 8004486:	b25b      	sxtb	r3, r3
 8004488:	4313      	orrs	r3, r2
 800448a:	b259      	sxtb	r1, r3
 800448c:	1dfb      	adds	r3, r7, #7
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	22e8      	movs	r2, #232	@ 0xe8
 8004492:	4353      	muls	r3, r2
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	18d3      	adds	r3, r2, r3
 8004498:	b2ca      	uxtb	r2, r1
 800449a:	709a      	strb	r2, [r3, #2]
}
 800449c:	46c0      	nop			@ (mov r8, r8)
 800449e:	46bd      	mov	sp, r7
 80044a0:	b004      	add	sp, #16
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic,uint16_t ov)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6039      	str	r1, [r7, #0]
 80044ac:	0011      	movs	r1, r2
 80044ae:	1dfb      	adds	r3, r7, #7
 80044b0:	1c02      	adds	r2, r0, #0
 80044b2:	701a      	strb	r2, [r3, #0]
 80044b4:	1d3b      	adds	r3, r7, #4
 80044b6:	1c0a      	adds	r2, r1, #0
 80044b8:	801a      	strh	r2, [r3, #0]
	uint16_t tmp = (ov/16);
 80044ba:	200e      	movs	r0, #14
 80044bc:	183b      	adds	r3, r7, r0
 80044be:	1d3a      	adds	r2, r7, #4
 80044c0:	8812      	ldrh	r2, [r2, #0]
 80044c2:	0912      	lsrs	r2, r2, #4
 80044c4:	801a      	strh	r2, [r3, #0]
	ic[nIC].config.tx_data[3] = 0x00FF & (tmp>>4);
 80044c6:	183b      	adds	r3, r7, r0
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	091b      	lsrs	r3, r3, #4
 80044cc:	b299      	uxth	r1, r3
 80044ce:	1dfb      	adds	r3, r7, #7
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	22e8      	movs	r2, #232	@ 0xe8
 80044d4:	4353      	muls	r3, r2
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	18d3      	adds	r3, r2, r3
 80044da:	b2ca      	uxtb	r2, r1
 80044dc:	70da      	strb	r2, [r3, #3]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0x0F;
 80044de:	1dfb      	adds	r3, r7, #7
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	22e8      	movs	r2, #232	@ 0xe8
 80044e4:	4353      	muls	r3, r2
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	18d3      	adds	r3, r2, r3
 80044ea:	789a      	ldrb	r2, [r3, #2]
 80044ec:	1dfb      	adds	r3, r7, #7
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	21e8      	movs	r1, #232	@ 0xe8
 80044f2:	434b      	muls	r3, r1
 80044f4:	6839      	ldr	r1, [r7, #0]
 80044f6:	18cb      	adds	r3, r1, r3
 80044f8:	210f      	movs	r1, #15
 80044fa:	400a      	ands	r2, r1
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x000F & tmp)<<4);
 8004500:	1dfb      	adds	r3, r7, #7
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	22e8      	movs	r2, #232	@ 0xe8
 8004506:	4353      	muls	r3, r2
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	18d3      	adds	r3, r2, r3
 800450c:	789b      	ldrb	r3, [r3, #2]
 800450e:	b25a      	sxtb	r2, r3
 8004510:	183b      	adds	r3, r7, r0
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	b25b      	sxtb	r3, r3
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	b25b      	sxtb	r3, r3
 800451a:	4313      	orrs	r3, r2
 800451c:	b259      	sxtb	r1, r3
 800451e:	1dfb      	adds	r3, r7, #7
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	22e8      	movs	r2, #232	@ 0xe8
 8004524:	4353      	muls	r3, r2
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	18d3      	adds	r3, r2, r3
 800452a:	b2ca      	uxtb	r2, r1
 800452c:	709a      	strb	r2, [r3, #2]
}
 800452e:	46c0      	nop			@ (mov r8, r8)
 8004530:	46bd      	mov	sp, r7
 8004532:	b004      	add	sp, #16
 8004534:	bd80      	pop	{r7, pc}

08004536 <cs_low>:
#define CS_GPIO_PORT GPIOA // GPIO Port for software CS pin

extern SPI_HandleTypeDef hspi1; // SPI Handle
extern TIM_HandleTypeDef htim3; // Timer Handle

void cs_low(uint8_t pin) {
 8004536:	b580      	push	{r7, lr}
 8004538:	b082      	sub	sp, #8
 800453a:	af00      	add	r7, sp, #0
 800453c:	0002      	movs	r2, r0
 800453e:	1dfb      	adds	r3, r7, #7
 8004540:	701a      	strb	r2, [r3, #0]
	output_low(pin);
 8004542:	1dfb      	adds	r3, r7, #7
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	b299      	uxth	r1, r3
 8004548:	2390      	movs	r3, #144	@ 0x90
 800454a:	05db      	lsls	r3, r3, #23
 800454c:	2200      	movs	r2, #0
 800454e:	0018      	movs	r0, r3
 8004550:	f001 ff60 	bl	8006414 <HAL_GPIO_WritePin>
}
 8004554:	46c0      	nop			@ (mov r8, r8)
 8004556:	46bd      	mov	sp, r7
 8004558:	b002      	add	sp, #8
 800455a:	bd80      	pop	{r7, pc}

0800455c <cs_high>:

void cs_high(uint8_t pin) {
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	0002      	movs	r2, r0
 8004564:	1dfb      	adds	r3, r7, #7
 8004566:	701a      	strb	r2, [r3, #0]
	output_high(pin);
 8004568:	1dfb      	adds	r3, r7, #7
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	b299      	uxth	r1, r3
 800456e:	2390      	movs	r3, #144	@ 0x90
 8004570:	05db      	lsls	r3, r3, #23
 8004572:	2201      	movs	r2, #1
 8004574:	0018      	movs	r0, r3
 8004576:	f001 ff4d 	bl	8006414 <HAL_GPIO_WritePin>
}
 800457a:	46c0      	nop			@ (mov r8, r8)
 800457c:	46bd      	mov	sp, r7
 800457e:	b002      	add	sp, #8
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <spi_write_array>:
/*
 Writes an array of bytes out of the SPI port
 */
void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
		uint8_t data[] //Array of bytes to be written on the SPI port
		) {
 8004584:	b590      	push	{r4, r7, lr}
 8004586:	b087      	sub	sp, #28
 8004588:	af02      	add	r7, sp, #8
 800458a:	0002      	movs	r2, r0
 800458c:	6039      	str	r1, [r7, #0]
 800458e:	1dfb      	adds	r3, r7, #7
 8004590:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t rx_data;

	for (i = 0; i < len; i++) {
 8004592:	230f      	movs	r3, #15
 8004594:	18fb      	adds	r3, r7, r3
 8004596:	2200      	movs	r2, #0
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	e012      	b.n	80045c2 <spi_write_array+0x3e>
//	  SPI.transfer((int8_t)data[i]);
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &data[i], &rx_data, 1,
 800459c:	240f      	movs	r4, #15
 800459e:	193b      	adds	r3, r7, r4
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	18d1      	adds	r1, r2, r3
 80045a6:	230e      	movs	r3, #14
 80045a8:	18fa      	adds	r2, r7, r3
 80045aa:	480c      	ldr	r0, [pc, #48]	@ (80045dc <spi_write_array+0x58>)
 80045ac:	2301      	movs	r3, #1
 80045ae:	425b      	negs	r3, r3
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	2301      	movs	r3, #1
 80045b4:	f002 fdf8 	bl	80071a8 <HAL_SPI_TransmitReceive>
	for (i = 0; i < len; i++) {
 80045b8:	193b      	adds	r3, r7, r4
 80045ba:	781a      	ldrb	r2, [r3, #0]
 80045bc:	193b      	adds	r3, r7, r4
 80045be:	3201      	adds	r2, #1
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	230f      	movs	r3, #15
 80045c4:	18fa      	adds	r2, r7, r3
 80045c6:	1dfb      	adds	r3, r7, #7
 80045c8:	7812      	ldrb	r2, [r2, #0]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d3e5      	bcc.n	800459c <spi_write_array+0x18>
				HAL_MAX_DELAY);
	}
}
 80045d0:	46c0      	nop			@ (mov r8, r8)
 80045d2:	46c0      	nop			@ (mov r8, r8)
 80045d4:	46bd      	mov	sp, r7
 80045d6:	b005      	add	sp, #20
 80045d8:	bd90      	pop	{r4, r7, pc}
 80045da:	46c0      	nop			@ (mov r8, r8)
 80045dc:	20000100 	.word	0x20000100

080045e0 <spi_write_read>:

void spi_write_read(uint8_t tx_Data[], //array of data to be written on SPI port
		uint8_t tx_len, //length of the tx data arry
		uint8_t *rx_data, //Input: array that will store the data read by the SPI port
		uint8_t rx_len //Option: number of bytes to be read from the SPI port
		) {
 80045e0:	b590      	push	{r4, r7, lr}
 80045e2:	b089      	sub	sp, #36	@ 0x24
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	0008      	movs	r0, r1
 80045ea:	607a      	str	r2, [r7, #4]
 80045ec:	0019      	movs	r1, r3
 80045ee:	230b      	movs	r3, #11
 80045f0:	18fb      	adds	r3, r7, r3
 80045f2:	1c02      	adds	r2, r0, #0
 80045f4:	701a      	strb	r2, [r3, #0]
 80045f6:	230a      	movs	r3, #10
 80045f8:	18fb      	adds	r3, r7, r3
 80045fa:	1c0a      	adds	r2, r1, #0
 80045fc:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t data;

	for (i = 0; i < tx_len; i++) {
 80045fe:	2317      	movs	r3, #23
 8004600:	18fb      	adds	r3, r7, r3
 8004602:	2200      	movs	r2, #0
 8004604:	701a      	strb	r2, [r3, #0]
 8004606:	e012      	b.n	800462e <spi_write_read+0x4e>
//	  SPI.transfer(tx_Data[i]);
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &tx_Data[i], &data, 1,
 8004608:	2417      	movs	r4, #23
 800460a:	193b      	adds	r3, r7, r4
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	18d1      	adds	r1, r2, r3
 8004612:	2315      	movs	r3, #21
 8004614:	18fa      	adds	r2, r7, r3
 8004616:	481c      	ldr	r0, [pc, #112]	@ (8004688 <spi_write_read+0xa8>)
 8004618:	2301      	movs	r3, #1
 800461a:	425b      	negs	r3, r3
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	2301      	movs	r3, #1
 8004620:	f002 fdc2 	bl	80071a8 <HAL_SPI_TransmitReceive>
	for (i = 0; i < tx_len; i++) {
 8004624:	193b      	adds	r3, r7, r4
 8004626:	781a      	ldrb	r2, [r3, #0]
 8004628:	193b      	adds	r3, r7, r4
 800462a:	3201      	adds	r2, #1
 800462c:	701a      	strb	r2, [r3, #0]
 800462e:	2317      	movs	r3, #23
 8004630:	18fa      	adds	r2, r7, r3
 8004632:	230b      	movs	r3, #11
 8004634:	18fb      	adds	r3, r7, r3
 8004636:	7812      	ldrb	r2, [r2, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d3e4      	bcc.n	8004608 <spi_write_read+0x28>
				HAL_MAX_DELAY);
	}

	for (uint8_t i = 0; i < rx_len; i++) {
 800463e:	2316      	movs	r3, #22
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	e011      	b.n	800466c <spi_write_read+0x8c>
//    rx_data[i] = (uint8_t)SPI.transfer(0xFF);
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) 0xFF, (uint8_t*) &rx_data[i],
 8004648:	2416      	movs	r4, #22
 800464a:	193b      	adds	r3, r7, r4
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	18d2      	adds	r2, r2, r3
 8004652:	480d      	ldr	r0, [pc, #52]	@ (8004688 <spi_write_read+0xa8>)
 8004654:	2301      	movs	r3, #1
 8004656:	425b      	negs	r3, r3
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	2301      	movs	r3, #1
 800465c:	21ff      	movs	r1, #255	@ 0xff
 800465e:	f002 fda3 	bl	80071a8 <HAL_SPI_TransmitReceive>
	for (uint8_t i = 0; i < rx_len; i++) {
 8004662:	193b      	adds	r3, r7, r4
 8004664:	781a      	ldrb	r2, [r3, #0]
 8004666:	193b      	adds	r3, r7, r4
 8004668:	3201      	adds	r2, #1
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	2316      	movs	r3, #22
 800466e:	18fa      	adds	r2, r7, r3
 8004670:	230a      	movs	r3, #10
 8004672:	18fb      	adds	r3, r7, r3
 8004674:	7812      	ldrb	r2, [r2, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d3e5      	bcc.n	8004648 <spi_write_read+0x68>
				1, HAL_MAX_DELAY);
	}

}
 800467c:	46c0      	nop			@ (mov r8, r8)
 800467e:	46c0      	nop			@ (mov r8, r8)
 8004680:	46bd      	mov	sp, r7
 8004682:	b007      	add	sp, #28
 8004684:	bd90      	pop	{r4, r7, pc}
 8004686:	46c0      	nop			@ (mov r8, r8)
 8004688:	20000100 	.word	0x20000100

0800468c <spi_read_byte>:

uint8_t spi_read_byte(uint8_t tx_dat) {
 800468c:	b590      	push	{r4, r7, lr}
 800468e:	b087      	sub	sp, #28
 8004690:	af02      	add	r7, sp, #8
 8004692:	0002      	movs	r2, r0
 8004694:	1dfb      	adds	r3, r7, #7
 8004696:	701a      	strb	r2, [r3, #0]
	uint8_t data;
//  data = (uint8_t)SPI.transfer(0xFF);
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) 0xFF, (uint8_t*) &data, 1,
 8004698:	240f      	movs	r4, #15
 800469a:	193a      	adds	r2, r7, r4
 800469c:	4806      	ldr	r0, [pc, #24]	@ (80046b8 <spi_read_byte+0x2c>)
 800469e:	2301      	movs	r3, #1
 80046a0:	425b      	negs	r3, r3
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	2301      	movs	r3, #1
 80046a6:	21ff      	movs	r1, #255	@ 0xff
 80046a8:	f002 fd7e 	bl	80071a8 <HAL_SPI_TransmitReceive>
			HAL_MAX_DELAY);
	return (data);
 80046ac:	193b      	adds	r3, r7, r4
 80046ae:	781b      	ldrb	r3, [r3, #0]
}
 80046b0:	0018      	movs	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b005      	add	sp, #20
 80046b6:	bd90      	pop	{r4, r7, pc}
 80046b8:	20000100 	.word	0x20000100

080046bc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80046bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046be:	b089      	sub	sp, #36	@ 0x24
 80046c0:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80046c2:	f001 f8cb 	bl	800585c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80046c6:	f000 f873 	bl	80047b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80046ca:	f000 fa9f 	bl	8004c0c <MX_GPIO_Init>
	MX_SPI1_Init();
 80046ce:	f000 f9d9 	bl	8004a84 <MX_SPI1_Init>
	MX_CAN_Init();
 80046d2:	f000 f9a1 	bl	8004a18 <MX_CAN_Init>
	MX_USART1_UART_Init();
 80046d6:	f000 fa69 	bl	8004bac <MX_USART1_UART_Init>
	MX_ADC_Init();
 80046da:	f000 f8cd 	bl	8004878 <MX_ADC_Init>
	MX_TIM3_Init();
 80046de:	f000 fa0f 	bl	8004b00 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	int8_t error = 0;
 80046e2:	1dbb      	adds	r3, r7, #6
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]

	LTC6813_init_cfg(TOTAL_IC, BMS_IC);
 80046e8:	4b29      	ldr	r3, [pc, #164]	@ (8004790 <main+0xd4>)
 80046ea:	0019      	movs	r1, r3
 80046ec:	2012      	movs	r0, #18
 80046ee:	f7fd fed7 	bl	80024a0 <LTC6813_init_cfg>
	for (uint8_t current_ic = 0; current_ic < TOTAL_IC; current_ic++) {
 80046f2:	1dfb      	adds	r3, r7, #7
 80046f4:	2200      	movs	r2, #0
 80046f6:	701a      	strb	r2, [r3, #0]
 80046f8:	e01c      	b.n	8004734 <main+0x78>
		LTC6813_set_cfgr(current_ic, BMS_IC, REFON, ADCOPT, GPIOBITS_A,
 80046fa:	4b26      	ldr	r3, [pc, #152]	@ (8004794 <main+0xd8>)
 80046fc:	781d      	ldrb	r5, [r3, #0]
 80046fe:	4b26      	ldr	r3, [pc, #152]	@ (8004798 <main+0xdc>)
 8004700:	781e      	ldrb	r6, [r3, #0]
 8004702:	4b26      	ldr	r3, [pc, #152]	@ (800479c <main+0xe0>)
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	4a26      	ldr	r2, [pc, #152]	@ (80047a0 <main+0xe4>)
 8004708:	8812      	ldrh	r2, [r2, #0]
 800470a:	4c21      	ldr	r4, [pc, #132]	@ (8004790 <main+0xd4>)
 800470c:	1df9      	adds	r1, r7, #7
 800470e:	7808      	ldrb	r0, [r1, #0]
 8004710:	9204      	str	r2, [sp, #16]
 8004712:	9303      	str	r3, [sp, #12]
 8004714:	4b23      	ldr	r3, [pc, #140]	@ (80047a4 <main+0xe8>)
 8004716:	9302      	str	r3, [sp, #8]
 8004718:	4b23      	ldr	r3, [pc, #140]	@ (80047a8 <main+0xec>)
 800471a:	9301      	str	r3, [sp, #4]
 800471c:	4b23      	ldr	r3, [pc, #140]	@ (80047ac <main+0xf0>)
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	0033      	movs	r3, r6
 8004722:	002a      	movs	r2, r5
 8004724:	0021      	movs	r1, r4
 8004726:	f7fd fecd 	bl	80024c4 <LTC6813_set_cfgr>
	for (uint8_t current_ic = 0; current_ic < TOTAL_IC; current_ic++) {
 800472a:	1dfb      	adds	r3, r7, #7
 800472c:	781a      	ldrb	r2, [r3, #0]
 800472e:	1dfb      	adds	r3, r7, #7
 8004730:	3201      	adds	r2, #1
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	1dfb      	adds	r3, r7, #7
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b11      	cmp	r3, #17
 800473a:	d9de      	bls.n	80046fa <main+0x3e>
				DCCBITS_A, DCTOBITS, UV, OV);
	}
	LTC6813_reset_crc_count(TOTAL_IC, BMS_IC);
 800473c:	4b14      	ldr	r3, [pc, #80]	@ (8004790 <main+0xd4>)
 800473e:	0019      	movs	r1, r3
 8004740:	2012      	movs	r0, #18
 8004742:	f7fd fe9b 	bl	800247c <LTC6813_reset_crc_count>
	LTC6813_init_reg_limits(TOTAL_IC, BMS_IC);
 8004746:	4b12      	ldr	r3, [pc, #72]	@ (8004790 <main+0xd4>)
 8004748:	0019      	movs	r1, r3
 800474a:	2012      	movs	r0, #18
 800474c:	f7fd fd66 	bl	800221c <LTC6813_init_reg_limits>

	// Writing configuration to all ICs
	wakeup_idle(TOTAL_IC);
 8004750:	2012      	movs	r0, #18
 8004752:	f7fd ff02 	bl	800255a <wakeup_idle>
	LTC6813_wrcfg(TOTAL_IC, BMS_IC);
 8004756:	4b0e      	ldr	r3, [pc, #56]	@ (8004790 <main+0xd4>)
 8004758:	0019      	movs	r1, r3
 800475a:	2012      	movs	r0, #18
 800475c:	f7fd fdb5 	bl	80022ca <LTC6813_wrcfg>
	if (DEBUG_MODE == ENABLED) {
		print_wrconfig();
 8004760:	f000 fbac 	bl	8004ebc <print_wrconfig>
	}

	// Reading configuration from all ICs
	wakeup_idle(TOTAL_IC);
 8004764:	2012      	movs	r0, #18
 8004766:	f7fd fef8 	bl	800255a <wakeup_idle>
	error = LTC6813_rdcfg(TOTAL_IC, BMS_IC);
 800476a:	1dbc      	adds	r4, r7, #6
 800476c:	4b08      	ldr	r3, [pc, #32]	@ (8004790 <main+0xd4>)
 800476e:	0019      	movs	r1, r3
 8004770:	2012      	movs	r0, #18
 8004772:	f7fd fdbc 	bl	80022ee <LTC6813_rdcfg>
 8004776:	0003      	movs	r3, r0
 8004778:	7023      	strb	r3, [r4, #0]
	check_error(error);
 800477a:	1dbb      	adds	r3, r7, #6
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	b25b      	sxtb	r3, r3
 8004780:	0018      	movs	r0, r3
 8004782:	f000 fddd 	bl	8005340 <check_error>
	if (DEBUG_MODE == ENABLED) {
		print_rxconfig();
 8004786:	f000 fbfb 	bl	8004f80 <print_rxconfig>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		measure();
 800478a:	f000 fb2f 	bl	8004dec <measure>
 800478e:	e7fc      	b.n	800478a <main+0xce>
 8004790:	20000234 	.word	0x20000234
 8004794:	20000000 	.word	0x20000000
 8004798:	20001284 	.word	0x20001284
 800479c:	2000000a 	.word	0x2000000a
 80047a0:	2000000c 	.word	0x2000000c
 80047a4:	20000010 	.word	0x20000010
 80047a8:	20001288 	.word	0x20001288
 80047ac:	20000004 	.word	0x20000004

080047b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80047b0:	b590      	push	{r4, r7, lr}
 80047b2:	b099      	sub	sp, #100	@ 0x64
 80047b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80047b6:	242c      	movs	r4, #44	@ 0x2c
 80047b8:	193b      	adds	r3, r7, r4
 80047ba:	0018      	movs	r0, r3
 80047bc:	2334      	movs	r3, #52	@ 0x34
 80047be:	001a      	movs	r2, r3
 80047c0:	2100      	movs	r1, #0
 80047c2:	f004 faef 	bl	8008da4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80047c6:	231c      	movs	r3, #28
 80047c8:	18fb      	adds	r3, r7, r3
 80047ca:	0018      	movs	r0, r3
 80047cc:	2310      	movs	r3, #16
 80047ce:	001a      	movs	r2, r3
 80047d0:	2100      	movs	r1, #0
 80047d2:	f004 fae7 	bl	8008da4 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80047d6:	003b      	movs	r3, r7
 80047d8:	0018      	movs	r0, r3
 80047da:	231c      	movs	r3, #28
 80047dc:	001a      	movs	r2, r3
 80047de:	2100      	movs	r1, #0
 80047e0:	f004 fae0 	bl	8008da4 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14
 80047e4:	0021      	movs	r1, r4
 80047e6:	187b      	adds	r3, r7, r1
 80047e8:	2211      	movs	r2, #17
 80047ea:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80047ec:	187b      	adds	r3, r7, r1
 80047ee:	2201      	movs	r2, #1
 80047f0:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80047f2:	187b      	adds	r3, r7, r1
 80047f4:	2201      	movs	r2, #1
 80047f6:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80047f8:	187b      	adds	r3, r7, r1
 80047fa:	2210      	movs	r2, #16
 80047fc:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047fe:	187b      	adds	r3, r7, r1
 8004800:	2202      	movs	r2, #2
 8004802:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004804:	187b      	adds	r3, r7, r1
 8004806:	2280      	movs	r2, #128	@ 0x80
 8004808:	0252      	lsls	r2, r2, #9
 800480a:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800480c:	187b      	adds	r3, r7, r1
 800480e:	2200      	movs	r2, #0
 8004810:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004812:	187b      	adds	r3, r7, r1
 8004814:	2200      	movs	r2, #0
 8004816:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004818:	187b      	adds	r3, r7, r1
 800481a:	0018      	movs	r0, r3
 800481c:	f001 fe18 	bl	8006450 <HAL_RCC_OscConfig>
 8004820:	1e03      	subs	r3, r0, #0
 8004822:	d001      	beq.n	8004828 <SystemClock_Config+0x78>
		Error_Handler();
 8004824:	f000 fd9e 	bl	8005364 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004828:	211c      	movs	r1, #28
 800482a:	187b      	adds	r3, r7, r1
 800482c:	2207      	movs	r2, #7
 800482e:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004830:	187b      	adds	r3, r7, r1
 8004832:	2202      	movs	r2, #2
 8004834:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8004836:	187b      	adds	r3, r7, r1
 8004838:	2280      	movs	r2, #128	@ 0x80
 800483a:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800483c:	187b      	adds	r3, r7, r1
 800483e:	2200      	movs	r2, #0
 8004840:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8004842:	187b      	adds	r3, r7, r1
 8004844:	2100      	movs	r1, #0
 8004846:	0018      	movs	r0, r3
 8004848:	f002 f988 	bl	8006b5c <HAL_RCC_ClockConfig>
 800484c:	1e03      	subs	r3, r0, #0
 800484e:	d001      	beq.n	8004854 <SystemClock_Config+0xa4>
		Error_Handler();
 8004850:	f000 fd88 	bl	8005364 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004854:	003b      	movs	r3, r7
 8004856:	2201      	movs	r2, #1
 8004858:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800485a:	003b      	movs	r3, r7
 800485c:	2200      	movs	r2, #0
 800485e:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8004860:	003b      	movs	r3, r7
 8004862:	0018      	movs	r0, r3
 8004864:	f002 fae8 	bl	8006e38 <HAL_RCCEx_PeriphCLKConfig>
 8004868:	1e03      	subs	r3, r0, #0
 800486a:	d001      	beq.n	8004870 <SystemClock_Config+0xc0>
		Error_Handler();
 800486c:	f000 fd7a 	bl	8005364 <Error_Handler>
	}
}
 8004870:	46c0      	nop			@ (mov r8, r8)
 8004872:	46bd      	mov	sp, r7
 8004874:	b019      	add	sp, #100	@ 0x64
 8004876:	bd90      	pop	{r4, r7, pc}

08004878 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800487e:	1d3b      	adds	r3, r7, #4
 8004880:	0018      	movs	r0, r3
 8004882:	230c      	movs	r3, #12
 8004884:	001a      	movs	r2, r3
 8004886:	2100      	movs	r1, #0
 8004888:	f004 fa8c 	bl	8008da4 <memset>

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 800488c:	4b60      	ldr	r3, [pc, #384]	@ (8004a10 <MX_ADC_Init+0x198>)
 800488e:	4a61      	ldr	r2, [pc, #388]	@ (8004a14 <MX_ADC_Init+0x19c>)
 8004890:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004892:	4b5f      	ldr	r3, [pc, #380]	@ (8004a10 <MX_ADC_Init+0x198>)
 8004894:	2200      	movs	r2, #0
 8004896:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004898:	4b5d      	ldr	r3, [pc, #372]	@ (8004a10 <MX_ADC_Init+0x198>)
 800489a:	2200      	movs	r2, #0
 800489c:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800489e:	4b5c      	ldr	r3, [pc, #368]	@ (8004a10 <MX_ADC_Init+0x198>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80048a4:	4b5a      	ldr	r3, [pc, #360]	@ (8004a10 <MX_ADC_Init+0x198>)
 80048a6:	2201      	movs	r2, #1
 80048a8:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80048aa:	4b59      	ldr	r3, [pc, #356]	@ (8004a10 <MX_ADC_Init+0x198>)
 80048ac:	2204      	movs	r2, #4
 80048ae:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 80048b0:	4b57      	ldr	r3, [pc, #348]	@ (8004a10 <MX_ADC_Init+0x198>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80048b6:	4b56      	ldr	r3, [pc, #344]	@ (8004a10 <MX_ADC_Init+0x198>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = DISABLE;
 80048bc:	4b54      	ldr	r3, [pc, #336]	@ (8004a10 <MX_ADC_Init+0x198>)
 80048be:	2200      	movs	r2, #0
 80048c0:	769a      	strb	r2, [r3, #26]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 80048c2:	4b53      	ldr	r3, [pc, #332]	@ (8004a10 <MX_ADC_Init+0x198>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	76da      	strb	r2, [r3, #27]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80048c8:	4b51      	ldr	r3, [pc, #324]	@ (8004a10 <MX_ADC_Init+0x198>)
 80048ca:	22c2      	movs	r2, #194	@ 0xc2
 80048cc:	32ff      	adds	r2, #255	@ 0xff
 80048ce:	61da      	str	r2, [r3, #28]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80048d0:	4b4f      	ldr	r3, [pc, #316]	@ (8004a10 <MX_ADC_Init+0x198>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	621a      	str	r2, [r3, #32]
	hadc.Init.DMAContinuousRequests = DISABLE;
 80048d6:	4b4e      	ldr	r3, [pc, #312]	@ (8004a10 <MX_ADC_Init+0x198>)
 80048d8:	2224      	movs	r2, #36	@ 0x24
 80048da:	2100      	movs	r1, #0
 80048dc:	5499      	strb	r1, [r3, r2]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80048de:	4b4c      	ldr	r3, [pc, #304]	@ (8004a10 <MX_ADC_Init+0x198>)
 80048e0:	2201      	movs	r2, #1
 80048e2:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 80048e4:	4b4a      	ldr	r3, [pc, #296]	@ (8004a10 <MX_ADC_Init+0x198>)
 80048e6:	0018      	movs	r0, r3
 80048e8:	f001 f81c 	bl	8005924 <HAL_ADC_Init>
 80048ec:	1e03      	subs	r3, r0, #0
 80048ee:	d001      	beq.n	80048f4 <MX_ADC_Init+0x7c>
		Error_Handler();
 80048f0:	f000 fd38 	bl	8005364 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80048f4:	1d3b      	adds	r3, r7, #4
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80048fa:	1d3b      	adds	r3, r7, #4
 80048fc:	2280      	movs	r2, #128	@ 0x80
 80048fe:	0152      	lsls	r2, r2, #5
 8004900:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004902:	1d3b      	adds	r3, r7, #4
 8004904:	2280      	movs	r2, #128	@ 0x80
 8004906:	0552      	lsls	r2, r2, #21
 8004908:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800490a:	1d3a      	adds	r2, r7, #4
 800490c:	4b40      	ldr	r3, [pc, #256]	@ (8004a10 <MX_ADC_Init+0x198>)
 800490e:	0011      	movs	r1, r2
 8004910:	0018      	movs	r0, r3
 8004912:	f001 f947 	bl	8005ba4 <HAL_ADC_ConfigChannel>
 8004916:	1e03      	subs	r3, r0, #0
 8004918:	d001      	beq.n	800491e <MX_ADC_Init+0xa6>
		Error_Handler();
 800491a:	f000 fd23 	bl	8005364 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800491e:	1d3b      	adds	r3, r7, #4
 8004920:	2201      	movs	r2, #1
 8004922:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004924:	1d3a      	adds	r2, r7, #4
 8004926:	4b3a      	ldr	r3, [pc, #232]	@ (8004a10 <MX_ADC_Init+0x198>)
 8004928:	0011      	movs	r1, r2
 800492a:	0018      	movs	r0, r3
 800492c:	f001 f93a 	bl	8005ba4 <HAL_ADC_ConfigChannel>
 8004930:	1e03      	subs	r3, r0, #0
 8004932:	d001      	beq.n	8004938 <MX_ADC_Init+0xc0>
		Error_Handler();
 8004934:	f000 fd16 	bl	8005364 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8004938:	1d3b      	adds	r3, r7, #4
 800493a:	2202      	movs	r2, #2
 800493c:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800493e:	1d3a      	adds	r2, r7, #4
 8004940:	4b33      	ldr	r3, [pc, #204]	@ (8004a10 <MX_ADC_Init+0x198>)
 8004942:	0011      	movs	r1, r2
 8004944:	0018      	movs	r0, r3
 8004946:	f001 f92d 	bl	8005ba4 <HAL_ADC_ConfigChannel>
 800494a:	1e03      	subs	r3, r0, #0
 800494c:	d001      	beq.n	8004952 <MX_ADC_Init+0xda>
		Error_Handler();
 800494e:	f000 fd09 	bl	8005364 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8004952:	1d3b      	adds	r3, r7, #4
 8004954:	2203      	movs	r2, #3
 8004956:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004958:	1d3a      	adds	r2, r7, #4
 800495a:	4b2d      	ldr	r3, [pc, #180]	@ (8004a10 <MX_ADC_Init+0x198>)
 800495c:	0011      	movs	r1, r2
 800495e:	0018      	movs	r0, r3
 8004960:	f001 f920 	bl	8005ba4 <HAL_ADC_ConfigChannel>
 8004964:	1e03      	subs	r3, r0, #0
 8004966:	d001      	beq.n	800496c <MX_ADC_Init+0xf4>
		Error_Handler();
 8004968:	f000 fcfc 	bl	8005364 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 800496c:	1d3b      	adds	r3, r7, #4
 800496e:	2204      	movs	r2, #4
 8004970:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004972:	1d3a      	adds	r2, r7, #4
 8004974:	4b26      	ldr	r3, [pc, #152]	@ (8004a10 <MX_ADC_Init+0x198>)
 8004976:	0011      	movs	r1, r2
 8004978:	0018      	movs	r0, r3
 800497a:	f001 f913 	bl	8005ba4 <HAL_ADC_ConfigChannel>
 800497e:	1e03      	subs	r3, r0, #0
 8004980:	d001      	beq.n	8004986 <MX_ADC_Init+0x10e>
		Error_Handler();
 8004982:	f000 fcef 	bl	8005364 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8004986:	1d3b      	adds	r3, r7, #4
 8004988:	2205      	movs	r2, #5
 800498a:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800498c:	1d3a      	adds	r2, r7, #4
 800498e:	4b20      	ldr	r3, [pc, #128]	@ (8004a10 <MX_ADC_Init+0x198>)
 8004990:	0011      	movs	r1, r2
 8004992:	0018      	movs	r0, r3
 8004994:	f001 f906 	bl	8005ba4 <HAL_ADC_ConfigChannel>
 8004998:	1e03      	subs	r3, r0, #0
 800499a:	d001      	beq.n	80049a0 <MX_ADC_Init+0x128>
		Error_Handler();
 800499c:	f000 fce2 	bl	8005364 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 80049a0:	1d3b      	adds	r3, r7, #4
 80049a2:	2206      	movs	r2, #6
 80049a4:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80049a6:	1d3a      	adds	r2, r7, #4
 80049a8:	4b19      	ldr	r3, [pc, #100]	@ (8004a10 <MX_ADC_Init+0x198>)
 80049aa:	0011      	movs	r1, r2
 80049ac:	0018      	movs	r0, r3
 80049ae:	f001 f8f9 	bl	8005ba4 <HAL_ADC_ConfigChannel>
 80049b2:	1e03      	subs	r3, r0, #0
 80049b4:	d001      	beq.n	80049ba <MX_ADC_Init+0x142>
		Error_Handler();
 80049b6:	f000 fcd5 	bl	8005364 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 80049ba:	1d3b      	adds	r3, r7, #4
 80049bc:	220a      	movs	r2, #10
 80049be:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80049c0:	1d3a      	adds	r2, r7, #4
 80049c2:	4b13      	ldr	r3, [pc, #76]	@ (8004a10 <MX_ADC_Init+0x198>)
 80049c4:	0011      	movs	r1, r2
 80049c6:	0018      	movs	r0, r3
 80049c8:	f001 f8ec 	bl	8005ba4 <HAL_ADC_ConfigChannel>
 80049cc:	1e03      	subs	r3, r0, #0
 80049ce:	d001      	beq.n	80049d4 <MX_ADC_Init+0x15c>
		Error_Handler();
 80049d0:	f000 fcc8 	bl	8005364 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 80049d4:	1d3b      	adds	r3, r7, #4
 80049d6:	220c      	movs	r2, #12
 80049d8:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80049da:	1d3a      	adds	r2, r7, #4
 80049dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a10 <MX_ADC_Init+0x198>)
 80049de:	0011      	movs	r1, r2
 80049e0:	0018      	movs	r0, r3
 80049e2:	f001 f8df 	bl	8005ba4 <HAL_ADC_ConfigChannel>
 80049e6:	1e03      	subs	r3, r0, #0
 80049e8:	d001      	beq.n	80049ee <MX_ADC_Init+0x176>
		Error_Handler();
 80049ea:	f000 fcbb 	bl	8005364 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 80049ee:	1d3b      	adds	r3, r7, #4
 80049f0:	220d      	movs	r2, #13
 80049f2:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80049f4:	1d3a      	adds	r2, r7, #4
 80049f6:	4b06      	ldr	r3, [pc, #24]	@ (8004a10 <MX_ADC_Init+0x198>)
 80049f8:	0011      	movs	r1, r2
 80049fa:	0018      	movs	r0, r3
 80049fc:	f001 f8d2 	bl	8005ba4 <HAL_ADC_ConfigChannel>
 8004a00:	1e03      	subs	r3, r0, #0
 8004a02:	d001      	beq.n	8004a08 <MX_ADC_Init+0x190>
		Error_Handler();
 8004a04:	f000 fcae 	bl	8005364 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8004a08:	46c0      	nop			@ (mov r8, r8)
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	b004      	add	sp, #16
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	20000098 	.word	0x20000098
 8004a14:	40012400 	.word	0x40012400

08004a18 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 8004a1c:	4b17      	ldr	r3, [pc, #92]	@ (8004a7c <MX_CAN_Init+0x64>)
 8004a1e:	4a18      	ldr	r2, [pc, #96]	@ (8004a80 <MX_CAN_Init+0x68>)
 8004a20:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 16;
 8004a22:	4b16      	ldr	r3, [pc, #88]	@ (8004a7c <MX_CAN_Init+0x64>)
 8004a24:	2210      	movs	r2, #16
 8004a26:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8004a28:	4b14      	ldr	r3, [pc, #80]	@ (8004a7c <MX_CAN_Init+0x64>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004a2e:	4b13      	ldr	r3, [pc, #76]	@ (8004a7c <MX_CAN_Init+0x64>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8004a34:	4b11      	ldr	r3, [pc, #68]	@ (8004a7c <MX_CAN_Init+0x64>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8004a3a:	4b10      	ldr	r3, [pc, #64]	@ (8004a7c <MX_CAN_Init+0x64>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8004a40:	4b0e      	ldr	r3, [pc, #56]	@ (8004a7c <MX_CAN_Init+0x64>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8004a46:	4b0d      	ldr	r3, [pc, #52]	@ (8004a7c <MX_CAN_Init+0x64>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a7c <MX_CAN_Init+0x64>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8004a52:	4b0a      	ldr	r3, [pc, #40]	@ (8004a7c <MX_CAN_Init+0x64>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8004a58:	4b08      	ldr	r3, [pc, #32]	@ (8004a7c <MX_CAN_Init+0x64>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8004a5e:	4b07      	ldr	r3, [pc, #28]	@ (8004a7c <MX_CAN_Init+0x64>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8004a64:	4b05      	ldr	r3, [pc, #20]	@ (8004a7c <MX_CAN_Init+0x64>)
 8004a66:	0018      	movs	r0, r3
 8004a68:	f001 f9aa 	bl	8005dc0 <HAL_CAN_Init>
 8004a6c:	1e03      	subs	r3, r0, #0
 8004a6e:	d001      	beq.n	8004a74 <MX_CAN_Init+0x5c>
		Error_Handler();
 8004a70:	f000 fc78 	bl	8005364 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 8004a74:	46c0      	nop			@ (mov r8, r8)
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	46c0      	nop			@ (mov r8, r8)
 8004a7c:	200000d8 	.word	0x200000d8
 8004a80:	40006400 	.word	0x40006400

08004a84 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8004a88:	4b1b      	ldr	r3, [pc, #108]	@ (8004af8 <MX_SPI1_Init+0x74>)
 8004a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8004afc <MX_SPI1_Init+0x78>)
 8004a8c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8004a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8004af8 <MX_SPI1_Init+0x74>)
 8004a90:	2282      	movs	r2, #130	@ 0x82
 8004a92:	0052      	lsls	r2, r2, #1
 8004a94:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004a96:	4b18      	ldr	r3, [pc, #96]	@ (8004af8 <MX_SPI1_Init+0x74>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a9c:	4b16      	ldr	r3, [pc, #88]	@ (8004af8 <MX_SPI1_Init+0x74>)
 8004a9e:	22e0      	movs	r2, #224	@ 0xe0
 8004aa0:	00d2      	lsls	r2, r2, #3
 8004aa2:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004aa4:	4b14      	ldr	r3, [pc, #80]	@ (8004af8 <MX_SPI1_Init+0x74>)
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004aaa:	4b13      	ldr	r3, [pc, #76]	@ (8004af8 <MX_SPI1_Init+0x74>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8004ab0:	4b11      	ldr	r3, [pc, #68]	@ (8004af8 <MX_SPI1_Init+0x74>)
 8004ab2:	2280      	movs	r2, #128	@ 0x80
 8004ab4:	0092      	lsls	r2, r2, #2
 8004ab6:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8004af8 <MX_SPI1_Init+0x74>)
 8004aba:	2228      	movs	r2, #40	@ 0x28
 8004abc:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004abe:	4b0e      	ldr	r3, [pc, #56]	@ (8004af8 <MX_SPI1_Init+0x74>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8004af8 <MX_SPI1_Init+0x74>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aca:	4b0b      	ldr	r3, [pc, #44]	@ (8004af8 <MX_SPI1_Init+0x74>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 8004ad0:	4b09      	ldr	r3, [pc, #36]	@ (8004af8 <MX_SPI1_Init+0x74>)
 8004ad2:	2207      	movs	r2, #7
 8004ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004ad6:	4b08      	ldr	r3, [pc, #32]	@ (8004af8 <MX_SPI1_Init+0x74>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004adc:	4b06      	ldr	r3, [pc, #24]	@ (8004af8 <MX_SPI1_Init+0x74>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8004ae2:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <MX_SPI1_Init+0x74>)
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f002 faa7 	bl	8007038 <HAL_SPI_Init>
 8004aea:	1e03      	subs	r3, r0, #0
 8004aec:	d001      	beq.n	8004af2 <MX_SPI1_Init+0x6e>
		Error_Handler();
 8004aee:	f000 fc39 	bl	8005364 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8004af2:	46c0      	nop			@ (mov r8, r8)
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	20000100 	.word	0x20000100
 8004afc:	40013000 	.word	0x40013000

08004b00 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004b06:	2308      	movs	r3, #8
 8004b08:	18fb      	adds	r3, r7, r3
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	001a      	movs	r2, r3
 8004b10:	2100      	movs	r1, #0
 8004b12:	f004 f947 	bl	8008da4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004b16:	003b      	movs	r3, r7
 8004b18:	0018      	movs	r0, r3
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	001a      	movs	r2, r3
 8004b1e:	2100      	movs	r1, #0
 8004b20:	f004 f940 	bl	8008da4 <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8004b24:	4b1e      	ldr	r3, [pc, #120]	@ (8004ba0 <MX_TIM3_Init+0xa0>)
 8004b26:	4a1f      	ldr	r2, [pc, #124]	@ (8004ba4 <MX_TIM3_Init+0xa4>)
 8004b28:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 16 - 1;
 8004b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba0 <MX_TIM3_Init+0xa0>)
 8004b2c:	220f      	movs	r2, #15
 8004b2e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b30:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba0 <MX_TIM3_Init+0xa0>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8004b36:	4b1a      	ldr	r3, [pc, #104]	@ (8004ba0 <MX_TIM3_Init+0xa0>)
 8004b38:	4a1b      	ldr	r2, [pc, #108]	@ (8004ba8 <MX_TIM3_Init+0xa8>)
 8004b3a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b3c:	4b18      	ldr	r3, [pc, #96]	@ (8004ba0 <MX_TIM3_Init+0xa0>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b42:	4b17      	ldr	r3, [pc, #92]	@ (8004ba0 <MX_TIM3_Init+0xa0>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8004b48:	4b15      	ldr	r3, [pc, #84]	@ (8004ba0 <MX_TIM3_Init+0xa0>)
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	f002 fe84 	bl	8007858 <HAL_TIM_Base_Init>
 8004b50:	1e03      	subs	r3, r0, #0
 8004b52:	d001      	beq.n	8004b58 <MX_TIM3_Init+0x58>
		Error_Handler();
 8004b54:	f000 fc06 	bl	8005364 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b58:	2108      	movs	r1, #8
 8004b5a:	187b      	adds	r3, r7, r1
 8004b5c:	2280      	movs	r2, #128	@ 0x80
 8004b5e:	0152      	lsls	r2, r2, #5
 8004b60:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8004b62:	187a      	adds	r2, r7, r1
 8004b64:	4b0e      	ldr	r3, [pc, #56]	@ (8004ba0 <MX_TIM3_Init+0xa0>)
 8004b66:	0011      	movs	r1, r2
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f002 fec5 	bl	80078f8 <HAL_TIM_ConfigClockSource>
 8004b6e:	1e03      	subs	r3, r0, #0
 8004b70:	d001      	beq.n	8004b76 <MX_TIM3_Init+0x76>
		Error_Handler();
 8004b72:	f000 fbf7 	bl	8005364 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b76:	003b      	movs	r3, r7
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b7c:	003b      	movs	r3, r7
 8004b7e:	2200      	movs	r2, #0
 8004b80:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8004b82:	003a      	movs	r2, r7
 8004b84:	4b06      	ldr	r3, [pc, #24]	@ (8004ba0 <MX_TIM3_Init+0xa0>)
 8004b86:	0011      	movs	r1, r2
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f003 f8b1 	bl	8007cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8004b8e:	1e03      	subs	r3, r0, #0
 8004b90:	d001      	beq.n	8004b96 <MX_TIM3_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8004b92:	f000 fbe7 	bl	8005364 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8004b96:	46c0      	nop			@ (mov r8, r8)
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	b006      	add	sp, #24
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	46c0      	nop			@ (mov r8, r8)
 8004ba0:	20000164 	.word	0x20000164
 8004ba4:	40000400 	.word	0x40000400
 8004ba8:	0000ffff 	.word	0x0000ffff

08004bac <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8004bb0:	4b14      	ldr	r3, [pc, #80]	@ (8004c04 <MX_USART1_UART_Init+0x58>)
 8004bb2:	4a15      	ldr	r2, [pc, #84]	@ (8004c08 <MX_USART1_UART_Init+0x5c>)
 8004bb4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8004bb6:	4b13      	ldr	r3, [pc, #76]	@ (8004c04 <MX_USART1_UART_Init+0x58>)
 8004bb8:	22e1      	movs	r2, #225	@ 0xe1
 8004bba:	0252      	lsls	r2, r2, #9
 8004bbc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004bbe:	4b11      	ldr	r3, [pc, #68]	@ (8004c04 <MX_USART1_UART_Init+0x58>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8004bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8004c04 <MX_USART1_UART_Init+0x58>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004bca:	4b0e      	ldr	r3, [pc, #56]	@ (8004c04 <MX_USART1_UART_Init+0x58>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004c04 <MX_USART1_UART_Init+0x58>)
 8004bd2:	220c      	movs	r2, #12
 8004bd4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c04 <MX_USART1_UART_Init+0x58>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bdc:	4b09      	ldr	r3, [pc, #36]	@ (8004c04 <MX_USART1_UART_Init+0x58>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004be2:	4b08      	ldr	r3, [pc, #32]	@ (8004c04 <MX_USART1_UART_Init+0x58>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004be8:	4b06      	ldr	r3, [pc, #24]	@ (8004c04 <MX_USART1_UART_Init+0x58>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8004bee:	4b05      	ldr	r3, [pc, #20]	@ (8004c04 <MX_USART1_UART_Init+0x58>)
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f003 f8db 	bl	8007dac <HAL_UART_Init>
 8004bf6:	1e03      	subs	r3, r0, #0
 8004bf8:	d001      	beq.n	8004bfe <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8004bfa:	f000 fbb3 	bl	8005364 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8004bfe:	46c0      	nop			@ (mov r8, r8)
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	200001ac 	.word	0x200001ac
 8004c08:	40013800 	.word	0x40013800

08004c0c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004c0c:	b590      	push	{r4, r7, lr}
 8004c0e:	b08b      	sub	sp, #44	@ 0x2c
 8004c10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004c12:	2414      	movs	r4, #20
 8004c14:	193b      	adds	r3, r7, r4
 8004c16:	0018      	movs	r0, r3
 8004c18:	2314      	movs	r3, #20
 8004c1a:	001a      	movs	r2, r3
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	f004 f8c1 	bl	8008da4 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004c22:	4b60      	ldr	r3, [pc, #384]	@ (8004da4 <MX_GPIO_Init+0x198>)
 8004c24:	695a      	ldr	r2, [r3, #20]
 8004c26:	4b5f      	ldr	r3, [pc, #380]	@ (8004da4 <MX_GPIO_Init+0x198>)
 8004c28:	2180      	movs	r1, #128	@ 0x80
 8004c2a:	0309      	lsls	r1, r1, #12
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	615a      	str	r2, [r3, #20]
 8004c30:	4b5c      	ldr	r3, [pc, #368]	@ (8004da4 <MX_GPIO_Init+0x198>)
 8004c32:	695a      	ldr	r2, [r3, #20]
 8004c34:	2380      	movs	r3, #128	@ 0x80
 8004c36:	031b      	lsls	r3, r3, #12
 8004c38:	4013      	ands	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8004c3e:	4b59      	ldr	r3, [pc, #356]	@ (8004da4 <MX_GPIO_Init+0x198>)
 8004c40:	695a      	ldr	r2, [r3, #20]
 8004c42:	4b58      	ldr	r3, [pc, #352]	@ (8004da4 <MX_GPIO_Init+0x198>)
 8004c44:	2180      	movs	r1, #128	@ 0x80
 8004c46:	03c9      	lsls	r1, r1, #15
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	615a      	str	r2, [r3, #20]
 8004c4c:	4b55      	ldr	r3, [pc, #340]	@ (8004da4 <MX_GPIO_Init+0x198>)
 8004c4e:	695a      	ldr	r2, [r3, #20]
 8004c50:	2380      	movs	r3, #128	@ 0x80
 8004c52:	03db      	lsls	r3, r3, #15
 8004c54:	4013      	ands	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004c5a:	4b52      	ldr	r3, [pc, #328]	@ (8004da4 <MX_GPIO_Init+0x198>)
 8004c5c:	695a      	ldr	r2, [r3, #20]
 8004c5e:	4b51      	ldr	r3, [pc, #324]	@ (8004da4 <MX_GPIO_Init+0x198>)
 8004c60:	2180      	movs	r1, #128	@ 0x80
 8004c62:	0289      	lsls	r1, r1, #10
 8004c64:	430a      	orrs	r2, r1
 8004c66:	615a      	str	r2, [r3, #20]
 8004c68:	4b4e      	ldr	r3, [pc, #312]	@ (8004da4 <MX_GPIO_Init+0x198>)
 8004c6a:	695a      	ldr	r2, [r3, #20]
 8004c6c:	2380      	movs	r3, #128	@ 0x80
 8004c6e:	029b      	lsls	r3, r3, #10
 8004c70:	4013      	ands	r3, r2
 8004c72:	60bb      	str	r3, [r7, #8]
 8004c74:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004c76:	4b4b      	ldr	r3, [pc, #300]	@ (8004da4 <MX_GPIO_Init+0x198>)
 8004c78:	695a      	ldr	r2, [r3, #20]
 8004c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8004da4 <MX_GPIO_Init+0x198>)
 8004c7c:	2180      	movs	r1, #128	@ 0x80
 8004c7e:	02c9      	lsls	r1, r1, #11
 8004c80:	430a      	orrs	r2, r1
 8004c82:	615a      	str	r2, [r3, #20]
 8004c84:	4b47      	ldr	r3, [pc, #284]	@ (8004da4 <MX_GPIO_Init+0x198>)
 8004c86:	695a      	ldr	r2, [r3, #20]
 8004c88:	2380      	movs	r3, #128	@ 0x80
 8004c8a:	02db      	lsls	r3, r3, #11
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	607b      	str	r3, [r7, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004c92:	4b44      	ldr	r3, [pc, #272]	@ (8004da4 <MX_GPIO_Init+0x198>)
 8004c94:	695a      	ldr	r2, [r3, #20]
 8004c96:	4b43      	ldr	r3, [pc, #268]	@ (8004da4 <MX_GPIO_Init+0x198>)
 8004c98:	2180      	movs	r1, #128	@ 0x80
 8004c9a:	0349      	lsls	r1, r1, #13
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	615a      	str	r2, [r3, #20]
 8004ca0:	4b40      	ldr	r3, [pc, #256]	@ (8004da4 <MX_GPIO_Init+0x198>)
 8004ca2:	695a      	ldr	r2, [r3, #20]
 8004ca4:	2380      	movs	r3, #128	@ 0x80
 8004ca6:	035b      	lsls	r3, r3, #13
 8004ca8:	4013      	ands	r3, r2
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8004cae:	493e      	ldr	r1, [pc, #248]	@ (8004da8 <MX_GPIO_Init+0x19c>)
 8004cb0:	4b3e      	ldr	r3, [pc, #248]	@ (8004dac <MX_GPIO_Init+0x1a0>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f001 fbad 	bl	8006414 <HAL_GPIO_WritePin>
	Prog_LED_2_Pin | Prog_LED_1_Pin | Blink_LED_Pin | Spare_SPI_SS_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_CS1_GPIO_Port, SPI1_CS1_Pin, GPIO_PIN_RESET);
 8004cba:	4b3d      	ldr	r3, [pc, #244]	@ (8004db0 <MX_GPIO_Init+0x1a4>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	2104      	movs	r1, #4
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	f001 fba7 	bl	8006414 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Prog_LED_3_GPIO_Port, Prog_LED_3_Pin, GPIO_PIN_RESET);
 8004cc6:	4b3b      	ldr	r3, [pc, #236]	@ (8004db4 <MX_GPIO_Init+0x1a8>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2180      	movs	r1, #128	@ 0x80
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f001 fba1 	bl	8006414 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Prog_LED_2_Pin Prog_LED_1_Pin Blink_LED_Pin Spare_SPI_SS_Pin */
	GPIO_InitStruct.Pin = Prog_LED_2_Pin | Prog_LED_1_Pin | Blink_LED_Pin
 8004cd2:	193b      	adds	r3, r7, r4
 8004cd4:	4a34      	ldr	r2, [pc, #208]	@ (8004da8 <MX_GPIO_Init+0x19c>)
 8004cd6:	601a      	str	r2, [r3, #0]
			| Spare_SPI_SS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cd8:	193b      	adds	r3, r7, r4
 8004cda:	2201      	movs	r2, #1
 8004cdc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cde:	193b      	adds	r3, r7, r4
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ce4:	193b      	adds	r3, r7, r4
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cea:	193b      	adds	r3, r7, r4
 8004cec:	4a2f      	ldr	r2, [pc, #188]	@ (8004dac <MX_GPIO_Init+0x1a0>)
 8004cee:	0019      	movs	r1, r3
 8004cf0:	0010      	movs	r0, r2
 8004cf2:	f001 fa17 	bl	8006124 <HAL_GPIO_Init>

	/*Configure GPIO pins : AMS_Fault_Pin V_Check_Pin PA15 */
	GPIO_InitStruct.Pin = AMS_Fault_Pin | V_Check_Pin | GPIO_PIN_15;
 8004cf6:	193b      	adds	r3, r7, r4
 8004cf8:	4a2f      	ldr	r2, [pc, #188]	@ (8004db8 <MX_GPIO_Init+0x1ac>)
 8004cfa:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cfc:	193b      	adds	r3, r7, r4
 8004cfe:	2200      	movs	r2, #0
 8004d00:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d02:	193b      	adds	r3, r7, r4
 8004d04:	2200      	movs	r2, #0
 8004d06:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d08:	193a      	adds	r2, r7, r4
 8004d0a:	2390      	movs	r3, #144	@ 0x90
 8004d0c:	05db      	lsls	r3, r3, #23
 8004d0e:	0011      	movs	r1, r2
 8004d10:	0018      	movs	r0, r3
 8004d12:	f001 fa07 	bl	8006124 <HAL_GPIO_Init>

	/*Configure GPIO pins : PCR_Done_Pin AIR_P_Pin GRN_Out_Pin AUX_P_Pin
	 AUX_N_Pin PCR_AUX_In_Pin PC10 PC11
	 PC12 */
	GPIO_InitStruct.Pin = PCR_Done_Pin | AIR_P_Pin | GRN_Out_Pin | AUX_P_Pin
 8004d16:	193b      	adds	r3, r7, r4
 8004d18:	4a28      	ldr	r2, [pc, #160]	@ (8004dbc <MX_GPIO_Init+0x1b0>)
 8004d1a:	601a      	str	r2, [r3, #0]
			| AUX_N_Pin | PCR_AUX_In_Pin | GPIO_PIN_10 | GPIO_PIN_11
			| GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d1c:	193b      	adds	r3, r7, r4
 8004d1e:	2200      	movs	r2, #0
 8004d20:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d22:	193b      	adds	r3, r7, r4
 8004d24:	2200      	movs	r2, #0
 8004d26:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d28:	193b      	adds	r3, r7, r4
 8004d2a:	4a20      	ldr	r2, [pc, #128]	@ (8004dac <MX_GPIO_Init+0x1a0>)
 8004d2c:	0019      	movs	r1, r3
 8004d2e:	0010      	movs	r0, r2
 8004d30:	f001 f9f8 	bl	8006124 <HAL_GPIO_Init>

	/*Configure GPIO pins : AIR_N_Pin PCR_5V_Pin VSBATB2_Pin T_Check_Pin
	 AMS_Fault_Out_Pin K1_Pin K2_Pin SS_Final_Pin
	 GRN_In_Pin SPI1_CS2_Pin CART_ID_Pin Charger_AUX_Pin */
	GPIO_InitStruct.Pin = AIR_N_Pin | PCR_5V_Pin | VSBATB2_Pin | T_Check_Pin
 8004d34:	193b      	adds	r3, r7, r4
 8004d36:	4a22      	ldr	r2, [pc, #136]	@ (8004dc0 <MX_GPIO_Init+0x1b4>)
 8004d38:	601a      	str	r2, [r3, #0]
			| AMS_Fault_Out_Pin | K1_Pin | K2_Pin | SS_Final_Pin | GRN_In_Pin
			| SPI1_CS2_Pin | CART_ID_Pin | Charger_AUX_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d3a:	193b      	adds	r3, r7, r4
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d40:	193b      	adds	r3, r7, r4
 8004d42:	2200      	movs	r2, #0
 8004d44:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d46:	193b      	adds	r3, r7, r4
 8004d48:	4a1a      	ldr	r2, [pc, #104]	@ (8004db4 <MX_GPIO_Init+0x1a8>)
 8004d4a:	0019      	movs	r1, r3
 8004d4c:	0010      	movs	r0, r2
 8004d4e:	f001 f9e9 	bl	8006124 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI1_CS1_Pin */
	GPIO_InitStruct.Pin = SPI1_CS1_Pin;
 8004d52:	193b      	adds	r3, r7, r4
 8004d54:	2204      	movs	r2, #4
 8004d56:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d58:	193b      	adds	r3, r7, r4
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d5e:	193b      	adds	r3, r7, r4
 8004d60:	2200      	movs	r2, #0
 8004d62:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d64:	193b      	adds	r3, r7, r4
 8004d66:	2200      	movs	r2, #0
 8004d68:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(SPI1_CS1_GPIO_Port, &GPIO_InitStruct);
 8004d6a:	193b      	adds	r3, r7, r4
 8004d6c:	4a10      	ldr	r2, [pc, #64]	@ (8004db0 <MX_GPIO_Init+0x1a4>)
 8004d6e:	0019      	movs	r1, r3
 8004d70:	0010      	movs	r0, r2
 8004d72:	f001 f9d7 	bl	8006124 <HAL_GPIO_Init>

	/*Configure GPIO pin : Prog_LED_3_Pin */
	GPIO_InitStruct.Pin = Prog_LED_3_Pin;
 8004d76:	0021      	movs	r1, r4
 8004d78:	187b      	adds	r3, r7, r1
 8004d7a:	2280      	movs	r2, #128	@ 0x80
 8004d7c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d7e:	187b      	adds	r3, r7, r1
 8004d80:	2201      	movs	r2, #1
 8004d82:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d84:	187b      	adds	r3, r7, r1
 8004d86:	2200      	movs	r2, #0
 8004d88:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d8a:	187b      	adds	r3, r7, r1
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(Prog_LED_3_GPIO_Port, &GPIO_InitStruct);
 8004d90:	187b      	adds	r3, r7, r1
 8004d92:	4a08      	ldr	r2, [pc, #32]	@ (8004db4 <MX_GPIO_Init+0x1a8>)
 8004d94:	0019      	movs	r1, r3
 8004d96:	0010      	movs	r0, r2
 8004d98:	f001 f9c4 	bl	8006124 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8004d9c:	46c0      	nop			@ (mov r8, r8)
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	b00b      	add	sp, #44	@ 0x2c
 8004da2:	bd90      	pop	{r4, r7, pc}
 8004da4:	40021000 	.word	0x40021000
 8004da8:	0000e002 	.word	0x0000e002
 8004dac:	48000800 	.word	0x48000800
 8004db0:	48000c00 	.word	0x48000c00
 8004db4:	48000400 	.word	0x48000400
 8004db8:	00008180 	.word	0x00008180
 8004dbc:	00001ff0 	.word	0x00001ff0
 8004dc0:	0000ff47 	.word	0x0000ff47

08004dc4 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8004dcc:	4b05      	ldr	r3, [pc, #20]	@ (8004de4 <__io_putchar+0x20>)
 8004dce:	1d39      	adds	r1, r7, #4
 8004dd0:	4805      	ldr	r0, [pc, #20]	@ (8004de8 <__io_putchar+0x24>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f003 f83e 	bl	8007e54 <HAL_UART_Transmit>

	return ch;
 8004dd8:	687b      	ldr	r3, [r7, #4]
}
 8004dda:	0018      	movs	r0, r3
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b002      	add	sp, #8
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	0000ffff 	.word	0x0000ffff
 8004de8:	200001ac 	.word	0x200001ac

08004dec <measure>:

void measure() {
 8004dec:	b590      	push	{r4, r7, lr}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
	int8_t error = 0;
 8004df2:	1dfb      	adds	r3, r7, #7
 8004df4:	2200      	movs	r2, #0
 8004df6:	701a      	strb	r2, [r3, #0]
	// Measure cell pins
	wakeup_idle(TOTAL_IC);
 8004df8:	2012      	movs	r0, #18
 8004dfa:	f7fd fbae 	bl	800255a <wakeup_idle>
	LTC6813_adcv(ADC_CONVERSION_MODE, ADC_DCP, CELL_CH_TO_CONVERT);
 8004dfe:	2302      	movs	r3, #2
 8004e00:	2100      	movs	r1, #0
 8004e02:	2200      	movs	r2, #0
 8004e04:	0018      	movs	r0, r3
 8004e06:	f7fd fa8e 	bl	8002326 <LTC6813_adcv>
	LTC6813_pollAdc();
 8004e0a:	f7fd fb2f 	bl	800246c <LTC6813_pollAdc>
	wakeup_idle(TOTAL_IC);
 8004e0e:	2012      	movs	r0, #18
 8004e10:	f7fd fba3 	bl	800255a <wakeup_idle>
	error = LTC6813_rdcv(SEL_ALL_REG, TOTAL_IC, BMS_IC);
 8004e14:	2000      	movs	r0, #0
 8004e16:	4b28      	ldr	r3, [pc, #160]	@ (8004eb8 <measure+0xcc>)
 8004e18:	001a      	movs	r2, r3
 8004e1a:	2112      	movs	r1, #18
 8004e1c:	f7fd fac9 	bl	80023b2 <LTC6813_rdcv>
 8004e20:	0003      	movs	r3, r0
 8004e22:	001a      	movs	r2, r3
 8004e24:	1dfb      	adds	r3, r7, #7
 8004e26:	701a      	strb	r2, [r3, #0]
	check_error(error);
 8004e28:	1dfb      	adds	r3, r7, #7
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	b25b      	sxtb	r3, r3
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f000 fa86 	bl	8005340 <check_error>
	print_cells();
 8004e34:	f000 f902 	bl	800503c <print_cells>

	// Measure aux pins
	wakeup_idle(TOTAL_IC);
 8004e38:	2012      	movs	r0, #18
 8004e3a:	f7fd fb8e 	bl	800255a <wakeup_idle>
	LTC6813_adax(ADC_CONVERSION_MODE, AUX_CH_TO_CONVERT);
 8004e3e:	2302      	movs	r3, #2
 8004e40:	2200      	movs	r2, #0
 8004e42:	0011      	movs	r1, r2
 8004e44:	0018      	movs	r0, r3
 8004e46:	f7fd fa8a 	bl	800235e <LTC6813_adax>
	LTC6813_pollAdc();
 8004e4a:	f7fd fb0f 	bl	800246c <LTC6813_pollAdc>
	wakeup_idle(TOTAL_IC);
 8004e4e:	2012      	movs	r0, #18
 8004e50:	f7fd fb83 	bl	800255a <wakeup_idle>
	error = LTC6813_rdaux(SEL_ALL_REG, TOTAL_IC, BMS_IC); // Set to read back all aux registers
 8004e54:	2000      	movs	r0, #0
 8004e56:	1dfc      	adds	r4, r7, #7
 8004e58:	4b17      	ldr	r3, [pc, #92]	@ (8004eb8 <measure+0xcc>)
 8004e5a:	001a      	movs	r2, r3
 8004e5c:	2112      	movs	r1, #18
 8004e5e:	f7fd fac8 	bl	80023f2 <LTC6813_rdaux>
 8004e62:	0003      	movs	r3, r0
 8004e64:	7023      	strb	r3, [r4, #0]
	check_error(error);
 8004e66:	1dfb      	adds	r3, r7, #7
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	b25b      	sxtb	r3, r3
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f000 fa67 	bl	8005340 <check_error>
	print_aux();
 8004e72:	f000 f935 	bl	80050e0 <print_aux>

	// Read status registers
	if (DEBUG_MODE == ENABLED) {
		wakeup_idle(TOTAL_IC);
 8004e76:	2012      	movs	r0, #18
 8004e78:	f7fd fb6f 	bl	800255a <wakeup_idle>
		LTC6813_adstat(SEL_ALL_REG, STAT_CH_TO_CONVERT);
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	2200      	movs	r2, #0
 8004e80:	0011      	movs	r1, r2
 8004e82:	0018      	movs	r0, r3
 8004e84:	f7fd fa80 	bl	8002388 <LTC6813_adstat>
		LTC6813_pollAdc();
 8004e88:	f7fd faf0 	bl	800246c <LTC6813_pollAdc>
		wakeup_idle(TOTAL_IC);
 8004e8c:	2012      	movs	r0, #18
 8004e8e:	f7fd fb64 	bl	800255a <wakeup_idle>
		error = LTC6813_rdstat(SEL_ALL_REG, TOTAL_IC, BMS_IC);
 8004e92:	2000      	movs	r0, #0
 8004e94:	1dfc      	adds	r4, r7, #7
 8004e96:	4b08      	ldr	r3, [pc, #32]	@ (8004eb8 <measure+0xcc>)
 8004e98:	001a      	movs	r2, r3
 8004e9a:	2112      	movs	r1, #18
 8004e9c:	f7fd fac6 	bl	800242c <LTC6813_rdstat>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	7023      	strb	r3, [r4, #0]
		check_error(error);
 8004ea4:	1dfb      	adds	r3, r7, #7
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	b25b      	sxtb	r3, r3
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f000 fa48 	bl	8005340 <check_error>
	}
}
 8004eb0:	46c0      	nop			@ (mov r8, r8)
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b003      	add	sp, #12
 8004eb6:	bd90      	pop	{r4, r7, pc}
 8004eb8:	20000234 	.word	0x20000234

08004ebc <print_wrconfig>:
/*!******************************************************************************
 \brief Prints the configuration data that is going to be written to the LTC6813
 to the serial port.
 @return void
 ********************************************************************************/
void print_wrconfig(void) {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
	int cfg_pec;
	printf("Written Configuration A Register: \n");
 8004ec2:	4b29      	ldr	r3, [pc, #164]	@ (8004f68 <print_wrconfig+0xac>)
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f003 fe77 	bl	8008bb8 <puts>
	for (int current_ic = 0; current_ic < TOTAL_IC; current_ic++) {
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	e043      	b.n	8004f58 <print_wrconfig+0x9c>
		printf("CFGA IC %d", current_ic + 1);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	4b25      	ldr	r3, [pc, #148]	@ (8004f6c <print_wrconfig+0xb0>)
 8004ed6:	0011      	movs	r1, r2
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f003 fdfd 	bl	8008ad8 <iprintf>
		for (int i = 0; i < 6; i++) {
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60bb      	str	r3, [r7, #8]
 8004ee2:	e011      	b.n	8004f08 <print_wrconfig+0x4c>
			printf(", 0x");
 8004ee4:	4b22      	ldr	r3, [pc, #136]	@ (8004f70 <print_wrconfig+0xb4>)
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	f003 fdf6 	bl	8008ad8 <iprintf>
			serial_print_hex(BMS_IC[current_ic].config.tx_data[i]);
 8004eec:	4a21      	ldr	r2, [pc, #132]	@ (8004f74 <print_wrconfig+0xb8>)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	21e8      	movs	r1, #232	@ 0xe8
 8004ef2:	434b      	muls	r3, r1
 8004ef4:	18d2      	adds	r2, r2, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	18d3      	adds	r3, r2, r3
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	0018      	movs	r0, r3
 8004efe:	f000 f96d 	bl	80051dc <serial_print_hex>
		for (int i = 0; i < 6; i++) {
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	3301      	adds	r3, #1
 8004f06:	60bb      	str	r3, [r7, #8]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b05      	cmp	r3, #5
 8004f0c:	ddea      	ble.n	8004ee4 <print_wrconfig+0x28>
		}
		printf(", Calculated PEC: 0x");
 8004f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8004f78 <print_wrconfig+0xbc>)
 8004f10:	0018      	movs	r0, r3
 8004f12:	f003 fde1 	bl	8008ad8 <iprintf>
		cfg_pec = pec15_calc(6, &BMS_IC[current_ic].config.tx_data[0]);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	22e8      	movs	r2, #232	@ 0xe8
 8004f1a:	435a      	muls	r2, r3
 8004f1c:	4b15      	ldr	r3, [pc, #84]	@ (8004f74 <print_wrconfig+0xb8>)
 8004f1e:	18d3      	adds	r3, r2, r3
 8004f20:	0019      	movs	r1, r3
 8004f22:	2006      	movs	r0, #6
 8004f24:	f7fd fd14 	bl	8002950 <pec15_calc>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	607b      	str	r3, [r7, #4]
		serial_print_hex((uint8_t) (cfg_pec >> 8));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	121b      	asrs	r3, r3, #8
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	0018      	movs	r0, r3
 8004f34:	f000 f952 	bl	80051dc <serial_print_hex>
		printf(", 0x");
 8004f38:	4b0d      	ldr	r3, [pc, #52]	@ (8004f70 <print_wrconfig+0xb4>)
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	f003 fdcc 	bl	8008ad8 <iprintf>
		serial_print_hex((uint8_t) (cfg_pec));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	0018      	movs	r0, r3
 8004f46:	f000 f949 	bl	80051dc <serial_print_hex>
		printf("/n");
 8004f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f7c <print_wrconfig+0xc0>)
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	f003 fdc3 	bl	8008ad8 <iprintf>
	for (int current_ic = 0; current_ic < TOTAL_IC; current_ic++) {
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3301      	adds	r3, #1
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b11      	cmp	r3, #17
 8004f5c:	ddb8      	ble.n	8004ed0 <print_wrconfig+0x14>
	}
}
 8004f5e:	46c0      	nop			@ (mov r8, r8)
 8004f60:	46c0      	nop			@ (mov r8, r8)
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b004      	add	sp, #16
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	08009be0 	.word	0x08009be0
 8004f6c:	08009c04 	.word	0x08009c04
 8004f70:	08009c10 	.word	0x08009c10
 8004f74:	20000234 	.word	0x20000234
 8004f78:	08009c18 	.word	0x08009c18
 8004f7c:	08009c30 	.word	0x08009c30

08004f80 <print_rxconfig>:
/*!*****************************************************************
 \brief Prints the configuration data that was read back from the
 LTC6813 to the serial port.
 @return void
 *******************************************************************/
void print_rxconfig(void) {
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
	printf("Received Configuration A Register: \n");
 8004f86:	4b28      	ldr	r3, [pc, #160]	@ (8005028 <print_rxconfig+0xa8>)
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f003 fe15 	bl	8008bb8 <puts>
	for (int current_ic = 0; current_ic < TOTAL_IC; current_ic++) {
 8004f8e:	2300      	movs	r3, #0
 8004f90:	607b      	str	r3, [r7, #4]
 8004f92:	e041      	b.n	8005018 <print_rxconfig+0x98>
		printf("CFGA IC %d", current_ic + 1);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	4b24      	ldr	r3, [pc, #144]	@ (800502c <print_rxconfig+0xac>)
 8004f9a:	0011      	movs	r1, r2
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f003 fd9b 	bl	8008ad8 <iprintf>
		for (int i = 0; i < 6; i++) {
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	603b      	str	r3, [r7, #0]
 8004fa6:	e012      	b.n	8004fce <print_rxconfig+0x4e>
			printf(", 0x");
 8004fa8:	4b21      	ldr	r3, [pc, #132]	@ (8005030 <print_rxconfig+0xb0>)
 8004faa:	0018      	movs	r0, r3
 8004fac:	f003 fd94 	bl	8008ad8 <iprintf>
			serial_print_hex(BMS_IC[current_ic].config.rx_data[i]);
 8004fb0:	4a20      	ldr	r2, [pc, #128]	@ (8005034 <print_rxconfig+0xb4>)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	21e8      	movs	r1, #232	@ 0xe8
 8004fb6:	434b      	muls	r3, r1
 8004fb8:	18d2      	adds	r2, r2, r3
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	18d3      	adds	r3, r2, r3
 8004fbe:	3306      	adds	r3, #6
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f000 f90a 	bl	80051dc <serial_print_hex>
		for (int i = 0; i < 6; i++) {
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	603b      	str	r3, [r7, #0]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b05      	cmp	r3, #5
 8004fd2:	dde9      	ble.n	8004fa8 <print_rxconfig+0x28>
		}
		printf(", Received PEC: 0x");
 8004fd4:	4b18      	ldr	r3, [pc, #96]	@ (8005038 <print_rxconfig+0xb8>)
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	f003 fd7e 	bl	8008ad8 <iprintf>
		serial_print_hex(BMS_IC[current_ic].config.rx_data[6]);
 8004fdc:	4a15      	ldr	r2, [pc, #84]	@ (8005034 <print_rxconfig+0xb4>)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	21e8      	movs	r1, #232	@ 0xe8
 8004fe2:	434b      	muls	r3, r1
 8004fe4:	18d3      	adds	r3, r2, r3
 8004fe6:	330c      	adds	r3, #12
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	0018      	movs	r0, r3
 8004fec:	f000 f8f6 	bl	80051dc <serial_print_hex>
		printf(", 0x");
 8004ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8005030 <print_rxconfig+0xb0>)
 8004ff2:	0018      	movs	r0, r3
 8004ff4:	f003 fd70 	bl	8008ad8 <iprintf>
		serial_print_hex(BMS_IC[current_ic].config.rx_data[7]);
 8004ff8:	4a0e      	ldr	r2, [pc, #56]	@ (8005034 <print_rxconfig+0xb4>)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	21e8      	movs	r1, #232	@ 0xe8
 8004ffe:	434b      	muls	r3, r1
 8005000:	18d3      	adds	r3, r2, r3
 8005002:	330d      	adds	r3, #13
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	0018      	movs	r0, r3
 8005008:	f000 f8e8 	bl	80051dc <serial_print_hex>
		printf("\n");
 800500c:	200a      	movs	r0, #10
 800500e:	f003 fd73 	bl	8008af8 <putchar>
	for (int current_ic = 0; current_ic < TOTAL_IC; current_ic++) {
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3301      	adds	r3, #1
 8005016:	607b      	str	r3, [r7, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b11      	cmp	r3, #17
 800501c:	ddba      	ble.n	8004f94 <print_rxconfig+0x14>
	}
}
 800501e:	46c0      	nop			@ (mov r8, r8)
 8005020:	46c0      	nop			@ (mov r8, r8)
 8005022:	46bd      	mov	sp, r7
 8005024:	b002      	add	sp, #8
 8005026:	bd80      	pop	{r7, pc}
 8005028:	08009c34 	.word	0x08009c34
 800502c:	08009c04 	.word	0x08009c04
 8005030:	08009c10 	.word	0x08009c10
 8005034:	20000234 	.word	0x20000234
 8005038:	08009c58 	.word	0x08009c58

0800503c <print_cells>:

/*!************************************************************
 \brief Prints cell voltage codes to the serial port
 @return void
 *************************************************************/
void print_cells() {
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
	for (int current_ic = 0; current_ic < TOTAL_IC; current_ic++) {
 8005042:	2300      	movs	r3, #0
 8005044:	607b      	str	r3, [r7, #4]
 8005046:	e034      	b.n	80050b2 <print_cells+0x76>
		printf("IC %d, ", current_ic + 1);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	4b1e      	ldr	r3, [pc, #120]	@ (80050c8 <print_cells+0x8c>)
 800504e:	0011      	movs	r1, r2
 8005050:	0018      	movs	r0, r3
 8005052:	f003 fd41 	bl	8008ad8 <iprintf>
		for (int i = 0; i < TOTAL_CELL; i++) {
 8005056:	2300      	movs	r3, #0
 8005058:	603b      	str	r3, [r7, #0]
 800505a:	e021      	b.n	80050a0 <print_cells+0x64>
			printf(" C%d:", i + 1);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	4b1a      	ldr	r3, [pc, #104]	@ (80050cc <print_cells+0x90>)
 8005062:	0011      	movs	r1, r2
 8005064:	0018      	movs	r0, r3
 8005066:	f003 fd37 	bl	8008ad8 <iprintf>
			printf("%0.4f, ", BMS_IC[current_ic].cells.c_codes[i] * 0.0001);
 800506a:	4a19      	ldr	r2, [pc, #100]	@ (80050d0 <print_cells+0x94>)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2174      	movs	r1, #116	@ 0x74
 8005070:	4359      	muls	r1, r3
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	18cb      	adds	r3, r1, r3
 8005076:	330c      	adds	r3, #12
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	18d3      	adds	r3, r2, r3
 800507c:	3306      	adds	r3, #6
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	0018      	movs	r0, r3
 8005082:	f7fd f87f 	bl	8002184 <__aeabi_i2d>
 8005086:	4a13      	ldr	r2, [pc, #76]	@ (80050d4 <print_cells+0x98>)
 8005088:	4b13      	ldr	r3, [pc, #76]	@ (80050d8 <print_cells+0x9c>)
 800508a:	f7fc f92d 	bl	80012e8 <__aeabi_dmul>
 800508e:	0002      	movs	r2, r0
 8005090:	000b      	movs	r3, r1
 8005092:	4912      	ldr	r1, [pc, #72]	@ (80050dc <print_cells+0xa0>)
 8005094:	0008      	movs	r0, r1
 8005096:	f003 fd1f 	bl	8008ad8 <iprintf>
		for (int i = 0; i < TOTAL_CELL; i++) {
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	3301      	adds	r3, #1
 800509e:	603b      	str	r3, [r7, #0]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2b05      	cmp	r3, #5
 80050a4:	ddda      	ble.n	800505c <print_cells+0x20>
		}
		printf("\n");
 80050a6:	200a      	movs	r0, #10
 80050a8:	f003 fd26 	bl	8008af8 <putchar>
	for (int current_ic = 0; current_ic < TOTAL_IC; current_ic++) {
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3301      	adds	r3, #1
 80050b0:	607b      	str	r3, [r7, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b11      	cmp	r3, #17
 80050b6:	ddc7      	ble.n	8005048 <print_cells+0xc>
	}
	printf("\n");
 80050b8:	200a      	movs	r0, #10
 80050ba:	f003 fd1d 	bl	8008af8 <putchar>
}
 80050be:	46c0      	nop			@ (mov r8, r8)
 80050c0:	46bd      	mov	sp, r7
 80050c2:	b002      	add	sp, #8
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	46c0      	nop			@ (mov r8, r8)
 80050c8:	08009c6c 	.word	0x08009c6c
 80050cc:	08009c74 	.word	0x08009c74
 80050d0:	20000234 	.word	0x20000234
 80050d4:	eb1c432d 	.word	0xeb1c432d
 80050d8:	3f1a36e2 	.word	0x3f1a36e2
 80050dc:	08009c7c 	.word	0x08009c7c

080050e0 <print_aux>:

/*!****************************************************************************
 \brief Prints GPIO voltage codes and Vref2 voltage code onto the serial port
 @return void
 *****************************************************************************/
void print_aux() {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
	for (int current_ic = 0; current_ic < TOTAL_IC; current_ic++) {
 80050e6:	2300      	movs	r3, #0
 80050e8:	607b      	str	r3, [r7, #4]
 80050ea:	e057      	b.n	800519c <print_aux+0xbc>
		printf("IC %d", current_ic+1);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	4b2f      	ldr	r3, [pc, #188]	@ (80051b0 <print_aux+0xd0>)
 80050f2:	0011      	movs	r1, r2
 80050f4:	0018      	movs	r0, r3
 80050f6:	f003 fcef 	bl	8008ad8 <iprintf>
		for (int i = 0; i < TOTAL_TEMP; i++) {
 80050fa:	2300      	movs	r3, #0
 80050fc:	603b      	str	r3, [r7, #0]
 80050fe:	e01f      	b.n	8005140 <print_aux+0x60>
			printf(" GPIO-%d: ", i+1);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	4b2b      	ldr	r3, [pc, #172]	@ (80051b4 <print_aux+0xd4>)
 8005106:	0011      	movs	r1, r2
 8005108:	0018      	movs	r0, r3
 800510a:	f003 fce5 	bl	8008ad8 <iprintf>
			printf("%0.2f, ", tempCalc(current_ic, i) * 0.01);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	b2db      	uxtb	r3, r3
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	0011      	movs	r1, r2
 8005118:	0018      	movs	r0, r3
 800511a:	f000 f881 	bl	8005220 <tempCalc>
 800511e:	0003      	movs	r3, r0
 8005120:	0018      	movs	r0, r3
 8005122:	f7fd f82f 	bl	8002184 <__aeabi_i2d>
 8005126:	4a24      	ldr	r2, [pc, #144]	@ (80051b8 <print_aux+0xd8>)
 8005128:	4b24      	ldr	r3, [pc, #144]	@ (80051bc <print_aux+0xdc>)
 800512a:	f7fc f8dd 	bl	80012e8 <__aeabi_dmul>
 800512e:	0002      	movs	r2, r0
 8005130:	000b      	movs	r3, r1
 8005132:	4923      	ldr	r1, [pc, #140]	@ (80051c0 <print_aux+0xe0>)
 8005134:	0008      	movs	r0, r1
 8005136:	f003 fccf 	bl	8008ad8 <iprintf>
		for (int i = 0; i < TOTAL_TEMP; i++) {
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	3301      	adds	r3, #1
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b03      	cmp	r3, #3
 8005144:	dddc      	ble.n	8005100 <print_aux+0x20>
		}

		printf("Vref2: %0.4f\n", BMS_IC[current_ic].aux.a_codes[5] * 0.0001);
 8005146:	4a1f      	ldr	r2, [pc, #124]	@ (80051c4 <print_aux+0xe4>)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2152      	movs	r1, #82	@ 0x52
 800514c:	20e8      	movs	r0, #232	@ 0xe8
 800514e:	4343      	muls	r3, r0
 8005150:	18d3      	adds	r3, r2, r3
 8005152:	185b      	adds	r3, r3, r1
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	0018      	movs	r0, r3
 8005158:	f7fd f814 	bl	8002184 <__aeabi_i2d>
 800515c:	4a1a      	ldr	r2, [pc, #104]	@ (80051c8 <print_aux+0xe8>)
 800515e:	4b1b      	ldr	r3, [pc, #108]	@ (80051cc <print_aux+0xec>)
 8005160:	f7fc f8c2 	bl	80012e8 <__aeabi_dmul>
 8005164:	0002      	movs	r2, r0
 8005166:	000b      	movs	r3, r1
 8005168:	4919      	ldr	r1, [pc, #100]	@ (80051d0 <print_aux+0xf0>)
 800516a:	0008      	movs	r0, r1
 800516c:	f003 fcb4 	bl	8008ad8 <iprintf>

		printf("OV/UV Flags : 0x");
 8005170:	4b18      	ldr	r3, [pc, #96]	@ (80051d4 <print_aux+0xf4>)
 8005172:	0018      	movs	r0, r3
 8005174:	f003 fcb0 	bl	8008ad8 <iprintf>
		printf("%02X\n", (uint8_t) BMS_IC[current_ic].aux.a_codes[11]);
 8005178:	4a12      	ldr	r2, [pc, #72]	@ (80051c4 <print_aux+0xe4>)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	215e      	movs	r1, #94	@ 0x5e
 800517e:	20e8      	movs	r0, #232	@ 0xe8
 8005180:	4343      	muls	r3, r0
 8005182:	18d3      	adds	r3, r2, r3
 8005184:	185b      	adds	r3, r3, r1
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b2db      	uxtb	r3, r3
 800518a:	001a      	movs	r2, r3
 800518c:	4b12      	ldr	r3, [pc, #72]	@ (80051d8 <print_aux+0xf8>)
 800518e:	0011      	movs	r1, r2
 8005190:	0018      	movs	r0, r3
 8005192:	f003 fca1 	bl	8008ad8 <iprintf>
	for (int current_ic = 0; current_ic < TOTAL_IC; current_ic++) {
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3301      	adds	r3, #1
 800519a:	607b      	str	r3, [r7, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b11      	cmp	r3, #17
 80051a0:	dda4      	ble.n	80050ec <print_aux+0xc>
	}
	printf("\n");
 80051a2:	200a      	movs	r0, #10
 80051a4:	f003 fca8 	bl	8008af8 <putchar>
}
 80051a8:	46c0      	nop			@ (mov r8, r8)
 80051aa:	46bd      	mov	sp, r7
 80051ac:	b002      	add	sp, #8
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	08009c84 	.word	0x08009c84
 80051b4:	08009c8c 	.word	0x08009c8c
 80051b8:	47ae147b 	.word	0x47ae147b
 80051bc:	3f847ae1 	.word	0x3f847ae1
 80051c0:	08009c98 	.word	0x08009c98
 80051c4:	20000234 	.word	0x20000234
 80051c8:	eb1c432d 	.word	0xeb1c432d
 80051cc:	3f1a36e2 	.word	0x3f1a36e2
 80051d0:	08009ca0 	.word	0x08009ca0
 80051d4:	08009cb0 	.word	0x08009cb0
 80051d8:	08009cc4 	.word	0x08009cc4

080051dc <serial_print_hex>:

/*!****************************************************************************
 \brief Function to print in HEX form
 @return void
 *****************************************************************************/
void serial_print_hex(uint8_t data) {
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	0002      	movs	r2, r0
 80051e4:	1dfb      	adds	r3, r7, #7
 80051e6:	701a      	strb	r2, [r3, #0]
	if (data < 16) {
 80051e8:	1dfb      	adds	r3, r7, #7
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b0f      	cmp	r3, #15
 80051ee:	d80a      	bhi.n	8005206 <serial_print_hex+0x2a>
		printf("0");
 80051f0:	2030      	movs	r0, #48	@ 0x30
 80051f2:	f003 fc81 	bl	8008af8 <putchar>
		printf("%02X", (unsigned char) data);
 80051f6:	1dfb      	adds	r3, r7, #7
 80051f8:	781a      	ldrb	r2, [r3, #0]
 80051fa:	4b08      	ldr	r3, [pc, #32]	@ (800521c <serial_print_hex+0x40>)
 80051fc:	0011      	movs	r1, r2
 80051fe:	0018      	movs	r0, r3
 8005200:	f003 fc6a 	bl	8008ad8 <iprintf>
	} else
		printf("%02X", (unsigned char) data);
}
 8005204:	e006      	b.n	8005214 <serial_print_hex+0x38>
		printf("%02X", (unsigned char) data);
 8005206:	1dfb      	adds	r3, r7, #7
 8005208:	781a      	ldrb	r2, [r3, #0]
 800520a:	4b04      	ldr	r3, [pc, #16]	@ (800521c <serial_print_hex+0x40>)
 800520c:	0011      	movs	r1, r2
 800520e:	0018      	movs	r0, r3
 8005210:	f003 fc62 	bl	8008ad8 <iprintf>
}
 8005214:	46c0      	nop			@ (mov r8, r8)
 8005216:	46bd      	mov	sp, r7
 8005218:	b002      	add	sp, #8
 800521a:	bd80      	pop	{r7, pc}
 800521c:	08009ccc 	.word	0x08009ccc

08005220 <tempCalc>:

// To calculate temperature from raw aux ADC value
uint16_t tempCalc(uint8_t ic, uint8_t temp) {
 8005220:	b5b0      	push	{r4, r5, r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	0002      	movs	r2, r0
 8005228:	1dfb      	adds	r3, r7, #7
 800522a:	701a      	strb	r2, [r3, #0]
 800522c:	1dbb      	adds	r3, r7, #6
 800522e:	1c0a      	adds	r2, r1, #0
 8005230:	701a      	strb	r2, [r3, #0]
	double vRef2 = BMS_IC[ic].aux.a_codes[5] * 0.0001;
 8005232:	1dfb      	adds	r3, r7, #7
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	4a39      	ldr	r2, [pc, #228]	@ (800531c <tempCalc+0xfc>)
 8005238:	2152      	movs	r1, #82	@ 0x52
 800523a:	20e8      	movs	r0, #232	@ 0xe8
 800523c:	4343      	muls	r3, r0
 800523e:	18d3      	adds	r3, r2, r3
 8005240:	185b      	adds	r3, r3, r1
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	0018      	movs	r0, r3
 8005246:	f7fc ff9d 	bl	8002184 <__aeabi_i2d>
 800524a:	4a35      	ldr	r2, [pc, #212]	@ (8005320 <tempCalc+0x100>)
 800524c:	4b35      	ldr	r3, [pc, #212]	@ (8005324 <tempCalc+0x104>)
 800524e:	f7fc f84b 	bl	80012e8 <__aeabi_dmul>
 8005252:	0002      	movs	r2, r0
 8005254:	000b      	movs	r3, r1
 8005256:	613a      	str	r2, [r7, #16]
 8005258:	617b      	str	r3, [r7, #20]
	double R = BMS_IC[ic].aux.a_codes[temp]
 800525a:	1dfb      	adds	r3, r7, #7
 800525c:	7819      	ldrb	r1, [r3, #0]
 800525e:	1dbb      	adds	r3, r7, #6
 8005260:	781a      	ldrb	r2, [r3, #0]
 8005262:	4b2e      	ldr	r3, [pc, #184]	@ (800531c <tempCalc+0xfc>)
 8005264:	2074      	movs	r0, #116	@ 0x74
 8005266:	4341      	muls	r1, r0
 8005268:	188a      	adds	r2, r1, r2
 800526a:	3224      	adds	r2, #36	@ 0x24
 800526c:	0052      	lsls	r2, r2, #1
 800526e:	5ad3      	ldrh	r3, [r2, r3]
			/ (vRef2 - (BMS_IC[ic].aux.a_codes[temp] * 0.0001));
 8005270:	0018      	movs	r0, r3
 8005272:	f7fc ff87 	bl	8002184 <__aeabi_i2d>
 8005276:	0004      	movs	r4, r0
 8005278:	000d      	movs	r5, r1
 800527a:	1dfb      	adds	r3, r7, #7
 800527c:	7819      	ldrb	r1, [r3, #0]
 800527e:	1dbb      	adds	r3, r7, #6
 8005280:	781a      	ldrb	r2, [r3, #0]
 8005282:	4b26      	ldr	r3, [pc, #152]	@ (800531c <tempCalc+0xfc>)
 8005284:	2074      	movs	r0, #116	@ 0x74
 8005286:	4341      	muls	r1, r0
 8005288:	188a      	adds	r2, r1, r2
 800528a:	3224      	adds	r2, #36	@ 0x24
 800528c:	0052      	lsls	r2, r2, #1
 800528e:	5ad3      	ldrh	r3, [r2, r3]
 8005290:	0018      	movs	r0, r3
 8005292:	f7fc ff77 	bl	8002184 <__aeabi_i2d>
 8005296:	4a22      	ldr	r2, [pc, #136]	@ (8005320 <tempCalc+0x100>)
 8005298:	4b22      	ldr	r3, [pc, #136]	@ (8005324 <tempCalc+0x104>)
 800529a:	f7fc f825 	bl	80012e8 <__aeabi_dmul>
 800529e:	0002      	movs	r2, r0
 80052a0:	000b      	movs	r3, r1
 80052a2:	6938      	ldr	r0, [r7, #16]
 80052a4:	6979      	ldr	r1, [r7, #20]
 80052a6:	f7fc fb05 	bl	80018b4 <__aeabi_dsub>
 80052aa:	0002      	movs	r2, r0
 80052ac:	000b      	movs	r3, r1
	double R = BMS_IC[ic].aux.a_codes[temp]
 80052ae:	0020      	movs	r0, r4
 80052b0:	0029      	movs	r1, r5
 80052b2:	f7fb fbdf 	bl	8000a74 <__aeabi_ddiv>
 80052b6:	0002      	movs	r2, r0
 80052b8:	000b      	movs	r3, r1
 80052ba:	60ba      	str	r2, [r7, #8]
 80052bc:	60fb      	str	r3, [r7, #12]
	return ((3435 / log(R / r_inf)) - 273.15) * 100;
 80052be:	4a1a      	ldr	r2, [pc, #104]	@ (8005328 <tempCalc+0x108>)
 80052c0:	4b1a      	ldr	r3, [pc, #104]	@ (800532c <tempCalc+0x10c>)
 80052c2:	68b8      	ldr	r0, [r7, #8]
 80052c4:	68f9      	ldr	r1, [r7, #12]
 80052c6:	f7fb fbd5 	bl	8000a74 <__aeabi_ddiv>
 80052ca:	0002      	movs	r2, r0
 80052cc:	000b      	movs	r3, r1
 80052ce:	0010      	movs	r0, r2
 80052d0:	0019      	movs	r1, r3
 80052d2:	f004 fa8b 	bl	80097ec <log>
 80052d6:	0002      	movs	r2, r0
 80052d8:	000b      	movs	r3, r1
 80052da:	2000      	movs	r0, #0
 80052dc:	4914      	ldr	r1, [pc, #80]	@ (8005330 <tempCalc+0x110>)
 80052de:	f7fb fbc9 	bl	8000a74 <__aeabi_ddiv>
 80052e2:	0002      	movs	r2, r0
 80052e4:	000b      	movs	r3, r1
 80052e6:	0010      	movs	r0, r2
 80052e8:	0019      	movs	r1, r3
 80052ea:	4a12      	ldr	r2, [pc, #72]	@ (8005334 <tempCalc+0x114>)
 80052ec:	4b12      	ldr	r3, [pc, #72]	@ (8005338 <tempCalc+0x118>)
 80052ee:	f7fc fae1 	bl	80018b4 <__aeabi_dsub>
 80052f2:	0002      	movs	r2, r0
 80052f4:	000b      	movs	r3, r1
 80052f6:	0010      	movs	r0, r2
 80052f8:	0019      	movs	r1, r3
 80052fa:	2200      	movs	r2, #0
 80052fc:	4b0f      	ldr	r3, [pc, #60]	@ (800533c <tempCalc+0x11c>)
 80052fe:	f7fb fff3 	bl	80012e8 <__aeabi_dmul>
 8005302:	0002      	movs	r2, r0
 8005304:	000b      	movs	r3, r1
 8005306:	0010      	movs	r0, r2
 8005308:	0019      	movs	r1, r3
 800530a:	f7fa ffcf 	bl	80002ac <__aeabi_d2uiz>
 800530e:	0003      	movs	r3, r0
 8005310:	b29b      	uxth	r3, r3
}
 8005312:	0018      	movs	r0, r3
 8005314:	46bd      	mov	sp, r7
 8005316:	b006      	add	sp, #24
 8005318:	bdb0      	pop	{r4, r5, r7, pc}
 800531a:	46c0      	nop			@ (mov r8, r8)
 800531c:	20000234 	.word	0x20000234
 8005320:	eb1c432d 	.word	0xeb1c432d
 8005324:	3f1a36e2 	.word	0x3f1a36e2
 8005328:	043c48bd 	.word	0x043c48bd
 800532c:	3fb96498 	.word	0x3fb96498
 8005330:	40aad600 	.word	0x40aad600
 8005334:	66666666 	.word	0x66666666
 8005338:	40711266 	.word	0x40711266
 800533c:	40590000 	.word	0x40590000

08005340 <check_error>:

/*!****************************************************************************
 \brief Function to check error flag and print PEC error message
 @return void
 *****************************************************************************/
void check_error(int error) {
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
	if (error == -1) {
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3301      	adds	r3, #1
 800534c:	d103      	bne.n	8005356 <check_error+0x16>
		printf("A PEC error was detected in the received data\n");
 800534e:	4b04      	ldr	r3, [pc, #16]	@ (8005360 <check_error+0x20>)
 8005350:	0018      	movs	r0, r3
 8005352:	f003 fc31 	bl	8008bb8 <puts>
	}
}
 8005356:	46c0      	nop			@ (mov r8, r8)
 8005358:	46bd      	mov	sp, r7
 800535a:	b002      	add	sp, #8
 800535c:	bd80      	pop	{r7, pc}
 800535e:	46c0      	nop			@ (mov r8, r8)
 8005360:	08009cd4 	.word	0x08009cd4

08005364 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005368:	b672      	cpsid	i
}
 800536a:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800536c:	46c0      	nop			@ (mov r8, r8)
 800536e:	e7fd      	b.n	800536c <Error_Handler+0x8>

08005370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005376:	4b0f      	ldr	r3, [pc, #60]	@ (80053b4 <HAL_MspInit+0x44>)
 8005378:	699a      	ldr	r2, [r3, #24]
 800537a:	4b0e      	ldr	r3, [pc, #56]	@ (80053b4 <HAL_MspInit+0x44>)
 800537c:	2101      	movs	r1, #1
 800537e:	430a      	orrs	r2, r1
 8005380:	619a      	str	r2, [r3, #24]
 8005382:	4b0c      	ldr	r3, [pc, #48]	@ (80053b4 <HAL_MspInit+0x44>)
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	2201      	movs	r2, #1
 8005388:	4013      	ands	r3, r2
 800538a:	607b      	str	r3, [r7, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800538e:	4b09      	ldr	r3, [pc, #36]	@ (80053b4 <HAL_MspInit+0x44>)
 8005390:	69da      	ldr	r2, [r3, #28]
 8005392:	4b08      	ldr	r3, [pc, #32]	@ (80053b4 <HAL_MspInit+0x44>)
 8005394:	2180      	movs	r1, #128	@ 0x80
 8005396:	0549      	lsls	r1, r1, #21
 8005398:	430a      	orrs	r2, r1
 800539a:	61da      	str	r2, [r3, #28]
 800539c:	4b05      	ldr	r3, [pc, #20]	@ (80053b4 <HAL_MspInit+0x44>)
 800539e:	69da      	ldr	r2, [r3, #28]
 80053a0:	2380      	movs	r3, #128	@ 0x80
 80053a2:	055b      	lsls	r3, r3, #21
 80053a4:	4013      	ands	r3, r2
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053aa:	46c0      	nop			@ (mov r8, r8)
 80053ac:	46bd      	mov	sp, r7
 80053ae:	b002      	add	sp, #8
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	46c0      	nop			@ (mov r8, r8)
 80053b4:	40021000 	.word	0x40021000

080053b8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80053b8:	b590      	push	{r4, r7, lr}
 80053ba:	b08b      	sub	sp, #44	@ 0x2c
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053c0:	2414      	movs	r4, #20
 80053c2:	193b      	adds	r3, r7, r4
 80053c4:	0018      	movs	r0, r3
 80053c6:	2314      	movs	r3, #20
 80053c8:	001a      	movs	r2, r3
 80053ca:	2100      	movs	r1, #0
 80053cc:	f003 fcea 	bl	8008da4 <memset>
  if(hadc->Instance==ADC1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a28      	ldr	r2, [pc, #160]	@ (8005478 <HAL_ADC_MspInit+0xc0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d149      	bne.n	800546e <HAL_ADC_MspInit+0xb6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80053da:	4b28      	ldr	r3, [pc, #160]	@ (800547c <HAL_ADC_MspInit+0xc4>)
 80053dc:	699a      	ldr	r2, [r3, #24]
 80053de:	4b27      	ldr	r3, [pc, #156]	@ (800547c <HAL_ADC_MspInit+0xc4>)
 80053e0:	2180      	movs	r1, #128	@ 0x80
 80053e2:	0089      	lsls	r1, r1, #2
 80053e4:	430a      	orrs	r2, r1
 80053e6:	619a      	str	r2, [r3, #24]
 80053e8:	4b24      	ldr	r3, [pc, #144]	@ (800547c <HAL_ADC_MspInit+0xc4>)
 80053ea:	699a      	ldr	r2, [r3, #24]
 80053ec:	2380      	movs	r3, #128	@ 0x80
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4013      	ands	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
 80053f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053f6:	4b21      	ldr	r3, [pc, #132]	@ (800547c <HAL_ADC_MspInit+0xc4>)
 80053f8:	695a      	ldr	r2, [r3, #20]
 80053fa:	4b20      	ldr	r3, [pc, #128]	@ (800547c <HAL_ADC_MspInit+0xc4>)
 80053fc:	2180      	movs	r1, #128	@ 0x80
 80053fe:	0309      	lsls	r1, r1, #12
 8005400:	430a      	orrs	r2, r1
 8005402:	615a      	str	r2, [r3, #20]
 8005404:	4b1d      	ldr	r3, [pc, #116]	@ (800547c <HAL_ADC_MspInit+0xc4>)
 8005406:	695a      	ldr	r2, [r3, #20]
 8005408:	2380      	movs	r3, #128	@ 0x80
 800540a:	031b      	lsls	r3, r3, #12
 800540c:	4013      	ands	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005412:	4b1a      	ldr	r3, [pc, #104]	@ (800547c <HAL_ADC_MspInit+0xc4>)
 8005414:	695a      	ldr	r2, [r3, #20]
 8005416:	4b19      	ldr	r3, [pc, #100]	@ (800547c <HAL_ADC_MspInit+0xc4>)
 8005418:	2180      	movs	r1, #128	@ 0x80
 800541a:	0289      	lsls	r1, r1, #10
 800541c:	430a      	orrs	r2, r1
 800541e:	615a      	str	r2, [r3, #20]
 8005420:	4b16      	ldr	r3, [pc, #88]	@ (800547c <HAL_ADC_MspInit+0xc4>)
 8005422:	695a      	ldr	r2, [r3, #20]
 8005424:	2380      	movs	r3, #128	@ 0x80
 8005426:	029b      	lsls	r3, r3, #10
 8005428:	4013      	ands	r3, r2
 800542a:	60bb      	str	r3, [r7, #8]
 800542c:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = Prog_LED_4_Pin|GPIO_PIN_2|GPIO_PIN_3;
 800542e:	193b      	adds	r3, r7, r4
 8005430:	220d      	movs	r2, #13
 8005432:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005434:	193b      	adds	r3, r7, r4
 8005436:	2203      	movs	r2, #3
 8005438:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800543a:	193b      	adds	r3, r7, r4
 800543c:	2200      	movs	r2, #0
 800543e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005440:	193b      	adds	r3, r7, r4
 8005442:	4a0f      	ldr	r2, [pc, #60]	@ (8005480 <HAL_ADC_MspInit+0xc8>)
 8005444:	0019      	movs	r1, r3
 8005446:	0010      	movs	r0, r2
 8005448:	f000 fe6c 	bl	8006124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800544c:	0021      	movs	r1, r4
 800544e:	187b      	adds	r3, r7, r1
 8005450:	227f      	movs	r2, #127	@ 0x7f
 8005452:	601a      	str	r2, [r3, #0]
                          |VSBAT_Pin|VSHV_Pin|Vehicle_ID_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005454:	187b      	adds	r3, r7, r1
 8005456:	2203      	movs	r2, #3
 8005458:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545a:	187b      	adds	r3, r7, r1
 800545c:	2200      	movs	r2, #0
 800545e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005460:	187a      	adds	r2, r7, r1
 8005462:	2390      	movs	r3, #144	@ 0x90
 8005464:	05db      	lsls	r3, r3, #23
 8005466:	0011      	movs	r1, r2
 8005468:	0018      	movs	r0, r3
 800546a:	f000 fe5b 	bl	8006124 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800546e:	46c0      	nop			@ (mov r8, r8)
 8005470:	46bd      	mov	sp, r7
 8005472:	b00b      	add	sp, #44	@ 0x2c
 8005474:	bd90      	pop	{r4, r7, pc}
 8005476:	46c0      	nop			@ (mov r8, r8)
 8005478:	40012400 	.word	0x40012400
 800547c:	40021000 	.word	0x40021000
 8005480:	48000800 	.word	0x48000800

08005484 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005484:	b590      	push	{r4, r7, lr}
 8005486:	b08b      	sub	sp, #44	@ 0x2c
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800548c:	2414      	movs	r4, #20
 800548e:	193b      	adds	r3, r7, r4
 8005490:	0018      	movs	r0, r3
 8005492:	2314      	movs	r3, #20
 8005494:	001a      	movs	r2, r3
 8005496:	2100      	movs	r1, #0
 8005498:	f003 fc84 	bl	8008da4 <memset>
  if(hcan->Instance==CAN)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005518 <HAL_CAN_MspInit+0x94>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d133      	bne.n	800550e <HAL_CAN_MspInit+0x8a>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80054a6:	4b1d      	ldr	r3, [pc, #116]	@ (800551c <HAL_CAN_MspInit+0x98>)
 80054a8:	69da      	ldr	r2, [r3, #28]
 80054aa:	4b1c      	ldr	r3, [pc, #112]	@ (800551c <HAL_CAN_MspInit+0x98>)
 80054ac:	2180      	movs	r1, #128	@ 0x80
 80054ae:	0489      	lsls	r1, r1, #18
 80054b0:	430a      	orrs	r2, r1
 80054b2:	61da      	str	r2, [r3, #28]
 80054b4:	4b19      	ldr	r3, [pc, #100]	@ (800551c <HAL_CAN_MspInit+0x98>)
 80054b6:	69da      	ldr	r2, [r3, #28]
 80054b8:	2380      	movs	r3, #128	@ 0x80
 80054ba:	049b      	lsls	r3, r3, #18
 80054bc:	4013      	ands	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054c2:	4b16      	ldr	r3, [pc, #88]	@ (800551c <HAL_CAN_MspInit+0x98>)
 80054c4:	695a      	ldr	r2, [r3, #20]
 80054c6:	4b15      	ldr	r3, [pc, #84]	@ (800551c <HAL_CAN_MspInit+0x98>)
 80054c8:	2180      	movs	r1, #128	@ 0x80
 80054ca:	0289      	lsls	r1, r1, #10
 80054cc:	430a      	orrs	r2, r1
 80054ce:	615a      	str	r2, [r3, #20]
 80054d0:	4b12      	ldr	r3, [pc, #72]	@ (800551c <HAL_CAN_MspInit+0x98>)
 80054d2:	695a      	ldr	r2, [r3, #20]
 80054d4:	2380      	movs	r3, #128	@ 0x80
 80054d6:	029b      	lsls	r3, r3, #10
 80054d8:	4013      	ands	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80054de:	193b      	adds	r3, r7, r4
 80054e0:	22c0      	movs	r2, #192	@ 0xc0
 80054e2:	0152      	lsls	r2, r2, #5
 80054e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e6:	0021      	movs	r1, r4
 80054e8:	187b      	adds	r3, r7, r1
 80054ea:	2202      	movs	r2, #2
 80054ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ee:	187b      	adds	r3, r7, r1
 80054f0:	2200      	movs	r2, #0
 80054f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80054f4:	187b      	adds	r3, r7, r1
 80054f6:	2203      	movs	r2, #3
 80054f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80054fa:	187b      	adds	r3, r7, r1
 80054fc:	2204      	movs	r2, #4
 80054fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005500:	187a      	adds	r2, r7, r1
 8005502:	2390      	movs	r3, #144	@ 0x90
 8005504:	05db      	lsls	r3, r3, #23
 8005506:	0011      	movs	r1, r2
 8005508:	0018      	movs	r0, r3
 800550a:	f000 fe0b 	bl	8006124 <HAL_GPIO_Init>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 800550e:	46c0      	nop			@ (mov r8, r8)
 8005510:	46bd      	mov	sp, r7
 8005512:	b00b      	add	sp, #44	@ 0x2c
 8005514:	bd90      	pop	{r4, r7, pc}
 8005516:	46c0      	nop			@ (mov r8, r8)
 8005518:	40006400 	.word	0x40006400
 800551c:	40021000 	.word	0x40021000

08005520 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005520:	b590      	push	{r4, r7, lr}
 8005522:	b08b      	sub	sp, #44	@ 0x2c
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005528:	2414      	movs	r4, #20
 800552a:	193b      	adds	r3, r7, r4
 800552c:	0018      	movs	r0, r3
 800552e:	2314      	movs	r3, #20
 8005530:	001a      	movs	r2, r3
 8005532:	2100      	movs	r1, #0
 8005534:	f003 fc36 	bl	8008da4 <memset>
  if(hspi->Instance==SPI1)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1c      	ldr	r2, [pc, #112]	@ (80055b0 <HAL_SPI_MspInit+0x90>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d131      	bne.n	80055a6 <HAL_SPI_MspInit+0x86>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005542:	4b1c      	ldr	r3, [pc, #112]	@ (80055b4 <HAL_SPI_MspInit+0x94>)
 8005544:	699a      	ldr	r2, [r3, #24]
 8005546:	4b1b      	ldr	r3, [pc, #108]	@ (80055b4 <HAL_SPI_MspInit+0x94>)
 8005548:	2180      	movs	r1, #128	@ 0x80
 800554a:	0149      	lsls	r1, r1, #5
 800554c:	430a      	orrs	r2, r1
 800554e:	619a      	str	r2, [r3, #24]
 8005550:	4b18      	ldr	r3, [pc, #96]	@ (80055b4 <HAL_SPI_MspInit+0x94>)
 8005552:	699a      	ldr	r2, [r3, #24]
 8005554:	2380      	movs	r3, #128	@ 0x80
 8005556:	015b      	lsls	r3, r3, #5
 8005558:	4013      	ands	r3, r2
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800555e:	4b15      	ldr	r3, [pc, #84]	@ (80055b4 <HAL_SPI_MspInit+0x94>)
 8005560:	695a      	ldr	r2, [r3, #20]
 8005562:	4b14      	ldr	r3, [pc, #80]	@ (80055b4 <HAL_SPI_MspInit+0x94>)
 8005564:	2180      	movs	r1, #128	@ 0x80
 8005566:	02c9      	lsls	r1, r1, #11
 8005568:	430a      	orrs	r2, r1
 800556a:	615a      	str	r2, [r3, #20]
 800556c:	4b11      	ldr	r3, [pc, #68]	@ (80055b4 <HAL_SPI_MspInit+0x94>)
 800556e:	695a      	ldr	r2, [r3, #20]
 8005570:	2380      	movs	r3, #128	@ 0x80
 8005572:	02db      	lsls	r3, r3, #11
 8005574:	4013      	ands	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800557a:	0021      	movs	r1, r4
 800557c:	187b      	adds	r3, r7, r1
 800557e:	2238      	movs	r2, #56	@ 0x38
 8005580:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005582:	187b      	adds	r3, r7, r1
 8005584:	2202      	movs	r2, #2
 8005586:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005588:	187b      	adds	r3, r7, r1
 800558a:	2200      	movs	r2, #0
 800558c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800558e:	187b      	adds	r3, r7, r1
 8005590:	2203      	movs	r2, #3
 8005592:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8005594:	187b      	adds	r3, r7, r1
 8005596:	2200      	movs	r2, #0
 8005598:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800559a:	187b      	adds	r3, r7, r1
 800559c:	4a06      	ldr	r2, [pc, #24]	@ (80055b8 <HAL_SPI_MspInit+0x98>)
 800559e:	0019      	movs	r1, r3
 80055a0:	0010      	movs	r0, r2
 80055a2:	f000 fdbf 	bl	8006124 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80055a6:	46c0      	nop			@ (mov r8, r8)
 80055a8:	46bd      	mov	sp, r7
 80055aa:	b00b      	add	sp, #44	@ 0x2c
 80055ac:	bd90      	pop	{r4, r7, pc}
 80055ae:	46c0      	nop			@ (mov r8, r8)
 80055b0:	40013000 	.word	0x40013000
 80055b4:	40021000 	.word	0x40021000
 80055b8:	48000400 	.word	0x48000400

080055bc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a09      	ldr	r2, [pc, #36]	@ (80055f0 <HAL_TIM_Base_MspInit+0x34>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d10b      	bne.n	80055e6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80055ce:	4b09      	ldr	r3, [pc, #36]	@ (80055f4 <HAL_TIM_Base_MspInit+0x38>)
 80055d0:	69da      	ldr	r2, [r3, #28]
 80055d2:	4b08      	ldr	r3, [pc, #32]	@ (80055f4 <HAL_TIM_Base_MspInit+0x38>)
 80055d4:	2102      	movs	r1, #2
 80055d6:	430a      	orrs	r2, r1
 80055d8:	61da      	str	r2, [r3, #28]
 80055da:	4b06      	ldr	r3, [pc, #24]	@ (80055f4 <HAL_TIM_Base_MspInit+0x38>)
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	2202      	movs	r2, #2
 80055e0:	4013      	ands	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80055e6:	46c0      	nop			@ (mov r8, r8)
 80055e8:	46bd      	mov	sp, r7
 80055ea:	b004      	add	sp, #16
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	46c0      	nop			@ (mov r8, r8)
 80055f0:	40000400 	.word	0x40000400
 80055f4:	40021000 	.word	0x40021000

080055f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055f8:	b590      	push	{r4, r7, lr}
 80055fa:	b08b      	sub	sp, #44	@ 0x2c
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005600:	2414      	movs	r4, #20
 8005602:	193b      	adds	r3, r7, r4
 8005604:	0018      	movs	r0, r3
 8005606:	2314      	movs	r3, #20
 8005608:	001a      	movs	r2, r3
 800560a:	2100      	movs	r1, #0
 800560c:	f003 fbca 	bl	8008da4 <memset>
  if(huart->Instance==USART1)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a1d      	ldr	r2, [pc, #116]	@ (800568c <HAL_UART_MspInit+0x94>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d133      	bne.n	8005682 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800561a:	4b1d      	ldr	r3, [pc, #116]	@ (8005690 <HAL_UART_MspInit+0x98>)
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	4b1c      	ldr	r3, [pc, #112]	@ (8005690 <HAL_UART_MspInit+0x98>)
 8005620:	2180      	movs	r1, #128	@ 0x80
 8005622:	01c9      	lsls	r1, r1, #7
 8005624:	430a      	orrs	r2, r1
 8005626:	619a      	str	r2, [r3, #24]
 8005628:	4b19      	ldr	r3, [pc, #100]	@ (8005690 <HAL_UART_MspInit+0x98>)
 800562a:	699a      	ldr	r2, [r3, #24]
 800562c:	2380      	movs	r3, #128	@ 0x80
 800562e:	01db      	lsls	r3, r3, #7
 8005630:	4013      	ands	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005636:	4b16      	ldr	r3, [pc, #88]	@ (8005690 <HAL_UART_MspInit+0x98>)
 8005638:	695a      	ldr	r2, [r3, #20]
 800563a:	4b15      	ldr	r3, [pc, #84]	@ (8005690 <HAL_UART_MspInit+0x98>)
 800563c:	2180      	movs	r1, #128	@ 0x80
 800563e:	0289      	lsls	r1, r1, #10
 8005640:	430a      	orrs	r2, r1
 8005642:	615a      	str	r2, [r3, #20]
 8005644:	4b12      	ldr	r3, [pc, #72]	@ (8005690 <HAL_UART_MspInit+0x98>)
 8005646:	695a      	ldr	r2, [r3, #20]
 8005648:	2380      	movs	r3, #128	@ 0x80
 800564a:	029b      	lsls	r3, r3, #10
 800564c:	4013      	ands	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005652:	193b      	adds	r3, r7, r4
 8005654:	22c0      	movs	r2, #192	@ 0xc0
 8005656:	00d2      	lsls	r2, r2, #3
 8005658:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800565a:	0021      	movs	r1, r4
 800565c:	187b      	adds	r3, r7, r1
 800565e:	2202      	movs	r2, #2
 8005660:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005662:	187b      	adds	r3, r7, r1
 8005664:	2200      	movs	r2, #0
 8005666:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005668:	187b      	adds	r3, r7, r1
 800566a:	2203      	movs	r2, #3
 800566c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800566e:	187b      	adds	r3, r7, r1
 8005670:	2201      	movs	r2, #1
 8005672:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005674:	187a      	adds	r2, r7, r1
 8005676:	2390      	movs	r3, #144	@ 0x90
 8005678:	05db      	lsls	r3, r3, #23
 800567a:	0011      	movs	r1, r2
 800567c:	0018      	movs	r0, r3
 800567e:	f000 fd51 	bl	8006124 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8005682:	46c0      	nop			@ (mov r8, r8)
 8005684:	46bd      	mov	sp, r7
 8005686:	b00b      	add	sp, #44	@ 0x2c
 8005688:	bd90      	pop	{r4, r7, pc}
 800568a:	46c0      	nop			@ (mov r8, r8)
 800568c:	40013800 	.word	0x40013800
 8005690:	40021000 	.word	0x40021000

08005694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005698:	46c0      	nop			@ (mov r8, r8)
 800569a:	e7fd      	b.n	8005698 <NMI_Handler+0x4>

0800569c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056a0:	46c0      	nop			@ (mov r8, r8)
 80056a2:	e7fd      	b.n	80056a0 <HardFault_Handler+0x4>

080056a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80056a8:	46c0      	nop			@ (mov r8, r8)
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80056b2:	46c0      	nop			@ (mov r8, r8)
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056bc:	f000 f916 	bl	80058ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80056c0:	46c0      	nop			@ (mov r8, r8)
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b086      	sub	sp, #24
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	e00a      	b.n	80056ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80056d8:	e000      	b.n	80056dc <_read+0x16>
 80056da:	bf00      	nop
 80056dc:	0001      	movs	r1, r0
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	60ba      	str	r2, [r7, #8]
 80056e4:	b2ca      	uxtb	r2, r1
 80056e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	3301      	adds	r3, #1
 80056ec:	617b      	str	r3, [r7, #20]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	dbf0      	blt.n	80056d8 <_read+0x12>
  }

  return len;
 80056f6:	687b      	ldr	r3, [r7, #4]
}
 80056f8:	0018      	movs	r0, r3
 80056fa:	46bd      	mov	sp, r7
 80056fc:	b006      	add	sp, #24
 80056fe:	bd80      	pop	{r7, pc}

08005700 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800570c:	2300      	movs	r3, #0
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	e009      	b.n	8005726 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	60ba      	str	r2, [r7, #8]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	0018      	movs	r0, r3
 800571c:	f7ff fb52 	bl	8004dc4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	3301      	adds	r3, #1
 8005724:	617b      	str	r3, [r7, #20]
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	429a      	cmp	r2, r3
 800572c:	dbf1      	blt.n	8005712 <_write+0x12>
  }
  return len;
 800572e:	687b      	ldr	r3, [r7, #4]
}
 8005730:	0018      	movs	r0, r3
 8005732:	46bd      	mov	sp, r7
 8005734:	b006      	add	sp, #24
 8005736:	bd80      	pop	{r7, pc}

08005738 <_close>:

int _close(int file)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005740:	2301      	movs	r3, #1
 8005742:	425b      	negs	r3, r3
}
 8005744:	0018      	movs	r0, r3
 8005746:	46bd      	mov	sp, r7
 8005748:	b002      	add	sp, #8
 800574a:	bd80      	pop	{r7, pc}

0800574c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2280      	movs	r2, #128	@ 0x80
 800575a:	0192      	lsls	r2, r2, #6
 800575c:	605a      	str	r2, [r3, #4]
  return 0;
 800575e:	2300      	movs	r3, #0
}
 8005760:	0018      	movs	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	b002      	add	sp, #8
 8005766:	bd80      	pop	{r7, pc}

08005768 <_isatty>:

int _isatty(int file)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005770:	2301      	movs	r3, #1
}
 8005772:	0018      	movs	r0, r3
 8005774:	46bd      	mov	sp, r7
 8005776:	b002      	add	sp, #8
 8005778:	bd80      	pop	{r7, pc}

0800577a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b084      	sub	sp, #16
 800577e:	af00      	add	r7, sp, #0
 8005780:	60f8      	str	r0, [r7, #12]
 8005782:	60b9      	str	r1, [r7, #8]
 8005784:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005786:	2300      	movs	r3, #0
}
 8005788:	0018      	movs	r0, r3
 800578a:	46bd      	mov	sp, r7
 800578c:	b004      	add	sp, #16
 800578e:	bd80      	pop	{r7, pc}

08005790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005798:	4a14      	ldr	r2, [pc, #80]	@ (80057ec <_sbrk+0x5c>)
 800579a:	4b15      	ldr	r3, [pc, #84]	@ (80057f0 <_sbrk+0x60>)
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80057a4:	4b13      	ldr	r3, [pc, #76]	@ (80057f4 <_sbrk+0x64>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d102      	bne.n	80057b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80057ac:	4b11      	ldr	r3, [pc, #68]	@ (80057f4 <_sbrk+0x64>)
 80057ae:	4a12      	ldr	r2, [pc, #72]	@ (80057f8 <_sbrk+0x68>)
 80057b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80057b2:	4b10      	ldr	r3, [pc, #64]	@ (80057f4 <_sbrk+0x64>)
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	18d3      	adds	r3, r2, r3
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d207      	bcs.n	80057d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80057c0:	f003 fb58 	bl	8008e74 <__errno>
 80057c4:	0003      	movs	r3, r0
 80057c6:	220c      	movs	r2, #12
 80057c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80057ca:	2301      	movs	r3, #1
 80057cc:	425b      	negs	r3, r3
 80057ce:	e009      	b.n	80057e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80057d0:	4b08      	ldr	r3, [pc, #32]	@ (80057f4 <_sbrk+0x64>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80057d6:	4b07      	ldr	r3, [pc, #28]	@ (80057f4 <_sbrk+0x64>)
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	18d2      	adds	r2, r2, r3
 80057de:	4b05      	ldr	r3, [pc, #20]	@ (80057f4 <_sbrk+0x64>)
 80057e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80057e2:	68fb      	ldr	r3, [r7, #12]
}
 80057e4:	0018      	movs	r0, r3
 80057e6:	46bd      	mov	sp, r7
 80057e8:	b006      	add	sp, #24
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20008000 	.word	0x20008000
 80057f0:	00000400 	.word	0x00000400
 80057f4:	20001294 	.word	0x20001294
 80057f8:	200013e8 	.word	0x200013e8

080057fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8005800:	46c0      	nop			@ (mov r8, r8)
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
	...

08005808 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005808:	480d      	ldr	r0, [pc, #52]	@ (8005840 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800580a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800580c:	f7ff fff6 	bl	80057fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005810:	480c      	ldr	r0, [pc, #48]	@ (8005844 <LoopForever+0x6>)
  ldr r1, =_edata
 8005812:	490d      	ldr	r1, [pc, #52]	@ (8005848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005814:	4a0d      	ldr	r2, [pc, #52]	@ (800584c <LoopForever+0xe>)
  movs r3, #0
 8005816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005818:	e002      	b.n	8005820 <LoopCopyDataInit>

0800581a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800581a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800581c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800581e:	3304      	adds	r3, #4

08005820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005824:	d3f9      	bcc.n	800581a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005826:	4a0a      	ldr	r2, [pc, #40]	@ (8005850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005828:	4c0a      	ldr	r4, [pc, #40]	@ (8005854 <LoopForever+0x16>)
  movs r3, #0
 800582a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800582c:	e001      	b.n	8005832 <LoopFillZerobss>

0800582e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800582e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005830:	3204      	adds	r2, #4

08005832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005834:	d3fb      	bcc.n	800582e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005836:	f003 fb23 	bl	8008e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800583a:	f7fe ff3f 	bl	80046bc <main>

0800583e <LoopForever>:

LoopForever:
    b LoopForever
 800583e:	e7fe      	b.n	800583e <LoopForever>
  ldr   r0, =_estack
 8005840:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005848:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800584c:	08009fcc 	.word	0x08009fcc
  ldr r2, =_sbss
 8005850:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8005854:	200013e8 	.word	0x200013e8

08005858 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005858:	e7fe      	b.n	8005858 <ADC1_COMP_IRQHandler>
	...

0800585c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005860:	4b07      	ldr	r3, [pc, #28]	@ (8005880 <HAL_Init+0x24>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	4b06      	ldr	r3, [pc, #24]	@ (8005880 <HAL_Init+0x24>)
 8005866:	2110      	movs	r1, #16
 8005868:	430a      	orrs	r2, r1
 800586a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800586c:	2003      	movs	r0, #3
 800586e:	f000 f809 	bl	8005884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005872:	f7ff fd7d 	bl	8005370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	0018      	movs	r0, r3
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	46c0      	nop			@ (mov r8, r8)
 8005880:	40022000 	.word	0x40022000

08005884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005884:	b590      	push	{r4, r7, lr}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800588c:	4b14      	ldr	r3, [pc, #80]	@ (80058e0 <HAL_InitTick+0x5c>)
 800588e:	681c      	ldr	r4, [r3, #0]
 8005890:	4b14      	ldr	r3, [pc, #80]	@ (80058e4 <HAL_InitTick+0x60>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	0019      	movs	r1, r3
 8005896:	23fa      	movs	r3, #250	@ 0xfa
 8005898:	0098      	lsls	r0, r3, #2
 800589a:	f7fa fc3d 	bl	8000118 <__udivsi3>
 800589e:	0003      	movs	r3, r0
 80058a0:	0019      	movs	r1, r3
 80058a2:	0020      	movs	r0, r4
 80058a4:	f7fa fc38 	bl	8000118 <__udivsi3>
 80058a8:	0003      	movs	r3, r0
 80058aa:	0018      	movs	r0, r3
 80058ac:	f000 fc2d 	bl	800610a <HAL_SYSTICK_Config>
 80058b0:	1e03      	subs	r3, r0, #0
 80058b2:	d001      	beq.n	80058b8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e00f      	b.n	80058d8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d80b      	bhi.n	80058d6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	2301      	movs	r3, #1
 80058c2:	425b      	negs	r3, r3
 80058c4:	2200      	movs	r2, #0
 80058c6:	0018      	movs	r0, r3
 80058c8:	f000 fc0a 	bl	80060e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80058cc:	4b06      	ldr	r3, [pc, #24]	@ (80058e8 <HAL_InitTick+0x64>)
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	e000      	b.n	80058d8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
}
 80058d8:	0018      	movs	r0, r3
 80058da:	46bd      	mov	sp, r7
 80058dc:	b003      	add	sp, #12
 80058de:	bd90      	pop	{r4, r7, pc}
 80058e0:	20000014 	.word	0x20000014
 80058e4:	2000001c 	.word	0x2000001c
 80058e8:	20000018 	.word	0x20000018

080058ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058f0:	4b05      	ldr	r3, [pc, #20]	@ (8005908 <HAL_IncTick+0x1c>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	001a      	movs	r2, r3
 80058f6:	4b05      	ldr	r3, [pc, #20]	@ (800590c <HAL_IncTick+0x20>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	18d2      	adds	r2, r2, r3
 80058fc:	4b03      	ldr	r3, [pc, #12]	@ (800590c <HAL_IncTick+0x20>)
 80058fe:	601a      	str	r2, [r3, #0]
}
 8005900:	46c0      	nop			@ (mov r8, r8)
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	46c0      	nop			@ (mov r8, r8)
 8005908:	2000001c 	.word	0x2000001c
 800590c:	20001298 	.word	0x20001298

08005910 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
  return uwTick;
 8005914:	4b02      	ldr	r3, [pc, #8]	@ (8005920 <HAL_GetTick+0x10>)
 8005916:	681b      	ldr	r3, [r3, #0]
}
 8005918:	0018      	movs	r0, r3
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	46c0      	nop			@ (mov r8, r8)
 8005920:	20001298 	.word	0x20001298

08005924 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800592c:	230f      	movs	r3, #15
 800592e:	18fb      	adds	r3, r7, r3
 8005930:	2200      	movs	r2, #0
 8005932:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e125      	b.n	8005b8e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10a      	bne.n	8005960 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2234      	movs	r2, #52	@ 0x34
 8005954:	2100      	movs	r1, #0
 8005956:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	0018      	movs	r0, r3
 800595c:	f7ff fd2c 	bl	80053b8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005964:	2210      	movs	r2, #16
 8005966:	4013      	ands	r3, r2
 8005968:	d000      	beq.n	800596c <HAL_ADC_Init+0x48>
 800596a:	e103      	b.n	8005b74 <HAL_ADC_Init+0x250>
 800596c:	230f      	movs	r3, #15
 800596e:	18fb      	adds	r3, r7, r3
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d000      	beq.n	8005978 <HAL_ADC_Init+0x54>
 8005976:	e0fd      	b.n	8005b74 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	2204      	movs	r2, #4
 8005980:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8005982:	d000      	beq.n	8005986 <HAL_ADC_Init+0x62>
 8005984:	e0f6      	b.n	8005b74 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598a:	4a83      	ldr	r2, [pc, #524]	@ (8005b98 <HAL_ADC_Init+0x274>)
 800598c:	4013      	ands	r3, r2
 800598e:	2202      	movs	r2, #2
 8005990:	431a      	orrs	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	2203      	movs	r2, #3
 800599e:	4013      	ands	r3, r2
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d112      	bne.n	80059ca <HAL_ADC_Init+0xa6>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2201      	movs	r2, #1
 80059ac:	4013      	ands	r3, r2
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d009      	beq.n	80059c6 <HAL_ADC_Init+0xa2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	2380      	movs	r3, #128	@ 0x80
 80059ba:	021b      	lsls	r3, r3, #8
 80059bc:	401a      	ands	r2, r3
 80059be:	2380      	movs	r3, #128	@ 0x80
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d101      	bne.n	80059ca <HAL_ADC_Init+0xa6>
 80059c6:	2301      	movs	r3, #1
 80059c8:	e000      	b.n	80059cc <HAL_ADC_Init+0xa8>
 80059ca:	2300      	movs	r3, #0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d116      	bne.n	80059fe <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	2218      	movs	r2, #24
 80059d8:	4393      	bics	r3, r2
 80059da:	0019      	movs	r1, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	0899      	lsrs	r1, r3, #2
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4964      	ldr	r1, [pc, #400]	@ (8005b9c <HAL_ADC_Init+0x278>)
 8005a0a:	400a      	ands	r2, r1
 8005a0c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	7e1b      	ldrb	r3, [r3, #24]
 8005a12:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	7e5b      	ldrb	r3, [r3, #25]
 8005a18:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005a1a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	7e9b      	ldrb	r3, [r3, #26]
 8005a20:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8005a22:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d002      	beq.n	8005a32 <HAL_ADC_Init+0x10e>
 8005a2c:	2380      	movs	r3, #128	@ 0x80
 8005a2e:	015b      	lsls	r3, r3, #5
 8005a30:	e000      	b.n	8005a34 <HAL_ADC_Init+0x110>
 8005a32:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005a34:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8005a3a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d101      	bne.n	8005a48 <HAL_ADC_Init+0x124>
 8005a44:	2304      	movs	r3, #4
 8005a46:	e000      	b.n	8005a4a <HAL_ADC_Init+0x126>
 8005a48:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8005a4a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2124      	movs	r1, #36	@ 0x24
 8005a50:	5c5b      	ldrb	r3, [r3, r1]
 8005a52:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8005a54:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	7edb      	ldrb	r3, [r3, #27]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d115      	bne.n	8005a90 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	7e9b      	ldrb	r3, [r3, #26]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d105      	bne.n	8005a78 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2280      	movs	r2, #128	@ 0x80
 8005a70:	0252      	lsls	r2, r2, #9
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60bb      	str	r3, [r7, #8]
 8005a76:	e00b      	b.n	8005a90 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a88:	2201      	movs	r2, #1
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	69da      	ldr	r2, [r3, #28]
 8005a94:	23c2      	movs	r3, #194	@ 0xc2
 8005a96:	33ff      	adds	r3, #255	@ 0xff
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d007      	beq.n	8005aac <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68d9      	ldr	r1, [r3, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ac0:	2380      	movs	r3, #128	@ 0x80
 8005ac2:	055b      	lsls	r3, r3, #21
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d01b      	beq.n	8005b00 <HAL_ADC_Init+0x1dc>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d017      	beq.n	8005b00 <HAL_ADC_Init+0x1dc>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d013      	beq.n	8005b00 <HAL_ADC_Init+0x1dc>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d00f      	beq.n	8005b00 <HAL_ADC_Init+0x1dc>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d00b      	beq.n	8005b00 <HAL_ADC_Init+0x1dc>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aec:	2b05      	cmp	r3, #5
 8005aee:	d007      	beq.n	8005b00 <HAL_ADC_Init+0x1dc>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af4:	2b06      	cmp	r3, #6
 8005af6:	d003      	beq.n	8005b00 <HAL_ADC_Init+0x1dc>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afc:	2b07      	cmp	r3, #7
 8005afe:	d112      	bne.n	8005b26 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	695a      	ldr	r2, [r3, #20]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2107      	movs	r1, #7
 8005b0c:	438a      	bics	r2, r1
 8005b0e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6959      	ldr	r1, [r3, #20]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1a:	2207      	movs	r2, #7
 8005b1c:	401a      	ands	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba0 <HAL_ADC_Init+0x27c>)
 8005b2e:	4013      	ands	r3, r2
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d10b      	bne.n	8005b4e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b40:	2203      	movs	r2, #3
 8005b42:	4393      	bics	r3, r2
 8005b44:	2201      	movs	r2, #1
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005b4c:	e01c      	b.n	8005b88 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b52:	2212      	movs	r2, #18
 8005b54:	4393      	bics	r3, r2
 8005b56:	2210      	movs	r2, #16
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b62:	2201      	movs	r2, #1
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8005b6a:	230f      	movs	r3, #15
 8005b6c:	18fb      	adds	r3, r7, r3
 8005b6e:	2201      	movs	r2, #1
 8005b70:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005b72:	e009      	b.n	8005b88 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b78:	2210      	movs	r2, #16
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8005b80:	230f      	movs	r3, #15
 8005b82:	18fb      	adds	r3, r7, r3
 8005b84:	2201      	movs	r2, #1
 8005b86:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005b88:	230f      	movs	r3, #15
 8005b8a:	18fb      	adds	r3, r7, r3
 8005b8c:	781b      	ldrb	r3, [r3, #0]
}
 8005b8e:	0018      	movs	r0, r3
 8005b90:	46bd      	mov	sp, r7
 8005b92:	b004      	add	sp, #16
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	46c0      	nop			@ (mov r8, r8)
 8005b98:	fffffefd 	.word	0xfffffefd
 8005b9c:	fffe0219 	.word	0xfffe0219
 8005ba0:	833fffe7 	.word	0x833fffe7

08005ba4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bae:	230f      	movs	r3, #15
 8005bb0:	18fb      	adds	r3, r7, r3
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bbe:	2380      	movs	r3, #128	@ 0x80
 8005bc0:	055b      	lsls	r3, r3, #21
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d011      	beq.n	8005bea <HAL_ADC_ConfigChannel+0x46>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d00d      	beq.n	8005bea <HAL_ADC_ConfigChannel+0x46>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d009      	beq.n	8005bea <HAL_ADC_ConfigChannel+0x46>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d005      	beq.n	8005bea <HAL_ADC_ConfigChannel+0x46>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d001      	beq.n	8005bea <HAL_ADC_ConfigChannel+0x46>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2234      	movs	r2, #52	@ 0x34
 8005bee:	5c9b      	ldrb	r3, [r3, r2]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_ADC_ConfigChannel+0x54>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e0d0      	b.n	8005d9a <HAL_ADC_ConfigChannel+0x1f6>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2234      	movs	r2, #52	@ 0x34
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	2204      	movs	r2, #4
 8005c08:	4013      	ands	r3, r2
 8005c0a:	d000      	beq.n	8005c0e <HAL_ADC_ConfigChannel+0x6a>
 8005c0c:	e0b4      	b.n	8005d78 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	4a64      	ldr	r2, [pc, #400]	@ (8005da4 <HAL_ADC_ConfigChannel+0x200>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d100      	bne.n	8005c1a <HAL_ADC_ConfigChannel+0x76>
 8005c18:	e082      	b.n	8005d20 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2201      	movs	r2, #1
 8005c26:	409a      	lsls	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c34:	2380      	movs	r3, #128	@ 0x80
 8005c36:	055b      	lsls	r3, r3, #21
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d037      	beq.n	8005cac <HAL_ADC_ConfigChannel+0x108>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d033      	beq.n	8005cac <HAL_ADC_ConfigChannel+0x108>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d02f      	beq.n	8005cac <HAL_ADC_ConfigChannel+0x108>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d02b      	beq.n	8005cac <HAL_ADC_ConfigChannel+0x108>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d027      	beq.n	8005cac <HAL_ADC_ConfigChannel+0x108>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c60:	2b05      	cmp	r3, #5
 8005c62:	d023      	beq.n	8005cac <HAL_ADC_ConfigChannel+0x108>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c68:	2b06      	cmp	r3, #6
 8005c6a:	d01f      	beq.n	8005cac <HAL_ADC_ConfigChannel+0x108>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c70:	2b07      	cmp	r3, #7
 8005c72:	d01b      	beq.n	8005cac <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	2107      	movs	r1, #7
 8005c80:	400b      	ands	r3, r1
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d012      	beq.n	8005cac <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	695a      	ldr	r2, [r3, #20]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2107      	movs	r1, #7
 8005c92:	438a      	bics	r2, r1
 8005c94:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6959      	ldr	r1, [r3, #20]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	2207      	movs	r2, #7
 8005ca2:	401a      	ands	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b10      	cmp	r3, #16
 8005cb2:	d007      	beq.n	8005cc4 <HAL_ADC_ConfigChannel+0x120>
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b11      	cmp	r3, #17
 8005cba:	d003      	beq.n	8005cc4 <HAL_ADC_ConfigChannel+0x120>
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b12      	cmp	r3, #18
 8005cc2:	d163      	bne.n	8005d8c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8005cc4:	4b38      	ldr	r3, [pc, #224]	@ (8005da8 <HAL_ADC_ConfigChannel+0x204>)
 8005cc6:	6819      	ldr	r1, [r3, #0]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b10      	cmp	r3, #16
 8005cce:	d009      	beq.n	8005ce4 <HAL_ADC_ConfigChannel+0x140>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b11      	cmp	r3, #17
 8005cd6:	d102      	bne.n	8005cde <HAL_ADC_ConfigChannel+0x13a>
 8005cd8:	2380      	movs	r3, #128	@ 0x80
 8005cda:	03db      	lsls	r3, r3, #15
 8005cdc:	e004      	b.n	8005ce8 <HAL_ADC_ConfigChannel+0x144>
 8005cde:	2380      	movs	r3, #128	@ 0x80
 8005ce0:	045b      	lsls	r3, r3, #17
 8005ce2:	e001      	b.n	8005ce8 <HAL_ADC_ConfigChannel+0x144>
 8005ce4:	2380      	movs	r3, #128	@ 0x80
 8005ce6:	041b      	lsls	r3, r3, #16
 8005ce8:	4a2f      	ldr	r2, [pc, #188]	@ (8005da8 <HAL_ADC_ConfigChannel+0x204>)
 8005cea:	430b      	orrs	r3, r1
 8005cec:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b10      	cmp	r3, #16
 8005cf4:	d14a      	bne.n	8005d8c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8005dac <HAL_ADC_ConfigChannel+0x208>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	492d      	ldr	r1, [pc, #180]	@ (8005db0 <HAL_ADC_ConfigChannel+0x20c>)
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	f7fa fa0b 	bl	8000118 <__udivsi3>
 8005d02:	0003      	movs	r3, r0
 8005d04:	001a      	movs	r2, r3
 8005d06:	0013      	movs	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	189b      	adds	r3, r3, r2
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005d10:	e002      	b.n	8005d18 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	3b01      	subs	r3, #1
 8005d16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1f9      	bne.n	8005d12 <HAL_ADC_ConfigChannel+0x16e>
 8005d1e:	e035      	b.n	8005d8c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	4099      	lsls	r1, r3
 8005d2e:	000b      	movs	r3, r1
 8005d30:	43d9      	mvns	r1, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	400a      	ands	r2, r1
 8005d38:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b10      	cmp	r3, #16
 8005d40:	d007      	beq.n	8005d52 <HAL_ADC_ConfigChannel+0x1ae>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b11      	cmp	r3, #17
 8005d48:	d003      	beq.n	8005d52 <HAL_ADC_ConfigChannel+0x1ae>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b12      	cmp	r3, #18
 8005d50:	d11c      	bne.n	8005d8c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8005d52:	4b15      	ldr	r3, [pc, #84]	@ (8005da8 <HAL_ADC_ConfigChannel+0x204>)
 8005d54:	6819      	ldr	r1, [r3, #0]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b10      	cmp	r3, #16
 8005d5c:	d007      	beq.n	8005d6e <HAL_ADC_ConfigChannel+0x1ca>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b11      	cmp	r3, #17
 8005d64:	d101      	bne.n	8005d6a <HAL_ADC_ConfigChannel+0x1c6>
 8005d66:	4b13      	ldr	r3, [pc, #76]	@ (8005db4 <HAL_ADC_ConfigChannel+0x210>)
 8005d68:	e002      	b.n	8005d70 <HAL_ADC_ConfigChannel+0x1cc>
 8005d6a:	4b13      	ldr	r3, [pc, #76]	@ (8005db8 <HAL_ADC_ConfigChannel+0x214>)
 8005d6c:	e000      	b.n	8005d70 <HAL_ADC_ConfigChannel+0x1cc>
 8005d6e:	4b13      	ldr	r3, [pc, #76]	@ (8005dbc <HAL_ADC_ConfigChannel+0x218>)
 8005d70:	4a0d      	ldr	r2, [pc, #52]	@ (8005da8 <HAL_ADC_ConfigChannel+0x204>)
 8005d72:	400b      	ands	r3, r1
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	e009      	b.n	8005d8c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8005d84:	230f      	movs	r3, #15
 8005d86:	18fb      	adds	r3, r7, r3
 8005d88:	2201      	movs	r2, #1
 8005d8a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2234      	movs	r2, #52	@ 0x34
 8005d90:	2100      	movs	r1, #0
 8005d92:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8005d94:	230f      	movs	r3, #15
 8005d96:	18fb      	adds	r3, r7, r3
 8005d98:	781b      	ldrb	r3, [r3, #0]
}
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	b004      	add	sp, #16
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	46c0      	nop			@ (mov r8, r8)
 8005da4:	00001001 	.word	0x00001001
 8005da8:	40012708 	.word	0x40012708
 8005dac:	20000014 	.word	0x20000014
 8005db0:	000f4240 	.word	0x000f4240
 8005db4:	ffbfffff 	.word	0xffbfffff
 8005db8:	feffffff 	.word	0xfeffffff
 8005dbc:	ff7fffff 	.word	0xff7fffff

08005dc0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e0f0      	b.n	8005fb4 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	5c9b      	ldrb	r3, [r3, r2]
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d103      	bne.n	8005de6 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	0018      	movs	r0, r3
 8005de2:	f7ff fb4f 	bl	8005484 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2101      	movs	r1, #1
 8005df2:	430a      	orrs	r2, r1
 8005df4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005df6:	f7ff fd8b 	bl	8005910 <HAL_GetTick>
 8005dfa:	0003      	movs	r3, r0
 8005dfc:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005dfe:	e013      	b.n	8005e28 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005e00:	f7ff fd86 	bl	8005910 <HAL_GetTick>
 8005e04:	0002      	movs	r2, r0
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b0a      	cmp	r3, #10
 8005e0c:	d90c      	bls.n	8005e28 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e12:	2280      	movs	r2, #128	@ 0x80
 8005e14:	0292      	lsls	r2, r2, #10
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	2105      	movs	r1, #5
 8005e22:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e0c5      	b.n	8005fb4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	4013      	ands	r3, r2
 8005e32:	d0e5      	beq.n	8005e00 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2102      	movs	r1, #2
 8005e40:	438a      	bics	r2, r1
 8005e42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e44:	f7ff fd64 	bl	8005910 <HAL_GetTick>
 8005e48:	0003      	movs	r3, r0
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005e4c:	e013      	b.n	8005e76 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005e4e:	f7ff fd5f 	bl	8005910 <HAL_GetTick>
 8005e52:	0002      	movs	r2, r0
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b0a      	cmp	r3, #10
 8005e5a:	d90c      	bls.n	8005e76 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e60:	2280      	movs	r2, #128	@ 0x80
 8005e62:	0292      	lsls	r2, r2, #10
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	2105      	movs	r1, #5
 8005e70:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e09e      	b.n	8005fb4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	4013      	ands	r3, r2
 8005e80:	d1e5      	bne.n	8005e4e <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	7e1b      	ldrb	r3, [r3, #24]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d108      	bne.n	8005e9c <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2180      	movs	r1, #128	@ 0x80
 8005e96:	430a      	orrs	r2, r1
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	e007      	b.n	8005eac <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2180      	movs	r1, #128	@ 0x80
 8005ea8:	438a      	bics	r2, r1
 8005eaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	7e5b      	ldrb	r3, [r3, #25]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d108      	bne.n	8005ec6 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2140      	movs	r1, #64	@ 0x40
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	e007      	b.n	8005ed6 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2140      	movs	r1, #64	@ 0x40
 8005ed2:	438a      	bics	r2, r1
 8005ed4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	7e9b      	ldrb	r3, [r3, #26]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d108      	bne.n	8005ef0 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2120      	movs	r1, #32
 8005eea:	430a      	orrs	r2, r1
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	e007      	b.n	8005f00 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2120      	movs	r1, #32
 8005efc:	438a      	bics	r2, r1
 8005efe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	7edb      	ldrb	r3, [r3, #27]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d108      	bne.n	8005f1a <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2110      	movs	r1, #16
 8005f14:	438a      	bics	r2, r1
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	e007      	b.n	8005f2a <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2110      	movs	r1, #16
 8005f26:	430a      	orrs	r2, r1
 8005f28:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	7f1b      	ldrb	r3, [r3, #28]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d108      	bne.n	8005f44 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2108      	movs	r1, #8
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	e007      	b.n	8005f54 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2108      	movs	r1, #8
 8005f50:	438a      	bics	r2, r1
 8005f52:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	7f5b      	ldrb	r3, [r3, #29]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d108      	bne.n	8005f6e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2104      	movs	r1, #4
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	e007      	b.n	8005f7e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2104      	movs	r1, #4
 8005f7a:	438a      	bics	r2, r1
 8005f7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	431a      	orrs	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	0011      	movs	r1, r2
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	1e5a      	subs	r2, r3, #1
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2220      	movs	r2, #32
 8005fae:	2101      	movs	r1, #1
 8005fb0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	0018      	movs	r0, r3
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	b004      	add	sp, #16
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fbc:	b590      	push	{r4, r7, lr}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	0002      	movs	r2, r0
 8005fc4:	6039      	str	r1, [r7, #0]
 8005fc6:	1dfb      	adds	r3, r7, #7
 8005fc8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005fca:	1dfb      	adds	r3, r7, #7
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fd0:	d828      	bhi.n	8006024 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005fd2:	4a2f      	ldr	r2, [pc, #188]	@ (8006090 <__NVIC_SetPriority+0xd4>)
 8005fd4:	1dfb      	adds	r3, r7, #7
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	b25b      	sxtb	r3, r3
 8005fda:	089b      	lsrs	r3, r3, #2
 8005fdc:	33c0      	adds	r3, #192	@ 0xc0
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	589b      	ldr	r3, [r3, r2]
 8005fe2:	1dfa      	adds	r2, r7, #7
 8005fe4:	7812      	ldrb	r2, [r2, #0]
 8005fe6:	0011      	movs	r1, r2
 8005fe8:	2203      	movs	r2, #3
 8005fea:	400a      	ands	r2, r1
 8005fec:	00d2      	lsls	r2, r2, #3
 8005fee:	21ff      	movs	r1, #255	@ 0xff
 8005ff0:	4091      	lsls	r1, r2
 8005ff2:	000a      	movs	r2, r1
 8005ff4:	43d2      	mvns	r2, r2
 8005ff6:	401a      	ands	r2, r3
 8005ff8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	019b      	lsls	r3, r3, #6
 8005ffe:	22ff      	movs	r2, #255	@ 0xff
 8006000:	401a      	ands	r2, r3
 8006002:	1dfb      	adds	r3, r7, #7
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	0018      	movs	r0, r3
 8006008:	2303      	movs	r3, #3
 800600a:	4003      	ands	r3, r0
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006010:	481f      	ldr	r0, [pc, #124]	@ (8006090 <__NVIC_SetPriority+0xd4>)
 8006012:	1dfb      	adds	r3, r7, #7
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	b25b      	sxtb	r3, r3
 8006018:	089b      	lsrs	r3, r3, #2
 800601a:	430a      	orrs	r2, r1
 800601c:	33c0      	adds	r3, #192	@ 0xc0
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006022:	e031      	b.n	8006088 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006024:	4a1b      	ldr	r2, [pc, #108]	@ (8006094 <__NVIC_SetPriority+0xd8>)
 8006026:	1dfb      	adds	r3, r7, #7
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	0019      	movs	r1, r3
 800602c:	230f      	movs	r3, #15
 800602e:	400b      	ands	r3, r1
 8006030:	3b08      	subs	r3, #8
 8006032:	089b      	lsrs	r3, r3, #2
 8006034:	3306      	adds	r3, #6
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	18d3      	adds	r3, r2, r3
 800603a:	3304      	adds	r3, #4
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	1dfa      	adds	r2, r7, #7
 8006040:	7812      	ldrb	r2, [r2, #0]
 8006042:	0011      	movs	r1, r2
 8006044:	2203      	movs	r2, #3
 8006046:	400a      	ands	r2, r1
 8006048:	00d2      	lsls	r2, r2, #3
 800604a:	21ff      	movs	r1, #255	@ 0xff
 800604c:	4091      	lsls	r1, r2
 800604e:	000a      	movs	r2, r1
 8006050:	43d2      	mvns	r2, r2
 8006052:	401a      	ands	r2, r3
 8006054:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	019b      	lsls	r3, r3, #6
 800605a:	22ff      	movs	r2, #255	@ 0xff
 800605c:	401a      	ands	r2, r3
 800605e:	1dfb      	adds	r3, r7, #7
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	0018      	movs	r0, r3
 8006064:	2303      	movs	r3, #3
 8006066:	4003      	ands	r3, r0
 8006068:	00db      	lsls	r3, r3, #3
 800606a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800606c:	4809      	ldr	r0, [pc, #36]	@ (8006094 <__NVIC_SetPriority+0xd8>)
 800606e:	1dfb      	adds	r3, r7, #7
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	001c      	movs	r4, r3
 8006074:	230f      	movs	r3, #15
 8006076:	4023      	ands	r3, r4
 8006078:	3b08      	subs	r3, #8
 800607a:	089b      	lsrs	r3, r3, #2
 800607c:	430a      	orrs	r2, r1
 800607e:	3306      	adds	r3, #6
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	18c3      	adds	r3, r0, r3
 8006084:	3304      	adds	r3, #4
 8006086:	601a      	str	r2, [r3, #0]
}
 8006088:	46c0      	nop			@ (mov r8, r8)
 800608a:	46bd      	mov	sp, r7
 800608c:	b003      	add	sp, #12
 800608e:	bd90      	pop	{r4, r7, pc}
 8006090:	e000e100 	.word	0xe000e100
 8006094:	e000ed00 	.word	0xe000ed00

08006098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	1e5a      	subs	r2, r3, #1
 80060a4:	2380      	movs	r3, #128	@ 0x80
 80060a6:	045b      	lsls	r3, r3, #17
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d301      	bcc.n	80060b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060ac:	2301      	movs	r3, #1
 80060ae:	e010      	b.n	80060d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060b0:	4b0a      	ldr	r3, [pc, #40]	@ (80060dc <SysTick_Config+0x44>)
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	3a01      	subs	r2, #1
 80060b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060b8:	2301      	movs	r3, #1
 80060ba:	425b      	negs	r3, r3
 80060bc:	2103      	movs	r1, #3
 80060be:	0018      	movs	r0, r3
 80060c0:	f7ff ff7c 	bl	8005fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060c4:	4b05      	ldr	r3, [pc, #20]	@ (80060dc <SysTick_Config+0x44>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060ca:	4b04      	ldr	r3, [pc, #16]	@ (80060dc <SysTick_Config+0x44>)
 80060cc:	2207      	movs	r2, #7
 80060ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	0018      	movs	r0, r3
 80060d4:	46bd      	mov	sp, r7
 80060d6:	b002      	add	sp, #8
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	46c0      	nop			@ (mov r8, r8)
 80060dc:	e000e010 	.word	0xe000e010

080060e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60b9      	str	r1, [r7, #8]
 80060e8:	607a      	str	r2, [r7, #4]
 80060ea:	210f      	movs	r1, #15
 80060ec:	187b      	adds	r3, r7, r1
 80060ee:	1c02      	adds	r2, r0, #0
 80060f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	187b      	adds	r3, r7, r1
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	b25b      	sxtb	r3, r3
 80060fa:	0011      	movs	r1, r2
 80060fc:	0018      	movs	r0, r3
 80060fe:	f7ff ff5d 	bl	8005fbc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8006102:	46c0      	nop			@ (mov r8, r8)
 8006104:	46bd      	mov	sp, r7
 8006106:	b004      	add	sp, #16
 8006108:	bd80      	pop	{r7, pc}

0800610a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	0018      	movs	r0, r3
 8006116:	f7ff ffbf 	bl	8006098 <SysTick_Config>
 800611a:	0003      	movs	r3, r0
}
 800611c:	0018      	movs	r0, r3
 800611e:	46bd      	mov	sp, r7
 8006120:	b002      	add	sp, #8
 8006122:	bd80      	pop	{r7, pc}

08006124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006132:	e155      	b.n	80063e0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2101      	movs	r1, #1
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	4091      	lsls	r1, r2
 800613e:	000a      	movs	r2, r1
 8006140:	4013      	ands	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d100      	bne.n	800614c <HAL_GPIO_Init+0x28>
 800614a:	e146      	b.n	80063da <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	2203      	movs	r2, #3
 8006152:	4013      	ands	r3, r2
 8006154:	2b01      	cmp	r3, #1
 8006156:	d005      	beq.n	8006164 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	2203      	movs	r2, #3
 800615e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006160:	2b02      	cmp	r3, #2
 8006162:	d130      	bne.n	80061c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	2203      	movs	r2, #3
 8006170:	409a      	lsls	r2, r3
 8006172:	0013      	movs	r3, r2
 8006174:	43da      	mvns	r2, r3
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	4013      	ands	r3, r2
 800617a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	409a      	lsls	r2, r3
 8006186:	0013      	movs	r3, r2
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4313      	orrs	r3, r2
 800618c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800619a:	2201      	movs	r2, #1
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	409a      	lsls	r2, r3
 80061a0:	0013      	movs	r3, r2
 80061a2:	43da      	mvns	r2, r3
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	4013      	ands	r3, r2
 80061a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	091b      	lsrs	r3, r3, #4
 80061b0:	2201      	movs	r2, #1
 80061b2:	401a      	ands	r2, r3
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	409a      	lsls	r2, r3
 80061b8:	0013      	movs	r3, r2
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	4313      	orrs	r3, r2
 80061be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2203      	movs	r2, #3
 80061cc:	4013      	ands	r3, r2
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d017      	beq.n	8006202 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	2203      	movs	r2, #3
 80061de:	409a      	lsls	r2, r3
 80061e0:	0013      	movs	r3, r2
 80061e2:	43da      	mvns	r2, r3
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	4013      	ands	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	689a      	ldr	r2, [r3, #8]
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	409a      	lsls	r2, r3
 80061f4:	0013      	movs	r3, r2
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2203      	movs	r2, #3
 8006208:	4013      	ands	r3, r2
 800620a:	2b02      	cmp	r3, #2
 800620c:	d123      	bne.n	8006256 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	08da      	lsrs	r2, r3, #3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	3208      	adds	r2, #8
 8006216:	0092      	lsls	r2, r2, #2
 8006218:	58d3      	ldr	r3, [r2, r3]
 800621a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2207      	movs	r2, #7
 8006220:	4013      	ands	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	220f      	movs	r2, #15
 8006226:	409a      	lsls	r2, r3
 8006228:	0013      	movs	r3, r2
 800622a:	43da      	mvns	r2, r3
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	4013      	ands	r3, r2
 8006230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	691a      	ldr	r2, [r3, #16]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2107      	movs	r1, #7
 800623a:	400b      	ands	r3, r1
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	409a      	lsls	r2, r3
 8006240:	0013      	movs	r3, r2
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	4313      	orrs	r3, r2
 8006246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	08da      	lsrs	r2, r3, #3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	3208      	adds	r2, #8
 8006250:	0092      	lsls	r2, r2, #2
 8006252:	6939      	ldr	r1, [r7, #16]
 8006254:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	005b      	lsls	r3, r3, #1
 8006260:	2203      	movs	r2, #3
 8006262:	409a      	lsls	r2, r3
 8006264:	0013      	movs	r3, r2
 8006266:	43da      	mvns	r2, r3
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	4013      	ands	r3, r2
 800626c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	2203      	movs	r2, #3
 8006274:	401a      	ands	r2, r3
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	005b      	lsls	r3, r3, #1
 800627a:	409a      	lsls	r2, r3
 800627c:	0013      	movs	r3, r2
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	23c0      	movs	r3, #192	@ 0xc0
 8006290:	029b      	lsls	r3, r3, #10
 8006292:	4013      	ands	r3, r2
 8006294:	d100      	bne.n	8006298 <HAL_GPIO_Init+0x174>
 8006296:	e0a0      	b.n	80063da <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006298:	4b57      	ldr	r3, [pc, #348]	@ (80063f8 <HAL_GPIO_Init+0x2d4>)
 800629a:	699a      	ldr	r2, [r3, #24]
 800629c:	4b56      	ldr	r3, [pc, #344]	@ (80063f8 <HAL_GPIO_Init+0x2d4>)
 800629e:	2101      	movs	r1, #1
 80062a0:	430a      	orrs	r2, r1
 80062a2:	619a      	str	r2, [r3, #24]
 80062a4:	4b54      	ldr	r3, [pc, #336]	@ (80063f8 <HAL_GPIO_Init+0x2d4>)
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	2201      	movs	r2, #1
 80062aa:	4013      	ands	r3, r2
 80062ac:	60bb      	str	r3, [r7, #8]
 80062ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80062b0:	4a52      	ldr	r2, [pc, #328]	@ (80063fc <HAL_GPIO_Init+0x2d8>)
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	089b      	lsrs	r3, r3, #2
 80062b6:	3302      	adds	r3, #2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	589b      	ldr	r3, [r3, r2]
 80062bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2203      	movs	r2, #3
 80062c2:	4013      	ands	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	220f      	movs	r2, #15
 80062c8:	409a      	lsls	r2, r3
 80062ca:	0013      	movs	r3, r2
 80062cc:	43da      	mvns	r2, r3
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	4013      	ands	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	2390      	movs	r3, #144	@ 0x90
 80062d8:	05db      	lsls	r3, r3, #23
 80062da:	429a      	cmp	r2, r3
 80062dc:	d019      	beq.n	8006312 <HAL_GPIO_Init+0x1ee>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a47      	ldr	r2, [pc, #284]	@ (8006400 <HAL_GPIO_Init+0x2dc>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d013      	beq.n	800630e <HAL_GPIO_Init+0x1ea>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a46      	ldr	r2, [pc, #280]	@ (8006404 <HAL_GPIO_Init+0x2e0>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00d      	beq.n	800630a <HAL_GPIO_Init+0x1e6>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a45      	ldr	r2, [pc, #276]	@ (8006408 <HAL_GPIO_Init+0x2e4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d007      	beq.n	8006306 <HAL_GPIO_Init+0x1e2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a44      	ldr	r2, [pc, #272]	@ (800640c <HAL_GPIO_Init+0x2e8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d101      	bne.n	8006302 <HAL_GPIO_Init+0x1de>
 80062fe:	2304      	movs	r3, #4
 8006300:	e008      	b.n	8006314 <HAL_GPIO_Init+0x1f0>
 8006302:	2305      	movs	r3, #5
 8006304:	e006      	b.n	8006314 <HAL_GPIO_Init+0x1f0>
 8006306:	2303      	movs	r3, #3
 8006308:	e004      	b.n	8006314 <HAL_GPIO_Init+0x1f0>
 800630a:	2302      	movs	r3, #2
 800630c:	e002      	b.n	8006314 <HAL_GPIO_Init+0x1f0>
 800630e:	2301      	movs	r3, #1
 8006310:	e000      	b.n	8006314 <HAL_GPIO_Init+0x1f0>
 8006312:	2300      	movs	r3, #0
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	2103      	movs	r1, #3
 8006318:	400a      	ands	r2, r1
 800631a:	0092      	lsls	r2, r2, #2
 800631c:	4093      	lsls	r3, r2
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	4313      	orrs	r3, r2
 8006322:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006324:	4935      	ldr	r1, [pc, #212]	@ (80063fc <HAL_GPIO_Init+0x2d8>)
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	089b      	lsrs	r3, r3, #2
 800632a:	3302      	adds	r3, #2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006332:	4b37      	ldr	r3, [pc, #220]	@ (8006410 <HAL_GPIO_Init+0x2ec>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	43da      	mvns	r2, r3
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	4013      	ands	r3, r2
 8006340:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	2380      	movs	r3, #128	@ 0x80
 8006348:	035b      	lsls	r3, r3, #13
 800634a:	4013      	ands	r3, r2
 800634c:	d003      	beq.n	8006356 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4313      	orrs	r3, r2
 8006354:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006356:	4b2e      	ldr	r3, [pc, #184]	@ (8006410 <HAL_GPIO_Init+0x2ec>)
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800635c:	4b2c      	ldr	r3, [pc, #176]	@ (8006410 <HAL_GPIO_Init+0x2ec>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	43da      	mvns	r2, r3
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	4013      	ands	r3, r2
 800636a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	2380      	movs	r3, #128	@ 0x80
 8006372:	039b      	lsls	r3, r3, #14
 8006374:	4013      	ands	r3, r2
 8006376:	d003      	beq.n	8006380 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	4313      	orrs	r3, r2
 800637e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006380:	4b23      	ldr	r3, [pc, #140]	@ (8006410 <HAL_GPIO_Init+0x2ec>)
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8006386:	4b22      	ldr	r3, [pc, #136]	@ (8006410 <HAL_GPIO_Init+0x2ec>)
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	43da      	mvns	r2, r3
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	4013      	ands	r3, r2
 8006394:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	2380      	movs	r3, #128	@ 0x80
 800639c:	029b      	lsls	r3, r3, #10
 800639e:	4013      	ands	r3, r2
 80063a0:	d003      	beq.n	80063aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80063aa:	4b19      	ldr	r3, [pc, #100]	@ (8006410 <HAL_GPIO_Init+0x2ec>)
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80063b0:	4b17      	ldr	r3, [pc, #92]	@ (8006410 <HAL_GPIO_Init+0x2ec>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	43da      	mvns	r2, r3
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	4013      	ands	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	2380      	movs	r3, #128	@ 0x80
 80063c6:	025b      	lsls	r3, r3, #9
 80063c8:	4013      	ands	r3, r2
 80063ca:	d003      	beq.n	80063d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80063d4:	4b0e      	ldr	r3, [pc, #56]	@ (8006410 <HAL_GPIO_Init+0x2ec>)
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	3301      	adds	r3, #1
 80063de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	40da      	lsrs	r2, r3
 80063e8:	1e13      	subs	r3, r2, #0
 80063ea:	d000      	beq.n	80063ee <HAL_GPIO_Init+0x2ca>
 80063ec:	e6a2      	b.n	8006134 <HAL_GPIO_Init+0x10>
  } 
}
 80063ee:	46c0      	nop			@ (mov r8, r8)
 80063f0:	46c0      	nop			@ (mov r8, r8)
 80063f2:	46bd      	mov	sp, r7
 80063f4:	b006      	add	sp, #24
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	40021000 	.word	0x40021000
 80063fc:	40010000 	.word	0x40010000
 8006400:	48000400 	.word	0x48000400
 8006404:	48000800 	.word	0x48000800
 8006408:	48000c00 	.word	0x48000c00
 800640c:	48001000 	.word	0x48001000
 8006410:	40010400 	.word	0x40010400

08006414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	0008      	movs	r0, r1
 800641e:	0011      	movs	r1, r2
 8006420:	1cbb      	adds	r3, r7, #2
 8006422:	1c02      	adds	r2, r0, #0
 8006424:	801a      	strh	r2, [r3, #0]
 8006426:	1c7b      	adds	r3, r7, #1
 8006428:	1c0a      	adds	r2, r1, #0
 800642a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800642c:	1c7b      	adds	r3, r7, #1
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d004      	beq.n	800643e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006434:	1cbb      	adds	r3, r7, #2
 8006436:	881a      	ldrh	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800643c:	e003      	b.n	8006446 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800643e:	1cbb      	adds	r3, r7, #2
 8006440:	881a      	ldrh	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006446:	46c0      	nop			@ (mov r8, r8)
 8006448:	46bd      	mov	sp, r7
 800644a:	b002      	add	sp, #8
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d102      	bne.n	8006464 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	f000 fb76 	bl	8006b50 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2201      	movs	r2, #1
 800646a:	4013      	ands	r3, r2
 800646c:	d100      	bne.n	8006470 <HAL_RCC_OscConfig+0x20>
 800646e:	e08e      	b.n	800658e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006470:	4bc5      	ldr	r3, [pc, #788]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	220c      	movs	r2, #12
 8006476:	4013      	ands	r3, r2
 8006478:	2b04      	cmp	r3, #4
 800647a:	d00e      	beq.n	800649a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800647c:	4bc2      	ldr	r3, [pc, #776]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	220c      	movs	r2, #12
 8006482:	4013      	ands	r3, r2
 8006484:	2b08      	cmp	r3, #8
 8006486:	d117      	bne.n	80064b8 <HAL_RCC_OscConfig+0x68>
 8006488:	4bbf      	ldr	r3, [pc, #764]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	23c0      	movs	r3, #192	@ 0xc0
 800648e:	025b      	lsls	r3, r3, #9
 8006490:	401a      	ands	r2, r3
 8006492:	2380      	movs	r3, #128	@ 0x80
 8006494:	025b      	lsls	r3, r3, #9
 8006496:	429a      	cmp	r2, r3
 8006498:	d10e      	bne.n	80064b8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800649a:	4bbb      	ldr	r3, [pc, #748]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	2380      	movs	r3, #128	@ 0x80
 80064a0:	029b      	lsls	r3, r3, #10
 80064a2:	4013      	ands	r3, r2
 80064a4:	d100      	bne.n	80064a8 <HAL_RCC_OscConfig+0x58>
 80064a6:	e071      	b.n	800658c <HAL_RCC_OscConfig+0x13c>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d000      	beq.n	80064b2 <HAL_RCC_OscConfig+0x62>
 80064b0:	e06c      	b.n	800658c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	f000 fb4c 	bl	8006b50 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d107      	bne.n	80064d0 <HAL_RCC_OscConfig+0x80>
 80064c0:	4bb1      	ldr	r3, [pc, #708]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	4bb0      	ldr	r3, [pc, #704]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 80064c6:	2180      	movs	r1, #128	@ 0x80
 80064c8:	0249      	lsls	r1, r1, #9
 80064ca:	430a      	orrs	r2, r1
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	e02f      	b.n	8006530 <HAL_RCC_OscConfig+0xe0>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10c      	bne.n	80064f2 <HAL_RCC_OscConfig+0xa2>
 80064d8:	4bab      	ldr	r3, [pc, #684]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	4baa      	ldr	r3, [pc, #680]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 80064de:	49ab      	ldr	r1, [pc, #684]	@ (800678c <HAL_RCC_OscConfig+0x33c>)
 80064e0:	400a      	ands	r2, r1
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	4ba8      	ldr	r3, [pc, #672]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	4ba7      	ldr	r3, [pc, #668]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 80064ea:	49a9      	ldr	r1, [pc, #676]	@ (8006790 <HAL_RCC_OscConfig+0x340>)
 80064ec:	400a      	ands	r2, r1
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	e01e      	b.n	8006530 <HAL_RCC_OscConfig+0xe0>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2b05      	cmp	r3, #5
 80064f8:	d10e      	bne.n	8006518 <HAL_RCC_OscConfig+0xc8>
 80064fa:	4ba3      	ldr	r3, [pc, #652]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	4ba2      	ldr	r3, [pc, #648]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 8006500:	2180      	movs	r1, #128	@ 0x80
 8006502:	02c9      	lsls	r1, r1, #11
 8006504:	430a      	orrs	r2, r1
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	4b9f      	ldr	r3, [pc, #636]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	4b9e      	ldr	r3, [pc, #632]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 800650e:	2180      	movs	r1, #128	@ 0x80
 8006510:	0249      	lsls	r1, r1, #9
 8006512:	430a      	orrs	r2, r1
 8006514:	601a      	str	r2, [r3, #0]
 8006516:	e00b      	b.n	8006530 <HAL_RCC_OscConfig+0xe0>
 8006518:	4b9b      	ldr	r3, [pc, #620]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	4b9a      	ldr	r3, [pc, #616]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 800651e:	499b      	ldr	r1, [pc, #620]	@ (800678c <HAL_RCC_OscConfig+0x33c>)
 8006520:	400a      	ands	r2, r1
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	4b98      	ldr	r3, [pc, #608]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	4b97      	ldr	r3, [pc, #604]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 800652a:	4999      	ldr	r1, [pc, #612]	@ (8006790 <HAL_RCC_OscConfig+0x340>)
 800652c:	400a      	ands	r2, r1
 800652e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d014      	beq.n	8006562 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006538:	f7ff f9ea 	bl	8005910 <HAL_GetTick>
 800653c:	0003      	movs	r3, r0
 800653e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006540:	e008      	b.n	8006554 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006542:	f7ff f9e5 	bl	8005910 <HAL_GetTick>
 8006546:	0002      	movs	r2, r0
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b64      	cmp	r3, #100	@ 0x64
 800654e:	d901      	bls.n	8006554 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e2fd      	b.n	8006b50 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006554:	4b8c      	ldr	r3, [pc, #560]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	2380      	movs	r3, #128	@ 0x80
 800655a:	029b      	lsls	r3, r3, #10
 800655c:	4013      	ands	r3, r2
 800655e:	d0f0      	beq.n	8006542 <HAL_RCC_OscConfig+0xf2>
 8006560:	e015      	b.n	800658e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006562:	f7ff f9d5 	bl	8005910 <HAL_GetTick>
 8006566:	0003      	movs	r3, r0
 8006568:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800656a:	e008      	b.n	800657e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800656c:	f7ff f9d0 	bl	8005910 <HAL_GetTick>
 8006570:	0002      	movs	r2, r0
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b64      	cmp	r3, #100	@ 0x64
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e2e8      	b.n	8006b50 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800657e:	4b82      	ldr	r3, [pc, #520]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	2380      	movs	r3, #128	@ 0x80
 8006584:	029b      	lsls	r3, r3, #10
 8006586:	4013      	ands	r3, r2
 8006588:	d1f0      	bne.n	800656c <HAL_RCC_OscConfig+0x11c>
 800658a:	e000      	b.n	800658e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800658c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2202      	movs	r2, #2
 8006594:	4013      	ands	r3, r2
 8006596:	d100      	bne.n	800659a <HAL_RCC_OscConfig+0x14a>
 8006598:	e06c      	b.n	8006674 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800659a:	4b7b      	ldr	r3, [pc, #492]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	220c      	movs	r2, #12
 80065a0:	4013      	ands	r3, r2
 80065a2:	d00e      	beq.n	80065c2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80065a4:	4b78      	ldr	r3, [pc, #480]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	220c      	movs	r2, #12
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	d11f      	bne.n	80065f0 <HAL_RCC_OscConfig+0x1a0>
 80065b0:	4b75      	ldr	r3, [pc, #468]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	23c0      	movs	r3, #192	@ 0xc0
 80065b6:	025b      	lsls	r3, r3, #9
 80065b8:	401a      	ands	r2, r3
 80065ba:	2380      	movs	r3, #128	@ 0x80
 80065bc:	021b      	lsls	r3, r3, #8
 80065be:	429a      	cmp	r2, r3
 80065c0:	d116      	bne.n	80065f0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065c2:	4b71      	ldr	r3, [pc, #452]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2202      	movs	r2, #2
 80065c8:	4013      	ands	r3, r2
 80065ca:	d005      	beq.n	80065d8 <HAL_RCC_OscConfig+0x188>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d001      	beq.n	80065d8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e2bb      	b.n	8006b50 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065d8:	4b6b      	ldr	r3, [pc, #428]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	22f8      	movs	r2, #248	@ 0xf8
 80065de:	4393      	bics	r3, r2
 80065e0:	0019      	movs	r1, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	00da      	lsls	r2, r3, #3
 80065e8:	4b67      	ldr	r3, [pc, #412]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 80065ea:	430a      	orrs	r2, r1
 80065ec:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065ee:	e041      	b.n	8006674 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d024      	beq.n	8006642 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065f8:	4b63      	ldr	r3, [pc, #396]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	4b62      	ldr	r3, [pc, #392]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 80065fe:	2101      	movs	r1, #1
 8006600:	430a      	orrs	r2, r1
 8006602:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006604:	f7ff f984 	bl	8005910 <HAL_GetTick>
 8006608:	0003      	movs	r3, r0
 800660a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800660c:	e008      	b.n	8006620 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800660e:	f7ff f97f 	bl	8005910 <HAL_GetTick>
 8006612:	0002      	movs	r2, r0
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d901      	bls.n	8006620 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e297      	b.n	8006b50 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006620:	4b59      	ldr	r3, [pc, #356]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2202      	movs	r2, #2
 8006626:	4013      	ands	r3, r2
 8006628:	d0f1      	beq.n	800660e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800662a:	4b57      	ldr	r3, [pc, #348]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	22f8      	movs	r2, #248	@ 0xf8
 8006630:	4393      	bics	r3, r2
 8006632:	0019      	movs	r1, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	00da      	lsls	r2, r3, #3
 800663a:	4b53      	ldr	r3, [pc, #332]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 800663c:	430a      	orrs	r2, r1
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	e018      	b.n	8006674 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006642:	4b51      	ldr	r3, [pc, #324]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	4b50      	ldr	r3, [pc, #320]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 8006648:	2101      	movs	r1, #1
 800664a:	438a      	bics	r2, r1
 800664c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800664e:	f7ff f95f 	bl	8005910 <HAL_GetTick>
 8006652:	0003      	movs	r3, r0
 8006654:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006656:	e008      	b.n	800666a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006658:	f7ff f95a 	bl	8005910 <HAL_GetTick>
 800665c:	0002      	movs	r2, r0
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e272      	b.n	8006b50 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800666a:	4b47      	ldr	r3, [pc, #284]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2202      	movs	r2, #2
 8006670:	4013      	ands	r3, r2
 8006672:	d1f1      	bne.n	8006658 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2208      	movs	r2, #8
 800667a:	4013      	ands	r3, r2
 800667c:	d036      	beq.n	80066ec <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d019      	beq.n	80066ba <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006686:	4b40      	ldr	r3, [pc, #256]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 8006688:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800668a:	4b3f      	ldr	r3, [pc, #252]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 800668c:	2101      	movs	r1, #1
 800668e:	430a      	orrs	r2, r1
 8006690:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006692:	f7ff f93d 	bl	8005910 <HAL_GetTick>
 8006696:	0003      	movs	r3, r0
 8006698:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800669c:	f7ff f938 	bl	8005910 <HAL_GetTick>
 80066a0:	0002      	movs	r2, r0
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e250      	b.n	8006b50 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066ae:	4b36      	ldr	r3, [pc, #216]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 80066b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b2:	2202      	movs	r2, #2
 80066b4:	4013      	ands	r3, r2
 80066b6:	d0f1      	beq.n	800669c <HAL_RCC_OscConfig+0x24c>
 80066b8:	e018      	b.n	80066ec <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066ba:	4b33      	ldr	r3, [pc, #204]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 80066bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066be:	4b32      	ldr	r3, [pc, #200]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 80066c0:	2101      	movs	r1, #1
 80066c2:	438a      	bics	r2, r1
 80066c4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066c6:	f7ff f923 	bl	8005910 <HAL_GetTick>
 80066ca:	0003      	movs	r3, r0
 80066cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066d0:	f7ff f91e 	bl	8005910 <HAL_GetTick>
 80066d4:	0002      	movs	r2, r0
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e236      	b.n	8006b50 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066e2:	4b29      	ldr	r3, [pc, #164]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 80066e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e6:	2202      	movs	r2, #2
 80066e8:	4013      	ands	r3, r2
 80066ea:	d1f1      	bne.n	80066d0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2204      	movs	r2, #4
 80066f2:	4013      	ands	r3, r2
 80066f4:	d100      	bne.n	80066f8 <HAL_RCC_OscConfig+0x2a8>
 80066f6:	e0b5      	b.n	8006864 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066f8:	201f      	movs	r0, #31
 80066fa:	183b      	adds	r3, r7, r0
 80066fc:	2200      	movs	r2, #0
 80066fe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006700:	4b21      	ldr	r3, [pc, #132]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	2380      	movs	r3, #128	@ 0x80
 8006706:	055b      	lsls	r3, r3, #21
 8006708:	4013      	ands	r3, r2
 800670a:	d110      	bne.n	800672e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800670c:	4b1e      	ldr	r3, [pc, #120]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 800670e:	69da      	ldr	r2, [r3, #28]
 8006710:	4b1d      	ldr	r3, [pc, #116]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 8006712:	2180      	movs	r1, #128	@ 0x80
 8006714:	0549      	lsls	r1, r1, #21
 8006716:	430a      	orrs	r2, r1
 8006718:	61da      	str	r2, [r3, #28]
 800671a:	4b1b      	ldr	r3, [pc, #108]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 800671c:	69da      	ldr	r2, [r3, #28]
 800671e:	2380      	movs	r3, #128	@ 0x80
 8006720:	055b      	lsls	r3, r3, #21
 8006722:	4013      	ands	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006728:	183b      	adds	r3, r7, r0
 800672a:	2201      	movs	r2, #1
 800672c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800672e:	4b19      	ldr	r3, [pc, #100]	@ (8006794 <HAL_RCC_OscConfig+0x344>)
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	2380      	movs	r3, #128	@ 0x80
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	4013      	ands	r3, r2
 8006738:	d11a      	bne.n	8006770 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800673a:	4b16      	ldr	r3, [pc, #88]	@ (8006794 <HAL_RCC_OscConfig+0x344>)
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	4b15      	ldr	r3, [pc, #84]	@ (8006794 <HAL_RCC_OscConfig+0x344>)
 8006740:	2180      	movs	r1, #128	@ 0x80
 8006742:	0049      	lsls	r1, r1, #1
 8006744:	430a      	orrs	r2, r1
 8006746:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006748:	f7ff f8e2 	bl	8005910 <HAL_GetTick>
 800674c:	0003      	movs	r3, r0
 800674e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006750:	e008      	b.n	8006764 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006752:	f7ff f8dd 	bl	8005910 <HAL_GetTick>
 8006756:	0002      	movs	r2, r0
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	2b64      	cmp	r3, #100	@ 0x64
 800675e:	d901      	bls.n	8006764 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e1f5      	b.n	8006b50 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006764:	4b0b      	ldr	r3, [pc, #44]	@ (8006794 <HAL_RCC_OscConfig+0x344>)
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	2380      	movs	r3, #128	@ 0x80
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	4013      	ands	r3, r2
 800676e:	d0f0      	beq.n	8006752 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d10f      	bne.n	8006798 <HAL_RCC_OscConfig+0x348>
 8006778:	4b03      	ldr	r3, [pc, #12]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 800677a:	6a1a      	ldr	r2, [r3, #32]
 800677c:	4b02      	ldr	r3, [pc, #8]	@ (8006788 <HAL_RCC_OscConfig+0x338>)
 800677e:	2101      	movs	r1, #1
 8006780:	430a      	orrs	r2, r1
 8006782:	621a      	str	r2, [r3, #32]
 8006784:	e036      	b.n	80067f4 <HAL_RCC_OscConfig+0x3a4>
 8006786:	46c0      	nop			@ (mov r8, r8)
 8006788:	40021000 	.word	0x40021000
 800678c:	fffeffff 	.word	0xfffeffff
 8006790:	fffbffff 	.word	0xfffbffff
 8006794:	40007000 	.word	0x40007000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10c      	bne.n	80067ba <HAL_RCC_OscConfig+0x36a>
 80067a0:	4bca      	ldr	r3, [pc, #808]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80067a2:	6a1a      	ldr	r2, [r3, #32]
 80067a4:	4bc9      	ldr	r3, [pc, #804]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80067a6:	2101      	movs	r1, #1
 80067a8:	438a      	bics	r2, r1
 80067aa:	621a      	str	r2, [r3, #32]
 80067ac:	4bc7      	ldr	r3, [pc, #796]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80067ae:	6a1a      	ldr	r2, [r3, #32]
 80067b0:	4bc6      	ldr	r3, [pc, #792]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80067b2:	2104      	movs	r1, #4
 80067b4:	438a      	bics	r2, r1
 80067b6:	621a      	str	r2, [r3, #32]
 80067b8:	e01c      	b.n	80067f4 <HAL_RCC_OscConfig+0x3a4>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	2b05      	cmp	r3, #5
 80067c0:	d10c      	bne.n	80067dc <HAL_RCC_OscConfig+0x38c>
 80067c2:	4bc2      	ldr	r3, [pc, #776]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80067c4:	6a1a      	ldr	r2, [r3, #32]
 80067c6:	4bc1      	ldr	r3, [pc, #772]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80067c8:	2104      	movs	r1, #4
 80067ca:	430a      	orrs	r2, r1
 80067cc:	621a      	str	r2, [r3, #32]
 80067ce:	4bbf      	ldr	r3, [pc, #764]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80067d0:	6a1a      	ldr	r2, [r3, #32]
 80067d2:	4bbe      	ldr	r3, [pc, #760]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80067d4:	2101      	movs	r1, #1
 80067d6:	430a      	orrs	r2, r1
 80067d8:	621a      	str	r2, [r3, #32]
 80067da:	e00b      	b.n	80067f4 <HAL_RCC_OscConfig+0x3a4>
 80067dc:	4bbb      	ldr	r3, [pc, #748]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80067de:	6a1a      	ldr	r2, [r3, #32]
 80067e0:	4bba      	ldr	r3, [pc, #744]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80067e2:	2101      	movs	r1, #1
 80067e4:	438a      	bics	r2, r1
 80067e6:	621a      	str	r2, [r3, #32]
 80067e8:	4bb8      	ldr	r3, [pc, #736]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80067ea:	6a1a      	ldr	r2, [r3, #32]
 80067ec:	4bb7      	ldr	r3, [pc, #732]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80067ee:	2104      	movs	r1, #4
 80067f0:	438a      	bics	r2, r1
 80067f2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d014      	beq.n	8006826 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067fc:	f7ff f888 	bl	8005910 <HAL_GetTick>
 8006800:	0003      	movs	r3, r0
 8006802:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006804:	e009      	b.n	800681a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006806:	f7ff f883 	bl	8005910 <HAL_GetTick>
 800680a:	0002      	movs	r2, r0
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	4aaf      	ldr	r2, [pc, #700]	@ (8006ad0 <HAL_RCC_OscConfig+0x680>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d901      	bls.n	800681a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e19a      	b.n	8006b50 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800681a:	4bac      	ldr	r3, [pc, #688]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	2202      	movs	r2, #2
 8006820:	4013      	ands	r3, r2
 8006822:	d0f0      	beq.n	8006806 <HAL_RCC_OscConfig+0x3b6>
 8006824:	e013      	b.n	800684e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006826:	f7ff f873 	bl	8005910 <HAL_GetTick>
 800682a:	0003      	movs	r3, r0
 800682c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800682e:	e009      	b.n	8006844 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006830:	f7ff f86e 	bl	8005910 <HAL_GetTick>
 8006834:	0002      	movs	r2, r0
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	4aa5      	ldr	r2, [pc, #660]	@ (8006ad0 <HAL_RCC_OscConfig+0x680>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d901      	bls.n	8006844 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e185      	b.n	8006b50 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006844:	4ba1      	ldr	r3, [pc, #644]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	2202      	movs	r2, #2
 800684a:	4013      	ands	r3, r2
 800684c:	d1f0      	bne.n	8006830 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800684e:	231f      	movs	r3, #31
 8006850:	18fb      	adds	r3, r7, r3
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d105      	bne.n	8006864 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006858:	4b9c      	ldr	r3, [pc, #624]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 800685a:	69da      	ldr	r2, [r3, #28]
 800685c:	4b9b      	ldr	r3, [pc, #620]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 800685e:	499d      	ldr	r1, [pc, #628]	@ (8006ad4 <HAL_RCC_OscConfig+0x684>)
 8006860:	400a      	ands	r2, r1
 8006862:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2210      	movs	r2, #16
 800686a:	4013      	ands	r3, r2
 800686c:	d063      	beq.n	8006936 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d12a      	bne.n	80068cc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006876:	4b95      	ldr	r3, [pc, #596]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 8006878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800687a:	4b94      	ldr	r3, [pc, #592]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 800687c:	2104      	movs	r1, #4
 800687e:	430a      	orrs	r2, r1
 8006880:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006882:	4b92      	ldr	r3, [pc, #584]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 8006884:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006886:	4b91      	ldr	r3, [pc, #580]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 8006888:	2101      	movs	r1, #1
 800688a:	430a      	orrs	r2, r1
 800688c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800688e:	f7ff f83f 	bl	8005910 <HAL_GetTick>
 8006892:	0003      	movs	r3, r0
 8006894:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006896:	e008      	b.n	80068aa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006898:	f7ff f83a 	bl	8005910 <HAL_GetTick>
 800689c:	0002      	movs	r2, r0
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e152      	b.n	8006b50 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80068aa:	4b88      	ldr	r3, [pc, #544]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80068ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ae:	2202      	movs	r2, #2
 80068b0:	4013      	ands	r3, r2
 80068b2:	d0f1      	beq.n	8006898 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80068b4:	4b85      	ldr	r3, [pc, #532]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80068b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068b8:	22f8      	movs	r2, #248	@ 0xf8
 80068ba:	4393      	bics	r3, r2
 80068bc:	0019      	movs	r1, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	00da      	lsls	r2, r3, #3
 80068c4:	4b81      	ldr	r3, [pc, #516]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80068c6:	430a      	orrs	r2, r1
 80068c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80068ca:	e034      	b.n	8006936 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	3305      	adds	r3, #5
 80068d2:	d111      	bne.n	80068f8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80068d4:	4b7d      	ldr	r3, [pc, #500]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80068d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068d8:	4b7c      	ldr	r3, [pc, #496]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80068da:	2104      	movs	r1, #4
 80068dc:	438a      	bics	r2, r1
 80068de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80068e0:	4b7a      	ldr	r3, [pc, #488]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80068e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068e4:	22f8      	movs	r2, #248	@ 0xf8
 80068e6:	4393      	bics	r3, r2
 80068e8:	0019      	movs	r1, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	00da      	lsls	r2, r3, #3
 80068f0:	4b76      	ldr	r3, [pc, #472]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80068f2:	430a      	orrs	r2, r1
 80068f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80068f6:	e01e      	b.n	8006936 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80068f8:	4b74      	ldr	r3, [pc, #464]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80068fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068fc:	4b73      	ldr	r3, [pc, #460]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80068fe:	2104      	movs	r1, #4
 8006900:	430a      	orrs	r2, r1
 8006902:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006904:	4b71      	ldr	r3, [pc, #452]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 8006906:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006908:	4b70      	ldr	r3, [pc, #448]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 800690a:	2101      	movs	r1, #1
 800690c:	438a      	bics	r2, r1
 800690e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006910:	f7fe fffe 	bl	8005910 <HAL_GetTick>
 8006914:	0003      	movs	r3, r0
 8006916:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006918:	e008      	b.n	800692c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800691a:	f7fe fff9 	bl	8005910 <HAL_GetTick>
 800691e:	0002      	movs	r2, r0
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	2b02      	cmp	r3, #2
 8006926:	d901      	bls.n	800692c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e111      	b.n	8006b50 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800692c:	4b67      	ldr	r3, [pc, #412]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 800692e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006930:	2202      	movs	r2, #2
 8006932:	4013      	ands	r3, r2
 8006934:	d1f1      	bne.n	800691a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2220      	movs	r2, #32
 800693c:	4013      	ands	r3, r2
 800693e:	d05c      	beq.n	80069fa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006940:	4b62      	ldr	r3, [pc, #392]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	220c      	movs	r2, #12
 8006946:	4013      	ands	r3, r2
 8006948:	2b0c      	cmp	r3, #12
 800694a:	d00e      	beq.n	800696a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800694c:	4b5f      	ldr	r3, [pc, #380]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	220c      	movs	r2, #12
 8006952:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006954:	2b08      	cmp	r3, #8
 8006956:	d114      	bne.n	8006982 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006958:	4b5c      	ldr	r3, [pc, #368]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	23c0      	movs	r3, #192	@ 0xc0
 800695e:	025b      	lsls	r3, r3, #9
 8006960:	401a      	ands	r2, r3
 8006962:	23c0      	movs	r3, #192	@ 0xc0
 8006964:	025b      	lsls	r3, r3, #9
 8006966:	429a      	cmp	r2, r3
 8006968:	d10b      	bne.n	8006982 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800696a:	4b58      	ldr	r3, [pc, #352]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 800696c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800696e:	2380      	movs	r3, #128	@ 0x80
 8006970:	029b      	lsls	r3, r3, #10
 8006972:	4013      	ands	r3, r2
 8006974:	d040      	beq.n	80069f8 <HAL_RCC_OscConfig+0x5a8>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d03c      	beq.n	80069f8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e0e6      	b.n	8006b50 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d01b      	beq.n	80069c2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800698a:	4b50      	ldr	r3, [pc, #320]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 800698c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800698e:	4b4f      	ldr	r3, [pc, #316]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 8006990:	2180      	movs	r1, #128	@ 0x80
 8006992:	0249      	lsls	r1, r1, #9
 8006994:	430a      	orrs	r2, r1
 8006996:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006998:	f7fe ffba 	bl	8005910 <HAL_GetTick>
 800699c:	0003      	movs	r3, r0
 800699e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80069a0:	e008      	b.n	80069b4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069a2:	f7fe ffb5 	bl	8005910 <HAL_GetTick>
 80069a6:	0002      	movs	r2, r0
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d901      	bls.n	80069b4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e0cd      	b.n	8006b50 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80069b4:	4b45      	ldr	r3, [pc, #276]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80069b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069b8:	2380      	movs	r3, #128	@ 0x80
 80069ba:	029b      	lsls	r3, r3, #10
 80069bc:	4013      	ands	r3, r2
 80069be:	d0f0      	beq.n	80069a2 <HAL_RCC_OscConfig+0x552>
 80069c0:	e01b      	b.n	80069fa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80069c2:	4b42      	ldr	r3, [pc, #264]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80069c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069c6:	4b41      	ldr	r3, [pc, #260]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80069c8:	4943      	ldr	r1, [pc, #268]	@ (8006ad8 <HAL_RCC_OscConfig+0x688>)
 80069ca:	400a      	ands	r2, r1
 80069cc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ce:	f7fe ff9f 	bl	8005910 <HAL_GetTick>
 80069d2:	0003      	movs	r3, r0
 80069d4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069d8:	f7fe ff9a 	bl	8005910 <HAL_GetTick>
 80069dc:	0002      	movs	r2, r0
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e0b2      	b.n	8006b50 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80069ea:	4b38      	ldr	r3, [pc, #224]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 80069ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069ee:	2380      	movs	r3, #128	@ 0x80
 80069f0:	029b      	lsls	r3, r3, #10
 80069f2:	4013      	ands	r3, r2
 80069f4:	d1f0      	bne.n	80069d8 <HAL_RCC_OscConfig+0x588>
 80069f6:	e000      	b.n	80069fa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80069f8:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d100      	bne.n	8006a04 <HAL_RCC_OscConfig+0x5b4>
 8006a02:	e0a4      	b.n	8006b4e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a04:	4b31      	ldr	r3, [pc, #196]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	220c      	movs	r2, #12
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d100      	bne.n	8006a12 <HAL_RCC_OscConfig+0x5c2>
 8006a10:	e078      	b.n	8006b04 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d14c      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a1a:	4b2c      	ldr	r3, [pc, #176]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	4b2b      	ldr	r3, [pc, #172]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 8006a20:	492e      	ldr	r1, [pc, #184]	@ (8006adc <HAL_RCC_OscConfig+0x68c>)
 8006a22:	400a      	ands	r2, r1
 8006a24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a26:	f7fe ff73 	bl	8005910 <HAL_GetTick>
 8006a2a:	0003      	movs	r3, r0
 8006a2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a30:	f7fe ff6e 	bl	8005910 <HAL_GetTick>
 8006a34:	0002      	movs	r2, r0
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e086      	b.n	8006b50 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a42:	4b22      	ldr	r3, [pc, #136]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	2380      	movs	r3, #128	@ 0x80
 8006a48:	049b      	lsls	r3, r3, #18
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	d1f0      	bne.n	8006a30 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 8006a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a52:	220f      	movs	r2, #15
 8006a54:	4393      	bics	r3, r2
 8006a56:	0019      	movs	r1, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006a62:	4b1a      	ldr	r3, [pc, #104]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	4a1e      	ldr	r2, [pc, #120]	@ (8006ae0 <HAL_RCC_OscConfig+0x690>)
 8006a68:	4013      	ands	r3, r2
 8006a6a:	0019      	movs	r1, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a74:	431a      	orrs	r2, r3
 8006a76:	4b15      	ldr	r3, [pc, #84]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a7c:	4b13      	ldr	r3, [pc, #76]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	4b12      	ldr	r3, [pc, #72]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 8006a82:	2180      	movs	r1, #128	@ 0x80
 8006a84:	0449      	lsls	r1, r1, #17
 8006a86:	430a      	orrs	r2, r1
 8006a88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a8a:	f7fe ff41 	bl	8005910 <HAL_GetTick>
 8006a8e:	0003      	movs	r3, r0
 8006a90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a94:	f7fe ff3c 	bl	8005910 <HAL_GetTick>
 8006a98:	0002      	movs	r2, r0
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e054      	b.n	8006b50 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006aa6:	4b09      	ldr	r3, [pc, #36]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	2380      	movs	r3, #128	@ 0x80
 8006aac:	049b      	lsls	r3, r3, #18
 8006aae:	4013      	ands	r3, r2
 8006ab0:	d0f0      	beq.n	8006a94 <HAL_RCC_OscConfig+0x644>
 8006ab2:	e04c      	b.n	8006b4e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ab4:	4b05      	ldr	r3, [pc, #20]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	4b04      	ldr	r3, [pc, #16]	@ (8006acc <HAL_RCC_OscConfig+0x67c>)
 8006aba:	4908      	ldr	r1, [pc, #32]	@ (8006adc <HAL_RCC_OscConfig+0x68c>)
 8006abc:	400a      	ands	r2, r1
 8006abe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac0:	f7fe ff26 	bl	8005910 <HAL_GetTick>
 8006ac4:	0003      	movs	r3, r0
 8006ac6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ac8:	e015      	b.n	8006af6 <HAL_RCC_OscConfig+0x6a6>
 8006aca:	46c0      	nop			@ (mov r8, r8)
 8006acc:	40021000 	.word	0x40021000
 8006ad0:	00001388 	.word	0x00001388
 8006ad4:	efffffff 	.word	0xefffffff
 8006ad8:	fffeffff 	.word	0xfffeffff
 8006adc:	feffffff 	.word	0xfeffffff
 8006ae0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ae4:	f7fe ff14 	bl	8005910 <HAL_GetTick>
 8006ae8:	0002      	movs	r2, r0
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e02c      	b.n	8006b50 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006af6:	4b18      	ldr	r3, [pc, #96]	@ (8006b58 <HAL_RCC_OscConfig+0x708>)
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	2380      	movs	r3, #128	@ 0x80
 8006afc:	049b      	lsls	r3, r3, #18
 8006afe:	4013      	ands	r3, r2
 8006b00:	d1f0      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x694>
 8006b02:	e024      	b.n	8006b4e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d101      	bne.n	8006b10 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e01f      	b.n	8006b50 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006b10:	4b11      	ldr	r3, [pc, #68]	@ (8006b58 <HAL_RCC_OscConfig+0x708>)
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006b16:	4b10      	ldr	r3, [pc, #64]	@ (8006b58 <HAL_RCC_OscConfig+0x708>)
 8006b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	23c0      	movs	r3, #192	@ 0xc0
 8006b20:	025b      	lsls	r3, r3, #9
 8006b22:	401a      	ands	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d10e      	bne.n	8006b4a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	220f      	movs	r2, #15
 8006b30:	401a      	ands	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d107      	bne.n	8006b4a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	23f0      	movs	r3, #240	@ 0xf0
 8006b3e:	039b      	lsls	r3, r3, #14
 8006b40:	401a      	ands	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d001      	beq.n	8006b4e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e000      	b.n	8006b50 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	0018      	movs	r0, r3
 8006b52:	46bd      	mov	sp, r7
 8006b54:	b008      	add	sp, #32
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	40021000 	.word	0x40021000

08006b5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e0bf      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b70:	4b61      	ldr	r3, [pc, #388]	@ (8006cf8 <HAL_RCC_ClockConfig+0x19c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2201      	movs	r2, #1
 8006b76:	4013      	ands	r3, r2
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d911      	bls.n	8006ba2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b7e:	4b5e      	ldr	r3, [pc, #376]	@ (8006cf8 <HAL_RCC_ClockConfig+0x19c>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2201      	movs	r2, #1
 8006b84:	4393      	bics	r3, r2
 8006b86:	0019      	movs	r1, r3
 8006b88:	4b5b      	ldr	r3, [pc, #364]	@ (8006cf8 <HAL_RCC_ClockConfig+0x19c>)
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	430a      	orrs	r2, r1
 8006b8e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b90:	4b59      	ldr	r3, [pc, #356]	@ (8006cf8 <HAL_RCC_ClockConfig+0x19c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2201      	movs	r2, #1
 8006b96:	4013      	ands	r3, r2
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d001      	beq.n	8006ba2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e0a6      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	4013      	ands	r3, r2
 8006baa:	d015      	beq.n	8006bd8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2204      	movs	r2, #4
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	d006      	beq.n	8006bc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006bb6:	4b51      	ldr	r3, [pc, #324]	@ (8006cfc <HAL_RCC_ClockConfig+0x1a0>)
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	4b50      	ldr	r3, [pc, #320]	@ (8006cfc <HAL_RCC_ClockConfig+0x1a0>)
 8006bbc:	21e0      	movs	r1, #224	@ 0xe0
 8006bbe:	00c9      	lsls	r1, r1, #3
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bc4:	4b4d      	ldr	r3, [pc, #308]	@ (8006cfc <HAL_RCC_ClockConfig+0x1a0>)
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	22f0      	movs	r2, #240	@ 0xf0
 8006bca:	4393      	bics	r3, r2
 8006bcc:	0019      	movs	r1, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	689a      	ldr	r2, [r3, #8]
 8006bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8006cfc <HAL_RCC_ClockConfig+0x1a0>)
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	4013      	ands	r3, r2
 8006be0:	d04c      	beq.n	8006c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d107      	bne.n	8006bfa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bea:	4b44      	ldr	r3, [pc, #272]	@ (8006cfc <HAL_RCC_ClockConfig+0x1a0>)
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	2380      	movs	r3, #128	@ 0x80
 8006bf0:	029b      	lsls	r3, r3, #10
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	d120      	bne.n	8006c38 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e07a      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d107      	bne.n	8006c12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c02:	4b3e      	ldr	r3, [pc, #248]	@ (8006cfc <HAL_RCC_ClockConfig+0x1a0>)
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	2380      	movs	r3, #128	@ 0x80
 8006c08:	049b      	lsls	r3, r3, #18
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	d114      	bne.n	8006c38 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e06e      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d107      	bne.n	8006c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006c1a:	4b38      	ldr	r3, [pc, #224]	@ (8006cfc <HAL_RCC_ClockConfig+0x1a0>)
 8006c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c1e:	2380      	movs	r3, #128	@ 0x80
 8006c20:	029b      	lsls	r3, r3, #10
 8006c22:	4013      	ands	r3, r2
 8006c24:	d108      	bne.n	8006c38 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e062      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c2a:	4b34      	ldr	r3, [pc, #208]	@ (8006cfc <HAL_RCC_ClockConfig+0x1a0>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	4013      	ands	r3, r2
 8006c32:	d101      	bne.n	8006c38 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e05b      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c38:	4b30      	ldr	r3, [pc, #192]	@ (8006cfc <HAL_RCC_ClockConfig+0x1a0>)
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	2203      	movs	r2, #3
 8006c3e:	4393      	bics	r3, r2
 8006c40:	0019      	movs	r1, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	4b2d      	ldr	r3, [pc, #180]	@ (8006cfc <HAL_RCC_ClockConfig+0x1a0>)
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c4c:	f7fe fe60 	bl	8005910 <HAL_GetTick>
 8006c50:	0003      	movs	r3, r0
 8006c52:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c54:	e009      	b.n	8006c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c56:	f7fe fe5b 	bl	8005910 <HAL_GetTick>
 8006c5a:	0002      	movs	r2, r0
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	4a27      	ldr	r2, [pc, #156]	@ (8006d00 <HAL_RCC_ClockConfig+0x1a4>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e042      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c6a:	4b24      	ldr	r3, [pc, #144]	@ (8006cfc <HAL_RCC_ClockConfig+0x1a0>)
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	220c      	movs	r2, #12
 8006c70:	401a      	ands	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d1ec      	bne.n	8006c56 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8006cf8 <HAL_RCC_ClockConfig+0x19c>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2201      	movs	r2, #1
 8006c82:	4013      	ands	r3, r2
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d211      	bcs.n	8006cae <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8006cf8 <HAL_RCC_ClockConfig+0x19c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	4393      	bics	r3, r2
 8006c92:	0019      	movs	r1, r3
 8006c94:	4b18      	ldr	r3, [pc, #96]	@ (8006cf8 <HAL_RCC_ClockConfig+0x19c>)
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c9c:	4b16      	ldr	r3, [pc, #88]	@ (8006cf8 <HAL_RCC_ClockConfig+0x19c>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	683a      	ldr	r2, [r7, #0]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d001      	beq.n	8006cae <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e020      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2204      	movs	r2, #4
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	d009      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006cb8:	4b10      	ldr	r3, [pc, #64]	@ (8006cfc <HAL_RCC_ClockConfig+0x1a0>)
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	4a11      	ldr	r2, [pc, #68]	@ (8006d04 <HAL_RCC_ClockConfig+0x1a8>)
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	0019      	movs	r1, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006cfc <HAL_RCC_ClockConfig+0x1a0>)
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006ccc:	f000 f820 	bl	8006d10 <HAL_RCC_GetSysClockFreq>
 8006cd0:	0001      	movs	r1, r0
 8006cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cfc <HAL_RCC_ClockConfig+0x1a0>)
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	091b      	lsrs	r3, r3, #4
 8006cd8:	220f      	movs	r2, #15
 8006cda:	4013      	ands	r3, r2
 8006cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8006d08 <HAL_RCC_ClockConfig+0x1ac>)
 8006cde:	5cd3      	ldrb	r3, [r2, r3]
 8006ce0:	000a      	movs	r2, r1
 8006ce2:	40da      	lsrs	r2, r3
 8006ce4:	4b09      	ldr	r3, [pc, #36]	@ (8006d0c <HAL_RCC_ClockConfig+0x1b0>)
 8006ce6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006ce8:	2003      	movs	r0, #3
 8006cea:	f7fe fdcb 	bl	8005884 <HAL_InitTick>
  
  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	b004      	add	sp, #16
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	40022000 	.word	0x40022000
 8006cfc:	40021000 	.word	0x40021000
 8006d00:	00001388 	.word	0x00001388
 8006d04:	fffff8ff 	.word	0xfffff8ff
 8006d08:	08009f58 	.word	0x08009f58
 8006d0c:	20000014 	.word	0x20000014

08006d10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60bb      	str	r3, [r7, #8]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	617b      	str	r3, [r7, #20]
 8006d22:	2300      	movs	r3, #0
 8006d24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8006de0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	220c      	movs	r2, #12
 8006d34:	4013      	ands	r3, r2
 8006d36:	2b0c      	cmp	r3, #12
 8006d38:	d046      	beq.n	8006dc8 <HAL_RCC_GetSysClockFreq+0xb8>
 8006d3a:	d848      	bhi.n	8006dce <HAL_RCC_GetSysClockFreq+0xbe>
 8006d3c:	2b04      	cmp	r3, #4
 8006d3e:	d002      	beq.n	8006d46 <HAL_RCC_GetSysClockFreq+0x36>
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d003      	beq.n	8006d4c <HAL_RCC_GetSysClockFreq+0x3c>
 8006d44:	e043      	b.n	8006dce <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006d46:	4b27      	ldr	r3, [pc, #156]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006d48:	613b      	str	r3, [r7, #16]
      break;
 8006d4a:	e043      	b.n	8006dd4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	0c9b      	lsrs	r3, r3, #18
 8006d50:	220f      	movs	r2, #15
 8006d52:	4013      	ands	r3, r2
 8006d54:	4a24      	ldr	r2, [pc, #144]	@ (8006de8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8006d56:	5cd3      	ldrb	r3, [r2, r3]
 8006d58:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006d5a:	4b21      	ldr	r3, [pc, #132]	@ (8006de0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5e:	220f      	movs	r2, #15
 8006d60:	4013      	ands	r3, r2
 8006d62:	4a22      	ldr	r2, [pc, #136]	@ (8006dec <HAL_RCC_GetSysClockFreq+0xdc>)
 8006d64:	5cd3      	ldrb	r3, [r2, r3]
 8006d66:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	23c0      	movs	r3, #192	@ 0xc0
 8006d6c:	025b      	lsls	r3, r3, #9
 8006d6e:	401a      	ands	r2, r3
 8006d70:	2380      	movs	r3, #128	@ 0x80
 8006d72:	025b      	lsls	r3, r3, #9
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d109      	bne.n	8006d8c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006d78:	68b9      	ldr	r1, [r7, #8]
 8006d7a:	481a      	ldr	r0, [pc, #104]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006d7c:	f7f9 f9cc 	bl	8000118 <__udivsi3>
 8006d80:	0003      	movs	r3, r0
 8006d82:	001a      	movs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4353      	muls	r3, r2
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	e01a      	b.n	8006dc2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	23c0      	movs	r3, #192	@ 0xc0
 8006d90:	025b      	lsls	r3, r3, #9
 8006d92:	401a      	ands	r2, r3
 8006d94:	23c0      	movs	r3, #192	@ 0xc0
 8006d96:	025b      	lsls	r3, r3, #9
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d109      	bne.n	8006db0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006d9c:	68b9      	ldr	r1, [r7, #8]
 8006d9e:	4814      	ldr	r0, [pc, #80]	@ (8006df0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8006da0:	f7f9 f9ba 	bl	8000118 <__udivsi3>
 8006da4:	0003      	movs	r3, r0
 8006da6:	001a      	movs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4353      	muls	r3, r2
 8006dac:	617b      	str	r3, [r7, #20]
 8006dae:	e008      	b.n	8006dc2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006db0:	68b9      	ldr	r1, [r7, #8]
 8006db2:	4810      	ldr	r0, [pc, #64]	@ (8006df4 <HAL_RCC_GetSysClockFreq+0xe4>)
 8006db4:	f7f9 f9b0 	bl	8000118 <__udivsi3>
 8006db8:	0003      	movs	r3, r0
 8006dba:	001a      	movs	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4353      	muls	r3, r2
 8006dc0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	613b      	str	r3, [r7, #16]
      break;
 8006dc6:	e005      	b.n	8006dd4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006dc8:	4b09      	ldr	r3, [pc, #36]	@ (8006df0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8006dca:	613b      	str	r3, [r7, #16]
      break;
 8006dcc:	e002      	b.n	8006dd4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006dce:	4b09      	ldr	r3, [pc, #36]	@ (8006df4 <HAL_RCC_GetSysClockFreq+0xe4>)
 8006dd0:	613b      	str	r3, [r7, #16]
      break;
 8006dd2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006dd4:	693b      	ldr	r3, [r7, #16]
}
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	b006      	add	sp, #24
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	46c0      	nop			@ (mov r8, r8)
 8006de0:	40021000 	.word	0x40021000
 8006de4:	00989680 	.word	0x00989680
 8006de8:	08009f70 	.word	0x08009f70
 8006dec:	08009f80 	.word	0x08009f80
 8006df0:	02dc6c00 	.word	0x02dc6c00
 8006df4:	007a1200 	.word	0x007a1200

08006df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006dfc:	4b02      	ldr	r3, [pc, #8]	@ (8006e08 <HAL_RCC_GetHCLKFreq+0x10>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
}
 8006e00:	0018      	movs	r0, r3
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	46c0      	nop			@ (mov r8, r8)
 8006e08:	20000014 	.word	0x20000014

08006e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006e10:	f7ff fff2 	bl	8006df8 <HAL_RCC_GetHCLKFreq>
 8006e14:	0001      	movs	r1, r0
 8006e16:	4b06      	ldr	r3, [pc, #24]	@ (8006e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	0a1b      	lsrs	r3, r3, #8
 8006e1c:	2207      	movs	r2, #7
 8006e1e:	4013      	ands	r3, r2
 8006e20:	4a04      	ldr	r2, [pc, #16]	@ (8006e34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e22:	5cd3      	ldrb	r3, [r2, r3]
 8006e24:	40d9      	lsrs	r1, r3
 8006e26:	000b      	movs	r3, r1
}    
 8006e28:	0018      	movs	r0, r3
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	46c0      	nop			@ (mov r8, r8)
 8006e30:	40021000 	.word	0x40021000
 8006e34:	08009f68 	.word	0x08009f68

08006e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e40:	2300      	movs	r3, #0
 8006e42:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006e44:	2300      	movs	r3, #0
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	2380      	movs	r3, #128	@ 0x80
 8006e4e:	025b      	lsls	r3, r3, #9
 8006e50:	4013      	ands	r3, r2
 8006e52:	d100      	bne.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006e54:	e08e      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006e56:	2017      	movs	r0, #23
 8006e58:	183b      	adds	r3, r7, r0
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e5e:	4b6e      	ldr	r3, [pc, #440]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e60:	69da      	ldr	r2, [r3, #28]
 8006e62:	2380      	movs	r3, #128	@ 0x80
 8006e64:	055b      	lsls	r3, r3, #21
 8006e66:	4013      	ands	r3, r2
 8006e68:	d110      	bne.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e6a:	4b6b      	ldr	r3, [pc, #428]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e6c:	69da      	ldr	r2, [r3, #28]
 8006e6e:	4b6a      	ldr	r3, [pc, #424]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e70:	2180      	movs	r1, #128	@ 0x80
 8006e72:	0549      	lsls	r1, r1, #21
 8006e74:	430a      	orrs	r2, r1
 8006e76:	61da      	str	r2, [r3, #28]
 8006e78:	4b67      	ldr	r3, [pc, #412]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e7a:	69da      	ldr	r2, [r3, #28]
 8006e7c:	2380      	movs	r3, #128	@ 0x80
 8006e7e:	055b      	lsls	r3, r3, #21
 8006e80:	4013      	ands	r3, r2
 8006e82:	60bb      	str	r3, [r7, #8]
 8006e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e86:	183b      	adds	r3, r7, r0
 8006e88:	2201      	movs	r2, #1
 8006e8a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e8c:	4b63      	ldr	r3, [pc, #396]	@ (800701c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	2380      	movs	r3, #128	@ 0x80
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	4013      	ands	r3, r2
 8006e96:	d11a      	bne.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e98:	4b60      	ldr	r3, [pc, #384]	@ (800701c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	4b5f      	ldr	r3, [pc, #380]	@ (800701c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006e9e:	2180      	movs	r1, #128	@ 0x80
 8006ea0:	0049      	lsls	r1, r1, #1
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ea6:	f7fe fd33 	bl	8005910 <HAL_GetTick>
 8006eaa:	0003      	movs	r3, r0
 8006eac:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eae:	e008      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eb0:	f7fe fd2e 	bl	8005910 <HAL_GetTick>
 8006eb4:	0002      	movs	r2, r0
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b64      	cmp	r3, #100	@ 0x64
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e0a6      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ec2:	4b56      	ldr	r3, [pc, #344]	@ (800701c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	2380      	movs	r3, #128	@ 0x80
 8006ec8:	005b      	lsls	r3, r3, #1
 8006eca:	4013      	ands	r3, r2
 8006ecc:	d0f0      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ece:	4b52      	ldr	r3, [pc, #328]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ed0:	6a1a      	ldr	r2, [r3, #32]
 8006ed2:	23c0      	movs	r3, #192	@ 0xc0
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d034      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	23c0      	movs	r3, #192	@ 0xc0
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4013      	ands	r3, r2
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d02c      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ef0:	4b49      	ldr	r3, [pc, #292]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	4a4a      	ldr	r2, [pc, #296]	@ (8007020 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006efa:	4b47      	ldr	r3, [pc, #284]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006efc:	6a1a      	ldr	r2, [r3, #32]
 8006efe:	4b46      	ldr	r3, [pc, #280]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f00:	2180      	movs	r1, #128	@ 0x80
 8006f02:	0249      	lsls	r1, r1, #9
 8006f04:	430a      	orrs	r2, r1
 8006f06:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f08:	4b43      	ldr	r3, [pc, #268]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f0a:	6a1a      	ldr	r2, [r3, #32]
 8006f0c:	4b42      	ldr	r3, [pc, #264]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f0e:	4945      	ldr	r1, [pc, #276]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006f10:	400a      	ands	r2, r1
 8006f12:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006f14:	4b40      	ldr	r3, [pc, #256]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	4013      	ands	r3, r2
 8006f20:	d013      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f22:	f7fe fcf5 	bl	8005910 <HAL_GetTick>
 8006f26:	0003      	movs	r3, r0
 8006f28:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f2a:	e009      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f2c:	f7fe fcf0 	bl	8005910 <HAL_GetTick>
 8006f30:	0002      	movs	r2, r0
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	4a3c      	ldr	r2, [pc, #240]	@ (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d901      	bls.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e067      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f40:	4b35      	ldr	r3, [pc, #212]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	2202      	movs	r2, #2
 8006f46:	4013      	ands	r3, r2
 8006f48:	d0f0      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f4a:	4b33      	ldr	r3, [pc, #204]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	4a34      	ldr	r2, [pc, #208]	@ (8007020 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006f50:	4013      	ands	r3, r2
 8006f52:	0019      	movs	r1, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	4b2f      	ldr	r3, [pc, #188]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006f5e:	2317      	movs	r3, #23
 8006f60:	18fb      	adds	r3, r7, r3
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d105      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f68:	4b2b      	ldr	r3, [pc, #172]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f6a:	69da      	ldr	r2, [r3, #28]
 8006f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f6e:	492f      	ldr	r1, [pc, #188]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006f70:	400a      	ands	r2, r1
 8006f72:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	d009      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f7e:	4b26      	ldr	r3, [pc, #152]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f82:	2203      	movs	r2, #3
 8006f84:	4393      	bics	r3, r2
 8006f86:	0019      	movs	r1, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	4b22      	ldr	r3, [pc, #136]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2202      	movs	r2, #2
 8006f98:	4013      	ands	r3, r2
 8006f9a:	d009      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa0:	4a23      	ldr	r2, [pc, #140]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	0019      	movs	r1, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68da      	ldr	r2, [r3, #12]
 8006faa:	4b1b      	ldr	r3, [pc, #108]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006fac:	430a      	orrs	r2, r1
 8006fae:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	2380      	movs	r3, #128	@ 0x80
 8006fb6:	02db      	lsls	r3, r3, #11
 8006fb8:	4013      	ands	r3, r2
 8006fba:	d009      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006fbc:	4b16      	ldr	r3, [pc, #88]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	0019      	movs	r1, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	691a      	ldr	r2, [r3, #16]
 8006fca:	4b13      	ldr	r3, [pc, #76]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	d009      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fda:	4b0f      	ldr	r3, [pc, #60]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fde:	2210      	movs	r2, #16
 8006fe0:	4393      	bics	r3, r2
 8006fe2:	0019      	movs	r1, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	695a      	ldr	r2, [r3, #20]
 8006fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006fea:	430a      	orrs	r2, r1
 8006fec:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	2380      	movs	r3, #128	@ 0x80
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	d009      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ffa:	4b07      	ldr	r3, [pc, #28]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ffe:	2240      	movs	r2, #64	@ 0x40
 8007000:	4393      	bics	r3, r2
 8007002:	0019      	movs	r1, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	699a      	ldr	r2, [r3, #24]
 8007008:	4b03      	ldr	r3, [pc, #12]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800700a:	430a      	orrs	r2, r1
 800700c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	0018      	movs	r0, r3
 8007012:	46bd      	mov	sp, r7
 8007014:	b006      	add	sp, #24
 8007016:	bd80      	pop	{r7, pc}
 8007018:	40021000 	.word	0x40021000
 800701c:	40007000 	.word	0x40007000
 8007020:	fffffcff 	.word	0xfffffcff
 8007024:	fffeffff 	.word	0xfffeffff
 8007028:	00001388 	.word	0x00001388
 800702c:	efffffff 	.word	0xefffffff
 8007030:	fffcffff 	.word	0xfffcffff
 8007034:	fff3ffff 	.word	0xfff3ffff

08007038 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e0a8      	b.n	800719c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800704e:	2b00      	cmp	r3, #0
 8007050:	d109      	bne.n	8007066 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	2382      	movs	r3, #130	@ 0x82
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	429a      	cmp	r2, r3
 800705c:	d009      	beq.n	8007072 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	61da      	str	r2, [r3, #28]
 8007064:	e005      	b.n	8007072 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	225d      	movs	r2, #93	@ 0x5d
 800707c:	5c9b      	ldrb	r3, [r3, r2]
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	d107      	bne.n	8007094 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	225c      	movs	r2, #92	@ 0x5c
 8007088:	2100      	movs	r1, #0
 800708a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	0018      	movs	r0, r3
 8007090:	f7fe fa46 	bl	8005520 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	225d      	movs	r2, #93	@ 0x5d
 8007098:	2102      	movs	r1, #2
 800709a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2140      	movs	r1, #64	@ 0x40
 80070a8:	438a      	bics	r2, r1
 80070aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	23e0      	movs	r3, #224	@ 0xe0
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d902      	bls.n	80070be <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80070b8:	2300      	movs	r3, #0
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	e002      	b.n	80070c4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80070be:	2380      	movs	r3, #128	@ 0x80
 80070c0:	015b      	lsls	r3, r3, #5
 80070c2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68da      	ldr	r2, [r3, #12]
 80070c8:	23f0      	movs	r3, #240	@ 0xf0
 80070ca:	011b      	lsls	r3, r3, #4
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d008      	beq.n	80070e2 <HAL_SPI_Init+0xaa>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68da      	ldr	r2, [r3, #12]
 80070d4:	23e0      	movs	r3, #224	@ 0xe0
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	429a      	cmp	r2, r3
 80070da:	d002      	beq.n	80070e2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	2382      	movs	r3, #130	@ 0x82
 80070e8:	005b      	lsls	r3, r3, #1
 80070ea:	401a      	ands	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6899      	ldr	r1, [r3, #8]
 80070f0:	2384      	movs	r3, #132	@ 0x84
 80070f2:	021b      	lsls	r3, r3, #8
 80070f4:	400b      	ands	r3, r1
 80070f6:	431a      	orrs	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	2102      	movs	r1, #2
 80070fe:	400b      	ands	r3, r1
 8007100:	431a      	orrs	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	2101      	movs	r1, #1
 8007108:	400b      	ands	r3, r1
 800710a:	431a      	orrs	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6999      	ldr	r1, [r3, #24]
 8007110:	2380      	movs	r3, #128	@ 0x80
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	400b      	ands	r3, r1
 8007116:	431a      	orrs	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	2138      	movs	r1, #56	@ 0x38
 800711e:	400b      	ands	r3, r1
 8007120:	431a      	orrs	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	2180      	movs	r1, #128	@ 0x80
 8007128:	400b      	ands	r3, r1
 800712a:	431a      	orrs	r2, r3
 800712c:	0011      	movs	r1, r2
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007132:	2380      	movs	r3, #128	@ 0x80
 8007134:	019b      	lsls	r3, r3, #6
 8007136:	401a      	ands	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	0c1b      	lsrs	r3, r3, #16
 8007146:	2204      	movs	r2, #4
 8007148:	401a      	ands	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800714e:	2110      	movs	r1, #16
 8007150:	400b      	ands	r3, r1
 8007152:	431a      	orrs	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007158:	2108      	movs	r1, #8
 800715a:	400b      	ands	r3, r1
 800715c:	431a      	orrs	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68d9      	ldr	r1, [r3, #12]
 8007162:	23f0      	movs	r3, #240	@ 0xf0
 8007164:	011b      	lsls	r3, r3, #4
 8007166:	400b      	ands	r3, r1
 8007168:	431a      	orrs	r2, r3
 800716a:	0011      	movs	r1, r2
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	2380      	movs	r3, #128	@ 0x80
 8007170:	015b      	lsls	r3, r3, #5
 8007172:	401a      	ands	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	430a      	orrs	r2, r1
 800717a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	69da      	ldr	r2, [r3, #28]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4907      	ldr	r1, [pc, #28]	@ (80071a4 <HAL_SPI_Init+0x16c>)
 8007188:	400a      	ands	r2, r1
 800718a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	225d      	movs	r2, #93	@ 0x5d
 8007196:	2101      	movs	r1, #1
 8007198:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	0018      	movs	r0, r3
 800719e:	46bd      	mov	sp, r7
 80071a0:	b004      	add	sp, #16
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	fffff7ff 	.word	0xfffff7ff

080071a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08a      	sub	sp, #40	@ 0x28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	001a      	movs	r2, r3
 80071b6:	1cbb      	adds	r3, r7, #2
 80071b8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071ba:	2301      	movs	r3, #1
 80071bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80071be:	2323      	movs	r3, #35	@ 0x23
 80071c0:	18fb      	adds	r3, r7, r3
 80071c2:	2200      	movs	r2, #0
 80071c4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	225c      	movs	r2, #92	@ 0x5c
 80071ca:	5c9b      	ldrb	r3, [r3, r2]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d101      	bne.n	80071d4 <HAL_SPI_TransmitReceive+0x2c>
 80071d0:	2302      	movs	r3, #2
 80071d2:	e1c4      	b.n	800755e <HAL_SPI_TransmitReceive+0x3b6>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	225c      	movs	r2, #92	@ 0x5c
 80071d8:	2101      	movs	r1, #1
 80071da:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071dc:	f7fe fb98 	bl	8005910 <HAL_GetTick>
 80071e0:	0003      	movs	r3, r0
 80071e2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071e4:	201b      	movs	r0, #27
 80071e6:	183b      	adds	r3, r7, r0
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	215d      	movs	r1, #93	@ 0x5d
 80071ec:	5c52      	ldrb	r2, [r2, r1]
 80071ee:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80071f6:	2312      	movs	r3, #18
 80071f8:	18fb      	adds	r3, r7, r3
 80071fa:	1cba      	adds	r2, r7, #2
 80071fc:	8812      	ldrh	r2, [r2, #0]
 80071fe:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007200:	183b      	adds	r3, r7, r0
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d011      	beq.n	800722c <HAL_SPI_TransmitReceive+0x84>
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	2382      	movs	r3, #130	@ 0x82
 800720c:	005b      	lsls	r3, r3, #1
 800720e:	429a      	cmp	r2, r3
 8007210:	d107      	bne.n	8007222 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d103      	bne.n	8007222 <HAL_SPI_TransmitReceive+0x7a>
 800721a:	183b      	adds	r3, r7, r0
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b04      	cmp	r3, #4
 8007220:	d004      	beq.n	800722c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8007222:	2323      	movs	r3, #35	@ 0x23
 8007224:	18fb      	adds	r3, r7, r3
 8007226:	2202      	movs	r2, #2
 8007228:	701a      	strb	r2, [r3, #0]
    goto error;
 800722a:	e191      	b.n	8007550 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d006      	beq.n	8007240 <HAL_SPI_TransmitReceive+0x98>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d003      	beq.n	8007240 <HAL_SPI_TransmitReceive+0x98>
 8007238:	1cbb      	adds	r3, r7, #2
 800723a:	881b      	ldrh	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d104      	bne.n	800724a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007240:	2323      	movs	r3, #35	@ 0x23
 8007242:	18fb      	adds	r3, r7, r3
 8007244:	2201      	movs	r2, #1
 8007246:	701a      	strb	r2, [r3, #0]
    goto error;
 8007248:	e182      	b.n	8007550 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	225d      	movs	r2, #93	@ 0x5d
 800724e:	5c9b      	ldrb	r3, [r3, r2]
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b04      	cmp	r3, #4
 8007254:	d003      	beq.n	800725e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	225d      	movs	r2, #93	@ 0x5d
 800725a:	2105      	movs	r1, #5
 800725c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	1cba      	adds	r2, r7, #2
 800726e:	2146      	movs	r1, #70	@ 0x46
 8007270:	8812      	ldrh	r2, [r2, #0]
 8007272:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	1cba      	adds	r2, r7, #2
 8007278:	2144      	movs	r1, #68	@ 0x44
 800727a:	8812      	ldrh	r2, [r2, #0]
 800727c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	1cba      	adds	r2, r7, #2
 8007288:	8812      	ldrh	r2, [r2, #0]
 800728a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	1cba      	adds	r2, r7, #2
 8007290:	8812      	ldrh	r2, [r2, #0]
 8007292:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	68da      	ldr	r2, [r3, #12]
 80072a4:	23e0      	movs	r3, #224	@ 0xe0
 80072a6:	00db      	lsls	r3, r3, #3
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d908      	bls.n	80072be <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	49ac      	ldr	r1, [pc, #688]	@ (8007568 <HAL_SPI_TransmitReceive+0x3c0>)
 80072b8:	400a      	ands	r2, r1
 80072ba:	605a      	str	r2, [r3, #4]
 80072bc:	e008      	b.n	80072d0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2180      	movs	r1, #128	@ 0x80
 80072ca:	0149      	lsls	r1, r1, #5
 80072cc:	430a      	orrs	r2, r1
 80072ce:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2240      	movs	r2, #64	@ 0x40
 80072d8:	4013      	ands	r3, r2
 80072da:	2b40      	cmp	r3, #64	@ 0x40
 80072dc:	d007      	beq.n	80072ee <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2140      	movs	r1, #64	@ 0x40
 80072ea:	430a      	orrs	r2, r1
 80072ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	23e0      	movs	r3, #224	@ 0xe0
 80072f4:	00db      	lsls	r3, r3, #3
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d800      	bhi.n	80072fc <HAL_SPI_TransmitReceive+0x154>
 80072fa:	e083      	b.n	8007404 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d005      	beq.n	8007310 <HAL_SPI_TransmitReceive+0x168>
 8007304:	2312      	movs	r3, #18
 8007306:	18fb      	adds	r3, r7, r3
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d000      	beq.n	8007310 <HAL_SPI_TransmitReceive+0x168>
 800730e:	e06d      	b.n	80073ec <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007314:	881a      	ldrh	r2, [r3, #0]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007320:	1c9a      	adds	r2, r3, #2
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800732a:	b29b      	uxth	r3, r3
 800732c:	3b01      	subs	r3, #1
 800732e:	b29a      	uxth	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007334:	e05a      	b.n	80073ec <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	2202      	movs	r2, #2
 800733e:	4013      	ands	r3, r2
 8007340:	2b02      	cmp	r3, #2
 8007342:	d11b      	bne.n	800737c <HAL_SPI_TransmitReceive+0x1d4>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007348:	b29b      	uxth	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d016      	beq.n	800737c <HAL_SPI_TransmitReceive+0x1d4>
 800734e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007350:	2b01      	cmp	r3, #1
 8007352:	d113      	bne.n	800737c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007358:	881a      	ldrh	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007364:	1c9a      	adds	r2, r3, #2
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800736e:	b29b      	uxth	r3, r3
 8007370:	3b01      	subs	r3, #1
 8007372:	b29a      	uxth	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	2201      	movs	r2, #1
 8007384:	4013      	ands	r3, r2
 8007386:	2b01      	cmp	r3, #1
 8007388:	d11c      	bne.n	80073c4 <HAL_SPI_TransmitReceive+0x21c>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2246      	movs	r2, #70	@ 0x46
 800738e:	5a9b      	ldrh	r3, [r3, r2]
 8007390:	b29b      	uxth	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d016      	beq.n	80073c4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68da      	ldr	r2, [r3, #12]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a0:	b292      	uxth	r2, r2
 80073a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a8:	1c9a      	adds	r2, r3, #2
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2246      	movs	r2, #70	@ 0x46
 80073b2:	5a9b      	ldrh	r3, [r3, r2]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	3b01      	subs	r3, #1
 80073b8:	b299      	uxth	r1, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2246      	movs	r2, #70	@ 0x46
 80073be:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073c0:	2301      	movs	r3, #1
 80073c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80073c4:	f7fe faa4 	bl	8005910 <HAL_GetTick>
 80073c8:	0002      	movs	r2, r0
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d80b      	bhi.n	80073ec <HAL_SPI_TransmitReceive+0x244>
 80073d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d6:	3301      	adds	r3, #1
 80073d8:	d008      	beq.n	80073ec <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80073da:	2323      	movs	r3, #35	@ 0x23
 80073dc:	18fb      	adds	r3, r7, r3
 80073de:	2203      	movs	r2, #3
 80073e0:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	225d      	movs	r2, #93	@ 0x5d
 80073e6:	2101      	movs	r1, #1
 80073e8:	5499      	strb	r1, [r3, r2]
        goto error;
 80073ea:	e0b1      	b.n	8007550 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d19f      	bne.n	8007336 <HAL_SPI_TransmitReceive+0x18e>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2246      	movs	r2, #70	@ 0x46
 80073fa:	5a9b      	ldrh	r3, [r3, r2]
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d199      	bne.n	8007336 <HAL_SPI_TransmitReceive+0x18e>
 8007402:	e089      	b.n	8007518 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d005      	beq.n	8007418 <HAL_SPI_TransmitReceive+0x270>
 800740c:	2312      	movs	r3, #18
 800740e:	18fb      	adds	r3, r7, r3
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d000      	beq.n	8007418 <HAL_SPI_TransmitReceive+0x270>
 8007416:	e074      	b.n	8007502 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	330c      	adds	r3, #12
 8007422:	7812      	ldrb	r2, [r2, #0]
 8007424:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800742a:	1c5a      	adds	r2, r3, #1
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007434:	b29b      	uxth	r3, r3
 8007436:	3b01      	subs	r3, #1
 8007438:	b29a      	uxth	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800743e:	e060      	b.n	8007502 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	2202      	movs	r2, #2
 8007448:	4013      	ands	r3, r2
 800744a:	2b02      	cmp	r3, #2
 800744c:	d11c      	bne.n	8007488 <HAL_SPI_TransmitReceive+0x2e0>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007452:	b29b      	uxth	r3, r3
 8007454:	2b00      	cmp	r3, #0
 8007456:	d017      	beq.n	8007488 <HAL_SPI_TransmitReceive+0x2e0>
 8007458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745a:	2b01      	cmp	r3, #1
 800745c:	d114      	bne.n	8007488 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	330c      	adds	r3, #12
 8007468:	7812      	ldrb	r2, [r2, #0]
 800746a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800747a:	b29b      	uxth	r3, r3
 800747c:	3b01      	subs	r3, #1
 800747e:	b29a      	uxth	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	2201      	movs	r2, #1
 8007490:	4013      	ands	r3, r2
 8007492:	2b01      	cmp	r3, #1
 8007494:	d11e      	bne.n	80074d4 <HAL_SPI_TransmitReceive+0x32c>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2246      	movs	r2, #70	@ 0x46
 800749a:	5a9b      	ldrh	r3, [r3, r2]
 800749c:	b29b      	uxth	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d018      	beq.n	80074d4 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	330c      	adds	r3, #12
 80074a8:	001a      	movs	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ae:	7812      	ldrb	r2, [r2, #0]
 80074b0:	b2d2      	uxtb	r2, r2
 80074b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b8:	1c5a      	adds	r2, r3, #1
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2246      	movs	r2, #70	@ 0x46
 80074c2:	5a9b      	ldrh	r3, [r3, r2]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	3b01      	subs	r3, #1
 80074c8:	b299      	uxth	r1, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2246      	movs	r2, #70	@ 0x46
 80074ce:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074d0:	2301      	movs	r3, #1
 80074d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80074d4:	f7fe fa1c 	bl	8005910 <HAL_GetTick>
 80074d8:	0002      	movs	r2, r0
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d802      	bhi.n	80074ea <HAL_SPI_TransmitReceive+0x342>
 80074e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e6:	3301      	adds	r3, #1
 80074e8:	d102      	bne.n	80074f0 <HAL_SPI_TransmitReceive+0x348>
 80074ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d108      	bne.n	8007502 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80074f0:	2323      	movs	r3, #35	@ 0x23
 80074f2:	18fb      	adds	r3, r7, r3
 80074f4:	2203      	movs	r2, #3
 80074f6:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	225d      	movs	r2, #93	@ 0x5d
 80074fc:	2101      	movs	r1, #1
 80074fe:	5499      	strb	r1, [r3, r2]
        goto error;
 8007500:	e026      	b.n	8007550 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007506:	b29b      	uxth	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	d199      	bne.n	8007440 <HAL_SPI_TransmitReceive+0x298>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2246      	movs	r2, #70	@ 0x46
 8007510:	5a9b      	ldrh	r3, [r3, r2]
 8007512:	b29b      	uxth	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	d193      	bne.n	8007440 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007518:	69fa      	ldr	r2, [r7, #28]
 800751a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	0018      	movs	r0, r3
 8007520:	f000 f954 	bl	80077cc <SPI_EndRxTxTransaction>
 8007524:	1e03      	subs	r3, r0, #0
 8007526:	d006      	beq.n	8007536 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8007528:	2323      	movs	r3, #35	@ 0x23
 800752a:	18fb      	adds	r3, r7, r3
 800752c:	2201      	movs	r2, #1
 800752e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2220      	movs	r2, #32
 8007534:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800753a:	2b00      	cmp	r3, #0
 800753c:	d004      	beq.n	8007548 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800753e:	2323      	movs	r3, #35	@ 0x23
 8007540:	18fb      	adds	r3, r7, r3
 8007542:	2201      	movs	r2, #1
 8007544:	701a      	strb	r2, [r3, #0]
 8007546:	e003      	b.n	8007550 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	225d      	movs	r2, #93	@ 0x5d
 800754c:	2101      	movs	r1, #1
 800754e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	225c      	movs	r2, #92	@ 0x5c
 8007554:	2100      	movs	r1, #0
 8007556:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007558:	2323      	movs	r3, #35	@ 0x23
 800755a:	18fb      	adds	r3, r7, r3
 800755c:	781b      	ldrb	r3, [r3, #0]
}
 800755e:	0018      	movs	r0, r3
 8007560:	46bd      	mov	sp, r7
 8007562:	b00a      	add	sp, #40	@ 0x28
 8007564:	bd80      	pop	{r7, pc}
 8007566:	46c0      	nop			@ (mov r8, r8)
 8007568:	ffffefff 	.word	0xffffefff

0800756c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b088      	sub	sp, #32
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	603b      	str	r3, [r7, #0]
 8007578:	1dfb      	adds	r3, r7, #7
 800757a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800757c:	f7fe f9c8 	bl	8005910 <HAL_GetTick>
 8007580:	0002      	movs	r2, r0
 8007582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007584:	1a9b      	subs	r3, r3, r2
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	18d3      	adds	r3, r2, r3
 800758a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800758c:	f7fe f9c0 	bl	8005910 <HAL_GetTick>
 8007590:	0003      	movs	r3, r0
 8007592:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007594:	4b3a      	ldr	r3, [pc, #232]	@ (8007680 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	015b      	lsls	r3, r3, #5
 800759a:	0d1b      	lsrs	r3, r3, #20
 800759c:	69fa      	ldr	r2, [r7, #28]
 800759e:	4353      	muls	r3, r2
 80075a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075a2:	e058      	b.n	8007656 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	3301      	adds	r3, #1
 80075a8:	d055      	beq.n	8007656 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80075aa:	f7fe f9b1 	bl	8005910 <HAL_GetTick>
 80075ae:	0002      	movs	r2, r0
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	69fa      	ldr	r2, [r7, #28]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d902      	bls.n	80075c0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d142      	bne.n	8007646 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	21e0      	movs	r1, #224	@ 0xe0
 80075cc:	438a      	bics	r2, r1
 80075ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	685a      	ldr	r2, [r3, #4]
 80075d4:	2382      	movs	r3, #130	@ 0x82
 80075d6:	005b      	lsls	r3, r3, #1
 80075d8:	429a      	cmp	r2, r3
 80075da:	d113      	bne.n	8007604 <SPI_WaitFlagStateUntilTimeout+0x98>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	689a      	ldr	r2, [r3, #8]
 80075e0:	2380      	movs	r3, #128	@ 0x80
 80075e2:	021b      	lsls	r3, r3, #8
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d005      	beq.n	80075f4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	689a      	ldr	r2, [r3, #8]
 80075ec:	2380      	movs	r3, #128	@ 0x80
 80075ee:	00db      	lsls	r3, r3, #3
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d107      	bne.n	8007604 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2140      	movs	r1, #64	@ 0x40
 8007600:	438a      	bics	r2, r1
 8007602:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007608:	2380      	movs	r3, #128	@ 0x80
 800760a:	019b      	lsls	r3, r3, #6
 800760c:	429a      	cmp	r2, r3
 800760e:	d110      	bne.n	8007632 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	491a      	ldr	r1, [pc, #104]	@ (8007684 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800761c:	400a      	ands	r2, r1
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2180      	movs	r1, #128	@ 0x80
 800762c:	0189      	lsls	r1, r1, #6
 800762e:	430a      	orrs	r2, r1
 8007630:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	225d      	movs	r2, #93	@ 0x5d
 8007636:	2101      	movs	r1, #1
 8007638:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	225c      	movs	r2, #92	@ 0x5c
 800763e:	2100      	movs	r1, #0
 8007640:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e017      	b.n	8007676 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	3b01      	subs	r3, #1
 8007654:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	4013      	ands	r3, r2
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	425a      	negs	r2, r3
 8007666:	4153      	adcs	r3, r2
 8007668:	b2db      	uxtb	r3, r3
 800766a:	001a      	movs	r2, r3
 800766c:	1dfb      	adds	r3, r7, #7
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	429a      	cmp	r2, r3
 8007672:	d197      	bne.n	80075a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	0018      	movs	r0, r3
 8007678:	46bd      	mov	sp, r7
 800767a:	b008      	add	sp, #32
 800767c:	bd80      	pop	{r7, pc}
 800767e:	46c0      	nop			@ (mov r8, r8)
 8007680:	20000014 	.word	0x20000014
 8007684:	ffffdfff 	.word	0xffffdfff

08007688 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b08a      	sub	sp, #40	@ 0x28
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
 8007694:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007696:	2317      	movs	r3, #23
 8007698:	18fb      	adds	r3, r7, r3
 800769a:	2200      	movs	r2, #0
 800769c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800769e:	f7fe f937 	bl	8005910 <HAL_GetTick>
 80076a2:	0002      	movs	r2, r0
 80076a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a6:	1a9b      	subs	r3, r3, r2
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	18d3      	adds	r3, r2, r3
 80076ac:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80076ae:	f7fe f92f 	bl	8005910 <HAL_GetTick>
 80076b2:	0003      	movs	r3, r0
 80076b4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	330c      	adds	r3, #12
 80076bc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80076be:	4b41      	ldr	r3, [pc, #260]	@ (80077c4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	0013      	movs	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	189b      	adds	r3, r3, r2
 80076c8:	00da      	lsls	r2, r3, #3
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	0d1b      	lsrs	r3, r3, #20
 80076ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076d0:	4353      	muls	r3, r2
 80076d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80076d4:	e068      	b.n	80077a8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	23c0      	movs	r3, #192	@ 0xc0
 80076da:	00db      	lsls	r3, r3, #3
 80076dc:	429a      	cmp	r2, r3
 80076de:	d10a      	bne.n	80076f6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d107      	bne.n	80076f6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	2117      	movs	r1, #23
 80076ee:	187b      	adds	r3, r7, r1
 80076f0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80076f2:	187b      	adds	r3, r7, r1
 80076f4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	3301      	adds	r3, #1
 80076fa:	d055      	beq.n	80077a8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076fc:	f7fe f908 	bl	8005910 <HAL_GetTick>
 8007700:	0002      	movs	r2, r0
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007708:	429a      	cmp	r2, r3
 800770a:	d902      	bls.n	8007712 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800770c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770e:	2b00      	cmp	r3, #0
 8007710:	d142      	bne.n	8007798 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	21e0      	movs	r1, #224	@ 0xe0
 800771e:	438a      	bics	r2, r1
 8007720:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	685a      	ldr	r2, [r3, #4]
 8007726:	2382      	movs	r3, #130	@ 0x82
 8007728:	005b      	lsls	r3, r3, #1
 800772a:	429a      	cmp	r2, r3
 800772c:	d113      	bne.n	8007756 <SPI_WaitFifoStateUntilTimeout+0xce>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	689a      	ldr	r2, [r3, #8]
 8007732:	2380      	movs	r3, #128	@ 0x80
 8007734:	021b      	lsls	r3, r3, #8
 8007736:	429a      	cmp	r2, r3
 8007738:	d005      	beq.n	8007746 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	689a      	ldr	r2, [r3, #8]
 800773e:	2380      	movs	r3, #128	@ 0x80
 8007740:	00db      	lsls	r3, r3, #3
 8007742:	429a      	cmp	r2, r3
 8007744:	d107      	bne.n	8007756 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2140      	movs	r1, #64	@ 0x40
 8007752:	438a      	bics	r2, r1
 8007754:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800775a:	2380      	movs	r3, #128	@ 0x80
 800775c:	019b      	lsls	r3, r3, #6
 800775e:	429a      	cmp	r2, r3
 8007760:	d110      	bne.n	8007784 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4916      	ldr	r1, [pc, #88]	@ (80077c8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800776e:	400a      	ands	r2, r1
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2180      	movs	r1, #128	@ 0x80
 800777e:	0189      	lsls	r1, r1, #6
 8007780:	430a      	orrs	r2, r1
 8007782:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	225d      	movs	r2, #93	@ 0x5d
 8007788:	2101      	movs	r1, #1
 800778a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	225c      	movs	r2, #92	@ 0x5c
 8007790:	2100      	movs	r1, #0
 8007792:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e010      	b.n	80077ba <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	3b01      	subs	r3, #1
 80077a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	4013      	ands	r3, r2
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d18e      	bne.n	80076d6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	0018      	movs	r0, r3
 80077bc:	46bd      	mov	sp, r7
 80077be:	b00a      	add	sp, #40	@ 0x28
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	46c0      	nop			@ (mov r8, r8)
 80077c4:	20000014 	.word	0x20000014
 80077c8:	ffffdfff 	.word	0xffffdfff

080077cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af02      	add	r7, sp, #8
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	23c0      	movs	r3, #192	@ 0xc0
 80077dc:	0159      	lsls	r1, r3, #5
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	0013      	movs	r3, r2
 80077e6:	2200      	movs	r2, #0
 80077e8:	f7ff ff4e 	bl	8007688 <SPI_WaitFifoStateUntilTimeout>
 80077ec:	1e03      	subs	r3, r0, #0
 80077ee:	d007      	beq.n	8007800 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077f4:	2220      	movs	r2, #32
 80077f6:	431a      	orrs	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e027      	b.n	8007850 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	0013      	movs	r3, r2
 800780a:	2200      	movs	r2, #0
 800780c:	2180      	movs	r1, #128	@ 0x80
 800780e:	f7ff fead 	bl	800756c <SPI_WaitFlagStateUntilTimeout>
 8007812:	1e03      	subs	r3, r0, #0
 8007814:	d007      	beq.n	8007826 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800781a:	2220      	movs	r2, #32
 800781c:	431a      	orrs	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e014      	b.n	8007850 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	23c0      	movs	r3, #192	@ 0xc0
 800782a:	00d9      	lsls	r1, r3, #3
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	0013      	movs	r3, r2
 8007834:	2200      	movs	r2, #0
 8007836:	f7ff ff27 	bl	8007688 <SPI_WaitFifoStateUntilTimeout>
 800783a:	1e03      	subs	r3, r0, #0
 800783c:	d007      	beq.n	800784e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007842:	2220      	movs	r2, #32
 8007844:	431a      	orrs	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e000      	b.n	8007850 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	0018      	movs	r0, r3
 8007852:	46bd      	mov	sp, r7
 8007854:	b004      	add	sp, #16
 8007856:	bd80      	pop	{r7, pc}

08007858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e042      	b.n	80078f0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	223d      	movs	r2, #61	@ 0x3d
 800786e:	5c9b      	ldrb	r3, [r3, r2]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d107      	bne.n	8007886 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	223c      	movs	r2, #60	@ 0x3c
 800787a:	2100      	movs	r1, #0
 800787c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	0018      	movs	r0, r3
 8007882:	f7fd fe9b 	bl	80055bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	223d      	movs	r2, #61	@ 0x3d
 800788a:	2102      	movs	r1, #2
 800788c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	3304      	adds	r3, #4
 8007896:	0019      	movs	r1, r3
 8007898:	0010      	movs	r0, r2
 800789a:	f000 f901 	bl	8007aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2246      	movs	r2, #70	@ 0x46
 80078a2:	2101      	movs	r1, #1
 80078a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	223e      	movs	r2, #62	@ 0x3e
 80078aa:	2101      	movs	r1, #1
 80078ac:	5499      	strb	r1, [r3, r2]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	223f      	movs	r2, #63	@ 0x3f
 80078b2:	2101      	movs	r1, #1
 80078b4:	5499      	strb	r1, [r3, r2]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2240      	movs	r2, #64	@ 0x40
 80078ba:	2101      	movs	r1, #1
 80078bc:	5499      	strb	r1, [r3, r2]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2241      	movs	r2, #65	@ 0x41
 80078c2:	2101      	movs	r1, #1
 80078c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2242      	movs	r2, #66	@ 0x42
 80078ca:	2101      	movs	r1, #1
 80078cc:	5499      	strb	r1, [r3, r2]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2243      	movs	r2, #67	@ 0x43
 80078d2:	2101      	movs	r1, #1
 80078d4:	5499      	strb	r1, [r3, r2]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2244      	movs	r2, #68	@ 0x44
 80078da:	2101      	movs	r1, #1
 80078dc:	5499      	strb	r1, [r3, r2]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2245      	movs	r2, #69	@ 0x45
 80078e2:	2101      	movs	r1, #1
 80078e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	223d      	movs	r2, #61	@ 0x3d
 80078ea:	2101      	movs	r1, #1
 80078ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	0018      	movs	r0, r3
 80078f2:	46bd      	mov	sp, r7
 80078f4:	b002      	add	sp, #8
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007902:	230f      	movs	r3, #15
 8007904:	18fb      	adds	r3, r7, r3
 8007906:	2200      	movs	r2, #0
 8007908:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	223c      	movs	r2, #60	@ 0x3c
 800790e:	5c9b      	ldrb	r3, [r3, r2]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <HAL_TIM_ConfigClockSource+0x20>
 8007914:	2302      	movs	r3, #2
 8007916:	e0bc      	b.n	8007a92 <HAL_TIM_ConfigClockSource+0x19a>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	223c      	movs	r2, #60	@ 0x3c
 800791c:	2101      	movs	r1, #1
 800791e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	223d      	movs	r2, #61	@ 0x3d
 8007924:	2102      	movs	r1, #2
 8007926:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	2277      	movs	r2, #119	@ 0x77
 8007934:	4393      	bics	r3, r2
 8007936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	4a58      	ldr	r2, [pc, #352]	@ (8007a9c <HAL_TIM_ConfigClockSource+0x1a4>)
 800793c:	4013      	ands	r3, r2
 800793e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2280      	movs	r2, #128	@ 0x80
 800794e:	0192      	lsls	r2, r2, #6
 8007950:	4293      	cmp	r3, r2
 8007952:	d040      	beq.n	80079d6 <HAL_TIM_ConfigClockSource+0xde>
 8007954:	2280      	movs	r2, #128	@ 0x80
 8007956:	0192      	lsls	r2, r2, #6
 8007958:	4293      	cmp	r3, r2
 800795a:	d900      	bls.n	800795e <HAL_TIM_ConfigClockSource+0x66>
 800795c:	e088      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x178>
 800795e:	2280      	movs	r2, #128	@ 0x80
 8007960:	0152      	lsls	r2, r2, #5
 8007962:	4293      	cmp	r3, r2
 8007964:	d100      	bne.n	8007968 <HAL_TIM_ConfigClockSource+0x70>
 8007966:	e088      	b.n	8007a7a <HAL_TIM_ConfigClockSource+0x182>
 8007968:	2280      	movs	r2, #128	@ 0x80
 800796a:	0152      	lsls	r2, r2, #5
 800796c:	4293      	cmp	r3, r2
 800796e:	d900      	bls.n	8007972 <HAL_TIM_ConfigClockSource+0x7a>
 8007970:	e07e      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x178>
 8007972:	2b70      	cmp	r3, #112	@ 0x70
 8007974:	d018      	beq.n	80079a8 <HAL_TIM_ConfigClockSource+0xb0>
 8007976:	d900      	bls.n	800797a <HAL_TIM_ConfigClockSource+0x82>
 8007978:	e07a      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x178>
 800797a:	2b60      	cmp	r3, #96	@ 0x60
 800797c:	d04f      	beq.n	8007a1e <HAL_TIM_ConfigClockSource+0x126>
 800797e:	d900      	bls.n	8007982 <HAL_TIM_ConfigClockSource+0x8a>
 8007980:	e076      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x178>
 8007982:	2b50      	cmp	r3, #80	@ 0x50
 8007984:	d03b      	beq.n	80079fe <HAL_TIM_ConfigClockSource+0x106>
 8007986:	d900      	bls.n	800798a <HAL_TIM_ConfigClockSource+0x92>
 8007988:	e072      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x178>
 800798a:	2b40      	cmp	r3, #64	@ 0x40
 800798c:	d057      	beq.n	8007a3e <HAL_TIM_ConfigClockSource+0x146>
 800798e:	d900      	bls.n	8007992 <HAL_TIM_ConfigClockSource+0x9a>
 8007990:	e06e      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x178>
 8007992:	2b30      	cmp	r3, #48	@ 0x30
 8007994:	d063      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x166>
 8007996:	d86b      	bhi.n	8007a70 <HAL_TIM_ConfigClockSource+0x178>
 8007998:	2b20      	cmp	r3, #32
 800799a:	d060      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x166>
 800799c:	d868      	bhi.n	8007a70 <HAL_TIM_ConfigClockSource+0x178>
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d05d      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x166>
 80079a2:	2b10      	cmp	r3, #16
 80079a4:	d05b      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x166>
 80079a6:	e063      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079b8:	f000 f97a 	bl	8007cb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2277      	movs	r2, #119	@ 0x77
 80079c8:	4313      	orrs	r3, r2
 80079ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68ba      	ldr	r2, [r7, #8]
 80079d2:	609a      	str	r2, [r3, #8]
      break;
 80079d4:	e052      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079e6:	f000 f963 	bl	8007cb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	689a      	ldr	r2, [r3, #8]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2180      	movs	r1, #128	@ 0x80
 80079f6:	01c9      	lsls	r1, r1, #7
 80079f8:	430a      	orrs	r2, r1
 80079fa:	609a      	str	r2, [r3, #8]
      break;
 80079fc:	e03e      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a0a:	001a      	movs	r2, r3
 8007a0c:	f000 f8d6 	bl	8007bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2150      	movs	r1, #80	@ 0x50
 8007a16:	0018      	movs	r0, r3
 8007a18:	f000 f930 	bl	8007c7c <TIM_ITRx_SetConfig>
      break;
 8007a1c:	e02e      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a2a:	001a      	movs	r2, r3
 8007a2c:	f000 f8f4 	bl	8007c18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2160      	movs	r1, #96	@ 0x60
 8007a36:	0018      	movs	r0, r3
 8007a38:	f000 f920 	bl	8007c7c <TIM_ITRx_SetConfig>
      break;
 8007a3c:	e01e      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a4a:	001a      	movs	r2, r3
 8007a4c:	f000 f8b6 	bl	8007bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2140      	movs	r1, #64	@ 0x40
 8007a56:	0018      	movs	r0, r3
 8007a58:	f000 f910 	bl	8007c7c <TIM_ITRx_SetConfig>
      break;
 8007a5c:	e00e      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	0019      	movs	r1, r3
 8007a68:	0010      	movs	r0, r2
 8007a6a:	f000 f907 	bl	8007c7c <TIM_ITRx_SetConfig>
      break;
 8007a6e:	e005      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007a70:	230f      	movs	r3, #15
 8007a72:	18fb      	adds	r3, r7, r3
 8007a74:	2201      	movs	r2, #1
 8007a76:	701a      	strb	r2, [r3, #0]
      break;
 8007a78:	e000      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007a7a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	223d      	movs	r2, #61	@ 0x3d
 8007a80:	2101      	movs	r1, #1
 8007a82:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	223c      	movs	r2, #60	@ 0x3c
 8007a88:	2100      	movs	r1, #0
 8007a8a:	5499      	strb	r1, [r3, r2]

  return status;
 8007a8c:	230f      	movs	r3, #15
 8007a8e:	18fb      	adds	r3, r7, r3
 8007a90:	781b      	ldrb	r3, [r3, #0]
}
 8007a92:	0018      	movs	r0, r3
 8007a94:	46bd      	mov	sp, r7
 8007a96:	b004      	add	sp, #16
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	46c0      	nop			@ (mov r8, r8)
 8007a9c:	ffff00ff 	.word	0xffff00ff

08007aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a3b      	ldr	r2, [pc, #236]	@ (8007ba0 <TIM_Base_SetConfig+0x100>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d008      	beq.n	8007aca <TIM_Base_SetConfig+0x2a>
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	2380      	movs	r3, #128	@ 0x80
 8007abc:	05db      	lsls	r3, r3, #23
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d003      	beq.n	8007aca <TIM_Base_SetConfig+0x2a>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a37      	ldr	r2, [pc, #220]	@ (8007ba4 <TIM_Base_SetConfig+0x104>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d108      	bne.n	8007adc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2270      	movs	r2, #112	@ 0x70
 8007ace:	4393      	bics	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a30      	ldr	r2, [pc, #192]	@ (8007ba0 <TIM_Base_SetConfig+0x100>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d018      	beq.n	8007b16 <TIM_Base_SetConfig+0x76>
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	2380      	movs	r3, #128	@ 0x80
 8007ae8:	05db      	lsls	r3, r3, #23
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d013      	beq.n	8007b16 <TIM_Base_SetConfig+0x76>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a2c      	ldr	r2, [pc, #176]	@ (8007ba4 <TIM_Base_SetConfig+0x104>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d00f      	beq.n	8007b16 <TIM_Base_SetConfig+0x76>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a2b      	ldr	r2, [pc, #172]	@ (8007ba8 <TIM_Base_SetConfig+0x108>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d00b      	beq.n	8007b16 <TIM_Base_SetConfig+0x76>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a2a      	ldr	r2, [pc, #168]	@ (8007bac <TIM_Base_SetConfig+0x10c>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d007      	beq.n	8007b16 <TIM_Base_SetConfig+0x76>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a29      	ldr	r2, [pc, #164]	@ (8007bb0 <TIM_Base_SetConfig+0x110>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d003      	beq.n	8007b16 <TIM_Base_SetConfig+0x76>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a28      	ldr	r2, [pc, #160]	@ (8007bb4 <TIM_Base_SetConfig+0x114>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d108      	bne.n	8007b28 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4a27      	ldr	r2, [pc, #156]	@ (8007bb8 <TIM_Base_SetConfig+0x118>)
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2280      	movs	r2, #128	@ 0x80
 8007b2c:	4393      	bics	r3, r2
 8007b2e:	001a      	movs	r2, r3
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	689a      	ldr	r2, [r3, #8]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a13      	ldr	r2, [pc, #76]	@ (8007ba0 <TIM_Base_SetConfig+0x100>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d00b      	beq.n	8007b6e <TIM_Base_SetConfig+0xce>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a14      	ldr	r2, [pc, #80]	@ (8007bac <TIM_Base_SetConfig+0x10c>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d007      	beq.n	8007b6e <TIM_Base_SetConfig+0xce>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a13      	ldr	r2, [pc, #76]	@ (8007bb0 <TIM_Base_SetConfig+0x110>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d003      	beq.n	8007b6e <TIM_Base_SetConfig+0xce>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a12      	ldr	r2, [pc, #72]	@ (8007bb4 <TIM_Base_SetConfig+0x114>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d103      	bne.n	8007b76 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	691a      	ldr	r2, [r3, #16]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	2201      	movs	r2, #1
 8007b82:	4013      	ands	r3, r2
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d106      	bne.n	8007b96 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	4393      	bics	r3, r2
 8007b90:	001a      	movs	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	611a      	str	r2, [r3, #16]
  }
}
 8007b96:	46c0      	nop			@ (mov r8, r8)
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	b004      	add	sp, #16
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	46c0      	nop			@ (mov r8, r8)
 8007ba0:	40012c00 	.word	0x40012c00
 8007ba4:	40000400 	.word	0x40000400
 8007ba8:	40002000 	.word	0x40002000
 8007bac:	40014000 	.word	0x40014000
 8007bb0:	40014400 	.word	0x40014400
 8007bb4:	40014800 	.word	0x40014800
 8007bb8:	fffffcff 	.word	0xfffffcff

08007bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	4393      	bics	r3, r2
 8007bd6:	001a      	movs	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	22f0      	movs	r2, #240	@ 0xf0
 8007be6:	4393      	bics	r3, r2
 8007be8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	011b      	lsls	r3, r3, #4
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	220a      	movs	r2, #10
 8007bf8:	4393      	bics	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	621a      	str	r2, [r3, #32]
}
 8007c10:	46c0      	nop			@ (mov r8, r8)
 8007c12:	46bd      	mov	sp, r7
 8007c14:	b006      	add	sp, #24
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6a1b      	ldr	r3, [r3, #32]
 8007c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	2210      	movs	r2, #16
 8007c30:	4393      	bics	r3, r2
 8007c32:	001a      	movs	r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	4a0d      	ldr	r2, [pc, #52]	@ (8007c78 <TIM_TI2_ConfigInputStage+0x60>)
 8007c42:	4013      	ands	r3, r2
 8007c44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	031b      	lsls	r3, r3, #12
 8007c4a:	693a      	ldr	r2, [r7, #16]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	22a0      	movs	r2, #160	@ 0xa0
 8007c54:	4393      	bics	r3, r2
 8007c56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	011b      	lsls	r3, r3, #4
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	621a      	str	r2, [r3, #32]
}
 8007c6e:	46c0      	nop			@ (mov r8, r8)
 8007c70:	46bd      	mov	sp, r7
 8007c72:	b006      	add	sp, #24
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	46c0      	nop			@ (mov r8, r8)
 8007c78:	ffff0fff 	.word	0xffff0fff

08007c7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2270      	movs	r2, #112	@ 0x70
 8007c90:	4393      	bics	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c94:	683a      	ldr	r2, [r7, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	2207      	movs	r2, #7
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	609a      	str	r2, [r3, #8]
}
 8007ca6:	46c0      	nop			@ (mov r8, r8)
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	b004      	add	sp, #16
 8007cac:	bd80      	pop	{r7, pc}
	...

08007cb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
 8007cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	4a09      	ldr	r2, [pc, #36]	@ (8007cec <TIM_ETR_SetConfig+0x3c>)
 8007cc8:	4013      	ands	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	021a      	lsls	r2, r3, #8
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	431a      	orrs	r2, r3
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	609a      	str	r2, [r3, #8]
}
 8007ce4:	46c0      	nop			@ (mov r8, r8)
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	b006      	add	sp, #24
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	ffff00ff 	.word	0xffff00ff

08007cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	223c      	movs	r2, #60	@ 0x3c
 8007cfe:	5c9b      	ldrb	r3, [r3, r2]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d101      	bne.n	8007d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d04:	2302      	movs	r3, #2
 8007d06:	e047      	b.n	8007d98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	223c      	movs	r2, #60	@ 0x3c
 8007d0c:	2101      	movs	r1, #1
 8007d0e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	223d      	movs	r2, #61	@ 0x3d
 8007d14:	2102      	movs	r1, #2
 8007d16:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2270      	movs	r2, #112	@ 0x70
 8007d2c:	4393      	bics	r3, r2
 8007d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a16      	ldr	r2, [pc, #88]	@ (8007da0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d00f      	beq.n	8007d6c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	2380      	movs	r3, #128	@ 0x80
 8007d52:	05db      	lsls	r3, r3, #23
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d009      	beq.n	8007d6c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a11      	ldr	r2, [pc, #68]	@ (8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d004      	beq.n	8007d6c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a10      	ldr	r2, [pc, #64]	@ (8007da8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d10c      	bne.n	8007d86 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	2280      	movs	r2, #128	@ 0x80
 8007d70:	4393      	bics	r3, r2
 8007d72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	223d      	movs	r2, #61	@ 0x3d
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	223c      	movs	r2, #60	@ 0x3c
 8007d92:	2100      	movs	r1, #0
 8007d94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	0018      	movs	r0, r3
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	b004      	add	sp, #16
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	40012c00 	.word	0x40012c00
 8007da4:	40000400 	.word	0x40000400
 8007da8:	40014000 	.word	0x40014000

08007dac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e044      	b.n	8007e48 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d107      	bne.n	8007dd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2278      	movs	r2, #120	@ 0x78
 8007dca:	2100      	movs	r1, #0
 8007dcc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	0018      	movs	r0, r3
 8007dd2:	f7fd fc11 	bl	80055f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2224      	movs	r2, #36	@ 0x24
 8007dda:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2101      	movs	r1, #1
 8007de8:	438a      	bics	r2, r1
 8007dea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d003      	beq.n	8007dfc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	0018      	movs	r0, r3
 8007df8:	f000 fab4 	bl	8008364 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	0018      	movs	r0, r3
 8007e00:	f000 f8c8 	bl	8007f94 <UART_SetConfig>
 8007e04:	0003      	movs	r3, r0
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d101      	bne.n	8007e0e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e01c      	b.n	8007e48 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	685a      	ldr	r2, [r3, #4]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	490d      	ldr	r1, [pc, #52]	@ (8007e50 <HAL_UART_Init+0xa4>)
 8007e1a:	400a      	ands	r2, r1
 8007e1c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	689a      	ldr	r2, [r3, #8]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	212a      	movs	r1, #42	@ 0x2a
 8007e2a:	438a      	bics	r2, r1
 8007e2c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2101      	movs	r1, #1
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	0018      	movs	r0, r3
 8007e42:	f000 fb43 	bl	80084cc <UART_CheckIdleState>
 8007e46:	0003      	movs	r3, r0
}
 8007e48:	0018      	movs	r0, r3
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	b002      	add	sp, #8
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	ffffb7ff 	.word	0xffffb7ff

08007e54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b08a      	sub	sp, #40	@ 0x28
 8007e58:	af02      	add	r7, sp, #8
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	603b      	str	r3, [r7, #0]
 8007e60:	1dbb      	adds	r3, r7, #6
 8007e62:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e68:	2b20      	cmp	r3, #32
 8007e6a:	d000      	beq.n	8007e6e <HAL_UART_Transmit+0x1a>
 8007e6c:	e08c      	b.n	8007f88 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d003      	beq.n	8007e7c <HAL_UART_Transmit+0x28>
 8007e74:	1dbb      	adds	r3, r7, #6
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d101      	bne.n	8007e80 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e084      	b.n	8007f8a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	2380      	movs	r3, #128	@ 0x80
 8007e86:	015b      	lsls	r3, r3, #5
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d109      	bne.n	8007ea0 <HAL_UART_Transmit+0x4c>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d105      	bne.n	8007ea0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2201      	movs	r2, #1
 8007e98:	4013      	ands	r3, r2
 8007e9a:	d001      	beq.n	8007ea0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e074      	b.n	8007f8a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2284      	movs	r2, #132	@ 0x84
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2221      	movs	r2, #33	@ 0x21
 8007eac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007eae:	f7fd fd2f 	bl	8005910 <HAL_GetTick>
 8007eb2:	0003      	movs	r3, r0
 8007eb4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	1dba      	adds	r2, r7, #6
 8007eba:	2150      	movs	r1, #80	@ 0x50
 8007ebc:	8812      	ldrh	r2, [r2, #0]
 8007ebe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	1dba      	adds	r2, r7, #6
 8007ec4:	2152      	movs	r1, #82	@ 0x52
 8007ec6:	8812      	ldrh	r2, [r2, #0]
 8007ec8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	689a      	ldr	r2, [r3, #8]
 8007ece:	2380      	movs	r3, #128	@ 0x80
 8007ed0:	015b      	lsls	r3, r3, #5
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d108      	bne.n	8007ee8 <HAL_UART_Transmit+0x94>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d104      	bne.n	8007ee8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	61bb      	str	r3, [r7, #24]
 8007ee6:	e003      	b.n	8007ef0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007eec:	2300      	movs	r3, #0
 8007eee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ef0:	e02f      	b.n	8007f52 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	0013      	movs	r3, r2
 8007efc:	2200      	movs	r2, #0
 8007efe:	2180      	movs	r1, #128	@ 0x80
 8007f00:	f000 fb8c 	bl	800861c <UART_WaitOnFlagUntilTimeout>
 8007f04:	1e03      	subs	r3, r0, #0
 8007f06:	d004      	beq.n	8007f12 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e03b      	b.n	8007f8a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10b      	bne.n	8007f30 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	881a      	ldrh	r2, [r3, #0]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	05d2      	lsls	r2, r2, #23
 8007f22:	0dd2      	lsrs	r2, r2, #23
 8007f24:	b292      	uxth	r2, r2
 8007f26:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	3302      	adds	r3, #2
 8007f2c:	61bb      	str	r3, [r7, #24]
 8007f2e:	e007      	b.n	8007f40 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	781a      	ldrb	r2, [r3, #0]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2252      	movs	r2, #82	@ 0x52
 8007f44:	5a9b      	ldrh	r3, [r3, r2]
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	b299      	uxth	r1, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2252      	movs	r2, #82	@ 0x52
 8007f50:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2252      	movs	r2, #82	@ 0x52
 8007f56:	5a9b      	ldrh	r3, [r3, r2]
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1c9      	bne.n	8007ef2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	0013      	movs	r3, r2
 8007f68:	2200      	movs	r2, #0
 8007f6a:	2140      	movs	r1, #64	@ 0x40
 8007f6c:	f000 fb56 	bl	800861c <UART_WaitOnFlagUntilTimeout>
 8007f70:	1e03      	subs	r3, r0, #0
 8007f72:	d004      	beq.n	8007f7e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2220      	movs	r2, #32
 8007f78:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e005      	b.n	8007f8a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2220      	movs	r2, #32
 8007f82:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007f84:	2300      	movs	r3, #0
 8007f86:	e000      	b.n	8007f8a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007f88:	2302      	movs	r3, #2
  }
}
 8007f8a:	0018      	movs	r0, r3
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	b008      	add	sp, #32
 8007f90:	bd80      	pop	{r7, pc}
	...

08007f94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b088      	sub	sp, #32
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f9c:	231e      	movs	r3, #30
 8007f9e:	18fb      	adds	r3, r7, r3
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	689a      	ldr	r2, [r3, #8]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	431a      	orrs	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	431a      	orrs	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	69db      	ldr	r3, [r3, #28]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4abe      	ldr	r2, [pc, #760]	@ (80082bc <UART_SetConfig+0x328>)
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	0019      	movs	r1, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	4ab9      	ldr	r2, [pc, #740]	@ (80082c0 <UART_SetConfig+0x32c>)
 8007fda:	4013      	ands	r3, r2
 8007fdc:	0019      	movs	r1, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68da      	ldr	r2, [r3, #12]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	4ab0      	ldr	r2, [pc, #704]	@ (80082c4 <UART_SetConfig+0x330>)
 8008002:	4013      	ands	r3, r2
 8008004:	0019      	movs	r1, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	430a      	orrs	r2, r1
 800800e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4aac      	ldr	r2, [pc, #688]	@ (80082c8 <UART_SetConfig+0x334>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d127      	bne.n	800806a <UART_SetConfig+0xd6>
 800801a:	4bac      	ldr	r3, [pc, #688]	@ (80082cc <UART_SetConfig+0x338>)
 800801c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800801e:	2203      	movs	r2, #3
 8008020:	4013      	ands	r3, r2
 8008022:	2b03      	cmp	r3, #3
 8008024:	d00d      	beq.n	8008042 <UART_SetConfig+0xae>
 8008026:	d81b      	bhi.n	8008060 <UART_SetConfig+0xcc>
 8008028:	2b02      	cmp	r3, #2
 800802a:	d014      	beq.n	8008056 <UART_SetConfig+0xc2>
 800802c:	d818      	bhi.n	8008060 <UART_SetConfig+0xcc>
 800802e:	2b00      	cmp	r3, #0
 8008030:	d002      	beq.n	8008038 <UART_SetConfig+0xa4>
 8008032:	2b01      	cmp	r3, #1
 8008034:	d00a      	beq.n	800804c <UART_SetConfig+0xb8>
 8008036:	e013      	b.n	8008060 <UART_SetConfig+0xcc>
 8008038:	231f      	movs	r3, #31
 800803a:	18fb      	adds	r3, r7, r3
 800803c:	2200      	movs	r2, #0
 800803e:	701a      	strb	r2, [r3, #0]
 8008040:	e0bd      	b.n	80081be <UART_SetConfig+0x22a>
 8008042:	231f      	movs	r3, #31
 8008044:	18fb      	adds	r3, r7, r3
 8008046:	2202      	movs	r2, #2
 8008048:	701a      	strb	r2, [r3, #0]
 800804a:	e0b8      	b.n	80081be <UART_SetConfig+0x22a>
 800804c:	231f      	movs	r3, #31
 800804e:	18fb      	adds	r3, r7, r3
 8008050:	2204      	movs	r2, #4
 8008052:	701a      	strb	r2, [r3, #0]
 8008054:	e0b3      	b.n	80081be <UART_SetConfig+0x22a>
 8008056:	231f      	movs	r3, #31
 8008058:	18fb      	adds	r3, r7, r3
 800805a:	2208      	movs	r2, #8
 800805c:	701a      	strb	r2, [r3, #0]
 800805e:	e0ae      	b.n	80081be <UART_SetConfig+0x22a>
 8008060:	231f      	movs	r3, #31
 8008062:	18fb      	adds	r3, r7, r3
 8008064:	2210      	movs	r2, #16
 8008066:	701a      	strb	r2, [r3, #0]
 8008068:	e0a9      	b.n	80081be <UART_SetConfig+0x22a>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a98      	ldr	r2, [pc, #608]	@ (80082d0 <UART_SetConfig+0x33c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d134      	bne.n	80080de <UART_SetConfig+0x14a>
 8008074:	4b95      	ldr	r3, [pc, #596]	@ (80082cc <UART_SetConfig+0x338>)
 8008076:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008078:	23c0      	movs	r3, #192	@ 0xc0
 800807a:	029b      	lsls	r3, r3, #10
 800807c:	4013      	ands	r3, r2
 800807e:	22c0      	movs	r2, #192	@ 0xc0
 8008080:	0292      	lsls	r2, r2, #10
 8008082:	4293      	cmp	r3, r2
 8008084:	d017      	beq.n	80080b6 <UART_SetConfig+0x122>
 8008086:	22c0      	movs	r2, #192	@ 0xc0
 8008088:	0292      	lsls	r2, r2, #10
 800808a:	4293      	cmp	r3, r2
 800808c:	d822      	bhi.n	80080d4 <UART_SetConfig+0x140>
 800808e:	2280      	movs	r2, #128	@ 0x80
 8008090:	0292      	lsls	r2, r2, #10
 8008092:	4293      	cmp	r3, r2
 8008094:	d019      	beq.n	80080ca <UART_SetConfig+0x136>
 8008096:	2280      	movs	r2, #128	@ 0x80
 8008098:	0292      	lsls	r2, r2, #10
 800809a:	4293      	cmp	r3, r2
 800809c:	d81a      	bhi.n	80080d4 <UART_SetConfig+0x140>
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d004      	beq.n	80080ac <UART_SetConfig+0x118>
 80080a2:	2280      	movs	r2, #128	@ 0x80
 80080a4:	0252      	lsls	r2, r2, #9
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d00a      	beq.n	80080c0 <UART_SetConfig+0x12c>
 80080aa:	e013      	b.n	80080d4 <UART_SetConfig+0x140>
 80080ac:	231f      	movs	r3, #31
 80080ae:	18fb      	adds	r3, r7, r3
 80080b0:	2200      	movs	r2, #0
 80080b2:	701a      	strb	r2, [r3, #0]
 80080b4:	e083      	b.n	80081be <UART_SetConfig+0x22a>
 80080b6:	231f      	movs	r3, #31
 80080b8:	18fb      	adds	r3, r7, r3
 80080ba:	2202      	movs	r2, #2
 80080bc:	701a      	strb	r2, [r3, #0]
 80080be:	e07e      	b.n	80081be <UART_SetConfig+0x22a>
 80080c0:	231f      	movs	r3, #31
 80080c2:	18fb      	adds	r3, r7, r3
 80080c4:	2204      	movs	r2, #4
 80080c6:	701a      	strb	r2, [r3, #0]
 80080c8:	e079      	b.n	80081be <UART_SetConfig+0x22a>
 80080ca:	231f      	movs	r3, #31
 80080cc:	18fb      	adds	r3, r7, r3
 80080ce:	2208      	movs	r2, #8
 80080d0:	701a      	strb	r2, [r3, #0]
 80080d2:	e074      	b.n	80081be <UART_SetConfig+0x22a>
 80080d4:	231f      	movs	r3, #31
 80080d6:	18fb      	adds	r3, r7, r3
 80080d8:	2210      	movs	r2, #16
 80080da:	701a      	strb	r2, [r3, #0]
 80080dc:	e06f      	b.n	80081be <UART_SetConfig+0x22a>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a7c      	ldr	r2, [pc, #496]	@ (80082d4 <UART_SetConfig+0x340>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d134      	bne.n	8008152 <UART_SetConfig+0x1be>
 80080e8:	4b78      	ldr	r3, [pc, #480]	@ (80082cc <UART_SetConfig+0x338>)
 80080ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080ec:	23c0      	movs	r3, #192	@ 0xc0
 80080ee:	031b      	lsls	r3, r3, #12
 80080f0:	4013      	ands	r3, r2
 80080f2:	22c0      	movs	r2, #192	@ 0xc0
 80080f4:	0312      	lsls	r2, r2, #12
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d017      	beq.n	800812a <UART_SetConfig+0x196>
 80080fa:	22c0      	movs	r2, #192	@ 0xc0
 80080fc:	0312      	lsls	r2, r2, #12
 80080fe:	4293      	cmp	r3, r2
 8008100:	d822      	bhi.n	8008148 <UART_SetConfig+0x1b4>
 8008102:	2280      	movs	r2, #128	@ 0x80
 8008104:	0312      	lsls	r2, r2, #12
 8008106:	4293      	cmp	r3, r2
 8008108:	d019      	beq.n	800813e <UART_SetConfig+0x1aa>
 800810a:	2280      	movs	r2, #128	@ 0x80
 800810c:	0312      	lsls	r2, r2, #12
 800810e:	4293      	cmp	r3, r2
 8008110:	d81a      	bhi.n	8008148 <UART_SetConfig+0x1b4>
 8008112:	2b00      	cmp	r3, #0
 8008114:	d004      	beq.n	8008120 <UART_SetConfig+0x18c>
 8008116:	2280      	movs	r2, #128	@ 0x80
 8008118:	02d2      	lsls	r2, r2, #11
 800811a:	4293      	cmp	r3, r2
 800811c:	d00a      	beq.n	8008134 <UART_SetConfig+0x1a0>
 800811e:	e013      	b.n	8008148 <UART_SetConfig+0x1b4>
 8008120:	231f      	movs	r3, #31
 8008122:	18fb      	adds	r3, r7, r3
 8008124:	2200      	movs	r2, #0
 8008126:	701a      	strb	r2, [r3, #0]
 8008128:	e049      	b.n	80081be <UART_SetConfig+0x22a>
 800812a:	231f      	movs	r3, #31
 800812c:	18fb      	adds	r3, r7, r3
 800812e:	2202      	movs	r2, #2
 8008130:	701a      	strb	r2, [r3, #0]
 8008132:	e044      	b.n	80081be <UART_SetConfig+0x22a>
 8008134:	231f      	movs	r3, #31
 8008136:	18fb      	adds	r3, r7, r3
 8008138:	2204      	movs	r2, #4
 800813a:	701a      	strb	r2, [r3, #0]
 800813c:	e03f      	b.n	80081be <UART_SetConfig+0x22a>
 800813e:	231f      	movs	r3, #31
 8008140:	18fb      	adds	r3, r7, r3
 8008142:	2208      	movs	r2, #8
 8008144:	701a      	strb	r2, [r3, #0]
 8008146:	e03a      	b.n	80081be <UART_SetConfig+0x22a>
 8008148:	231f      	movs	r3, #31
 800814a:	18fb      	adds	r3, r7, r3
 800814c:	2210      	movs	r2, #16
 800814e:	701a      	strb	r2, [r3, #0]
 8008150:	e035      	b.n	80081be <UART_SetConfig+0x22a>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a60      	ldr	r2, [pc, #384]	@ (80082d8 <UART_SetConfig+0x344>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d104      	bne.n	8008166 <UART_SetConfig+0x1d2>
 800815c:	231f      	movs	r3, #31
 800815e:	18fb      	adds	r3, r7, r3
 8008160:	2200      	movs	r2, #0
 8008162:	701a      	strb	r2, [r3, #0]
 8008164:	e02b      	b.n	80081be <UART_SetConfig+0x22a>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a5c      	ldr	r2, [pc, #368]	@ (80082dc <UART_SetConfig+0x348>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d104      	bne.n	800817a <UART_SetConfig+0x1e6>
 8008170:	231f      	movs	r3, #31
 8008172:	18fb      	adds	r3, r7, r3
 8008174:	2200      	movs	r2, #0
 8008176:	701a      	strb	r2, [r3, #0]
 8008178:	e021      	b.n	80081be <UART_SetConfig+0x22a>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a58      	ldr	r2, [pc, #352]	@ (80082e0 <UART_SetConfig+0x34c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d104      	bne.n	800818e <UART_SetConfig+0x1fa>
 8008184:	231f      	movs	r3, #31
 8008186:	18fb      	adds	r3, r7, r3
 8008188:	2200      	movs	r2, #0
 800818a:	701a      	strb	r2, [r3, #0]
 800818c:	e017      	b.n	80081be <UART_SetConfig+0x22a>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a54      	ldr	r2, [pc, #336]	@ (80082e4 <UART_SetConfig+0x350>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d104      	bne.n	80081a2 <UART_SetConfig+0x20e>
 8008198:	231f      	movs	r3, #31
 800819a:	18fb      	adds	r3, r7, r3
 800819c:	2200      	movs	r2, #0
 800819e:	701a      	strb	r2, [r3, #0]
 80081a0:	e00d      	b.n	80081be <UART_SetConfig+0x22a>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a50      	ldr	r2, [pc, #320]	@ (80082e8 <UART_SetConfig+0x354>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d104      	bne.n	80081b6 <UART_SetConfig+0x222>
 80081ac:	231f      	movs	r3, #31
 80081ae:	18fb      	adds	r3, r7, r3
 80081b0:	2200      	movs	r2, #0
 80081b2:	701a      	strb	r2, [r3, #0]
 80081b4:	e003      	b.n	80081be <UART_SetConfig+0x22a>
 80081b6:	231f      	movs	r3, #31
 80081b8:	18fb      	adds	r3, r7, r3
 80081ba:	2210      	movs	r2, #16
 80081bc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	69da      	ldr	r2, [r3, #28]
 80081c2:	2380      	movs	r3, #128	@ 0x80
 80081c4:	021b      	lsls	r3, r3, #8
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d15c      	bne.n	8008284 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 80081ca:	231f      	movs	r3, #31
 80081cc:	18fb      	adds	r3, r7, r3
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	2b08      	cmp	r3, #8
 80081d2:	d015      	beq.n	8008200 <UART_SetConfig+0x26c>
 80081d4:	dc18      	bgt.n	8008208 <UART_SetConfig+0x274>
 80081d6:	2b04      	cmp	r3, #4
 80081d8:	d00d      	beq.n	80081f6 <UART_SetConfig+0x262>
 80081da:	dc15      	bgt.n	8008208 <UART_SetConfig+0x274>
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d002      	beq.n	80081e6 <UART_SetConfig+0x252>
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d005      	beq.n	80081f0 <UART_SetConfig+0x25c>
 80081e4:	e010      	b.n	8008208 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081e6:	f7fe fe11 	bl	8006e0c <HAL_RCC_GetPCLK1Freq>
 80081ea:	0003      	movs	r3, r0
 80081ec:	61bb      	str	r3, [r7, #24]
        break;
 80081ee:	e012      	b.n	8008216 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081f0:	4b3e      	ldr	r3, [pc, #248]	@ (80082ec <UART_SetConfig+0x358>)
 80081f2:	61bb      	str	r3, [r7, #24]
        break;
 80081f4:	e00f      	b.n	8008216 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081f6:	f7fe fd8b 	bl	8006d10 <HAL_RCC_GetSysClockFreq>
 80081fa:	0003      	movs	r3, r0
 80081fc:	61bb      	str	r3, [r7, #24]
        break;
 80081fe:	e00a      	b.n	8008216 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008200:	2380      	movs	r3, #128	@ 0x80
 8008202:	021b      	lsls	r3, r3, #8
 8008204:	61bb      	str	r3, [r7, #24]
        break;
 8008206:	e006      	b.n	8008216 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8008208:	2300      	movs	r3, #0
 800820a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800820c:	231e      	movs	r3, #30
 800820e:	18fb      	adds	r3, r7, r3
 8008210:	2201      	movs	r2, #1
 8008212:	701a      	strb	r2, [r3, #0]
        break;
 8008214:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d100      	bne.n	800821e <UART_SetConfig+0x28a>
 800821c:	e095      	b.n	800834a <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	005a      	lsls	r2, r3, #1
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	085b      	lsrs	r3, r3, #1
 8008228:	18d2      	adds	r2, r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	0019      	movs	r1, r3
 8008230:	0010      	movs	r0, r2
 8008232:	f7f7 ff71 	bl	8000118 <__udivsi3>
 8008236:	0003      	movs	r3, r0
 8008238:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	2b0f      	cmp	r3, #15
 800823e:	d91c      	bls.n	800827a <UART_SetConfig+0x2e6>
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	2380      	movs	r3, #128	@ 0x80
 8008244:	025b      	lsls	r3, r3, #9
 8008246:	429a      	cmp	r2, r3
 8008248:	d217      	bcs.n	800827a <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	b29a      	uxth	r2, r3
 800824e:	200e      	movs	r0, #14
 8008250:	183b      	adds	r3, r7, r0
 8008252:	210f      	movs	r1, #15
 8008254:	438a      	bics	r2, r1
 8008256:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	085b      	lsrs	r3, r3, #1
 800825c:	b29b      	uxth	r3, r3
 800825e:	2207      	movs	r2, #7
 8008260:	4013      	ands	r3, r2
 8008262:	b299      	uxth	r1, r3
 8008264:	183b      	adds	r3, r7, r0
 8008266:	183a      	adds	r2, r7, r0
 8008268:	8812      	ldrh	r2, [r2, #0]
 800826a:	430a      	orrs	r2, r1
 800826c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	183a      	adds	r2, r7, r0
 8008274:	8812      	ldrh	r2, [r2, #0]
 8008276:	60da      	str	r2, [r3, #12]
 8008278:	e067      	b.n	800834a <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800827a:	231e      	movs	r3, #30
 800827c:	18fb      	adds	r3, r7, r3
 800827e:	2201      	movs	r2, #1
 8008280:	701a      	strb	r2, [r3, #0]
 8008282:	e062      	b.n	800834a <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008284:	231f      	movs	r3, #31
 8008286:	18fb      	adds	r3, r7, r3
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	2b08      	cmp	r3, #8
 800828c:	d030      	beq.n	80082f0 <UART_SetConfig+0x35c>
 800828e:	dc33      	bgt.n	80082f8 <UART_SetConfig+0x364>
 8008290:	2b04      	cmp	r3, #4
 8008292:	d00d      	beq.n	80082b0 <UART_SetConfig+0x31c>
 8008294:	dc30      	bgt.n	80082f8 <UART_SetConfig+0x364>
 8008296:	2b00      	cmp	r3, #0
 8008298:	d002      	beq.n	80082a0 <UART_SetConfig+0x30c>
 800829a:	2b02      	cmp	r3, #2
 800829c:	d005      	beq.n	80082aa <UART_SetConfig+0x316>
 800829e:	e02b      	b.n	80082f8 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082a0:	f7fe fdb4 	bl	8006e0c <HAL_RCC_GetPCLK1Freq>
 80082a4:	0003      	movs	r3, r0
 80082a6:	61bb      	str	r3, [r7, #24]
        break;
 80082a8:	e02d      	b.n	8008306 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082aa:	4b10      	ldr	r3, [pc, #64]	@ (80082ec <UART_SetConfig+0x358>)
 80082ac:	61bb      	str	r3, [r7, #24]
        break;
 80082ae:	e02a      	b.n	8008306 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082b0:	f7fe fd2e 	bl	8006d10 <HAL_RCC_GetSysClockFreq>
 80082b4:	0003      	movs	r3, r0
 80082b6:	61bb      	str	r3, [r7, #24]
        break;
 80082b8:	e025      	b.n	8008306 <UART_SetConfig+0x372>
 80082ba:	46c0      	nop			@ (mov r8, r8)
 80082bc:	efff69f3 	.word	0xefff69f3
 80082c0:	ffffcfff 	.word	0xffffcfff
 80082c4:	fffff4ff 	.word	0xfffff4ff
 80082c8:	40013800 	.word	0x40013800
 80082cc:	40021000 	.word	0x40021000
 80082d0:	40004400 	.word	0x40004400
 80082d4:	40004800 	.word	0x40004800
 80082d8:	40004c00 	.word	0x40004c00
 80082dc:	40005000 	.word	0x40005000
 80082e0:	40011400 	.word	0x40011400
 80082e4:	40011800 	.word	0x40011800
 80082e8:	40011c00 	.word	0x40011c00
 80082ec:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082f0:	2380      	movs	r3, #128	@ 0x80
 80082f2:	021b      	lsls	r3, r3, #8
 80082f4:	61bb      	str	r3, [r7, #24]
        break;
 80082f6:	e006      	b.n	8008306 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80082fc:	231e      	movs	r3, #30
 80082fe:	18fb      	adds	r3, r7, r3
 8008300:	2201      	movs	r2, #1
 8008302:	701a      	strb	r2, [r3, #0]
        break;
 8008304:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d01e      	beq.n	800834a <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	085a      	lsrs	r2, r3, #1
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	18d2      	adds	r2, r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	0019      	movs	r1, r3
 800831c:	0010      	movs	r0, r2
 800831e:	f7f7 fefb 	bl	8000118 <__udivsi3>
 8008322:	0003      	movs	r3, r0
 8008324:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	2b0f      	cmp	r3, #15
 800832a:	d90a      	bls.n	8008342 <UART_SetConfig+0x3ae>
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	2380      	movs	r3, #128	@ 0x80
 8008330:	025b      	lsls	r3, r3, #9
 8008332:	429a      	cmp	r2, r3
 8008334:	d205      	bcs.n	8008342 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	b29a      	uxth	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	60da      	str	r2, [r3, #12]
 8008340:	e003      	b.n	800834a <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8008342:	231e      	movs	r3, #30
 8008344:	18fb      	adds	r3, r7, r3
 8008346:	2201      	movs	r2, #1
 8008348:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008356:	231e      	movs	r3, #30
 8008358:	18fb      	adds	r3, r7, r3
 800835a:	781b      	ldrb	r3, [r3, #0]
}
 800835c:	0018      	movs	r0, r3
 800835e:	46bd      	mov	sp, r7
 8008360:	b008      	add	sp, #32
 8008362:	bd80      	pop	{r7, pc}

08008364 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008370:	2208      	movs	r2, #8
 8008372:	4013      	ands	r3, r2
 8008374:	d00b      	beq.n	800838e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	4a4a      	ldr	r2, [pc, #296]	@ (80084a8 <UART_AdvFeatureConfig+0x144>)
 800837e:	4013      	ands	r3, r2
 8008380:	0019      	movs	r1, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	430a      	orrs	r2, r1
 800838c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008392:	2201      	movs	r2, #1
 8008394:	4013      	ands	r3, r2
 8008396:	d00b      	beq.n	80083b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	4a43      	ldr	r2, [pc, #268]	@ (80084ac <UART_AdvFeatureConfig+0x148>)
 80083a0:	4013      	ands	r3, r2
 80083a2:	0019      	movs	r1, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	430a      	orrs	r2, r1
 80083ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b4:	2202      	movs	r2, #2
 80083b6:	4013      	ands	r3, r2
 80083b8:	d00b      	beq.n	80083d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	4a3b      	ldr	r2, [pc, #236]	@ (80084b0 <UART_AdvFeatureConfig+0x14c>)
 80083c2:	4013      	ands	r3, r2
 80083c4:	0019      	movs	r1, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	430a      	orrs	r2, r1
 80083d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d6:	2204      	movs	r2, #4
 80083d8:	4013      	ands	r3, r2
 80083da:	d00b      	beq.n	80083f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	4a34      	ldr	r2, [pc, #208]	@ (80084b4 <UART_AdvFeatureConfig+0x150>)
 80083e4:	4013      	ands	r3, r2
 80083e6:	0019      	movs	r1, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f8:	2210      	movs	r2, #16
 80083fa:	4013      	ands	r3, r2
 80083fc:	d00b      	beq.n	8008416 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	4a2c      	ldr	r2, [pc, #176]	@ (80084b8 <UART_AdvFeatureConfig+0x154>)
 8008406:	4013      	ands	r3, r2
 8008408:	0019      	movs	r1, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	430a      	orrs	r2, r1
 8008414:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841a:	2220      	movs	r2, #32
 800841c:	4013      	ands	r3, r2
 800841e:	d00b      	beq.n	8008438 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	4a25      	ldr	r2, [pc, #148]	@ (80084bc <UART_AdvFeatureConfig+0x158>)
 8008428:	4013      	ands	r3, r2
 800842a:	0019      	movs	r1, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	430a      	orrs	r2, r1
 8008436:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800843c:	2240      	movs	r2, #64	@ 0x40
 800843e:	4013      	ands	r3, r2
 8008440:	d01d      	beq.n	800847e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	4a1d      	ldr	r2, [pc, #116]	@ (80084c0 <UART_AdvFeatureConfig+0x15c>)
 800844a:	4013      	ands	r3, r2
 800844c:	0019      	movs	r1, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800845e:	2380      	movs	r3, #128	@ 0x80
 8008460:	035b      	lsls	r3, r3, #13
 8008462:	429a      	cmp	r2, r3
 8008464:	d10b      	bne.n	800847e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	4a15      	ldr	r2, [pc, #84]	@ (80084c4 <UART_AdvFeatureConfig+0x160>)
 800846e:	4013      	ands	r3, r2
 8008470:	0019      	movs	r1, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	430a      	orrs	r2, r1
 800847c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008482:	2280      	movs	r2, #128	@ 0x80
 8008484:	4013      	ands	r3, r2
 8008486:	d00b      	beq.n	80084a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	4a0e      	ldr	r2, [pc, #56]	@ (80084c8 <UART_AdvFeatureConfig+0x164>)
 8008490:	4013      	ands	r3, r2
 8008492:	0019      	movs	r1, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	430a      	orrs	r2, r1
 800849e:	605a      	str	r2, [r3, #4]
  }
}
 80084a0:	46c0      	nop			@ (mov r8, r8)
 80084a2:	46bd      	mov	sp, r7
 80084a4:	b002      	add	sp, #8
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	ffff7fff 	.word	0xffff7fff
 80084ac:	fffdffff 	.word	0xfffdffff
 80084b0:	fffeffff 	.word	0xfffeffff
 80084b4:	fffbffff 	.word	0xfffbffff
 80084b8:	ffffefff 	.word	0xffffefff
 80084bc:	ffffdfff 	.word	0xffffdfff
 80084c0:	ffefffff 	.word	0xffefffff
 80084c4:	ff9fffff 	.word	0xff9fffff
 80084c8:	fff7ffff 	.word	0xfff7ffff

080084cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b092      	sub	sp, #72	@ 0x48
 80084d0:	af02      	add	r7, sp, #8
 80084d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2284      	movs	r2, #132	@ 0x84
 80084d8:	2100      	movs	r1, #0
 80084da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084dc:	f7fd fa18 	bl	8005910 <HAL_GetTick>
 80084e0:	0003      	movs	r3, r0
 80084e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2208      	movs	r2, #8
 80084ec:	4013      	ands	r3, r2
 80084ee:	2b08      	cmp	r3, #8
 80084f0:	d12c      	bne.n	800854c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084f4:	2280      	movs	r2, #128	@ 0x80
 80084f6:	0391      	lsls	r1, r2, #14
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	4a46      	ldr	r2, [pc, #280]	@ (8008614 <UART_CheckIdleState+0x148>)
 80084fc:	9200      	str	r2, [sp, #0]
 80084fe:	2200      	movs	r2, #0
 8008500:	f000 f88c 	bl	800861c <UART_WaitOnFlagUntilTimeout>
 8008504:	1e03      	subs	r3, r0, #0
 8008506:	d021      	beq.n	800854c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008508:	f3ef 8310 	mrs	r3, PRIMASK
 800850c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800850e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008510:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008512:	2301      	movs	r3, #1
 8008514:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008518:	f383 8810 	msr	PRIMASK, r3
}
 800851c:	46c0      	nop			@ (mov r8, r8)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2180      	movs	r1, #128	@ 0x80
 800852a:	438a      	bics	r2, r1
 800852c:	601a      	str	r2, [r3, #0]
 800852e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008530:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008534:	f383 8810 	msr	PRIMASK, r3
}
 8008538:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2220      	movs	r2, #32
 800853e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2278      	movs	r2, #120	@ 0x78
 8008544:	2100      	movs	r1, #0
 8008546:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e05f      	b.n	800860c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2204      	movs	r2, #4
 8008554:	4013      	ands	r3, r2
 8008556:	2b04      	cmp	r3, #4
 8008558:	d146      	bne.n	80085e8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800855a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800855c:	2280      	movs	r2, #128	@ 0x80
 800855e:	03d1      	lsls	r1, r2, #15
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	4a2c      	ldr	r2, [pc, #176]	@ (8008614 <UART_CheckIdleState+0x148>)
 8008564:	9200      	str	r2, [sp, #0]
 8008566:	2200      	movs	r2, #0
 8008568:	f000 f858 	bl	800861c <UART_WaitOnFlagUntilTimeout>
 800856c:	1e03      	subs	r3, r0, #0
 800856e:	d03b      	beq.n	80085e8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008570:	f3ef 8310 	mrs	r3, PRIMASK
 8008574:	60fb      	str	r3, [r7, #12]
  return(result);
 8008576:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008578:	637b      	str	r3, [r7, #52]	@ 0x34
 800857a:	2301      	movs	r3, #1
 800857c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	f383 8810 	msr	PRIMASK, r3
}
 8008584:	46c0      	nop			@ (mov r8, r8)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4921      	ldr	r1, [pc, #132]	@ (8008618 <UART_CheckIdleState+0x14c>)
 8008592:	400a      	ands	r2, r1
 8008594:	601a      	str	r2, [r3, #0]
 8008596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008598:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f383 8810 	msr	PRIMASK, r3
}
 80085a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085a2:	f3ef 8310 	mrs	r3, PRIMASK
 80085a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80085a8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80085ac:	2301      	movs	r3, #1
 80085ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	f383 8810 	msr	PRIMASK, r3
}
 80085b6:	46c0      	nop			@ (mov r8, r8)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	689a      	ldr	r2, [r3, #8]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2101      	movs	r1, #1
 80085c4:	438a      	bics	r2, r1
 80085c6:	609a      	str	r2, [r3, #8]
 80085c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	f383 8810 	msr	PRIMASK, r3
}
 80085d2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2280      	movs	r2, #128	@ 0x80
 80085d8:	2120      	movs	r1, #32
 80085da:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2278      	movs	r2, #120	@ 0x78
 80085e0:	2100      	movs	r1, #0
 80085e2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e011      	b.n	800860c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2220      	movs	r2, #32
 80085ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2280      	movs	r2, #128	@ 0x80
 80085f2:	2120      	movs	r1, #32
 80085f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2278      	movs	r2, #120	@ 0x78
 8008606:	2100      	movs	r1, #0
 8008608:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	0018      	movs	r0, r3
 800860e:	46bd      	mov	sp, r7
 8008610:	b010      	add	sp, #64	@ 0x40
 8008612:	bd80      	pop	{r7, pc}
 8008614:	01ffffff 	.word	0x01ffffff
 8008618:	fffffedf 	.word	0xfffffedf

0800861c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	603b      	str	r3, [r7, #0]
 8008628:	1dfb      	adds	r3, r7, #7
 800862a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800862c:	e051      	b.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	3301      	adds	r3, #1
 8008632:	d04e      	beq.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008634:	f7fd f96c 	bl	8005910 <HAL_GetTick>
 8008638:	0002      	movs	r2, r0
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	429a      	cmp	r2, r3
 8008642:	d302      	bcc.n	800864a <UART_WaitOnFlagUntilTimeout+0x2e>
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d101      	bne.n	800864e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e051      	b.n	80086f2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2204      	movs	r2, #4
 8008656:	4013      	ands	r3, r2
 8008658:	d03b      	beq.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	2b80      	cmp	r3, #128	@ 0x80
 800865e:	d038      	beq.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2b40      	cmp	r3, #64	@ 0x40
 8008664:	d035      	beq.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	69db      	ldr	r3, [r3, #28]
 800866c:	2208      	movs	r2, #8
 800866e:	4013      	ands	r3, r2
 8008670:	2b08      	cmp	r3, #8
 8008672:	d111      	bne.n	8008698 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2208      	movs	r2, #8
 800867a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	0018      	movs	r0, r3
 8008680:	f000 f83c 	bl	80086fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2284      	movs	r2, #132	@ 0x84
 8008688:	2108      	movs	r1, #8
 800868a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2278      	movs	r2, #120	@ 0x78
 8008690:	2100      	movs	r1, #0
 8008692:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e02c      	b.n	80086f2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	69da      	ldr	r2, [r3, #28]
 800869e:	2380      	movs	r3, #128	@ 0x80
 80086a0:	011b      	lsls	r3, r3, #4
 80086a2:	401a      	ands	r2, r3
 80086a4:	2380      	movs	r3, #128	@ 0x80
 80086a6:	011b      	lsls	r3, r3, #4
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d112      	bne.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2280      	movs	r2, #128	@ 0x80
 80086b2:	0112      	lsls	r2, r2, #4
 80086b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	0018      	movs	r0, r3
 80086ba:	f000 f81f 	bl	80086fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2284      	movs	r2, #132	@ 0x84
 80086c2:	2120      	movs	r1, #32
 80086c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2278      	movs	r2, #120	@ 0x78
 80086ca:	2100      	movs	r1, #0
 80086cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e00f      	b.n	80086f2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	69db      	ldr	r3, [r3, #28]
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	4013      	ands	r3, r2
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	425a      	negs	r2, r3
 80086e2:	4153      	adcs	r3, r2
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	001a      	movs	r2, r3
 80086e8:	1dfb      	adds	r3, r7, #7
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d09e      	beq.n	800862e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	0018      	movs	r0, r3
 80086f4:	46bd      	mov	sp, r7
 80086f6:	b004      	add	sp, #16
 80086f8:	bd80      	pop	{r7, pc}
	...

080086fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b08e      	sub	sp, #56	@ 0x38
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008704:	f3ef 8310 	mrs	r3, PRIMASK
 8008708:	617b      	str	r3, [r7, #20]
  return(result);
 800870a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800870c:	637b      	str	r3, [r7, #52]	@ 0x34
 800870e:	2301      	movs	r3, #1
 8008710:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	f383 8810 	msr	PRIMASK, r3
}
 8008718:	46c0      	nop			@ (mov r8, r8)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4926      	ldr	r1, [pc, #152]	@ (80087c0 <UART_EndRxTransfer+0xc4>)
 8008726:	400a      	ands	r2, r1
 8008728:	601a      	str	r2, [r3, #0]
 800872a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800872c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	f383 8810 	msr	PRIMASK, r3
}
 8008734:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008736:	f3ef 8310 	mrs	r3, PRIMASK
 800873a:	623b      	str	r3, [r7, #32]
  return(result);
 800873c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800873e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008740:	2301      	movs	r3, #1
 8008742:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008746:	f383 8810 	msr	PRIMASK, r3
}
 800874a:	46c0      	nop			@ (mov r8, r8)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	689a      	ldr	r2, [r3, #8]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2101      	movs	r1, #1
 8008758:	438a      	bics	r2, r1
 800875a:	609a      	str	r2, [r3, #8]
 800875c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008762:	f383 8810 	msr	PRIMASK, r3
}
 8008766:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800876c:	2b01      	cmp	r3, #1
 800876e:	d118      	bne.n	80087a2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008770:	f3ef 8310 	mrs	r3, PRIMASK
 8008774:	60bb      	str	r3, [r7, #8]
  return(result);
 8008776:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008778:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800877a:	2301      	movs	r3, #1
 800877c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f383 8810 	msr	PRIMASK, r3
}
 8008784:	46c0      	nop			@ (mov r8, r8)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2110      	movs	r1, #16
 8008792:	438a      	bics	r2, r1
 8008794:	601a      	str	r2, [r3, #0]
 8008796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008798:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	f383 8810 	msr	PRIMASK, r3
}
 80087a0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2280      	movs	r2, #128	@ 0x80
 80087a6:	2120      	movs	r1, #32
 80087a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80087b6:	46c0      	nop			@ (mov r8, r8)
 80087b8:	46bd      	mov	sp, r7
 80087ba:	b00e      	add	sp, #56	@ 0x38
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	46c0      	nop			@ (mov r8, r8)
 80087c0:	fffffedf 	.word	0xfffffedf

080087c4 <malloc>:
 80087c4:	b510      	push	{r4, lr}
 80087c6:	4b03      	ldr	r3, [pc, #12]	@ (80087d4 <malloc+0x10>)
 80087c8:	0001      	movs	r1, r0
 80087ca:	6818      	ldr	r0, [r3, #0]
 80087cc:	f000 f830 	bl	8008830 <_malloc_r>
 80087d0:	bd10      	pop	{r4, pc}
 80087d2:	46c0      	nop			@ (mov r8, r8)
 80087d4:	2000002c 	.word	0x2000002c

080087d8 <free>:
 80087d8:	b510      	push	{r4, lr}
 80087da:	4b03      	ldr	r3, [pc, #12]	@ (80087e8 <free+0x10>)
 80087dc:	0001      	movs	r1, r0
 80087de:	6818      	ldr	r0, [r3, #0]
 80087e0:	f000 fb76 	bl	8008ed0 <_free_r>
 80087e4:	bd10      	pop	{r4, pc}
 80087e6:	46c0      	nop			@ (mov r8, r8)
 80087e8:	2000002c 	.word	0x2000002c

080087ec <sbrk_aligned>:
 80087ec:	b570      	push	{r4, r5, r6, lr}
 80087ee:	4e0f      	ldr	r6, [pc, #60]	@ (800882c <sbrk_aligned+0x40>)
 80087f0:	000d      	movs	r5, r1
 80087f2:	6831      	ldr	r1, [r6, #0]
 80087f4:	0004      	movs	r4, r0
 80087f6:	2900      	cmp	r1, #0
 80087f8:	d102      	bne.n	8008800 <sbrk_aligned+0x14>
 80087fa:	f000 fb15 	bl	8008e28 <_sbrk_r>
 80087fe:	6030      	str	r0, [r6, #0]
 8008800:	0029      	movs	r1, r5
 8008802:	0020      	movs	r0, r4
 8008804:	f000 fb10 	bl	8008e28 <_sbrk_r>
 8008808:	1c43      	adds	r3, r0, #1
 800880a:	d103      	bne.n	8008814 <sbrk_aligned+0x28>
 800880c:	2501      	movs	r5, #1
 800880e:	426d      	negs	r5, r5
 8008810:	0028      	movs	r0, r5
 8008812:	bd70      	pop	{r4, r5, r6, pc}
 8008814:	2303      	movs	r3, #3
 8008816:	1cc5      	adds	r5, r0, #3
 8008818:	439d      	bics	r5, r3
 800881a:	42a8      	cmp	r0, r5
 800881c:	d0f8      	beq.n	8008810 <sbrk_aligned+0x24>
 800881e:	1a29      	subs	r1, r5, r0
 8008820:	0020      	movs	r0, r4
 8008822:	f000 fb01 	bl	8008e28 <_sbrk_r>
 8008826:	3001      	adds	r0, #1
 8008828:	d1f2      	bne.n	8008810 <sbrk_aligned+0x24>
 800882a:	e7ef      	b.n	800880c <sbrk_aligned+0x20>
 800882c:	2000129c 	.word	0x2000129c

08008830 <_malloc_r>:
 8008830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008832:	2203      	movs	r2, #3
 8008834:	1ccb      	adds	r3, r1, #3
 8008836:	4393      	bics	r3, r2
 8008838:	3308      	adds	r3, #8
 800883a:	0005      	movs	r5, r0
 800883c:	001f      	movs	r7, r3
 800883e:	2b0c      	cmp	r3, #12
 8008840:	d234      	bcs.n	80088ac <_malloc_r+0x7c>
 8008842:	270c      	movs	r7, #12
 8008844:	42b9      	cmp	r1, r7
 8008846:	d833      	bhi.n	80088b0 <_malloc_r+0x80>
 8008848:	0028      	movs	r0, r5
 800884a:	f000 f871 	bl	8008930 <__malloc_lock>
 800884e:	4e37      	ldr	r6, [pc, #220]	@ (800892c <_malloc_r+0xfc>)
 8008850:	6833      	ldr	r3, [r6, #0]
 8008852:	001c      	movs	r4, r3
 8008854:	2c00      	cmp	r4, #0
 8008856:	d12f      	bne.n	80088b8 <_malloc_r+0x88>
 8008858:	0039      	movs	r1, r7
 800885a:	0028      	movs	r0, r5
 800885c:	f7ff ffc6 	bl	80087ec <sbrk_aligned>
 8008860:	0004      	movs	r4, r0
 8008862:	1c43      	adds	r3, r0, #1
 8008864:	d15f      	bne.n	8008926 <_malloc_r+0xf6>
 8008866:	6834      	ldr	r4, [r6, #0]
 8008868:	9400      	str	r4, [sp, #0]
 800886a:	9b00      	ldr	r3, [sp, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d14a      	bne.n	8008906 <_malloc_r+0xd6>
 8008870:	2c00      	cmp	r4, #0
 8008872:	d052      	beq.n	800891a <_malloc_r+0xea>
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	0028      	movs	r0, r5
 8008878:	18e3      	adds	r3, r4, r3
 800887a:	9900      	ldr	r1, [sp, #0]
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	f000 fad3 	bl	8008e28 <_sbrk_r>
 8008882:	9b01      	ldr	r3, [sp, #4]
 8008884:	4283      	cmp	r3, r0
 8008886:	d148      	bne.n	800891a <_malloc_r+0xea>
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	0028      	movs	r0, r5
 800888c:	1aff      	subs	r7, r7, r3
 800888e:	0039      	movs	r1, r7
 8008890:	f7ff ffac 	bl	80087ec <sbrk_aligned>
 8008894:	3001      	adds	r0, #1
 8008896:	d040      	beq.n	800891a <_malloc_r+0xea>
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	19db      	adds	r3, r3, r7
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	6833      	ldr	r3, [r6, #0]
 80088a0:	685a      	ldr	r2, [r3, #4]
 80088a2:	2a00      	cmp	r2, #0
 80088a4:	d133      	bne.n	800890e <_malloc_r+0xde>
 80088a6:	9b00      	ldr	r3, [sp, #0]
 80088a8:	6033      	str	r3, [r6, #0]
 80088aa:	e019      	b.n	80088e0 <_malloc_r+0xb0>
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	dac9      	bge.n	8008844 <_malloc_r+0x14>
 80088b0:	230c      	movs	r3, #12
 80088b2:	602b      	str	r3, [r5, #0]
 80088b4:	2000      	movs	r0, #0
 80088b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80088b8:	6821      	ldr	r1, [r4, #0]
 80088ba:	1bc9      	subs	r1, r1, r7
 80088bc:	d420      	bmi.n	8008900 <_malloc_r+0xd0>
 80088be:	290b      	cmp	r1, #11
 80088c0:	d90a      	bls.n	80088d8 <_malloc_r+0xa8>
 80088c2:	19e2      	adds	r2, r4, r7
 80088c4:	6027      	str	r7, [r4, #0]
 80088c6:	42a3      	cmp	r3, r4
 80088c8:	d104      	bne.n	80088d4 <_malloc_r+0xa4>
 80088ca:	6032      	str	r2, [r6, #0]
 80088cc:	6863      	ldr	r3, [r4, #4]
 80088ce:	6011      	str	r1, [r2, #0]
 80088d0:	6053      	str	r3, [r2, #4]
 80088d2:	e005      	b.n	80088e0 <_malloc_r+0xb0>
 80088d4:	605a      	str	r2, [r3, #4]
 80088d6:	e7f9      	b.n	80088cc <_malloc_r+0x9c>
 80088d8:	6862      	ldr	r2, [r4, #4]
 80088da:	42a3      	cmp	r3, r4
 80088dc:	d10e      	bne.n	80088fc <_malloc_r+0xcc>
 80088de:	6032      	str	r2, [r6, #0]
 80088e0:	0028      	movs	r0, r5
 80088e2:	f000 f82d 	bl	8008940 <__malloc_unlock>
 80088e6:	0020      	movs	r0, r4
 80088e8:	2207      	movs	r2, #7
 80088ea:	300b      	adds	r0, #11
 80088ec:	1d23      	adds	r3, r4, #4
 80088ee:	4390      	bics	r0, r2
 80088f0:	1ac2      	subs	r2, r0, r3
 80088f2:	4298      	cmp	r0, r3
 80088f4:	d0df      	beq.n	80088b6 <_malloc_r+0x86>
 80088f6:	1a1b      	subs	r3, r3, r0
 80088f8:	50a3      	str	r3, [r4, r2]
 80088fa:	e7dc      	b.n	80088b6 <_malloc_r+0x86>
 80088fc:	605a      	str	r2, [r3, #4]
 80088fe:	e7ef      	b.n	80088e0 <_malloc_r+0xb0>
 8008900:	0023      	movs	r3, r4
 8008902:	6864      	ldr	r4, [r4, #4]
 8008904:	e7a6      	b.n	8008854 <_malloc_r+0x24>
 8008906:	9c00      	ldr	r4, [sp, #0]
 8008908:	6863      	ldr	r3, [r4, #4]
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	e7ad      	b.n	800886a <_malloc_r+0x3a>
 800890e:	001a      	movs	r2, r3
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	42a3      	cmp	r3, r4
 8008914:	d1fb      	bne.n	800890e <_malloc_r+0xde>
 8008916:	2300      	movs	r3, #0
 8008918:	e7da      	b.n	80088d0 <_malloc_r+0xa0>
 800891a:	230c      	movs	r3, #12
 800891c:	0028      	movs	r0, r5
 800891e:	602b      	str	r3, [r5, #0]
 8008920:	f000 f80e 	bl	8008940 <__malloc_unlock>
 8008924:	e7c6      	b.n	80088b4 <_malloc_r+0x84>
 8008926:	6007      	str	r7, [r0, #0]
 8008928:	e7da      	b.n	80088e0 <_malloc_r+0xb0>
 800892a:	46c0      	nop			@ (mov r8, r8)
 800892c:	200012a0 	.word	0x200012a0

08008930 <__malloc_lock>:
 8008930:	b510      	push	{r4, lr}
 8008932:	4802      	ldr	r0, [pc, #8]	@ (800893c <__malloc_lock+0xc>)
 8008934:	f000 fac9 	bl	8008eca <__retarget_lock_acquire_recursive>
 8008938:	bd10      	pop	{r4, pc}
 800893a:	46c0      	nop			@ (mov r8, r8)
 800893c:	200013e4 	.word	0x200013e4

08008940 <__malloc_unlock>:
 8008940:	b510      	push	{r4, lr}
 8008942:	4802      	ldr	r0, [pc, #8]	@ (800894c <__malloc_unlock+0xc>)
 8008944:	f000 fac2 	bl	8008ecc <__retarget_lock_release_recursive>
 8008948:	bd10      	pop	{r4, pc}
 800894a:	46c0      	nop			@ (mov r8, r8)
 800894c:	200013e4 	.word	0x200013e4

08008950 <std>:
 8008950:	2300      	movs	r3, #0
 8008952:	b510      	push	{r4, lr}
 8008954:	0004      	movs	r4, r0
 8008956:	6003      	str	r3, [r0, #0]
 8008958:	6043      	str	r3, [r0, #4]
 800895a:	6083      	str	r3, [r0, #8]
 800895c:	8181      	strh	r1, [r0, #12]
 800895e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008960:	81c2      	strh	r2, [r0, #14]
 8008962:	6103      	str	r3, [r0, #16]
 8008964:	6143      	str	r3, [r0, #20]
 8008966:	6183      	str	r3, [r0, #24]
 8008968:	0019      	movs	r1, r3
 800896a:	2208      	movs	r2, #8
 800896c:	305c      	adds	r0, #92	@ 0x5c
 800896e:	f000 fa19 	bl	8008da4 <memset>
 8008972:	4b0b      	ldr	r3, [pc, #44]	@ (80089a0 <std+0x50>)
 8008974:	6224      	str	r4, [r4, #32]
 8008976:	6263      	str	r3, [r4, #36]	@ 0x24
 8008978:	4b0a      	ldr	r3, [pc, #40]	@ (80089a4 <std+0x54>)
 800897a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800897c:	4b0a      	ldr	r3, [pc, #40]	@ (80089a8 <std+0x58>)
 800897e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008980:	4b0a      	ldr	r3, [pc, #40]	@ (80089ac <std+0x5c>)
 8008982:	6323      	str	r3, [r4, #48]	@ 0x30
 8008984:	4b0a      	ldr	r3, [pc, #40]	@ (80089b0 <std+0x60>)
 8008986:	429c      	cmp	r4, r3
 8008988:	d005      	beq.n	8008996 <std+0x46>
 800898a:	4b0a      	ldr	r3, [pc, #40]	@ (80089b4 <std+0x64>)
 800898c:	429c      	cmp	r4, r3
 800898e:	d002      	beq.n	8008996 <std+0x46>
 8008990:	4b09      	ldr	r3, [pc, #36]	@ (80089b8 <std+0x68>)
 8008992:	429c      	cmp	r4, r3
 8008994:	d103      	bne.n	800899e <std+0x4e>
 8008996:	0020      	movs	r0, r4
 8008998:	3058      	adds	r0, #88	@ 0x58
 800899a:	f000 fa95 	bl	8008ec8 <__retarget_lock_init_recursive>
 800899e:	bd10      	pop	{r4, pc}
 80089a0:	08008bcd 	.word	0x08008bcd
 80089a4:	08008bf5 	.word	0x08008bf5
 80089a8:	08008c2d 	.word	0x08008c2d
 80089ac:	08008c59 	.word	0x08008c59
 80089b0:	200012a4 	.word	0x200012a4
 80089b4:	2000130c 	.word	0x2000130c
 80089b8:	20001374 	.word	0x20001374

080089bc <stdio_exit_handler>:
 80089bc:	b510      	push	{r4, lr}
 80089be:	4a03      	ldr	r2, [pc, #12]	@ (80089cc <stdio_exit_handler+0x10>)
 80089c0:	4903      	ldr	r1, [pc, #12]	@ (80089d0 <stdio_exit_handler+0x14>)
 80089c2:	4804      	ldr	r0, [pc, #16]	@ (80089d4 <stdio_exit_handler+0x18>)
 80089c4:	f000 f86c 	bl	8008aa0 <_fwalk_sglue>
 80089c8:	bd10      	pop	{r4, pc}
 80089ca:	46c0      	nop			@ (mov r8, r8)
 80089cc:	20000020 	.word	0x20000020
 80089d0:	080095f1 	.word	0x080095f1
 80089d4:	20000030 	.word	0x20000030

080089d8 <cleanup_stdio>:
 80089d8:	6841      	ldr	r1, [r0, #4]
 80089da:	4b0b      	ldr	r3, [pc, #44]	@ (8008a08 <cleanup_stdio+0x30>)
 80089dc:	b510      	push	{r4, lr}
 80089de:	0004      	movs	r4, r0
 80089e0:	4299      	cmp	r1, r3
 80089e2:	d001      	beq.n	80089e8 <cleanup_stdio+0x10>
 80089e4:	f000 fe04 	bl	80095f0 <_fflush_r>
 80089e8:	68a1      	ldr	r1, [r4, #8]
 80089ea:	4b08      	ldr	r3, [pc, #32]	@ (8008a0c <cleanup_stdio+0x34>)
 80089ec:	4299      	cmp	r1, r3
 80089ee:	d002      	beq.n	80089f6 <cleanup_stdio+0x1e>
 80089f0:	0020      	movs	r0, r4
 80089f2:	f000 fdfd 	bl	80095f0 <_fflush_r>
 80089f6:	68e1      	ldr	r1, [r4, #12]
 80089f8:	4b05      	ldr	r3, [pc, #20]	@ (8008a10 <cleanup_stdio+0x38>)
 80089fa:	4299      	cmp	r1, r3
 80089fc:	d002      	beq.n	8008a04 <cleanup_stdio+0x2c>
 80089fe:	0020      	movs	r0, r4
 8008a00:	f000 fdf6 	bl	80095f0 <_fflush_r>
 8008a04:	bd10      	pop	{r4, pc}
 8008a06:	46c0      	nop			@ (mov r8, r8)
 8008a08:	200012a4 	.word	0x200012a4
 8008a0c:	2000130c 	.word	0x2000130c
 8008a10:	20001374 	.word	0x20001374

08008a14 <global_stdio_init.part.0>:
 8008a14:	b510      	push	{r4, lr}
 8008a16:	4b09      	ldr	r3, [pc, #36]	@ (8008a3c <global_stdio_init.part.0+0x28>)
 8008a18:	4a09      	ldr	r2, [pc, #36]	@ (8008a40 <global_stdio_init.part.0+0x2c>)
 8008a1a:	2104      	movs	r1, #4
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	4809      	ldr	r0, [pc, #36]	@ (8008a44 <global_stdio_init.part.0+0x30>)
 8008a20:	2200      	movs	r2, #0
 8008a22:	f7ff ff95 	bl	8008950 <std>
 8008a26:	2201      	movs	r2, #1
 8008a28:	2109      	movs	r1, #9
 8008a2a:	4807      	ldr	r0, [pc, #28]	@ (8008a48 <global_stdio_init.part.0+0x34>)
 8008a2c:	f7ff ff90 	bl	8008950 <std>
 8008a30:	2202      	movs	r2, #2
 8008a32:	2112      	movs	r1, #18
 8008a34:	4805      	ldr	r0, [pc, #20]	@ (8008a4c <global_stdio_init.part.0+0x38>)
 8008a36:	f7ff ff8b 	bl	8008950 <std>
 8008a3a:	bd10      	pop	{r4, pc}
 8008a3c:	200013dc 	.word	0x200013dc
 8008a40:	080089bd 	.word	0x080089bd
 8008a44:	200012a4 	.word	0x200012a4
 8008a48:	2000130c 	.word	0x2000130c
 8008a4c:	20001374 	.word	0x20001374

08008a50 <__sfp_lock_acquire>:
 8008a50:	b510      	push	{r4, lr}
 8008a52:	4802      	ldr	r0, [pc, #8]	@ (8008a5c <__sfp_lock_acquire+0xc>)
 8008a54:	f000 fa39 	bl	8008eca <__retarget_lock_acquire_recursive>
 8008a58:	bd10      	pop	{r4, pc}
 8008a5a:	46c0      	nop			@ (mov r8, r8)
 8008a5c:	200013e5 	.word	0x200013e5

08008a60 <__sfp_lock_release>:
 8008a60:	b510      	push	{r4, lr}
 8008a62:	4802      	ldr	r0, [pc, #8]	@ (8008a6c <__sfp_lock_release+0xc>)
 8008a64:	f000 fa32 	bl	8008ecc <__retarget_lock_release_recursive>
 8008a68:	bd10      	pop	{r4, pc}
 8008a6a:	46c0      	nop			@ (mov r8, r8)
 8008a6c:	200013e5 	.word	0x200013e5

08008a70 <__sinit>:
 8008a70:	b510      	push	{r4, lr}
 8008a72:	0004      	movs	r4, r0
 8008a74:	f7ff ffec 	bl	8008a50 <__sfp_lock_acquire>
 8008a78:	6a23      	ldr	r3, [r4, #32]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d002      	beq.n	8008a84 <__sinit+0x14>
 8008a7e:	f7ff ffef 	bl	8008a60 <__sfp_lock_release>
 8008a82:	bd10      	pop	{r4, pc}
 8008a84:	4b04      	ldr	r3, [pc, #16]	@ (8008a98 <__sinit+0x28>)
 8008a86:	6223      	str	r3, [r4, #32]
 8008a88:	4b04      	ldr	r3, [pc, #16]	@ (8008a9c <__sinit+0x2c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1f6      	bne.n	8008a7e <__sinit+0xe>
 8008a90:	f7ff ffc0 	bl	8008a14 <global_stdio_init.part.0>
 8008a94:	e7f3      	b.n	8008a7e <__sinit+0xe>
 8008a96:	46c0      	nop			@ (mov r8, r8)
 8008a98:	080089d9 	.word	0x080089d9
 8008a9c:	200013dc 	.word	0x200013dc

08008aa0 <_fwalk_sglue>:
 8008aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008aa2:	0014      	movs	r4, r2
 8008aa4:	2600      	movs	r6, #0
 8008aa6:	9000      	str	r0, [sp, #0]
 8008aa8:	9101      	str	r1, [sp, #4]
 8008aaa:	68a5      	ldr	r5, [r4, #8]
 8008aac:	6867      	ldr	r7, [r4, #4]
 8008aae:	3f01      	subs	r7, #1
 8008ab0:	d504      	bpl.n	8008abc <_fwalk_sglue+0x1c>
 8008ab2:	6824      	ldr	r4, [r4, #0]
 8008ab4:	2c00      	cmp	r4, #0
 8008ab6:	d1f8      	bne.n	8008aaa <_fwalk_sglue+0xa>
 8008ab8:	0030      	movs	r0, r6
 8008aba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008abc:	89ab      	ldrh	r3, [r5, #12]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d908      	bls.n	8008ad4 <_fwalk_sglue+0x34>
 8008ac2:	220e      	movs	r2, #14
 8008ac4:	5eab      	ldrsh	r3, [r5, r2]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	d004      	beq.n	8008ad4 <_fwalk_sglue+0x34>
 8008aca:	0029      	movs	r1, r5
 8008acc:	9800      	ldr	r0, [sp, #0]
 8008ace:	9b01      	ldr	r3, [sp, #4]
 8008ad0:	4798      	blx	r3
 8008ad2:	4306      	orrs	r6, r0
 8008ad4:	3568      	adds	r5, #104	@ 0x68
 8008ad6:	e7ea      	b.n	8008aae <_fwalk_sglue+0xe>

08008ad8 <iprintf>:
 8008ad8:	b40f      	push	{r0, r1, r2, r3}
 8008ada:	b507      	push	{r0, r1, r2, lr}
 8008adc:	4905      	ldr	r1, [pc, #20]	@ (8008af4 <iprintf+0x1c>)
 8008ade:	ab04      	add	r3, sp, #16
 8008ae0:	6808      	ldr	r0, [r1, #0]
 8008ae2:	cb04      	ldmia	r3!, {r2}
 8008ae4:	6881      	ldr	r1, [r0, #8]
 8008ae6:	9301      	str	r3, [sp, #4]
 8008ae8:	f000 fa64 	bl	8008fb4 <_vfiprintf_r>
 8008aec:	b003      	add	sp, #12
 8008aee:	bc08      	pop	{r3}
 8008af0:	b004      	add	sp, #16
 8008af2:	4718      	bx	r3
 8008af4:	2000002c 	.word	0x2000002c

08008af8 <putchar>:
 8008af8:	b510      	push	{r4, lr}
 8008afa:	4b03      	ldr	r3, [pc, #12]	@ (8008b08 <putchar+0x10>)
 8008afc:	0001      	movs	r1, r0
 8008afe:	6818      	ldr	r0, [r3, #0]
 8008b00:	6882      	ldr	r2, [r0, #8]
 8008b02:	f000 fe0c 	bl	800971e <_putc_r>
 8008b06:	bd10      	pop	{r4, pc}
 8008b08:	2000002c 	.word	0x2000002c

08008b0c <_puts_r>:
 8008b0c:	6a03      	ldr	r3, [r0, #32]
 8008b0e:	b570      	push	{r4, r5, r6, lr}
 8008b10:	0005      	movs	r5, r0
 8008b12:	000e      	movs	r6, r1
 8008b14:	6884      	ldr	r4, [r0, #8]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d101      	bne.n	8008b1e <_puts_r+0x12>
 8008b1a:	f7ff ffa9 	bl	8008a70 <__sinit>
 8008b1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b20:	07db      	lsls	r3, r3, #31
 8008b22:	d405      	bmi.n	8008b30 <_puts_r+0x24>
 8008b24:	89a3      	ldrh	r3, [r4, #12]
 8008b26:	059b      	lsls	r3, r3, #22
 8008b28:	d402      	bmi.n	8008b30 <_puts_r+0x24>
 8008b2a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b2c:	f000 f9cd 	bl	8008eca <__retarget_lock_acquire_recursive>
 8008b30:	89a3      	ldrh	r3, [r4, #12]
 8008b32:	071b      	lsls	r3, r3, #28
 8008b34:	d502      	bpl.n	8008b3c <_puts_r+0x30>
 8008b36:	6923      	ldr	r3, [r4, #16]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d11f      	bne.n	8008b7c <_puts_r+0x70>
 8008b3c:	0021      	movs	r1, r4
 8008b3e:	0028      	movs	r0, r5
 8008b40:	f000 f8d2 	bl	8008ce8 <__swsetup_r>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	d019      	beq.n	8008b7c <_puts_r+0x70>
 8008b48:	2501      	movs	r5, #1
 8008b4a:	426d      	negs	r5, r5
 8008b4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b4e:	07db      	lsls	r3, r3, #31
 8008b50:	d405      	bmi.n	8008b5e <_puts_r+0x52>
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	059b      	lsls	r3, r3, #22
 8008b56:	d402      	bmi.n	8008b5e <_puts_r+0x52>
 8008b58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b5a:	f000 f9b7 	bl	8008ecc <__retarget_lock_release_recursive>
 8008b5e:	0028      	movs	r0, r5
 8008b60:	bd70      	pop	{r4, r5, r6, pc}
 8008b62:	3601      	adds	r6, #1
 8008b64:	60a3      	str	r3, [r4, #8]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	da04      	bge.n	8008b74 <_puts_r+0x68>
 8008b6a:	69a2      	ldr	r2, [r4, #24]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	dc16      	bgt.n	8008b9e <_puts_r+0x92>
 8008b70:	290a      	cmp	r1, #10
 8008b72:	d014      	beq.n	8008b9e <_puts_r+0x92>
 8008b74:	6823      	ldr	r3, [r4, #0]
 8008b76:	1c5a      	adds	r2, r3, #1
 8008b78:	6022      	str	r2, [r4, #0]
 8008b7a:	7019      	strb	r1, [r3, #0]
 8008b7c:	68a3      	ldr	r3, [r4, #8]
 8008b7e:	7831      	ldrb	r1, [r6, #0]
 8008b80:	3b01      	subs	r3, #1
 8008b82:	2900      	cmp	r1, #0
 8008b84:	d1ed      	bne.n	8008b62 <_puts_r+0x56>
 8008b86:	60a3      	str	r3, [r4, #8]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	da0f      	bge.n	8008bac <_puts_r+0xa0>
 8008b8c:	0022      	movs	r2, r4
 8008b8e:	0028      	movs	r0, r5
 8008b90:	310a      	adds	r1, #10
 8008b92:	f000 f867 	bl	8008c64 <__swbuf_r>
 8008b96:	3001      	adds	r0, #1
 8008b98:	d0d6      	beq.n	8008b48 <_puts_r+0x3c>
 8008b9a:	250a      	movs	r5, #10
 8008b9c:	e7d6      	b.n	8008b4c <_puts_r+0x40>
 8008b9e:	0022      	movs	r2, r4
 8008ba0:	0028      	movs	r0, r5
 8008ba2:	f000 f85f 	bl	8008c64 <__swbuf_r>
 8008ba6:	3001      	adds	r0, #1
 8008ba8:	d1e8      	bne.n	8008b7c <_puts_r+0x70>
 8008baa:	e7cd      	b.n	8008b48 <_puts_r+0x3c>
 8008bac:	6823      	ldr	r3, [r4, #0]
 8008bae:	1c5a      	adds	r2, r3, #1
 8008bb0:	6022      	str	r2, [r4, #0]
 8008bb2:	220a      	movs	r2, #10
 8008bb4:	701a      	strb	r2, [r3, #0]
 8008bb6:	e7f0      	b.n	8008b9a <_puts_r+0x8e>

08008bb8 <puts>:
 8008bb8:	b510      	push	{r4, lr}
 8008bba:	4b03      	ldr	r3, [pc, #12]	@ (8008bc8 <puts+0x10>)
 8008bbc:	0001      	movs	r1, r0
 8008bbe:	6818      	ldr	r0, [r3, #0]
 8008bc0:	f7ff ffa4 	bl	8008b0c <_puts_r>
 8008bc4:	bd10      	pop	{r4, pc}
 8008bc6:	46c0      	nop			@ (mov r8, r8)
 8008bc8:	2000002c 	.word	0x2000002c

08008bcc <__sread>:
 8008bcc:	b570      	push	{r4, r5, r6, lr}
 8008bce:	000c      	movs	r4, r1
 8008bd0:	250e      	movs	r5, #14
 8008bd2:	5f49      	ldrsh	r1, [r1, r5]
 8008bd4:	f000 f914 	bl	8008e00 <_read_r>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	db03      	blt.n	8008be4 <__sread+0x18>
 8008bdc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008bde:	181b      	adds	r3, r3, r0
 8008be0:	6563      	str	r3, [r4, #84]	@ 0x54
 8008be2:	bd70      	pop	{r4, r5, r6, pc}
 8008be4:	89a3      	ldrh	r3, [r4, #12]
 8008be6:	4a02      	ldr	r2, [pc, #8]	@ (8008bf0 <__sread+0x24>)
 8008be8:	4013      	ands	r3, r2
 8008bea:	81a3      	strh	r3, [r4, #12]
 8008bec:	e7f9      	b.n	8008be2 <__sread+0x16>
 8008bee:	46c0      	nop			@ (mov r8, r8)
 8008bf0:	ffffefff 	.word	0xffffefff

08008bf4 <__swrite>:
 8008bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bf6:	001f      	movs	r7, r3
 8008bf8:	898b      	ldrh	r3, [r1, #12]
 8008bfa:	0005      	movs	r5, r0
 8008bfc:	000c      	movs	r4, r1
 8008bfe:	0016      	movs	r6, r2
 8008c00:	05db      	lsls	r3, r3, #23
 8008c02:	d505      	bpl.n	8008c10 <__swrite+0x1c>
 8008c04:	230e      	movs	r3, #14
 8008c06:	5ec9      	ldrsh	r1, [r1, r3]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	2302      	movs	r3, #2
 8008c0c:	f000 f8e4 	bl	8008dd8 <_lseek_r>
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	4a05      	ldr	r2, [pc, #20]	@ (8008c28 <__swrite+0x34>)
 8008c14:	0028      	movs	r0, r5
 8008c16:	4013      	ands	r3, r2
 8008c18:	81a3      	strh	r3, [r4, #12]
 8008c1a:	0032      	movs	r2, r6
 8008c1c:	230e      	movs	r3, #14
 8008c1e:	5ee1      	ldrsh	r1, [r4, r3]
 8008c20:	003b      	movs	r3, r7
 8008c22:	f000 f913 	bl	8008e4c <_write_r>
 8008c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c28:	ffffefff 	.word	0xffffefff

08008c2c <__sseek>:
 8008c2c:	b570      	push	{r4, r5, r6, lr}
 8008c2e:	000c      	movs	r4, r1
 8008c30:	250e      	movs	r5, #14
 8008c32:	5f49      	ldrsh	r1, [r1, r5]
 8008c34:	f000 f8d0 	bl	8008dd8 <_lseek_r>
 8008c38:	89a3      	ldrh	r3, [r4, #12]
 8008c3a:	1c42      	adds	r2, r0, #1
 8008c3c:	d103      	bne.n	8008c46 <__sseek+0x1a>
 8008c3e:	4a05      	ldr	r2, [pc, #20]	@ (8008c54 <__sseek+0x28>)
 8008c40:	4013      	ands	r3, r2
 8008c42:	81a3      	strh	r3, [r4, #12]
 8008c44:	bd70      	pop	{r4, r5, r6, pc}
 8008c46:	2280      	movs	r2, #128	@ 0x80
 8008c48:	0152      	lsls	r2, r2, #5
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	81a3      	strh	r3, [r4, #12]
 8008c4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c50:	e7f8      	b.n	8008c44 <__sseek+0x18>
 8008c52:	46c0      	nop			@ (mov r8, r8)
 8008c54:	ffffefff 	.word	0xffffefff

08008c58 <__sclose>:
 8008c58:	b510      	push	{r4, lr}
 8008c5a:	230e      	movs	r3, #14
 8008c5c:	5ec9      	ldrsh	r1, [r1, r3]
 8008c5e:	f000 f8a9 	bl	8008db4 <_close_r>
 8008c62:	bd10      	pop	{r4, pc}

08008c64 <__swbuf_r>:
 8008c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c66:	0006      	movs	r6, r0
 8008c68:	000d      	movs	r5, r1
 8008c6a:	0014      	movs	r4, r2
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	d004      	beq.n	8008c7a <__swbuf_r+0x16>
 8008c70:	6a03      	ldr	r3, [r0, #32]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d101      	bne.n	8008c7a <__swbuf_r+0x16>
 8008c76:	f7ff fefb 	bl	8008a70 <__sinit>
 8008c7a:	69a3      	ldr	r3, [r4, #24]
 8008c7c:	60a3      	str	r3, [r4, #8]
 8008c7e:	89a3      	ldrh	r3, [r4, #12]
 8008c80:	071b      	lsls	r3, r3, #28
 8008c82:	d502      	bpl.n	8008c8a <__swbuf_r+0x26>
 8008c84:	6923      	ldr	r3, [r4, #16]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d109      	bne.n	8008c9e <__swbuf_r+0x3a>
 8008c8a:	0021      	movs	r1, r4
 8008c8c:	0030      	movs	r0, r6
 8008c8e:	f000 f82b 	bl	8008ce8 <__swsetup_r>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d003      	beq.n	8008c9e <__swbuf_r+0x3a>
 8008c96:	2501      	movs	r5, #1
 8008c98:	426d      	negs	r5, r5
 8008c9a:	0028      	movs	r0, r5
 8008c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c9e:	6923      	ldr	r3, [r4, #16]
 8008ca0:	6820      	ldr	r0, [r4, #0]
 8008ca2:	b2ef      	uxtb	r7, r5
 8008ca4:	1ac0      	subs	r0, r0, r3
 8008ca6:	6963      	ldr	r3, [r4, #20]
 8008ca8:	b2ed      	uxtb	r5, r5
 8008caa:	4283      	cmp	r3, r0
 8008cac:	dc05      	bgt.n	8008cba <__swbuf_r+0x56>
 8008cae:	0021      	movs	r1, r4
 8008cb0:	0030      	movs	r0, r6
 8008cb2:	f000 fc9d 	bl	80095f0 <_fflush_r>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d1ed      	bne.n	8008c96 <__swbuf_r+0x32>
 8008cba:	68a3      	ldr	r3, [r4, #8]
 8008cbc:	3001      	adds	r0, #1
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	60a3      	str	r3, [r4, #8]
 8008cc2:	6823      	ldr	r3, [r4, #0]
 8008cc4:	1c5a      	adds	r2, r3, #1
 8008cc6:	6022      	str	r2, [r4, #0]
 8008cc8:	701f      	strb	r7, [r3, #0]
 8008cca:	6963      	ldr	r3, [r4, #20]
 8008ccc:	4283      	cmp	r3, r0
 8008cce:	d004      	beq.n	8008cda <__swbuf_r+0x76>
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	07db      	lsls	r3, r3, #31
 8008cd4:	d5e1      	bpl.n	8008c9a <__swbuf_r+0x36>
 8008cd6:	2d0a      	cmp	r5, #10
 8008cd8:	d1df      	bne.n	8008c9a <__swbuf_r+0x36>
 8008cda:	0021      	movs	r1, r4
 8008cdc:	0030      	movs	r0, r6
 8008cde:	f000 fc87 	bl	80095f0 <_fflush_r>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d0d9      	beq.n	8008c9a <__swbuf_r+0x36>
 8008ce6:	e7d6      	b.n	8008c96 <__swbuf_r+0x32>

08008ce8 <__swsetup_r>:
 8008ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8008da0 <__swsetup_r+0xb8>)
 8008cea:	b570      	push	{r4, r5, r6, lr}
 8008cec:	0005      	movs	r5, r0
 8008cee:	6818      	ldr	r0, [r3, #0]
 8008cf0:	000c      	movs	r4, r1
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	d004      	beq.n	8008d00 <__swsetup_r+0x18>
 8008cf6:	6a03      	ldr	r3, [r0, #32]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <__swsetup_r+0x18>
 8008cfc:	f7ff feb8 	bl	8008a70 <__sinit>
 8008d00:	220c      	movs	r2, #12
 8008d02:	5ea3      	ldrsh	r3, [r4, r2]
 8008d04:	071a      	lsls	r2, r3, #28
 8008d06:	d423      	bmi.n	8008d50 <__swsetup_r+0x68>
 8008d08:	06da      	lsls	r2, r3, #27
 8008d0a:	d407      	bmi.n	8008d1c <__swsetup_r+0x34>
 8008d0c:	2209      	movs	r2, #9
 8008d0e:	602a      	str	r2, [r5, #0]
 8008d10:	2240      	movs	r2, #64	@ 0x40
 8008d12:	2001      	movs	r0, #1
 8008d14:	4313      	orrs	r3, r2
 8008d16:	81a3      	strh	r3, [r4, #12]
 8008d18:	4240      	negs	r0, r0
 8008d1a:	e03a      	b.n	8008d92 <__swsetup_r+0xaa>
 8008d1c:	075b      	lsls	r3, r3, #29
 8008d1e:	d513      	bpl.n	8008d48 <__swsetup_r+0x60>
 8008d20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d22:	2900      	cmp	r1, #0
 8008d24:	d008      	beq.n	8008d38 <__swsetup_r+0x50>
 8008d26:	0023      	movs	r3, r4
 8008d28:	3344      	adds	r3, #68	@ 0x44
 8008d2a:	4299      	cmp	r1, r3
 8008d2c:	d002      	beq.n	8008d34 <__swsetup_r+0x4c>
 8008d2e:	0028      	movs	r0, r5
 8008d30:	f000 f8ce 	bl	8008ed0 <_free_r>
 8008d34:	2300      	movs	r3, #0
 8008d36:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d38:	2224      	movs	r2, #36	@ 0x24
 8008d3a:	89a3      	ldrh	r3, [r4, #12]
 8008d3c:	4393      	bics	r3, r2
 8008d3e:	81a3      	strh	r3, [r4, #12]
 8008d40:	2300      	movs	r3, #0
 8008d42:	6063      	str	r3, [r4, #4]
 8008d44:	6923      	ldr	r3, [r4, #16]
 8008d46:	6023      	str	r3, [r4, #0]
 8008d48:	2308      	movs	r3, #8
 8008d4a:	89a2      	ldrh	r2, [r4, #12]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	81a3      	strh	r3, [r4, #12]
 8008d50:	6923      	ldr	r3, [r4, #16]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10b      	bne.n	8008d6e <__swsetup_r+0x86>
 8008d56:	21a0      	movs	r1, #160	@ 0xa0
 8008d58:	2280      	movs	r2, #128	@ 0x80
 8008d5a:	89a3      	ldrh	r3, [r4, #12]
 8008d5c:	0089      	lsls	r1, r1, #2
 8008d5e:	0092      	lsls	r2, r2, #2
 8008d60:	400b      	ands	r3, r1
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d003      	beq.n	8008d6e <__swsetup_r+0x86>
 8008d66:	0021      	movs	r1, r4
 8008d68:	0028      	movs	r0, r5
 8008d6a:	f000 fc97 	bl	800969c <__smakebuf_r>
 8008d6e:	220c      	movs	r2, #12
 8008d70:	5ea3      	ldrsh	r3, [r4, r2]
 8008d72:	2101      	movs	r1, #1
 8008d74:	001a      	movs	r2, r3
 8008d76:	400a      	ands	r2, r1
 8008d78:	420b      	tst	r3, r1
 8008d7a:	d00b      	beq.n	8008d94 <__swsetup_r+0xac>
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	60a2      	str	r2, [r4, #8]
 8008d80:	6962      	ldr	r2, [r4, #20]
 8008d82:	4252      	negs	r2, r2
 8008d84:	61a2      	str	r2, [r4, #24]
 8008d86:	2000      	movs	r0, #0
 8008d88:	6922      	ldr	r2, [r4, #16]
 8008d8a:	4282      	cmp	r2, r0
 8008d8c:	d101      	bne.n	8008d92 <__swsetup_r+0xaa>
 8008d8e:	061a      	lsls	r2, r3, #24
 8008d90:	d4be      	bmi.n	8008d10 <__swsetup_r+0x28>
 8008d92:	bd70      	pop	{r4, r5, r6, pc}
 8008d94:	0799      	lsls	r1, r3, #30
 8008d96:	d400      	bmi.n	8008d9a <__swsetup_r+0xb2>
 8008d98:	6962      	ldr	r2, [r4, #20]
 8008d9a:	60a2      	str	r2, [r4, #8]
 8008d9c:	e7f3      	b.n	8008d86 <__swsetup_r+0x9e>
 8008d9e:	46c0      	nop			@ (mov r8, r8)
 8008da0:	2000002c 	.word	0x2000002c

08008da4 <memset>:
 8008da4:	0003      	movs	r3, r0
 8008da6:	1882      	adds	r2, r0, r2
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d100      	bne.n	8008dae <memset+0xa>
 8008dac:	4770      	bx	lr
 8008dae:	7019      	strb	r1, [r3, #0]
 8008db0:	3301      	adds	r3, #1
 8008db2:	e7f9      	b.n	8008da8 <memset+0x4>

08008db4 <_close_r>:
 8008db4:	2300      	movs	r3, #0
 8008db6:	b570      	push	{r4, r5, r6, lr}
 8008db8:	4d06      	ldr	r5, [pc, #24]	@ (8008dd4 <_close_r+0x20>)
 8008dba:	0004      	movs	r4, r0
 8008dbc:	0008      	movs	r0, r1
 8008dbe:	602b      	str	r3, [r5, #0]
 8008dc0:	f7fc fcba 	bl	8005738 <_close>
 8008dc4:	1c43      	adds	r3, r0, #1
 8008dc6:	d103      	bne.n	8008dd0 <_close_r+0x1c>
 8008dc8:	682b      	ldr	r3, [r5, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d000      	beq.n	8008dd0 <_close_r+0x1c>
 8008dce:	6023      	str	r3, [r4, #0]
 8008dd0:	bd70      	pop	{r4, r5, r6, pc}
 8008dd2:	46c0      	nop			@ (mov r8, r8)
 8008dd4:	200013e0 	.word	0x200013e0

08008dd8 <_lseek_r>:
 8008dd8:	b570      	push	{r4, r5, r6, lr}
 8008dda:	0004      	movs	r4, r0
 8008ddc:	0008      	movs	r0, r1
 8008dde:	0011      	movs	r1, r2
 8008de0:	001a      	movs	r2, r3
 8008de2:	2300      	movs	r3, #0
 8008de4:	4d05      	ldr	r5, [pc, #20]	@ (8008dfc <_lseek_r+0x24>)
 8008de6:	602b      	str	r3, [r5, #0]
 8008de8:	f7fc fcc7 	bl	800577a <_lseek>
 8008dec:	1c43      	adds	r3, r0, #1
 8008dee:	d103      	bne.n	8008df8 <_lseek_r+0x20>
 8008df0:	682b      	ldr	r3, [r5, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d000      	beq.n	8008df8 <_lseek_r+0x20>
 8008df6:	6023      	str	r3, [r4, #0]
 8008df8:	bd70      	pop	{r4, r5, r6, pc}
 8008dfa:	46c0      	nop			@ (mov r8, r8)
 8008dfc:	200013e0 	.word	0x200013e0

08008e00 <_read_r>:
 8008e00:	b570      	push	{r4, r5, r6, lr}
 8008e02:	0004      	movs	r4, r0
 8008e04:	0008      	movs	r0, r1
 8008e06:	0011      	movs	r1, r2
 8008e08:	001a      	movs	r2, r3
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	4d05      	ldr	r5, [pc, #20]	@ (8008e24 <_read_r+0x24>)
 8008e0e:	602b      	str	r3, [r5, #0]
 8008e10:	f7fc fc59 	bl	80056c6 <_read>
 8008e14:	1c43      	adds	r3, r0, #1
 8008e16:	d103      	bne.n	8008e20 <_read_r+0x20>
 8008e18:	682b      	ldr	r3, [r5, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d000      	beq.n	8008e20 <_read_r+0x20>
 8008e1e:	6023      	str	r3, [r4, #0]
 8008e20:	bd70      	pop	{r4, r5, r6, pc}
 8008e22:	46c0      	nop			@ (mov r8, r8)
 8008e24:	200013e0 	.word	0x200013e0

08008e28 <_sbrk_r>:
 8008e28:	2300      	movs	r3, #0
 8008e2a:	b570      	push	{r4, r5, r6, lr}
 8008e2c:	4d06      	ldr	r5, [pc, #24]	@ (8008e48 <_sbrk_r+0x20>)
 8008e2e:	0004      	movs	r4, r0
 8008e30:	0008      	movs	r0, r1
 8008e32:	602b      	str	r3, [r5, #0]
 8008e34:	f7fc fcac 	bl	8005790 <_sbrk>
 8008e38:	1c43      	adds	r3, r0, #1
 8008e3a:	d103      	bne.n	8008e44 <_sbrk_r+0x1c>
 8008e3c:	682b      	ldr	r3, [r5, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d000      	beq.n	8008e44 <_sbrk_r+0x1c>
 8008e42:	6023      	str	r3, [r4, #0]
 8008e44:	bd70      	pop	{r4, r5, r6, pc}
 8008e46:	46c0      	nop			@ (mov r8, r8)
 8008e48:	200013e0 	.word	0x200013e0

08008e4c <_write_r>:
 8008e4c:	b570      	push	{r4, r5, r6, lr}
 8008e4e:	0004      	movs	r4, r0
 8008e50:	0008      	movs	r0, r1
 8008e52:	0011      	movs	r1, r2
 8008e54:	001a      	movs	r2, r3
 8008e56:	2300      	movs	r3, #0
 8008e58:	4d05      	ldr	r5, [pc, #20]	@ (8008e70 <_write_r+0x24>)
 8008e5a:	602b      	str	r3, [r5, #0]
 8008e5c:	f7fc fc50 	bl	8005700 <_write>
 8008e60:	1c43      	adds	r3, r0, #1
 8008e62:	d103      	bne.n	8008e6c <_write_r+0x20>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d000      	beq.n	8008e6c <_write_r+0x20>
 8008e6a:	6023      	str	r3, [r4, #0]
 8008e6c:	bd70      	pop	{r4, r5, r6, pc}
 8008e6e:	46c0      	nop			@ (mov r8, r8)
 8008e70:	200013e0 	.word	0x200013e0

08008e74 <__errno>:
 8008e74:	4b01      	ldr	r3, [pc, #4]	@ (8008e7c <__errno+0x8>)
 8008e76:	6818      	ldr	r0, [r3, #0]
 8008e78:	4770      	bx	lr
 8008e7a:	46c0      	nop			@ (mov r8, r8)
 8008e7c:	2000002c 	.word	0x2000002c

08008e80 <__libc_init_array>:
 8008e80:	b570      	push	{r4, r5, r6, lr}
 8008e82:	2600      	movs	r6, #0
 8008e84:	4c0c      	ldr	r4, [pc, #48]	@ (8008eb8 <__libc_init_array+0x38>)
 8008e86:	4d0d      	ldr	r5, [pc, #52]	@ (8008ebc <__libc_init_array+0x3c>)
 8008e88:	1b64      	subs	r4, r4, r5
 8008e8a:	10a4      	asrs	r4, r4, #2
 8008e8c:	42a6      	cmp	r6, r4
 8008e8e:	d109      	bne.n	8008ea4 <__libc_init_array+0x24>
 8008e90:	2600      	movs	r6, #0
 8008e92:	f000 fe99 	bl	8009bc8 <_init>
 8008e96:	4c0a      	ldr	r4, [pc, #40]	@ (8008ec0 <__libc_init_array+0x40>)
 8008e98:	4d0a      	ldr	r5, [pc, #40]	@ (8008ec4 <__libc_init_array+0x44>)
 8008e9a:	1b64      	subs	r4, r4, r5
 8008e9c:	10a4      	asrs	r4, r4, #2
 8008e9e:	42a6      	cmp	r6, r4
 8008ea0:	d105      	bne.n	8008eae <__libc_init_array+0x2e>
 8008ea2:	bd70      	pop	{r4, r5, r6, pc}
 8008ea4:	00b3      	lsls	r3, r6, #2
 8008ea6:	58eb      	ldr	r3, [r5, r3]
 8008ea8:	4798      	blx	r3
 8008eaa:	3601      	adds	r6, #1
 8008eac:	e7ee      	b.n	8008e8c <__libc_init_array+0xc>
 8008eae:	00b3      	lsls	r3, r6, #2
 8008eb0:	58eb      	ldr	r3, [r5, r3]
 8008eb2:	4798      	blx	r3
 8008eb4:	3601      	adds	r6, #1
 8008eb6:	e7f2      	b.n	8008e9e <__libc_init_array+0x1e>
 8008eb8:	08009fc4 	.word	0x08009fc4
 8008ebc:	08009fc4 	.word	0x08009fc4
 8008ec0:	08009fc8 	.word	0x08009fc8
 8008ec4:	08009fc4 	.word	0x08009fc4

08008ec8 <__retarget_lock_init_recursive>:
 8008ec8:	4770      	bx	lr

08008eca <__retarget_lock_acquire_recursive>:
 8008eca:	4770      	bx	lr

08008ecc <__retarget_lock_release_recursive>:
 8008ecc:	4770      	bx	lr
	...

08008ed0 <_free_r>:
 8008ed0:	b570      	push	{r4, r5, r6, lr}
 8008ed2:	0005      	movs	r5, r0
 8008ed4:	1e0c      	subs	r4, r1, #0
 8008ed6:	d010      	beq.n	8008efa <_free_r+0x2a>
 8008ed8:	3c04      	subs	r4, #4
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	da00      	bge.n	8008ee2 <_free_r+0x12>
 8008ee0:	18e4      	adds	r4, r4, r3
 8008ee2:	0028      	movs	r0, r5
 8008ee4:	f7ff fd24 	bl	8008930 <__malloc_lock>
 8008ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8008f60 <_free_r+0x90>)
 8008eea:	6813      	ldr	r3, [r2, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d105      	bne.n	8008efc <_free_r+0x2c>
 8008ef0:	6063      	str	r3, [r4, #4]
 8008ef2:	6014      	str	r4, [r2, #0]
 8008ef4:	0028      	movs	r0, r5
 8008ef6:	f7ff fd23 	bl	8008940 <__malloc_unlock>
 8008efa:	bd70      	pop	{r4, r5, r6, pc}
 8008efc:	42a3      	cmp	r3, r4
 8008efe:	d908      	bls.n	8008f12 <_free_r+0x42>
 8008f00:	6820      	ldr	r0, [r4, #0]
 8008f02:	1821      	adds	r1, r4, r0
 8008f04:	428b      	cmp	r3, r1
 8008f06:	d1f3      	bne.n	8008ef0 <_free_r+0x20>
 8008f08:	6819      	ldr	r1, [r3, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	1809      	adds	r1, r1, r0
 8008f0e:	6021      	str	r1, [r4, #0]
 8008f10:	e7ee      	b.n	8008ef0 <_free_r+0x20>
 8008f12:	001a      	movs	r2, r3
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <_free_r+0x4e>
 8008f1a:	42a3      	cmp	r3, r4
 8008f1c:	d9f9      	bls.n	8008f12 <_free_r+0x42>
 8008f1e:	6811      	ldr	r1, [r2, #0]
 8008f20:	1850      	adds	r0, r2, r1
 8008f22:	42a0      	cmp	r0, r4
 8008f24:	d10b      	bne.n	8008f3e <_free_r+0x6e>
 8008f26:	6820      	ldr	r0, [r4, #0]
 8008f28:	1809      	adds	r1, r1, r0
 8008f2a:	1850      	adds	r0, r2, r1
 8008f2c:	6011      	str	r1, [r2, #0]
 8008f2e:	4283      	cmp	r3, r0
 8008f30:	d1e0      	bne.n	8008ef4 <_free_r+0x24>
 8008f32:	6818      	ldr	r0, [r3, #0]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	1841      	adds	r1, r0, r1
 8008f38:	6011      	str	r1, [r2, #0]
 8008f3a:	6053      	str	r3, [r2, #4]
 8008f3c:	e7da      	b.n	8008ef4 <_free_r+0x24>
 8008f3e:	42a0      	cmp	r0, r4
 8008f40:	d902      	bls.n	8008f48 <_free_r+0x78>
 8008f42:	230c      	movs	r3, #12
 8008f44:	602b      	str	r3, [r5, #0]
 8008f46:	e7d5      	b.n	8008ef4 <_free_r+0x24>
 8008f48:	6820      	ldr	r0, [r4, #0]
 8008f4a:	1821      	adds	r1, r4, r0
 8008f4c:	428b      	cmp	r3, r1
 8008f4e:	d103      	bne.n	8008f58 <_free_r+0x88>
 8008f50:	6819      	ldr	r1, [r3, #0]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	1809      	adds	r1, r1, r0
 8008f56:	6021      	str	r1, [r4, #0]
 8008f58:	6063      	str	r3, [r4, #4]
 8008f5a:	6054      	str	r4, [r2, #4]
 8008f5c:	e7ca      	b.n	8008ef4 <_free_r+0x24>
 8008f5e:	46c0      	nop			@ (mov r8, r8)
 8008f60:	200012a0 	.word	0x200012a0

08008f64 <__sfputc_r>:
 8008f64:	6893      	ldr	r3, [r2, #8]
 8008f66:	b510      	push	{r4, lr}
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	6093      	str	r3, [r2, #8]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	da04      	bge.n	8008f7a <__sfputc_r+0x16>
 8008f70:	6994      	ldr	r4, [r2, #24]
 8008f72:	42a3      	cmp	r3, r4
 8008f74:	db07      	blt.n	8008f86 <__sfputc_r+0x22>
 8008f76:	290a      	cmp	r1, #10
 8008f78:	d005      	beq.n	8008f86 <__sfputc_r+0x22>
 8008f7a:	6813      	ldr	r3, [r2, #0]
 8008f7c:	1c58      	adds	r0, r3, #1
 8008f7e:	6010      	str	r0, [r2, #0]
 8008f80:	7019      	strb	r1, [r3, #0]
 8008f82:	0008      	movs	r0, r1
 8008f84:	bd10      	pop	{r4, pc}
 8008f86:	f7ff fe6d 	bl	8008c64 <__swbuf_r>
 8008f8a:	0001      	movs	r1, r0
 8008f8c:	e7f9      	b.n	8008f82 <__sfputc_r+0x1e>

08008f8e <__sfputs_r>:
 8008f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f90:	0006      	movs	r6, r0
 8008f92:	000f      	movs	r7, r1
 8008f94:	0014      	movs	r4, r2
 8008f96:	18d5      	adds	r5, r2, r3
 8008f98:	42ac      	cmp	r4, r5
 8008f9a:	d101      	bne.n	8008fa0 <__sfputs_r+0x12>
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	e007      	b.n	8008fb0 <__sfputs_r+0x22>
 8008fa0:	7821      	ldrb	r1, [r4, #0]
 8008fa2:	003a      	movs	r2, r7
 8008fa4:	0030      	movs	r0, r6
 8008fa6:	f7ff ffdd 	bl	8008f64 <__sfputc_r>
 8008faa:	3401      	adds	r4, #1
 8008fac:	1c43      	adds	r3, r0, #1
 8008fae:	d1f3      	bne.n	8008f98 <__sfputs_r+0xa>
 8008fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fb4 <_vfiprintf_r>:
 8008fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fb6:	b0a1      	sub	sp, #132	@ 0x84
 8008fb8:	000f      	movs	r7, r1
 8008fba:	0015      	movs	r5, r2
 8008fbc:	001e      	movs	r6, r3
 8008fbe:	9003      	str	r0, [sp, #12]
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	d004      	beq.n	8008fce <_vfiprintf_r+0x1a>
 8008fc4:	6a03      	ldr	r3, [r0, #32]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d101      	bne.n	8008fce <_vfiprintf_r+0x1a>
 8008fca:	f7ff fd51 	bl	8008a70 <__sinit>
 8008fce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008fd0:	07db      	lsls	r3, r3, #31
 8008fd2:	d405      	bmi.n	8008fe0 <_vfiprintf_r+0x2c>
 8008fd4:	89bb      	ldrh	r3, [r7, #12]
 8008fd6:	059b      	lsls	r3, r3, #22
 8008fd8:	d402      	bmi.n	8008fe0 <_vfiprintf_r+0x2c>
 8008fda:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008fdc:	f7ff ff75 	bl	8008eca <__retarget_lock_acquire_recursive>
 8008fe0:	89bb      	ldrh	r3, [r7, #12]
 8008fe2:	071b      	lsls	r3, r3, #28
 8008fe4:	d502      	bpl.n	8008fec <_vfiprintf_r+0x38>
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d113      	bne.n	8009014 <_vfiprintf_r+0x60>
 8008fec:	0039      	movs	r1, r7
 8008fee:	9803      	ldr	r0, [sp, #12]
 8008ff0:	f7ff fe7a 	bl	8008ce8 <__swsetup_r>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	d00d      	beq.n	8009014 <_vfiprintf_r+0x60>
 8008ff8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ffa:	07db      	lsls	r3, r3, #31
 8008ffc:	d503      	bpl.n	8009006 <_vfiprintf_r+0x52>
 8008ffe:	2001      	movs	r0, #1
 8009000:	4240      	negs	r0, r0
 8009002:	b021      	add	sp, #132	@ 0x84
 8009004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009006:	89bb      	ldrh	r3, [r7, #12]
 8009008:	059b      	lsls	r3, r3, #22
 800900a:	d4f8      	bmi.n	8008ffe <_vfiprintf_r+0x4a>
 800900c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800900e:	f7ff ff5d 	bl	8008ecc <__retarget_lock_release_recursive>
 8009012:	e7f4      	b.n	8008ffe <_vfiprintf_r+0x4a>
 8009014:	2300      	movs	r3, #0
 8009016:	ac08      	add	r4, sp, #32
 8009018:	6163      	str	r3, [r4, #20]
 800901a:	3320      	adds	r3, #32
 800901c:	7663      	strb	r3, [r4, #25]
 800901e:	3310      	adds	r3, #16
 8009020:	76a3      	strb	r3, [r4, #26]
 8009022:	9607      	str	r6, [sp, #28]
 8009024:	002e      	movs	r6, r5
 8009026:	7833      	ldrb	r3, [r6, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d001      	beq.n	8009030 <_vfiprintf_r+0x7c>
 800902c:	2b25      	cmp	r3, #37	@ 0x25
 800902e:	d148      	bne.n	80090c2 <_vfiprintf_r+0x10e>
 8009030:	1b73      	subs	r3, r6, r5
 8009032:	9305      	str	r3, [sp, #20]
 8009034:	42ae      	cmp	r6, r5
 8009036:	d00b      	beq.n	8009050 <_vfiprintf_r+0x9c>
 8009038:	002a      	movs	r2, r5
 800903a:	0039      	movs	r1, r7
 800903c:	9803      	ldr	r0, [sp, #12]
 800903e:	f7ff ffa6 	bl	8008f8e <__sfputs_r>
 8009042:	3001      	adds	r0, #1
 8009044:	d100      	bne.n	8009048 <_vfiprintf_r+0x94>
 8009046:	e0ae      	b.n	80091a6 <_vfiprintf_r+0x1f2>
 8009048:	6963      	ldr	r3, [r4, #20]
 800904a:	9a05      	ldr	r2, [sp, #20]
 800904c:	189b      	adds	r3, r3, r2
 800904e:	6163      	str	r3, [r4, #20]
 8009050:	7833      	ldrb	r3, [r6, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d100      	bne.n	8009058 <_vfiprintf_r+0xa4>
 8009056:	e0a6      	b.n	80091a6 <_vfiprintf_r+0x1f2>
 8009058:	2201      	movs	r2, #1
 800905a:	2300      	movs	r3, #0
 800905c:	4252      	negs	r2, r2
 800905e:	6062      	str	r2, [r4, #4]
 8009060:	a904      	add	r1, sp, #16
 8009062:	3254      	adds	r2, #84	@ 0x54
 8009064:	1852      	adds	r2, r2, r1
 8009066:	1c75      	adds	r5, r6, #1
 8009068:	6023      	str	r3, [r4, #0]
 800906a:	60e3      	str	r3, [r4, #12]
 800906c:	60a3      	str	r3, [r4, #8]
 800906e:	7013      	strb	r3, [r2, #0]
 8009070:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009072:	4b59      	ldr	r3, [pc, #356]	@ (80091d8 <_vfiprintf_r+0x224>)
 8009074:	2205      	movs	r2, #5
 8009076:	0018      	movs	r0, r3
 8009078:	7829      	ldrb	r1, [r5, #0]
 800907a:	9305      	str	r3, [sp, #20]
 800907c:	f000 fbaa 	bl	80097d4 <memchr>
 8009080:	1c6e      	adds	r6, r5, #1
 8009082:	2800      	cmp	r0, #0
 8009084:	d11f      	bne.n	80090c6 <_vfiprintf_r+0x112>
 8009086:	6822      	ldr	r2, [r4, #0]
 8009088:	06d3      	lsls	r3, r2, #27
 800908a:	d504      	bpl.n	8009096 <_vfiprintf_r+0xe2>
 800908c:	2353      	movs	r3, #83	@ 0x53
 800908e:	a904      	add	r1, sp, #16
 8009090:	185b      	adds	r3, r3, r1
 8009092:	2120      	movs	r1, #32
 8009094:	7019      	strb	r1, [r3, #0]
 8009096:	0713      	lsls	r3, r2, #28
 8009098:	d504      	bpl.n	80090a4 <_vfiprintf_r+0xf0>
 800909a:	2353      	movs	r3, #83	@ 0x53
 800909c:	a904      	add	r1, sp, #16
 800909e:	185b      	adds	r3, r3, r1
 80090a0:	212b      	movs	r1, #43	@ 0x2b
 80090a2:	7019      	strb	r1, [r3, #0]
 80090a4:	782b      	ldrb	r3, [r5, #0]
 80090a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80090a8:	d016      	beq.n	80090d8 <_vfiprintf_r+0x124>
 80090aa:	002e      	movs	r6, r5
 80090ac:	2100      	movs	r1, #0
 80090ae:	200a      	movs	r0, #10
 80090b0:	68e3      	ldr	r3, [r4, #12]
 80090b2:	7832      	ldrb	r2, [r6, #0]
 80090b4:	1c75      	adds	r5, r6, #1
 80090b6:	3a30      	subs	r2, #48	@ 0x30
 80090b8:	2a09      	cmp	r2, #9
 80090ba:	d950      	bls.n	800915e <_vfiprintf_r+0x1aa>
 80090bc:	2900      	cmp	r1, #0
 80090be:	d111      	bne.n	80090e4 <_vfiprintf_r+0x130>
 80090c0:	e017      	b.n	80090f2 <_vfiprintf_r+0x13e>
 80090c2:	3601      	adds	r6, #1
 80090c4:	e7af      	b.n	8009026 <_vfiprintf_r+0x72>
 80090c6:	9b05      	ldr	r3, [sp, #20]
 80090c8:	6822      	ldr	r2, [r4, #0]
 80090ca:	1ac0      	subs	r0, r0, r3
 80090cc:	2301      	movs	r3, #1
 80090ce:	4083      	lsls	r3, r0
 80090d0:	4313      	orrs	r3, r2
 80090d2:	0035      	movs	r5, r6
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	e7cc      	b.n	8009072 <_vfiprintf_r+0xbe>
 80090d8:	9b07      	ldr	r3, [sp, #28]
 80090da:	1d19      	adds	r1, r3, #4
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	9107      	str	r1, [sp, #28]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	db01      	blt.n	80090e8 <_vfiprintf_r+0x134>
 80090e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090e6:	e004      	b.n	80090f2 <_vfiprintf_r+0x13e>
 80090e8:	425b      	negs	r3, r3
 80090ea:	60e3      	str	r3, [r4, #12]
 80090ec:	2302      	movs	r3, #2
 80090ee:	4313      	orrs	r3, r2
 80090f0:	6023      	str	r3, [r4, #0]
 80090f2:	7833      	ldrb	r3, [r6, #0]
 80090f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80090f6:	d10c      	bne.n	8009112 <_vfiprintf_r+0x15e>
 80090f8:	7873      	ldrb	r3, [r6, #1]
 80090fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80090fc:	d134      	bne.n	8009168 <_vfiprintf_r+0x1b4>
 80090fe:	9b07      	ldr	r3, [sp, #28]
 8009100:	3602      	adds	r6, #2
 8009102:	1d1a      	adds	r2, r3, #4
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	9207      	str	r2, [sp, #28]
 8009108:	2b00      	cmp	r3, #0
 800910a:	da01      	bge.n	8009110 <_vfiprintf_r+0x15c>
 800910c:	2301      	movs	r3, #1
 800910e:	425b      	negs	r3, r3
 8009110:	9309      	str	r3, [sp, #36]	@ 0x24
 8009112:	4d32      	ldr	r5, [pc, #200]	@ (80091dc <_vfiprintf_r+0x228>)
 8009114:	2203      	movs	r2, #3
 8009116:	0028      	movs	r0, r5
 8009118:	7831      	ldrb	r1, [r6, #0]
 800911a:	f000 fb5b 	bl	80097d4 <memchr>
 800911e:	2800      	cmp	r0, #0
 8009120:	d006      	beq.n	8009130 <_vfiprintf_r+0x17c>
 8009122:	2340      	movs	r3, #64	@ 0x40
 8009124:	1b40      	subs	r0, r0, r5
 8009126:	4083      	lsls	r3, r0
 8009128:	6822      	ldr	r2, [r4, #0]
 800912a:	3601      	adds	r6, #1
 800912c:	4313      	orrs	r3, r2
 800912e:	6023      	str	r3, [r4, #0]
 8009130:	7831      	ldrb	r1, [r6, #0]
 8009132:	2206      	movs	r2, #6
 8009134:	482a      	ldr	r0, [pc, #168]	@ (80091e0 <_vfiprintf_r+0x22c>)
 8009136:	1c75      	adds	r5, r6, #1
 8009138:	7621      	strb	r1, [r4, #24]
 800913a:	f000 fb4b 	bl	80097d4 <memchr>
 800913e:	2800      	cmp	r0, #0
 8009140:	d040      	beq.n	80091c4 <_vfiprintf_r+0x210>
 8009142:	4b28      	ldr	r3, [pc, #160]	@ (80091e4 <_vfiprintf_r+0x230>)
 8009144:	2b00      	cmp	r3, #0
 8009146:	d122      	bne.n	800918e <_vfiprintf_r+0x1da>
 8009148:	2207      	movs	r2, #7
 800914a:	9b07      	ldr	r3, [sp, #28]
 800914c:	3307      	adds	r3, #7
 800914e:	4393      	bics	r3, r2
 8009150:	3308      	adds	r3, #8
 8009152:	9307      	str	r3, [sp, #28]
 8009154:	6963      	ldr	r3, [r4, #20]
 8009156:	9a04      	ldr	r2, [sp, #16]
 8009158:	189b      	adds	r3, r3, r2
 800915a:	6163      	str	r3, [r4, #20]
 800915c:	e762      	b.n	8009024 <_vfiprintf_r+0x70>
 800915e:	4343      	muls	r3, r0
 8009160:	002e      	movs	r6, r5
 8009162:	2101      	movs	r1, #1
 8009164:	189b      	adds	r3, r3, r2
 8009166:	e7a4      	b.n	80090b2 <_vfiprintf_r+0xfe>
 8009168:	2300      	movs	r3, #0
 800916a:	200a      	movs	r0, #10
 800916c:	0019      	movs	r1, r3
 800916e:	3601      	adds	r6, #1
 8009170:	6063      	str	r3, [r4, #4]
 8009172:	7832      	ldrb	r2, [r6, #0]
 8009174:	1c75      	adds	r5, r6, #1
 8009176:	3a30      	subs	r2, #48	@ 0x30
 8009178:	2a09      	cmp	r2, #9
 800917a:	d903      	bls.n	8009184 <_vfiprintf_r+0x1d0>
 800917c:	2b00      	cmp	r3, #0
 800917e:	d0c8      	beq.n	8009112 <_vfiprintf_r+0x15e>
 8009180:	9109      	str	r1, [sp, #36]	@ 0x24
 8009182:	e7c6      	b.n	8009112 <_vfiprintf_r+0x15e>
 8009184:	4341      	muls	r1, r0
 8009186:	002e      	movs	r6, r5
 8009188:	2301      	movs	r3, #1
 800918a:	1889      	adds	r1, r1, r2
 800918c:	e7f1      	b.n	8009172 <_vfiprintf_r+0x1be>
 800918e:	aa07      	add	r2, sp, #28
 8009190:	9200      	str	r2, [sp, #0]
 8009192:	0021      	movs	r1, r4
 8009194:	003a      	movs	r2, r7
 8009196:	4b14      	ldr	r3, [pc, #80]	@ (80091e8 <_vfiprintf_r+0x234>)
 8009198:	9803      	ldr	r0, [sp, #12]
 800919a:	e000      	b.n	800919e <_vfiprintf_r+0x1ea>
 800919c:	bf00      	nop
 800919e:	9004      	str	r0, [sp, #16]
 80091a0:	9b04      	ldr	r3, [sp, #16]
 80091a2:	3301      	adds	r3, #1
 80091a4:	d1d6      	bne.n	8009154 <_vfiprintf_r+0x1a0>
 80091a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091a8:	07db      	lsls	r3, r3, #31
 80091aa:	d405      	bmi.n	80091b8 <_vfiprintf_r+0x204>
 80091ac:	89bb      	ldrh	r3, [r7, #12]
 80091ae:	059b      	lsls	r3, r3, #22
 80091b0:	d402      	bmi.n	80091b8 <_vfiprintf_r+0x204>
 80091b2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80091b4:	f7ff fe8a 	bl	8008ecc <__retarget_lock_release_recursive>
 80091b8:	89bb      	ldrh	r3, [r7, #12]
 80091ba:	065b      	lsls	r3, r3, #25
 80091bc:	d500      	bpl.n	80091c0 <_vfiprintf_r+0x20c>
 80091be:	e71e      	b.n	8008ffe <_vfiprintf_r+0x4a>
 80091c0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80091c2:	e71e      	b.n	8009002 <_vfiprintf_r+0x4e>
 80091c4:	aa07      	add	r2, sp, #28
 80091c6:	9200      	str	r2, [sp, #0]
 80091c8:	0021      	movs	r1, r4
 80091ca:	003a      	movs	r2, r7
 80091cc:	4b06      	ldr	r3, [pc, #24]	@ (80091e8 <_vfiprintf_r+0x234>)
 80091ce:	9803      	ldr	r0, [sp, #12]
 80091d0:	f000 f87c 	bl	80092cc <_printf_i>
 80091d4:	e7e3      	b.n	800919e <_vfiprintf_r+0x1ea>
 80091d6:	46c0      	nop			@ (mov r8, r8)
 80091d8:	08009f90 	.word	0x08009f90
 80091dc:	08009f96 	.word	0x08009f96
 80091e0:	08009f9a 	.word	0x08009f9a
 80091e4:	00000000 	.word	0x00000000
 80091e8:	08008f8f 	.word	0x08008f8f

080091ec <_printf_common>:
 80091ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091ee:	0016      	movs	r6, r2
 80091f0:	9301      	str	r3, [sp, #4]
 80091f2:	688a      	ldr	r2, [r1, #8]
 80091f4:	690b      	ldr	r3, [r1, #16]
 80091f6:	000c      	movs	r4, r1
 80091f8:	9000      	str	r0, [sp, #0]
 80091fa:	4293      	cmp	r3, r2
 80091fc:	da00      	bge.n	8009200 <_printf_common+0x14>
 80091fe:	0013      	movs	r3, r2
 8009200:	0022      	movs	r2, r4
 8009202:	6033      	str	r3, [r6, #0]
 8009204:	3243      	adds	r2, #67	@ 0x43
 8009206:	7812      	ldrb	r2, [r2, #0]
 8009208:	2a00      	cmp	r2, #0
 800920a:	d001      	beq.n	8009210 <_printf_common+0x24>
 800920c:	3301      	adds	r3, #1
 800920e:	6033      	str	r3, [r6, #0]
 8009210:	6823      	ldr	r3, [r4, #0]
 8009212:	069b      	lsls	r3, r3, #26
 8009214:	d502      	bpl.n	800921c <_printf_common+0x30>
 8009216:	6833      	ldr	r3, [r6, #0]
 8009218:	3302      	adds	r3, #2
 800921a:	6033      	str	r3, [r6, #0]
 800921c:	6822      	ldr	r2, [r4, #0]
 800921e:	2306      	movs	r3, #6
 8009220:	0015      	movs	r5, r2
 8009222:	401d      	ands	r5, r3
 8009224:	421a      	tst	r2, r3
 8009226:	d027      	beq.n	8009278 <_printf_common+0x8c>
 8009228:	0023      	movs	r3, r4
 800922a:	3343      	adds	r3, #67	@ 0x43
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	1e5a      	subs	r2, r3, #1
 8009230:	4193      	sbcs	r3, r2
 8009232:	6822      	ldr	r2, [r4, #0]
 8009234:	0692      	lsls	r2, r2, #26
 8009236:	d430      	bmi.n	800929a <_printf_common+0xae>
 8009238:	0022      	movs	r2, r4
 800923a:	9901      	ldr	r1, [sp, #4]
 800923c:	9800      	ldr	r0, [sp, #0]
 800923e:	9d08      	ldr	r5, [sp, #32]
 8009240:	3243      	adds	r2, #67	@ 0x43
 8009242:	47a8      	blx	r5
 8009244:	3001      	adds	r0, #1
 8009246:	d025      	beq.n	8009294 <_printf_common+0xa8>
 8009248:	2206      	movs	r2, #6
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	2500      	movs	r5, #0
 800924e:	4013      	ands	r3, r2
 8009250:	2b04      	cmp	r3, #4
 8009252:	d105      	bne.n	8009260 <_printf_common+0x74>
 8009254:	6833      	ldr	r3, [r6, #0]
 8009256:	68e5      	ldr	r5, [r4, #12]
 8009258:	1aed      	subs	r5, r5, r3
 800925a:	43eb      	mvns	r3, r5
 800925c:	17db      	asrs	r3, r3, #31
 800925e:	401d      	ands	r5, r3
 8009260:	68a3      	ldr	r3, [r4, #8]
 8009262:	6922      	ldr	r2, [r4, #16]
 8009264:	4293      	cmp	r3, r2
 8009266:	dd01      	ble.n	800926c <_printf_common+0x80>
 8009268:	1a9b      	subs	r3, r3, r2
 800926a:	18ed      	adds	r5, r5, r3
 800926c:	2600      	movs	r6, #0
 800926e:	42b5      	cmp	r5, r6
 8009270:	d120      	bne.n	80092b4 <_printf_common+0xc8>
 8009272:	2000      	movs	r0, #0
 8009274:	e010      	b.n	8009298 <_printf_common+0xac>
 8009276:	3501      	adds	r5, #1
 8009278:	68e3      	ldr	r3, [r4, #12]
 800927a:	6832      	ldr	r2, [r6, #0]
 800927c:	1a9b      	subs	r3, r3, r2
 800927e:	42ab      	cmp	r3, r5
 8009280:	ddd2      	ble.n	8009228 <_printf_common+0x3c>
 8009282:	0022      	movs	r2, r4
 8009284:	2301      	movs	r3, #1
 8009286:	9901      	ldr	r1, [sp, #4]
 8009288:	9800      	ldr	r0, [sp, #0]
 800928a:	9f08      	ldr	r7, [sp, #32]
 800928c:	3219      	adds	r2, #25
 800928e:	47b8      	blx	r7
 8009290:	3001      	adds	r0, #1
 8009292:	d1f0      	bne.n	8009276 <_printf_common+0x8a>
 8009294:	2001      	movs	r0, #1
 8009296:	4240      	negs	r0, r0
 8009298:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800929a:	2030      	movs	r0, #48	@ 0x30
 800929c:	18e1      	adds	r1, r4, r3
 800929e:	3143      	adds	r1, #67	@ 0x43
 80092a0:	7008      	strb	r0, [r1, #0]
 80092a2:	0021      	movs	r1, r4
 80092a4:	1c5a      	adds	r2, r3, #1
 80092a6:	3145      	adds	r1, #69	@ 0x45
 80092a8:	7809      	ldrb	r1, [r1, #0]
 80092aa:	18a2      	adds	r2, r4, r2
 80092ac:	3243      	adds	r2, #67	@ 0x43
 80092ae:	3302      	adds	r3, #2
 80092b0:	7011      	strb	r1, [r2, #0]
 80092b2:	e7c1      	b.n	8009238 <_printf_common+0x4c>
 80092b4:	0022      	movs	r2, r4
 80092b6:	2301      	movs	r3, #1
 80092b8:	9901      	ldr	r1, [sp, #4]
 80092ba:	9800      	ldr	r0, [sp, #0]
 80092bc:	9f08      	ldr	r7, [sp, #32]
 80092be:	321a      	adds	r2, #26
 80092c0:	47b8      	blx	r7
 80092c2:	3001      	adds	r0, #1
 80092c4:	d0e6      	beq.n	8009294 <_printf_common+0xa8>
 80092c6:	3601      	adds	r6, #1
 80092c8:	e7d1      	b.n	800926e <_printf_common+0x82>
	...

080092cc <_printf_i>:
 80092cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ce:	b08b      	sub	sp, #44	@ 0x2c
 80092d0:	9206      	str	r2, [sp, #24]
 80092d2:	000a      	movs	r2, r1
 80092d4:	3243      	adds	r2, #67	@ 0x43
 80092d6:	9307      	str	r3, [sp, #28]
 80092d8:	9005      	str	r0, [sp, #20]
 80092da:	9203      	str	r2, [sp, #12]
 80092dc:	7e0a      	ldrb	r2, [r1, #24]
 80092de:	000c      	movs	r4, r1
 80092e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80092e2:	2a78      	cmp	r2, #120	@ 0x78
 80092e4:	d809      	bhi.n	80092fa <_printf_i+0x2e>
 80092e6:	2a62      	cmp	r2, #98	@ 0x62
 80092e8:	d80b      	bhi.n	8009302 <_printf_i+0x36>
 80092ea:	2a00      	cmp	r2, #0
 80092ec:	d100      	bne.n	80092f0 <_printf_i+0x24>
 80092ee:	e0ba      	b.n	8009466 <_printf_i+0x19a>
 80092f0:	497a      	ldr	r1, [pc, #488]	@ (80094dc <_printf_i+0x210>)
 80092f2:	9104      	str	r1, [sp, #16]
 80092f4:	2a58      	cmp	r2, #88	@ 0x58
 80092f6:	d100      	bne.n	80092fa <_printf_i+0x2e>
 80092f8:	e08e      	b.n	8009418 <_printf_i+0x14c>
 80092fa:	0025      	movs	r5, r4
 80092fc:	3542      	adds	r5, #66	@ 0x42
 80092fe:	702a      	strb	r2, [r5, #0]
 8009300:	e022      	b.n	8009348 <_printf_i+0x7c>
 8009302:	0010      	movs	r0, r2
 8009304:	3863      	subs	r0, #99	@ 0x63
 8009306:	2815      	cmp	r0, #21
 8009308:	d8f7      	bhi.n	80092fa <_printf_i+0x2e>
 800930a:	f7f6 fefb 	bl	8000104 <__gnu_thumb1_case_shi>
 800930e:	0016      	.short	0x0016
 8009310:	fff6001f 	.word	0xfff6001f
 8009314:	fff6fff6 	.word	0xfff6fff6
 8009318:	001ffff6 	.word	0x001ffff6
 800931c:	fff6fff6 	.word	0xfff6fff6
 8009320:	fff6fff6 	.word	0xfff6fff6
 8009324:	0036009f 	.word	0x0036009f
 8009328:	fff6007e 	.word	0xfff6007e
 800932c:	00b0fff6 	.word	0x00b0fff6
 8009330:	0036fff6 	.word	0x0036fff6
 8009334:	fff6fff6 	.word	0xfff6fff6
 8009338:	0082      	.short	0x0082
 800933a:	0025      	movs	r5, r4
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	3542      	adds	r5, #66	@ 0x42
 8009340:	1d11      	adds	r1, r2, #4
 8009342:	6019      	str	r1, [r3, #0]
 8009344:	6813      	ldr	r3, [r2, #0]
 8009346:	702b      	strb	r3, [r5, #0]
 8009348:	2301      	movs	r3, #1
 800934a:	e09e      	b.n	800948a <_printf_i+0x1be>
 800934c:	6818      	ldr	r0, [r3, #0]
 800934e:	6809      	ldr	r1, [r1, #0]
 8009350:	1d02      	adds	r2, r0, #4
 8009352:	060d      	lsls	r5, r1, #24
 8009354:	d50b      	bpl.n	800936e <_printf_i+0xa2>
 8009356:	6806      	ldr	r6, [r0, #0]
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	2e00      	cmp	r6, #0
 800935c:	da03      	bge.n	8009366 <_printf_i+0x9a>
 800935e:	232d      	movs	r3, #45	@ 0x2d
 8009360:	9a03      	ldr	r2, [sp, #12]
 8009362:	4276      	negs	r6, r6
 8009364:	7013      	strb	r3, [r2, #0]
 8009366:	4b5d      	ldr	r3, [pc, #372]	@ (80094dc <_printf_i+0x210>)
 8009368:	270a      	movs	r7, #10
 800936a:	9304      	str	r3, [sp, #16]
 800936c:	e018      	b.n	80093a0 <_printf_i+0xd4>
 800936e:	6806      	ldr	r6, [r0, #0]
 8009370:	601a      	str	r2, [r3, #0]
 8009372:	0649      	lsls	r1, r1, #25
 8009374:	d5f1      	bpl.n	800935a <_printf_i+0x8e>
 8009376:	b236      	sxth	r6, r6
 8009378:	e7ef      	b.n	800935a <_printf_i+0x8e>
 800937a:	6808      	ldr	r0, [r1, #0]
 800937c:	6819      	ldr	r1, [r3, #0]
 800937e:	c940      	ldmia	r1!, {r6}
 8009380:	0605      	lsls	r5, r0, #24
 8009382:	d402      	bmi.n	800938a <_printf_i+0xbe>
 8009384:	0640      	lsls	r0, r0, #25
 8009386:	d500      	bpl.n	800938a <_printf_i+0xbe>
 8009388:	b2b6      	uxth	r6, r6
 800938a:	6019      	str	r1, [r3, #0]
 800938c:	4b53      	ldr	r3, [pc, #332]	@ (80094dc <_printf_i+0x210>)
 800938e:	270a      	movs	r7, #10
 8009390:	9304      	str	r3, [sp, #16]
 8009392:	2a6f      	cmp	r2, #111	@ 0x6f
 8009394:	d100      	bne.n	8009398 <_printf_i+0xcc>
 8009396:	3f02      	subs	r7, #2
 8009398:	0023      	movs	r3, r4
 800939a:	2200      	movs	r2, #0
 800939c:	3343      	adds	r3, #67	@ 0x43
 800939e:	701a      	strb	r2, [r3, #0]
 80093a0:	6863      	ldr	r3, [r4, #4]
 80093a2:	60a3      	str	r3, [r4, #8]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	db06      	blt.n	80093b6 <_printf_i+0xea>
 80093a8:	2104      	movs	r1, #4
 80093aa:	6822      	ldr	r2, [r4, #0]
 80093ac:	9d03      	ldr	r5, [sp, #12]
 80093ae:	438a      	bics	r2, r1
 80093b0:	6022      	str	r2, [r4, #0]
 80093b2:	4333      	orrs	r3, r6
 80093b4:	d00c      	beq.n	80093d0 <_printf_i+0x104>
 80093b6:	9d03      	ldr	r5, [sp, #12]
 80093b8:	0030      	movs	r0, r6
 80093ba:	0039      	movs	r1, r7
 80093bc:	f7f6 ff32 	bl	8000224 <__aeabi_uidivmod>
 80093c0:	9b04      	ldr	r3, [sp, #16]
 80093c2:	3d01      	subs	r5, #1
 80093c4:	5c5b      	ldrb	r3, [r3, r1]
 80093c6:	702b      	strb	r3, [r5, #0]
 80093c8:	0033      	movs	r3, r6
 80093ca:	0006      	movs	r6, r0
 80093cc:	429f      	cmp	r7, r3
 80093ce:	d9f3      	bls.n	80093b8 <_printf_i+0xec>
 80093d0:	2f08      	cmp	r7, #8
 80093d2:	d109      	bne.n	80093e8 <_printf_i+0x11c>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	07db      	lsls	r3, r3, #31
 80093d8:	d506      	bpl.n	80093e8 <_printf_i+0x11c>
 80093da:	6862      	ldr	r2, [r4, #4]
 80093dc:	6923      	ldr	r3, [r4, #16]
 80093de:	429a      	cmp	r2, r3
 80093e0:	dc02      	bgt.n	80093e8 <_printf_i+0x11c>
 80093e2:	2330      	movs	r3, #48	@ 0x30
 80093e4:	3d01      	subs	r5, #1
 80093e6:	702b      	strb	r3, [r5, #0]
 80093e8:	9b03      	ldr	r3, [sp, #12]
 80093ea:	1b5b      	subs	r3, r3, r5
 80093ec:	6123      	str	r3, [r4, #16]
 80093ee:	9b07      	ldr	r3, [sp, #28]
 80093f0:	0021      	movs	r1, r4
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	9805      	ldr	r0, [sp, #20]
 80093f6:	9b06      	ldr	r3, [sp, #24]
 80093f8:	aa09      	add	r2, sp, #36	@ 0x24
 80093fa:	f7ff fef7 	bl	80091ec <_printf_common>
 80093fe:	3001      	adds	r0, #1
 8009400:	d148      	bne.n	8009494 <_printf_i+0x1c8>
 8009402:	2001      	movs	r0, #1
 8009404:	4240      	negs	r0, r0
 8009406:	b00b      	add	sp, #44	@ 0x2c
 8009408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800940a:	2220      	movs	r2, #32
 800940c:	6809      	ldr	r1, [r1, #0]
 800940e:	430a      	orrs	r2, r1
 8009410:	6022      	str	r2, [r4, #0]
 8009412:	2278      	movs	r2, #120	@ 0x78
 8009414:	4932      	ldr	r1, [pc, #200]	@ (80094e0 <_printf_i+0x214>)
 8009416:	9104      	str	r1, [sp, #16]
 8009418:	0021      	movs	r1, r4
 800941a:	3145      	adds	r1, #69	@ 0x45
 800941c:	700a      	strb	r2, [r1, #0]
 800941e:	6819      	ldr	r1, [r3, #0]
 8009420:	6822      	ldr	r2, [r4, #0]
 8009422:	c940      	ldmia	r1!, {r6}
 8009424:	0610      	lsls	r0, r2, #24
 8009426:	d402      	bmi.n	800942e <_printf_i+0x162>
 8009428:	0650      	lsls	r0, r2, #25
 800942a:	d500      	bpl.n	800942e <_printf_i+0x162>
 800942c:	b2b6      	uxth	r6, r6
 800942e:	6019      	str	r1, [r3, #0]
 8009430:	07d3      	lsls	r3, r2, #31
 8009432:	d502      	bpl.n	800943a <_printf_i+0x16e>
 8009434:	2320      	movs	r3, #32
 8009436:	4313      	orrs	r3, r2
 8009438:	6023      	str	r3, [r4, #0]
 800943a:	2e00      	cmp	r6, #0
 800943c:	d001      	beq.n	8009442 <_printf_i+0x176>
 800943e:	2710      	movs	r7, #16
 8009440:	e7aa      	b.n	8009398 <_printf_i+0xcc>
 8009442:	2220      	movs	r2, #32
 8009444:	6823      	ldr	r3, [r4, #0]
 8009446:	4393      	bics	r3, r2
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	e7f8      	b.n	800943e <_printf_i+0x172>
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	680d      	ldr	r5, [r1, #0]
 8009450:	1d10      	adds	r0, r2, #4
 8009452:	6949      	ldr	r1, [r1, #20]
 8009454:	6018      	str	r0, [r3, #0]
 8009456:	6813      	ldr	r3, [r2, #0]
 8009458:	062e      	lsls	r6, r5, #24
 800945a:	d501      	bpl.n	8009460 <_printf_i+0x194>
 800945c:	6019      	str	r1, [r3, #0]
 800945e:	e002      	b.n	8009466 <_printf_i+0x19a>
 8009460:	066d      	lsls	r5, r5, #25
 8009462:	d5fb      	bpl.n	800945c <_printf_i+0x190>
 8009464:	8019      	strh	r1, [r3, #0]
 8009466:	2300      	movs	r3, #0
 8009468:	9d03      	ldr	r5, [sp, #12]
 800946a:	6123      	str	r3, [r4, #16]
 800946c:	e7bf      	b.n	80093ee <_printf_i+0x122>
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	1d11      	adds	r1, r2, #4
 8009472:	6019      	str	r1, [r3, #0]
 8009474:	6815      	ldr	r5, [r2, #0]
 8009476:	2100      	movs	r1, #0
 8009478:	0028      	movs	r0, r5
 800947a:	6862      	ldr	r2, [r4, #4]
 800947c:	f000 f9aa 	bl	80097d4 <memchr>
 8009480:	2800      	cmp	r0, #0
 8009482:	d001      	beq.n	8009488 <_printf_i+0x1bc>
 8009484:	1b40      	subs	r0, r0, r5
 8009486:	6060      	str	r0, [r4, #4]
 8009488:	6863      	ldr	r3, [r4, #4]
 800948a:	6123      	str	r3, [r4, #16]
 800948c:	2300      	movs	r3, #0
 800948e:	9a03      	ldr	r2, [sp, #12]
 8009490:	7013      	strb	r3, [r2, #0]
 8009492:	e7ac      	b.n	80093ee <_printf_i+0x122>
 8009494:	002a      	movs	r2, r5
 8009496:	6923      	ldr	r3, [r4, #16]
 8009498:	9906      	ldr	r1, [sp, #24]
 800949a:	9805      	ldr	r0, [sp, #20]
 800949c:	9d07      	ldr	r5, [sp, #28]
 800949e:	47a8      	blx	r5
 80094a0:	3001      	adds	r0, #1
 80094a2:	d0ae      	beq.n	8009402 <_printf_i+0x136>
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	079b      	lsls	r3, r3, #30
 80094a8:	d415      	bmi.n	80094d6 <_printf_i+0x20a>
 80094aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ac:	68e0      	ldr	r0, [r4, #12]
 80094ae:	4298      	cmp	r0, r3
 80094b0:	daa9      	bge.n	8009406 <_printf_i+0x13a>
 80094b2:	0018      	movs	r0, r3
 80094b4:	e7a7      	b.n	8009406 <_printf_i+0x13a>
 80094b6:	0022      	movs	r2, r4
 80094b8:	2301      	movs	r3, #1
 80094ba:	9906      	ldr	r1, [sp, #24]
 80094bc:	9805      	ldr	r0, [sp, #20]
 80094be:	9e07      	ldr	r6, [sp, #28]
 80094c0:	3219      	adds	r2, #25
 80094c2:	47b0      	blx	r6
 80094c4:	3001      	adds	r0, #1
 80094c6:	d09c      	beq.n	8009402 <_printf_i+0x136>
 80094c8:	3501      	adds	r5, #1
 80094ca:	68e3      	ldr	r3, [r4, #12]
 80094cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094ce:	1a9b      	subs	r3, r3, r2
 80094d0:	42ab      	cmp	r3, r5
 80094d2:	dcf0      	bgt.n	80094b6 <_printf_i+0x1ea>
 80094d4:	e7e9      	b.n	80094aa <_printf_i+0x1de>
 80094d6:	2500      	movs	r5, #0
 80094d8:	e7f7      	b.n	80094ca <_printf_i+0x1fe>
 80094da:	46c0      	nop			@ (mov r8, r8)
 80094dc:	08009fa1 	.word	0x08009fa1
 80094e0:	08009fb2 	.word	0x08009fb2

080094e4 <__sflush_r>:
 80094e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094e6:	220c      	movs	r2, #12
 80094e8:	5e8b      	ldrsh	r3, [r1, r2]
 80094ea:	0005      	movs	r5, r0
 80094ec:	000c      	movs	r4, r1
 80094ee:	071a      	lsls	r2, r3, #28
 80094f0:	d456      	bmi.n	80095a0 <__sflush_r+0xbc>
 80094f2:	684a      	ldr	r2, [r1, #4]
 80094f4:	2a00      	cmp	r2, #0
 80094f6:	dc02      	bgt.n	80094fe <__sflush_r+0x1a>
 80094f8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80094fa:	2a00      	cmp	r2, #0
 80094fc:	dd4e      	ble.n	800959c <__sflush_r+0xb8>
 80094fe:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009500:	2f00      	cmp	r7, #0
 8009502:	d04b      	beq.n	800959c <__sflush_r+0xb8>
 8009504:	2200      	movs	r2, #0
 8009506:	2080      	movs	r0, #128	@ 0x80
 8009508:	682e      	ldr	r6, [r5, #0]
 800950a:	602a      	str	r2, [r5, #0]
 800950c:	001a      	movs	r2, r3
 800950e:	0140      	lsls	r0, r0, #5
 8009510:	6a21      	ldr	r1, [r4, #32]
 8009512:	4002      	ands	r2, r0
 8009514:	4203      	tst	r3, r0
 8009516:	d033      	beq.n	8009580 <__sflush_r+0x9c>
 8009518:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800951a:	89a3      	ldrh	r3, [r4, #12]
 800951c:	075b      	lsls	r3, r3, #29
 800951e:	d506      	bpl.n	800952e <__sflush_r+0x4a>
 8009520:	6863      	ldr	r3, [r4, #4]
 8009522:	1ad2      	subs	r2, r2, r3
 8009524:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009526:	2b00      	cmp	r3, #0
 8009528:	d001      	beq.n	800952e <__sflush_r+0x4a>
 800952a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800952c:	1ad2      	subs	r2, r2, r3
 800952e:	2300      	movs	r3, #0
 8009530:	0028      	movs	r0, r5
 8009532:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009534:	6a21      	ldr	r1, [r4, #32]
 8009536:	47b8      	blx	r7
 8009538:	89a2      	ldrh	r2, [r4, #12]
 800953a:	1c43      	adds	r3, r0, #1
 800953c:	d106      	bne.n	800954c <__sflush_r+0x68>
 800953e:	6829      	ldr	r1, [r5, #0]
 8009540:	291d      	cmp	r1, #29
 8009542:	d846      	bhi.n	80095d2 <__sflush_r+0xee>
 8009544:	4b29      	ldr	r3, [pc, #164]	@ (80095ec <__sflush_r+0x108>)
 8009546:	40cb      	lsrs	r3, r1
 8009548:	07db      	lsls	r3, r3, #31
 800954a:	d542      	bpl.n	80095d2 <__sflush_r+0xee>
 800954c:	2300      	movs	r3, #0
 800954e:	6063      	str	r3, [r4, #4]
 8009550:	6923      	ldr	r3, [r4, #16]
 8009552:	6023      	str	r3, [r4, #0]
 8009554:	04d2      	lsls	r2, r2, #19
 8009556:	d505      	bpl.n	8009564 <__sflush_r+0x80>
 8009558:	1c43      	adds	r3, r0, #1
 800955a:	d102      	bne.n	8009562 <__sflush_r+0x7e>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d100      	bne.n	8009564 <__sflush_r+0x80>
 8009562:	6560      	str	r0, [r4, #84]	@ 0x54
 8009564:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009566:	602e      	str	r6, [r5, #0]
 8009568:	2900      	cmp	r1, #0
 800956a:	d017      	beq.n	800959c <__sflush_r+0xb8>
 800956c:	0023      	movs	r3, r4
 800956e:	3344      	adds	r3, #68	@ 0x44
 8009570:	4299      	cmp	r1, r3
 8009572:	d002      	beq.n	800957a <__sflush_r+0x96>
 8009574:	0028      	movs	r0, r5
 8009576:	f7ff fcab 	bl	8008ed0 <_free_r>
 800957a:	2300      	movs	r3, #0
 800957c:	6363      	str	r3, [r4, #52]	@ 0x34
 800957e:	e00d      	b.n	800959c <__sflush_r+0xb8>
 8009580:	2301      	movs	r3, #1
 8009582:	0028      	movs	r0, r5
 8009584:	47b8      	blx	r7
 8009586:	0002      	movs	r2, r0
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	d1c6      	bne.n	800951a <__sflush_r+0x36>
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d0c3      	beq.n	800951a <__sflush_r+0x36>
 8009592:	2b1d      	cmp	r3, #29
 8009594:	d001      	beq.n	800959a <__sflush_r+0xb6>
 8009596:	2b16      	cmp	r3, #22
 8009598:	d11a      	bne.n	80095d0 <__sflush_r+0xec>
 800959a:	602e      	str	r6, [r5, #0]
 800959c:	2000      	movs	r0, #0
 800959e:	e01e      	b.n	80095de <__sflush_r+0xfa>
 80095a0:	690e      	ldr	r6, [r1, #16]
 80095a2:	2e00      	cmp	r6, #0
 80095a4:	d0fa      	beq.n	800959c <__sflush_r+0xb8>
 80095a6:	680f      	ldr	r7, [r1, #0]
 80095a8:	600e      	str	r6, [r1, #0]
 80095aa:	1bba      	subs	r2, r7, r6
 80095ac:	9201      	str	r2, [sp, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	079b      	lsls	r3, r3, #30
 80095b2:	d100      	bne.n	80095b6 <__sflush_r+0xd2>
 80095b4:	694a      	ldr	r2, [r1, #20]
 80095b6:	60a2      	str	r2, [r4, #8]
 80095b8:	9b01      	ldr	r3, [sp, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	ddee      	ble.n	800959c <__sflush_r+0xb8>
 80095be:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80095c0:	0032      	movs	r2, r6
 80095c2:	001f      	movs	r7, r3
 80095c4:	0028      	movs	r0, r5
 80095c6:	9b01      	ldr	r3, [sp, #4]
 80095c8:	6a21      	ldr	r1, [r4, #32]
 80095ca:	47b8      	blx	r7
 80095cc:	2800      	cmp	r0, #0
 80095ce:	dc07      	bgt.n	80095e0 <__sflush_r+0xfc>
 80095d0:	89a2      	ldrh	r2, [r4, #12]
 80095d2:	2340      	movs	r3, #64	@ 0x40
 80095d4:	2001      	movs	r0, #1
 80095d6:	4313      	orrs	r3, r2
 80095d8:	b21b      	sxth	r3, r3
 80095da:	81a3      	strh	r3, [r4, #12]
 80095dc:	4240      	negs	r0, r0
 80095de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095e0:	9b01      	ldr	r3, [sp, #4]
 80095e2:	1836      	adds	r6, r6, r0
 80095e4:	1a1b      	subs	r3, r3, r0
 80095e6:	9301      	str	r3, [sp, #4]
 80095e8:	e7e6      	b.n	80095b8 <__sflush_r+0xd4>
 80095ea:	46c0      	nop			@ (mov r8, r8)
 80095ec:	20400001 	.word	0x20400001

080095f0 <_fflush_r>:
 80095f0:	690b      	ldr	r3, [r1, #16]
 80095f2:	b570      	push	{r4, r5, r6, lr}
 80095f4:	0005      	movs	r5, r0
 80095f6:	000c      	movs	r4, r1
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d102      	bne.n	8009602 <_fflush_r+0x12>
 80095fc:	2500      	movs	r5, #0
 80095fe:	0028      	movs	r0, r5
 8009600:	bd70      	pop	{r4, r5, r6, pc}
 8009602:	2800      	cmp	r0, #0
 8009604:	d004      	beq.n	8009610 <_fflush_r+0x20>
 8009606:	6a03      	ldr	r3, [r0, #32]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d101      	bne.n	8009610 <_fflush_r+0x20>
 800960c:	f7ff fa30 	bl	8008a70 <__sinit>
 8009610:	220c      	movs	r2, #12
 8009612:	5ea3      	ldrsh	r3, [r4, r2]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d0f1      	beq.n	80095fc <_fflush_r+0xc>
 8009618:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800961a:	07d2      	lsls	r2, r2, #31
 800961c:	d404      	bmi.n	8009628 <_fflush_r+0x38>
 800961e:	059b      	lsls	r3, r3, #22
 8009620:	d402      	bmi.n	8009628 <_fflush_r+0x38>
 8009622:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009624:	f7ff fc51 	bl	8008eca <__retarget_lock_acquire_recursive>
 8009628:	0028      	movs	r0, r5
 800962a:	0021      	movs	r1, r4
 800962c:	f7ff ff5a 	bl	80094e4 <__sflush_r>
 8009630:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009632:	0005      	movs	r5, r0
 8009634:	07db      	lsls	r3, r3, #31
 8009636:	d4e2      	bmi.n	80095fe <_fflush_r+0xe>
 8009638:	89a3      	ldrh	r3, [r4, #12]
 800963a:	059b      	lsls	r3, r3, #22
 800963c:	d4df      	bmi.n	80095fe <_fflush_r+0xe>
 800963e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009640:	f7ff fc44 	bl	8008ecc <__retarget_lock_release_recursive>
 8009644:	e7db      	b.n	80095fe <_fflush_r+0xe>
	...

08009648 <__swhatbuf_r>:
 8009648:	b570      	push	{r4, r5, r6, lr}
 800964a:	000e      	movs	r6, r1
 800964c:	001d      	movs	r5, r3
 800964e:	230e      	movs	r3, #14
 8009650:	5ec9      	ldrsh	r1, [r1, r3]
 8009652:	0014      	movs	r4, r2
 8009654:	b096      	sub	sp, #88	@ 0x58
 8009656:	2900      	cmp	r1, #0
 8009658:	da0c      	bge.n	8009674 <__swhatbuf_r+0x2c>
 800965a:	89b2      	ldrh	r2, [r6, #12]
 800965c:	2380      	movs	r3, #128	@ 0x80
 800965e:	0011      	movs	r1, r2
 8009660:	4019      	ands	r1, r3
 8009662:	421a      	tst	r2, r3
 8009664:	d114      	bne.n	8009690 <__swhatbuf_r+0x48>
 8009666:	2380      	movs	r3, #128	@ 0x80
 8009668:	00db      	lsls	r3, r3, #3
 800966a:	2000      	movs	r0, #0
 800966c:	6029      	str	r1, [r5, #0]
 800966e:	6023      	str	r3, [r4, #0]
 8009670:	b016      	add	sp, #88	@ 0x58
 8009672:	bd70      	pop	{r4, r5, r6, pc}
 8009674:	466a      	mov	r2, sp
 8009676:	f000 f889 	bl	800978c <_fstat_r>
 800967a:	2800      	cmp	r0, #0
 800967c:	dbed      	blt.n	800965a <__swhatbuf_r+0x12>
 800967e:	23f0      	movs	r3, #240	@ 0xf0
 8009680:	9901      	ldr	r1, [sp, #4]
 8009682:	021b      	lsls	r3, r3, #8
 8009684:	4019      	ands	r1, r3
 8009686:	4b04      	ldr	r3, [pc, #16]	@ (8009698 <__swhatbuf_r+0x50>)
 8009688:	18c9      	adds	r1, r1, r3
 800968a:	424b      	negs	r3, r1
 800968c:	4159      	adcs	r1, r3
 800968e:	e7ea      	b.n	8009666 <__swhatbuf_r+0x1e>
 8009690:	2100      	movs	r1, #0
 8009692:	2340      	movs	r3, #64	@ 0x40
 8009694:	e7e9      	b.n	800966a <__swhatbuf_r+0x22>
 8009696:	46c0      	nop			@ (mov r8, r8)
 8009698:	ffffe000 	.word	0xffffe000

0800969c <__smakebuf_r>:
 800969c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800969e:	2602      	movs	r6, #2
 80096a0:	898b      	ldrh	r3, [r1, #12]
 80096a2:	0005      	movs	r5, r0
 80096a4:	000c      	movs	r4, r1
 80096a6:	b085      	sub	sp, #20
 80096a8:	4233      	tst	r3, r6
 80096aa:	d007      	beq.n	80096bc <__smakebuf_r+0x20>
 80096ac:	0023      	movs	r3, r4
 80096ae:	3347      	adds	r3, #71	@ 0x47
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	6123      	str	r3, [r4, #16]
 80096b4:	2301      	movs	r3, #1
 80096b6:	6163      	str	r3, [r4, #20]
 80096b8:	b005      	add	sp, #20
 80096ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096bc:	ab03      	add	r3, sp, #12
 80096be:	aa02      	add	r2, sp, #8
 80096c0:	f7ff ffc2 	bl	8009648 <__swhatbuf_r>
 80096c4:	9f02      	ldr	r7, [sp, #8]
 80096c6:	9001      	str	r0, [sp, #4]
 80096c8:	0039      	movs	r1, r7
 80096ca:	0028      	movs	r0, r5
 80096cc:	f7ff f8b0 	bl	8008830 <_malloc_r>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d108      	bne.n	80096e6 <__smakebuf_r+0x4a>
 80096d4:	220c      	movs	r2, #12
 80096d6:	5ea3      	ldrsh	r3, [r4, r2]
 80096d8:	059a      	lsls	r2, r3, #22
 80096da:	d4ed      	bmi.n	80096b8 <__smakebuf_r+0x1c>
 80096dc:	2203      	movs	r2, #3
 80096de:	4393      	bics	r3, r2
 80096e0:	431e      	orrs	r6, r3
 80096e2:	81a6      	strh	r6, [r4, #12]
 80096e4:	e7e2      	b.n	80096ac <__smakebuf_r+0x10>
 80096e6:	2380      	movs	r3, #128	@ 0x80
 80096e8:	89a2      	ldrh	r2, [r4, #12]
 80096ea:	6020      	str	r0, [r4, #0]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	81a3      	strh	r3, [r4, #12]
 80096f0:	9b03      	ldr	r3, [sp, #12]
 80096f2:	6120      	str	r0, [r4, #16]
 80096f4:	6167      	str	r7, [r4, #20]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00c      	beq.n	8009714 <__smakebuf_r+0x78>
 80096fa:	0028      	movs	r0, r5
 80096fc:	230e      	movs	r3, #14
 80096fe:	5ee1      	ldrsh	r1, [r4, r3]
 8009700:	f000 f856 	bl	80097b0 <_isatty_r>
 8009704:	2800      	cmp	r0, #0
 8009706:	d005      	beq.n	8009714 <__smakebuf_r+0x78>
 8009708:	2303      	movs	r3, #3
 800970a:	89a2      	ldrh	r2, [r4, #12]
 800970c:	439a      	bics	r2, r3
 800970e:	3b02      	subs	r3, #2
 8009710:	4313      	orrs	r3, r2
 8009712:	81a3      	strh	r3, [r4, #12]
 8009714:	89a3      	ldrh	r3, [r4, #12]
 8009716:	9a01      	ldr	r2, [sp, #4]
 8009718:	4313      	orrs	r3, r2
 800971a:	81a3      	strh	r3, [r4, #12]
 800971c:	e7cc      	b.n	80096b8 <__smakebuf_r+0x1c>

0800971e <_putc_r>:
 800971e:	b570      	push	{r4, r5, r6, lr}
 8009720:	0006      	movs	r6, r0
 8009722:	000d      	movs	r5, r1
 8009724:	0014      	movs	r4, r2
 8009726:	2800      	cmp	r0, #0
 8009728:	d004      	beq.n	8009734 <_putc_r+0x16>
 800972a:	6a03      	ldr	r3, [r0, #32]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d101      	bne.n	8009734 <_putc_r+0x16>
 8009730:	f7ff f99e 	bl	8008a70 <__sinit>
 8009734:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009736:	07db      	lsls	r3, r3, #31
 8009738:	d405      	bmi.n	8009746 <_putc_r+0x28>
 800973a:	89a3      	ldrh	r3, [r4, #12]
 800973c:	059b      	lsls	r3, r3, #22
 800973e:	d402      	bmi.n	8009746 <_putc_r+0x28>
 8009740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009742:	f7ff fbc2 	bl	8008eca <__retarget_lock_acquire_recursive>
 8009746:	68a3      	ldr	r3, [r4, #8]
 8009748:	3b01      	subs	r3, #1
 800974a:	60a3      	str	r3, [r4, #8]
 800974c:	2b00      	cmp	r3, #0
 800974e:	da05      	bge.n	800975c <_putc_r+0x3e>
 8009750:	69a2      	ldr	r2, [r4, #24]
 8009752:	4293      	cmp	r3, r2
 8009754:	db12      	blt.n	800977c <_putc_r+0x5e>
 8009756:	b2eb      	uxtb	r3, r5
 8009758:	2b0a      	cmp	r3, #10
 800975a:	d00f      	beq.n	800977c <_putc_r+0x5e>
 800975c:	6823      	ldr	r3, [r4, #0]
 800975e:	1c5a      	adds	r2, r3, #1
 8009760:	6022      	str	r2, [r4, #0]
 8009762:	701d      	strb	r5, [r3, #0]
 8009764:	b2ed      	uxtb	r5, r5
 8009766:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009768:	07db      	lsls	r3, r3, #31
 800976a:	d405      	bmi.n	8009778 <_putc_r+0x5a>
 800976c:	89a3      	ldrh	r3, [r4, #12]
 800976e:	059b      	lsls	r3, r3, #22
 8009770:	d402      	bmi.n	8009778 <_putc_r+0x5a>
 8009772:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009774:	f7ff fbaa 	bl	8008ecc <__retarget_lock_release_recursive>
 8009778:	0028      	movs	r0, r5
 800977a:	bd70      	pop	{r4, r5, r6, pc}
 800977c:	0029      	movs	r1, r5
 800977e:	0022      	movs	r2, r4
 8009780:	0030      	movs	r0, r6
 8009782:	f7ff fa6f 	bl	8008c64 <__swbuf_r>
 8009786:	0005      	movs	r5, r0
 8009788:	e7ed      	b.n	8009766 <_putc_r+0x48>
	...

0800978c <_fstat_r>:
 800978c:	2300      	movs	r3, #0
 800978e:	b570      	push	{r4, r5, r6, lr}
 8009790:	4d06      	ldr	r5, [pc, #24]	@ (80097ac <_fstat_r+0x20>)
 8009792:	0004      	movs	r4, r0
 8009794:	0008      	movs	r0, r1
 8009796:	0011      	movs	r1, r2
 8009798:	602b      	str	r3, [r5, #0]
 800979a:	f7fb ffd7 	bl	800574c <_fstat>
 800979e:	1c43      	adds	r3, r0, #1
 80097a0:	d103      	bne.n	80097aa <_fstat_r+0x1e>
 80097a2:	682b      	ldr	r3, [r5, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d000      	beq.n	80097aa <_fstat_r+0x1e>
 80097a8:	6023      	str	r3, [r4, #0]
 80097aa:	bd70      	pop	{r4, r5, r6, pc}
 80097ac:	200013e0 	.word	0x200013e0

080097b0 <_isatty_r>:
 80097b0:	2300      	movs	r3, #0
 80097b2:	b570      	push	{r4, r5, r6, lr}
 80097b4:	4d06      	ldr	r5, [pc, #24]	@ (80097d0 <_isatty_r+0x20>)
 80097b6:	0004      	movs	r4, r0
 80097b8:	0008      	movs	r0, r1
 80097ba:	602b      	str	r3, [r5, #0]
 80097bc:	f7fb ffd4 	bl	8005768 <_isatty>
 80097c0:	1c43      	adds	r3, r0, #1
 80097c2:	d103      	bne.n	80097cc <_isatty_r+0x1c>
 80097c4:	682b      	ldr	r3, [r5, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d000      	beq.n	80097cc <_isatty_r+0x1c>
 80097ca:	6023      	str	r3, [r4, #0]
 80097cc:	bd70      	pop	{r4, r5, r6, pc}
 80097ce:	46c0      	nop			@ (mov r8, r8)
 80097d0:	200013e0 	.word	0x200013e0

080097d4 <memchr>:
 80097d4:	b2c9      	uxtb	r1, r1
 80097d6:	1882      	adds	r2, r0, r2
 80097d8:	4290      	cmp	r0, r2
 80097da:	d101      	bne.n	80097e0 <memchr+0xc>
 80097dc:	2000      	movs	r0, #0
 80097de:	4770      	bx	lr
 80097e0:	7803      	ldrb	r3, [r0, #0]
 80097e2:	428b      	cmp	r3, r1
 80097e4:	d0fb      	beq.n	80097de <memchr+0xa>
 80097e6:	3001      	adds	r0, #1
 80097e8:	e7f6      	b.n	80097d8 <memchr+0x4>
	...

080097ec <log>:
 80097ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ee:	0004      	movs	r4, r0
 80097f0:	000d      	movs	r5, r1
 80097f2:	f000 f837 	bl	8009864 <__ieee754_log>
 80097f6:	0022      	movs	r2, r4
 80097f8:	0006      	movs	r6, r0
 80097fa:	000f      	movs	r7, r1
 80097fc:	002b      	movs	r3, r5
 80097fe:	0020      	movs	r0, r4
 8009800:	0029      	movs	r1, r5
 8009802:	f7f8 fc61 	bl	80020c8 <__aeabi_dcmpun>
 8009806:	2800      	cmp	r0, #0
 8009808:	d115      	bne.n	8009836 <log+0x4a>
 800980a:	2200      	movs	r2, #0
 800980c:	2300      	movs	r3, #0
 800980e:	0020      	movs	r0, r4
 8009810:	0029      	movs	r1, r5
 8009812:	f7f6 fd37 	bl	8000284 <__aeabi_dcmpgt>
 8009816:	2800      	cmp	r0, #0
 8009818:	d10d      	bne.n	8009836 <log+0x4a>
 800981a:	2200      	movs	r2, #0
 800981c:	2300      	movs	r3, #0
 800981e:	0020      	movs	r0, r4
 8009820:	0029      	movs	r1, r5
 8009822:	f7f6 fd15 	bl	8000250 <__aeabi_dcmpeq>
 8009826:	2800      	cmp	r0, #0
 8009828:	d008      	beq.n	800983c <log+0x50>
 800982a:	f7ff fb23 	bl	8008e74 <__errno>
 800982e:	2322      	movs	r3, #34	@ 0x22
 8009830:	2600      	movs	r6, #0
 8009832:	4f07      	ldr	r7, [pc, #28]	@ (8009850 <log+0x64>)
 8009834:	6003      	str	r3, [r0, #0]
 8009836:	0030      	movs	r0, r6
 8009838:	0039      	movs	r1, r7
 800983a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800983c:	f7ff fb1a 	bl	8008e74 <__errno>
 8009840:	2321      	movs	r3, #33	@ 0x21
 8009842:	6003      	str	r3, [r0, #0]
 8009844:	4803      	ldr	r0, [pc, #12]	@ (8009854 <log+0x68>)
 8009846:	f000 f807 	bl	8009858 <nan>
 800984a:	0006      	movs	r6, r0
 800984c:	000f      	movs	r7, r1
 800984e:	e7f2      	b.n	8009836 <log+0x4a>
 8009850:	fff00000 	.word	0xfff00000
 8009854:	08009f95 	.word	0x08009f95

08009858 <nan>:
 8009858:	2000      	movs	r0, #0
 800985a:	4901      	ldr	r1, [pc, #4]	@ (8009860 <nan+0x8>)
 800985c:	4770      	bx	lr
 800985e:	46c0      	nop			@ (mov r8, r8)
 8009860:	7ff80000 	.word	0x7ff80000

08009864 <__ieee754_log>:
 8009864:	2380      	movs	r3, #128	@ 0x80
 8009866:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009868:	035b      	lsls	r3, r3, #13
 800986a:	000e      	movs	r6, r1
 800986c:	b08d      	sub	sp, #52	@ 0x34
 800986e:	4299      	cmp	r1, r3
 8009870:	da23      	bge.n	80098ba <__ieee754_log+0x56>
 8009872:	004b      	lsls	r3, r1, #1
 8009874:	085b      	lsrs	r3, r3, #1
 8009876:	4303      	orrs	r3, r0
 8009878:	d107      	bne.n	800988a <__ieee754_log+0x26>
 800987a:	2200      	movs	r2, #0
 800987c:	2300      	movs	r3, #0
 800987e:	2000      	movs	r0, #0
 8009880:	49b4      	ldr	r1, [pc, #720]	@ (8009b54 <__ieee754_log+0x2f0>)
 8009882:	f7f7 f8f7 	bl	8000a74 <__aeabi_ddiv>
 8009886:	b00d      	add	sp, #52	@ 0x34
 8009888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800988a:	2900      	cmp	r1, #0
 800988c:	da06      	bge.n	800989c <__ieee754_log+0x38>
 800988e:	0002      	movs	r2, r0
 8009890:	000b      	movs	r3, r1
 8009892:	f7f8 f80f 	bl	80018b4 <__aeabi_dsub>
 8009896:	2200      	movs	r2, #0
 8009898:	2300      	movs	r3, #0
 800989a:	e7f2      	b.n	8009882 <__ieee754_log+0x1e>
 800989c:	4bae      	ldr	r3, [pc, #696]	@ (8009b58 <__ieee754_log+0x2f4>)
 800989e:	2200      	movs	r2, #0
 80098a0:	f7f7 fd22 	bl	80012e8 <__aeabi_dmul>
 80098a4:	2336      	movs	r3, #54	@ 0x36
 80098a6:	000e      	movs	r6, r1
 80098a8:	425b      	negs	r3, r3
 80098aa:	4aac      	ldr	r2, [pc, #688]	@ (8009b5c <__ieee754_log+0x2f8>)
 80098ac:	4296      	cmp	r6, r2
 80098ae:	dd06      	ble.n	80098be <__ieee754_log+0x5a>
 80098b0:	0002      	movs	r2, r0
 80098b2:	000b      	movs	r3, r1
 80098b4:	f7f6 fd18 	bl	80002e8 <__aeabi_dadd>
 80098b8:	e7e5      	b.n	8009886 <__ieee754_log+0x22>
 80098ba:	2300      	movs	r3, #0
 80098bc:	e7f5      	b.n	80098aa <__ieee754_log+0x46>
 80098be:	4ca8      	ldr	r4, [pc, #672]	@ (8009b60 <__ieee754_log+0x2fc>)
 80098c0:	1532      	asrs	r2, r6, #20
 80098c2:	1912      	adds	r2, r2, r4
 80098c4:	0336      	lsls	r6, r6, #12
 80098c6:	4ca7      	ldr	r4, [pc, #668]	@ (8009b64 <__ieee754_log+0x300>)
 80098c8:	18d2      	adds	r2, r2, r3
 80098ca:	0b33      	lsrs	r3, r6, #12
 80098cc:	9302      	str	r3, [sp, #8]
 80098ce:	191b      	adds	r3, r3, r4
 80098d0:	2480      	movs	r4, #128	@ 0x80
 80098d2:	0364      	lsls	r4, r4, #13
 80098d4:	4023      	ands	r3, r4
 80098d6:	4ca4      	ldr	r4, [pc, #656]	@ (8009b68 <__ieee754_log+0x304>)
 80098d8:	9d02      	ldr	r5, [sp, #8]
 80098da:	405c      	eors	r4, r3
 80098dc:	151b      	asrs	r3, r3, #20
 80098de:	189b      	adds	r3, r3, r2
 80098e0:	4325      	orrs	r5, r4
 80098e2:	2200      	movs	r2, #0
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	0029      	movs	r1, r5
 80098e8:	4b9f      	ldr	r3, [pc, #636]	@ (8009b68 <__ieee754_log+0x304>)
 80098ea:	f7f7 ffe3 	bl	80018b4 <__aeabi_dsub>
 80098ee:	9b02      	ldr	r3, [sp, #8]
 80098f0:	0006      	movs	r6, r0
 80098f2:	3302      	adds	r3, #2
 80098f4:	031b      	lsls	r3, r3, #12
 80098f6:	000f      	movs	r7, r1
 80098f8:	2200      	movs	r2, #0
 80098fa:	0b1b      	lsrs	r3, r3, #12
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	dc64      	bgt.n	80099ca <__ieee754_log+0x166>
 8009900:	2300      	movs	r3, #0
 8009902:	f7f6 fca5 	bl	8000250 <__aeabi_dcmpeq>
 8009906:	2800      	cmp	r0, #0
 8009908:	d019      	beq.n	800993e <__ieee754_log+0xda>
 800990a:	9b00      	ldr	r3, [sp, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d100      	bne.n	8009912 <__ieee754_log+0xae>
 8009910:	e11c      	b.n	8009b4c <__ieee754_log+0x2e8>
 8009912:	0018      	movs	r0, r3
 8009914:	f7f8 fc36 	bl	8002184 <__aeabi_i2d>
 8009918:	4a94      	ldr	r2, [pc, #592]	@ (8009b6c <__ieee754_log+0x308>)
 800991a:	4b95      	ldr	r3, [pc, #596]	@ (8009b70 <__ieee754_log+0x30c>)
 800991c:	0004      	movs	r4, r0
 800991e:	000d      	movs	r5, r1
 8009920:	f7f7 fce2 	bl	80012e8 <__aeabi_dmul>
 8009924:	4a93      	ldr	r2, [pc, #588]	@ (8009b74 <__ieee754_log+0x310>)
 8009926:	0006      	movs	r6, r0
 8009928:	000f      	movs	r7, r1
 800992a:	4b93      	ldr	r3, [pc, #588]	@ (8009b78 <__ieee754_log+0x314>)
 800992c:	0020      	movs	r0, r4
 800992e:	0029      	movs	r1, r5
 8009930:	f7f7 fcda 	bl	80012e8 <__aeabi_dmul>
 8009934:	0002      	movs	r2, r0
 8009936:	000b      	movs	r3, r1
 8009938:	0030      	movs	r0, r6
 800993a:	0039      	movs	r1, r7
 800993c:	e7ba      	b.n	80098b4 <__ieee754_log+0x50>
 800993e:	4a8f      	ldr	r2, [pc, #572]	@ (8009b7c <__ieee754_log+0x318>)
 8009940:	4b8f      	ldr	r3, [pc, #572]	@ (8009b80 <__ieee754_log+0x31c>)
 8009942:	0030      	movs	r0, r6
 8009944:	0039      	movs	r1, r7
 8009946:	f7f7 fccf 	bl	80012e8 <__aeabi_dmul>
 800994a:	0002      	movs	r2, r0
 800994c:	000b      	movs	r3, r1
 800994e:	2000      	movs	r0, #0
 8009950:	498c      	ldr	r1, [pc, #560]	@ (8009b84 <__ieee754_log+0x320>)
 8009952:	f7f7 ffaf 	bl	80018b4 <__aeabi_dsub>
 8009956:	0032      	movs	r2, r6
 8009958:	0004      	movs	r4, r0
 800995a:	000d      	movs	r5, r1
 800995c:	003b      	movs	r3, r7
 800995e:	0030      	movs	r0, r6
 8009960:	0039      	movs	r1, r7
 8009962:	f7f7 fcc1 	bl	80012e8 <__aeabi_dmul>
 8009966:	000b      	movs	r3, r1
 8009968:	0002      	movs	r2, r0
 800996a:	0029      	movs	r1, r5
 800996c:	0020      	movs	r0, r4
 800996e:	f7f7 fcbb 	bl	80012e8 <__aeabi_dmul>
 8009972:	9b00      	ldr	r3, [sp, #0]
 8009974:	9002      	str	r0, [sp, #8]
 8009976:	9103      	str	r1, [sp, #12]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d106      	bne.n	800998a <__ieee754_log+0x126>
 800997c:	0002      	movs	r2, r0
 800997e:	000b      	movs	r3, r1
 8009980:	0030      	movs	r0, r6
 8009982:	0039      	movs	r1, r7
 8009984:	f7f7 ff96 	bl	80018b4 <__aeabi_dsub>
 8009988:	e77d      	b.n	8009886 <__ieee754_log+0x22>
 800998a:	9800      	ldr	r0, [sp, #0]
 800998c:	f7f8 fbfa 	bl	8002184 <__aeabi_i2d>
 8009990:	4a76      	ldr	r2, [pc, #472]	@ (8009b6c <__ieee754_log+0x308>)
 8009992:	4b77      	ldr	r3, [pc, #476]	@ (8009b70 <__ieee754_log+0x30c>)
 8009994:	0004      	movs	r4, r0
 8009996:	000d      	movs	r5, r1
 8009998:	f7f7 fca6 	bl	80012e8 <__aeabi_dmul>
 800999c:	4a75      	ldr	r2, [pc, #468]	@ (8009b74 <__ieee754_log+0x310>)
 800999e:	9000      	str	r0, [sp, #0]
 80099a0:	9101      	str	r1, [sp, #4]
 80099a2:	4b75      	ldr	r3, [pc, #468]	@ (8009b78 <__ieee754_log+0x314>)
 80099a4:	0020      	movs	r0, r4
 80099a6:	0029      	movs	r1, r5
 80099a8:	f7f7 fc9e 	bl	80012e8 <__aeabi_dmul>
 80099ac:	0002      	movs	r2, r0
 80099ae:	000b      	movs	r3, r1
 80099b0:	9802      	ldr	r0, [sp, #8]
 80099b2:	9903      	ldr	r1, [sp, #12]
 80099b4:	f7f7 ff7e 	bl	80018b4 <__aeabi_dsub>
 80099b8:	0032      	movs	r2, r6
 80099ba:	003b      	movs	r3, r7
 80099bc:	f7f7 ff7a 	bl	80018b4 <__aeabi_dsub>
 80099c0:	0002      	movs	r2, r0
 80099c2:	000b      	movs	r3, r1
 80099c4:	9800      	ldr	r0, [sp, #0]
 80099c6:	9901      	ldr	r1, [sp, #4]
 80099c8:	e7dc      	b.n	8009984 <__ieee754_log+0x120>
 80099ca:	2380      	movs	r3, #128	@ 0x80
 80099cc:	05db      	lsls	r3, r3, #23
 80099ce:	f7f6 fc8b 	bl	80002e8 <__aeabi_dadd>
 80099d2:	0002      	movs	r2, r0
 80099d4:	000b      	movs	r3, r1
 80099d6:	0030      	movs	r0, r6
 80099d8:	0039      	movs	r1, r7
 80099da:	f7f7 f84b 	bl	8000a74 <__aeabi_ddiv>
 80099de:	9004      	str	r0, [sp, #16]
 80099e0:	9105      	str	r1, [sp, #20]
 80099e2:	9800      	ldr	r0, [sp, #0]
 80099e4:	f7f8 fbce 	bl	8002184 <__aeabi_i2d>
 80099e8:	9a04      	ldr	r2, [sp, #16]
 80099ea:	9b05      	ldr	r3, [sp, #20]
 80099ec:	9006      	str	r0, [sp, #24]
 80099ee:	9107      	str	r1, [sp, #28]
 80099f0:	0010      	movs	r0, r2
 80099f2:	0019      	movs	r1, r3
 80099f4:	f7f7 fc78 	bl	80012e8 <__aeabi_dmul>
 80099f8:	4a63      	ldr	r2, [pc, #396]	@ (8009b88 <__ieee754_log+0x324>)
 80099fa:	9b02      	ldr	r3, [sp, #8]
 80099fc:	4694      	mov	ip, r2
 80099fe:	4463      	add	r3, ip
 8009a00:	0002      	movs	r2, r0
 8009a02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a04:	000b      	movs	r3, r1
 8009a06:	9008      	str	r0, [sp, #32]
 8009a08:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a0a:	f7f7 fc6d 	bl	80012e8 <__aeabi_dmul>
 8009a0e:	0004      	movs	r4, r0
 8009a10:	000d      	movs	r5, r1
 8009a12:	4a5e      	ldr	r2, [pc, #376]	@ (8009b8c <__ieee754_log+0x328>)
 8009a14:	4b5e      	ldr	r3, [pc, #376]	@ (8009b90 <__ieee754_log+0x32c>)
 8009a16:	f7f7 fc67 	bl	80012e8 <__aeabi_dmul>
 8009a1a:	4a5e      	ldr	r2, [pc, #376]	@ (8009b94 <__ieee754_log+0x330>)
 8009a1c:	4b5e      	ldr	r3, [pc, #376]	@ (8009b98 <__ieee754_log+0x334>)
 8009a1e:	f7f6 fc63 	bl	80002e8 <__aeabi_dadd>
 8009a22:	0022      	movs	r2, r4
 8009a24:	002b      	movs	r3, r5
 8009a26:	f7f7 fc5f 	bl	80012e8 <__aeabi_dmul>
 8009a2a:	4a5c      	ldr	r2, [pc, #368]	@ (8009b9c <__ieee754_log+0x338>)
 8009a2c:	4b5c      	ldr	r3, [pc, #368]	@ (8009ba0 <__ieee754_log+0x33c>)
 8009a2e:	f7f6 fc5b 	bl	80002e8 <__aeabi_dadd>
 8009a32:	0022      	movs	r2, r4
 8009a34:	002b      	movs	r3, r5
 8009a36:	f7f7 fc57 	bl	80012e8 <__aeabi_dmul>
 8009a3a:	4a5a      	ldr	r2, [pc, #360]	@ (8009ba4 <__ieee754_log+0x340>)
 8009a3c:	4b5a      	ldr	r3, [pc, #360]	@ (8009ba8 <__ieee754_log+0x344>)
 8009a3e:	f7f6 fc53 	bl	80002e8 <__aeabi_dadd>
 8009a42:	9a08      	ldr	r2, [sp, #32]
 8009a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a46:	f7f7 fc4f 	bl	80012e8 <__aeabi_dmul>
 8009a4a:	4a58      	ldr	r2, [pc, #352]	@ (8009bac <__ieee754_log+0x348>)
 8009a4c:	9008      	str	r0, [sp, #32]
 8009a4e:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a50:	4b57      	ldr	r3, [pc, #348]	@ (8009bb0 <__ieee754_log+0x34c>)
 8009a52:	0020      	movs	r0, r4
 8009a54:	0029      	movs	r1, r5
 8009a56:	f7f7 fc47 	bl	80012e8 <__aeabi_dmul>
 8009a5a:	4a56      	ldr	r2, [pc, #344]	@ (8009bb4 <__ieee754_log+0x350>)
 8009a5c:	4b56      	ldr	r3, [pc, #344]	@ (8009bb8 <__ieee754_log+0x354>)
 8009a5e:	f7f6 fc43 	bl	80002e8 <__aeabi_dadd>
 8009a62:	0022      	movs	r2, r4
 8009a64:	002b      	movs	r3, r5
 8009a66:	f7f7 fc3f 	bl	80012e8 <__aeabi_dmul>
 8009a6a:	4a54      	ldr	r2, [pc, #336]	@ (8009bbc <__ieee754_log+0x358>)
 8009a6c:	4b54      	ldr	r3, [pc, #336]	@ (8009bc0 <__ieee754_log+0x35c>)
 8009a6e:	f7f6 fc3b 	bl	80002e8 <__aeabi_dadd>
 8009a72:	0022      	movs	r2, r4
 8009a74:	002b      	movs	r3, r5
 8009a76:	f7f7 fc37 	bl	80012e8 <__aeabi_dmul>
 8009a7a:	0002      	movs	r2, r0
 8009a7c:	000b      	movs	r3, r1
 8009a7e:	9808      	ldr	r0, [sp, #32]
 8009a80:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a82:	f7f6 fc31 	bl	80002e8 <__aeabi_dadd>
 8009a86:	9a02      	ldr	r2, [sp, #8]
 8009a88:	4b4e      	ldr	r3, [pc, #312]	@ (8009bc4 <__ieee754_log+0x360>)
 8009a8a:	0004      	movs	r4, r0
 8009a8c:	1a9b      	subs	r3, r3, r2
 8009a8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009a90:	000d      	movs	r5, r1
 8009a92:	4313      	orrs	r3, r2
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	dd34      	ble.n	8009b02 <__ieee754_log+0x29e>
 8009a98:	2200      	movs	r2, #0
 8009a9a:	4b3a      	ldr	r3, [pc, #232]	@ (8009b84 <__ieee754_log+0x320>)
 8009a9c:	0030      	movs	r0, r6
 8009a9e:	0039      	movs	r1, r7
 8009aa0:	f7f7 fc22 	bl	80012e8 <__aeabi_dmul>
 8009aa4:	0032      	movs	r2, r6
 8009aa6:	003b      	movs	r3, r7
 8009aa8:	f7f7 fc1e 	bl	80012e8 <__aeabi_dmul>
 8009aac:	0002      	movs	r2, r0
 8009aae:	000b      	movs	r3, r1
 8009ab0:	9002      	str	r0, [sp, #8]
 8009ab2:	9103      	str	r1, [sp, #12]
 8009ab4:	0020      	movs	r0, r4
 8009ab6:	0029      	movs	r1, r5
 8009ab8:	f7f6 fc16 	bl	80002e8 <__aeabi_dadd>
 8009abc:	9a04      	ldr	r2, [sp, #16]
 8009abe:	9b05      	ldr	r3, [sp, #20]
 8009ac0:	f7f7 fc12 	bl	80012e8 <__aeabi_dmul>
 8009ac4:	9b00      	ldr	r3, [sp, #0]
 8009ac6:	0004      	movs	r4, r0
 8009ac8:	000d      	movs	r5, r1
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d106      	bne.n	8009adc <__ieee754_log+0x278>
 8009ace:	0002      	movs	r2, r0
 8009ad0:	000b      	movs	r3, r1
 8009ad2:	9802      	ldr	r0, [sp, #8]
 8009ad4:	9903      	ldr	r1, [sp, #12]
 8009ad6:	f7f7 feed 	bl	80018b4 <__aeabi_dsub>
 8009ada:	e74f      	b.n	800997c <__ieee754_log+0x118>
 8009adc:	4a23      	ldr	r2, [pc, #140]	@ (8009b6c <__ieee754_log+0x308>)
 8009ade:	4b24      	ldr	r3, [pc, #144]	@ (8009b70 <__ieee754_log+0x30c>)
 8009ae0:	9806      	ldr	r0, [sp, #24]
 8009ae2:	9907      	ldr	r1, [sp, #28]
 8009ae4:	f7f7 fc00 	bl	80012e8 <__aeabi_dmul>
 8009ae8:	4a22      	ldr	r2, [pc, #136]	@ (8009b74 <__ieee754_log+0x310>)
 8009aea:	9000      	str	r0, [sp, #0]
 8009aec:	9101      	str	r1, [sp, #4]
 8009aee:	9806      	ldr	r0, [sp, #24]
 8009af0:	9907      	ldr	r1, [sp, #28]
 8009af2:	4b21      	ldr	r3, [pc, #132]	@ (8009b78 <__ieee754_log+0x314>)
 8009af4:	f7f7 fbf8 	bl	80012e8 <__aeabi_dmul>
 8009af8:	0022      	movs	r2, r4
 8009afa:	002b      	movs	r3, r5
 8009afc:	f7f6 fbf4 	bl	80002e8 <__aeabi_dadd>
 8009b00:	e754      	b.n	80099ac <__ieee754_log+0x148>
 8009b02:	0002      	movs	r2, r0
 8009b04:	000b      	movs	r3, r1
 8009b06:	0030      	movs	r0, r6
 8009b08:	0039      	movs	r1, r7
 8009b0a:	f7f7 fed3 	bl	80018b4 <__aeabi_dsub>
 8009b0e:	9a04      	ldr	r2, [sp, #16]
 8009b10:	9b05      	ldr	r3, [sp, #20]
 8009b12:	f7f7 fbe9 	bl	80012e8 <__aeabi_dmul>
 8009b16:	9b00      	ldr	r3, [sp, #0]
 8009b18:	0004      	movs	r4, r0
 8009b1a:	000d      	movs	r5, r1
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d102      	bne.n	8009b26 <__ieee754_log+0x2c2>
 8009b20:	0002      	movs	r2, r0
 8009b22:	000b      	movs	r3, r1
 8009b24:	e72c      	b.n	8009980 <__ieee754_log+0x11c>
 8009b26:	4a11      	ldr	r2, [pc, #68]	@ (8009b6c <__ieee754_log+0x308>)
 8009b28:	4b11      	ldr	r3, [pc, #68]	@ (8009b70 <__ieee754_log+0x30c>)
 8009b2a:	9806      	ldr	r0, [sp, #24]
 8009b2c:	9907      	ldr	r1, [sp, #28]
 8009b2e:	f7f7 fbdb 	bl	80012e8 <__aeabi_dmul>
 8009b32:	4a10      	ldr	r2, [pc, #64]	@ (8009b74 <__ieee754_log+0x310>)
 8009b34:	9000      	str	r0, [sp, #0]
 8009b36:	9101      	str	r1, [sp, #4]
 8009b38:	9806      	ldr	r0, [sp, #24]
 8009b3a:	9907      	ldr	r1, [sp, #28]
 8009b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8009b78 <__ieee754_log+0x314>)
 8009b3e:	f7f7 fbd3 	bl	80012e8 <__aeabi_dmul>
 8009b42:	0002      	movs	r2, r0
 8009b44:	000b      	movs	r3, r1
 8009b46:	0020      	movs	r0, r4
 8009b48:	0029      	movs	r1, r5
 8009b4a:	e733      	b.n	80099b4 <__ieee754_log+0x150>
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	2100      	movs	r1, #0
 8009b50:	e699      	b.n	8009886 <__ieee754_log+0x22>
 8009b52:	46c0      	nop			@ (mov r8, r8)
 8009b54:	c3500000 	.word	0xc3500000
 8009b58:	43500000 	.word	0x43500000
 8009b5c:	7fefffff 	.word	0x7fefffff
 8009b60:	fffffc01 	.word	0xfffffc01
 8009b64:	00095f64 	.word	0x00095f64
 8009b68:	3ff00000 	.word	0x3ff00000
 8009b6c:	fee00000 	.word	0xfee00000
 8009b70:	3fe62e42 	.word	0x3fe62e42
 8009b74:	35793c76 	.word	0x35793c76
 8009b78:	3dea39ef 	.word	0x3dea39ef
 8009b7c:	55555555 	.word	0x55555555
 8009b80:	3fd55555 	.word	0x3fd55555
 8009b84:	3fe00000 	.word	0x3fe00000
 8009b88:	fff9eb86 	.word	0xfff9eb86
 8009b8c:	df3e5244 	.word	0xdf3e5244
 8009b90:	3fc2f112 	.word	0x3fc2f112
 8009b94:	96cb03de 	.word	0x96cb03de
 8009b98:	3fc74664 	.word	0x3fc74664
 8009b9c:	94229359 	.word	0x94229359
 8009ba0:	3fd24924 	.word	0x3fd24924
 8009ba4:	55555593 	.word	0x55555593
 8009ba8:	3fe55555 	.word	0x3fe55555
 8009bac:	d078c69f 	.word	0xd078c69f
 8009bb0:	3fc39a09 	.word	0x3fc39a09
 8009bb4:	1d8e78af 	.word	0x1d8e78af
 8009bb8:	3fcc71c5 	.word	0x3fcc71c5
 8009bbc:	9997fa04 	.word	0x9997fa04
 8009bc0:	3fd99999 	.word	0x3fd99999
 8009bc4:	0006b851 	.word	0x0006b851

08009bc8 <_init>:
 8009bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bca:	46c0      	nop			@ (mov r8, r8)
 8009bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bce:	bc08      	pop	{r3}
 8009bd0:	469e      	mov	lr, r3
 8009bd2:	4770      	bx	lr

08009bd4 <_fini>:
 8009bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd6:	46c0      	nop			@ (mov r8, r8)
 8009bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bda:	bc08      	pop	{r3}
 8009bdc:	469e      	mov	lr, r3
 8009bde:	4770      	bx	lr
