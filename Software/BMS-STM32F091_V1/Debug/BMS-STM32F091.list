
BMS-STM32F091.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076a8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08007764  08007764  00008764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b08  08007b08  0000907c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007b08  08007b08  0000907c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007b08  08007b08  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b08  08007b08  00008b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b0c  08007b0c  00008b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08007b10  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000136c  2000007c  08007b8c  0000907c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013e8  08007b8c  000093e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155fd  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b00  00000000  00000000  0001e6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  000211a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001089  00000000  00000000  000226b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df18  00000000  00000000  00023741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017502  00000000  00000000  00041659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3157  00000000  00000000  00058b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010bcb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005684  00000000  00000000  0010bcf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0011137c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000007c 	.word	0x2000007c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800774c 	.word	0x0800774c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000080 	.word	0x20000080
 8000100:	0800774c 	.word	0x0800774c

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_dmul>:
 8000230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000232:	4657      	mov	r7, sl
 8000234:	464e      	mov	r6, r9
 8000236:	46de      	mov	lr, fp
 8000238:	4645      	mov	r5, r8
 800023a:	b5e0      	push	{r5, r6, r7, lr}
 800023c:	001f      	movs	r7, r3
 800023e:	030b      	lsls	r3, r1, #12
 8000240:	0b1b      	lsrs	r3, r3, #12
 8000242:	0016      	movs	r6, r2
 8000244:	469a      	mov	sl, r3
 8000246:	0fca      	lsrs	r2, r1, #31
 8000248:	004b      	lsls	r3, r1, #1
 800024a:	0004      	movs	r4, r0
 800024c:	4691      	mov	r9, r2
 800024e:	b085      	sub	sp, #20
 8000250:	0d5b      	lsrs	r3, r3, #21
 8000252:	d100      	bne.n	8000256 <__aeabi_dmul+0x26>
 8000254:	e1cf      	b.n	80005f6 <__aeabi_dmul+0x3c6>
 8000256:	4acd      	ldr	r2, [pc, #820]	@ (800058c <__aeabi_dmul+0x35c>)
 8000258:	4293      	cmp	r3, r2
 800025a:	d055      	beq.n	8000308 <__aeabi_dmul+0xd8>
 800025c:	4651      	mov	r1, sl
 800025e:	0f42      	lsrs	r2, r0, #29
 8000260:	00c9      	lsls	r1, r1, #3
 8000262:	430a      	orrs	r2, r1
 8000264:	2180      	movs	r1, #128	@ 0x80
 8000266:	0409      	lsls	r1, r1, #16
 8000268:	4311      	orrs	r1, r2
 800026a:	00c2      	lsls	r2, r0, #3
 800026c:	4690      	mov	r8, r2
 800026e:	4ac8      	ldr	r2, [pc, #800]	@ (8000590 <__aeabi_dmul+0x360>)
 8000270:	468a      	mov	sl, r1
 8000272:	4693      	mov	fp, r2
 8000274:	449b      	add	fp, r3
 8000276:	2300      	movs	r3, #0
 8000278:	2500      	movs	r5, #0
 800027a:	9302      	str	r3, [sp, #8]
 800027c:	033c      	lsls	r4, r7, #12
 800027e:	007b      	lsls	r3, r7, #1
 8000280:	0ffa      	lsrs	r2, r7, #31
 8000282:	9601      	str	r6, [sp, #4]
 8000284:	0b24      	lsrs	r4, r4, #12
 8000286:	0d5b      	lsrs	r3, r3, #21
 8000288:	9200      	str	r2, [sp, #0]
 800028a:	d100      	bne.n	800028e <__aeabi_dmul+0x5e>
 800028c:	e188      	b.n	80005a0 <__aeabi_dmul+0x370>
 800028e:	4abf      	ldr	r2, [pc, #764]	@ (800058c <__aeabi_dmul+0x35c>)
 8000290:	4293      	cmp	r3, r2
 8000292:	d100      	bne.n	8000296 <__aeabi_dmul+0x66>
 8000294:	e092      	b.n	80003bc <__aeabi_dmul+0x18c>
 8000296:	4abe      	ldr	r2, [pc, #760]	@ (8000590 <__aeabi_dmul+0x360>)
 8000298:	4694      	mov	ip, r2
 800029a:	4463      	add	r3, ip
 800029c:	449b      	add	fp, r3
 800029e:	2d0a      	cmp	r5, #10
 80002a0:	dc42      	bgt.n	8000328 <__aeabi_dmul+0xf8>
 80002a2:	00e4      	lsls	r4, r4, #3
 80002a4:	0f73      	lsrs	r3, r6, #29
 80002a6:	4323      	orrs	r3, r4
 80002a8:	2480      	movs	r4, #128	@ 0x80
 80002aa:	4649      	mov	r1, r9
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	431c      	orrs	r4, r3
 80002b0:	00f3      	lsls	r3, r6, #3
 80002b2:	9301      	str	r3, [sp, #4]
 80002b4:	9b00      	ldr	r3, [sp, #0]
 80002b6:	2000      	movs	r0, #0
 80002b8:	4059      	eors	r1, r3
 80002ba:	b2cb      	uxtb	r3, r1
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	2d02      	cmp	r5, #2
 80002c0:	dc00      	bgt.n	80002c4 <__aeabi_dmul+0x94>
 80002c2:	e094      	b.n	80003ee <__aeabi_dmul+0x1be>
 80002c4:	2301      	movs	r3, #1
 80002c6:	40ab      	lsls	r3, r5
 80002c8:	001d      	movs	r5, r3
 80002ca:	23a6      	movs	r3, #166	@ 0xa6
 80002cc:	002a      	movs	r2, r5
 80002ce:	00db      	lsls	r3, r3, #3
 80002d0:	401a      	ands	r2, r3
 80002d2:	421d      	tst	r5, r3
 80002d4:	d000      	beq.n	80002d8 <__aeabi_dmul+0xa8>
 80002d6:	e229      	b.n	800072c <__aeabi_dmul+0x4fc>
 80002d8:	2390      	movs	r3, #144	@ 0x90
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	421d      	tst	r5, r3
 80002de:	d100      	bne.n	80002e2 <__aeabi_dmul+0xb2>
 80002e0:	e24d      	b.n	800077e <__aeabi_dmul+0x54e>
 80002e2:	2300      	movs	r3, #0
 80002e4:	2480      	movs	r4, #128	@ 0x80
 80002e6:	4699      	mov	r9, r3
 80002e8:	0324      	lsls	r4, r4, #12
 80002ea:	4ba8      	ldr	r3, [pc, #672]	@ (800058c <__aeabi_dmul+0x35c>)
 80002ec:	0010      	movs	r0, r2
 80002ee:	464a      	mov	r2, r9
 80002f0:	051b      	lsls	r3, r3, #20
 80002f2:	4323      	orrs	r3, r4
 80002f4:	07d2      	lsls	r2, r2, #31
 80002f6:	4313      	orrs	r3, r2
 80002f8:	0019      	movs	r1, r3
 80002fa:	b005      	add	sp, #20
 80002fc:	bcf0      	pop	{r4, r5, r6, r7}
 80002fe:	46bb      	mov	fp, r7
 8000300:	46b2      	mov	sl, r6
 8000302:	46a9      	mov	r9, r5
 8000304:	46a0      	mov	r8, r4
 8000306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000308:	4652      	mov	r2, sl
 800030a:	4302      	orrs	r2, r0
 800030c:	4690      	mov	r8, r2
 800030e:	d000      	beq.n	8000312 <__aeabi_dmul+0xe2>
 8000310:	e1ac      	b.n	800066c <__aeabi_dmul+0x43c>
 8000312:	469b      	mov	fp, r3
 8000314:	2302      	movs	r3, #2
 8000316:	4692      	mov	sl, r2
 8000318:	2508      	movs	r5, #8
 800031a:	9302      	str	r3, [sp, #8]
 800031c:	e7ae      	b.n	800027c <__aeabi_dmul+0x4c>
 800031e:	9b00      	ldr	r3, [sp, #0]
 8000320:	46a2      	mov	sl, r4
 8000322:	4699      	mov	r9, r3
 8000324:	9b01      	ldr	r3, [sp, #4]
 8000326:	4698      	mov	r8, r3
 8000328:	9b02      	ldr	r3, [sp, #8]
 800032a:	2b02      	cmp	r3, #2
 800032c:	d100      	bne.n	8000330 <__aeabi_dmul+0x100>
 800032e:	e1ca      	b.n	80006c6 <__aeabi_dmul+0x496>
 8000330:	2b03      	cmp	r3, #3
 8000332:	d100      	bne.n	8000336 <__aeabi_dmul+0x106>
 8000334:	e192      	b.n	800065c <__aeabi_dmul+0x42c>
 8000336:	2b01      	cmp	r3, #1
 8000338:	d110      	bne.n	800035c <__aeabi_dmul+0x12c>
 800033a:	2300      	movs	r3, #0
 800033c:	2400      	movs	r4, #0
 800033e:	2200      	movs	r2, #0
 8000340:	e7d4      	b.n	80002ec <__aeabi_dmul+0xbc>
 8000342:	2201      	movs	r2, #1
 8000344:	087b      	lsrs	r3, r7, #1
 8000346:	403a      	ands	r2, r7
 8000348:	4313      	orrs	r3, r2
 800034a:	4652      	mov	r2, sl
 800034c:	07d2      	lsls	r2, r2, #31
 800034e:	4313      	orrs	r3, r2
 8000350:	4698      	mov	r8, r3
 8000352:	4653      	mov	r3, sl
 8000354:	085b      	lsrs	r3, r3, #1
 8000356:	469a      	mov	sl, r3
 8000358:	9b03      	ldr	r3, [sp, #12]
 800035a:	4699      	mov	r9, r3
 800035c:	465b      	mov	r3, fp
 800035e:	1c58      	adds	r0, r3, #1
 8000360:	2380      	movs	r3, #128	@ 0x80
 8000362:	00db      	lsls	r3, r3, #3
 8000364:	445b      	add	r3, fp
 8000366:	2b00      	cmp	r3, #0
 8000368:	dc00      	bgt.n	800036c <__aeabi_dmul+0x13c>
 800036a:	e1b1      	b.n	80006d0 <__aeabi_dmul+0x4a0>
 800036c:	4642      	mov	r2, r8
 800036e:	0752      	lsls	r2, r2, #29
 8000370:	d00b      	beq.n	800038a <__aeabi_dmul+0x15a>
 8000372:	220f      	movs	r2, #15
 8000374:	4641      	mov	r1, r8
 8000376:	400a      	ands	r2, r1
 8000378:	2a04      	cmp	r2, #4
 800037a:	d006      	beq.n	800038a <__aeabi_dmul+0x15a>
 800037c:	4642      	mov	r2, r8
 800037e:	1d11      	adds	r1, r2, #4
 8000380:	4541      	cmp	r1, r8
 8000382:	4192      	sbcs	r2, r2
 8000384:	4688      	mov	r8, r1
 8000386:	4252      	negs	r2, r2
 8000388:	4492      	add	sl, r2
 800038a:	4652      	mov	r2, sl
 800038c:	01d2      	lsls	r2, r2, #7
 800038e:	d506      	bpl.n	800039e <__aeabi_dmul+0x16e>
 8000390:	4652      	mov	r2, sl
 8000392:	4b80      	ldr	r3, [pc, #512]	@ (8000594 <__aeabi_dmul+0x364>)
 8000394:	401a      	ands	r2, r3
 8000396:	2380      	movs	r3, #128	@ 0x80
 8000398:	4692      	mov	sl, r2
 800039a:	00db      	lsls	r3, r3, #3
 800039c:	18c3      	adds	r3, r0, r3
 800039e:	4a7e      	ldr	r2, [pc, #504]	@ (8000598 <__aeabi_dmul+0x368>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	dd00      	ble.n	80003a6 <__aeabi_dmul+0x176>
 80003a4:	e18f      	b.n	80006c6 <__aeabi_dmul+0x496>
 80003a6:	4642      	mov	r2, r8
 80003a8:	08d1      	lsrs	r1, r2, #3
 80003aa:	4652      	mov	r2, sl
 80003ac:	0752      	lsls	r2, r2, #29
 80003ae:	430a      	orrs	r2, r1
 80003b0:	4651      	mov	r1, sl
 80003b2:	055b      	lsls	r3, r3, #21
 80003b4:	024c      	lsls	r4, r1, #9
 80003b6:	0b24      	lsrs	r4, r4, #12
 80003b8:	0d5b      	lsrs	r3, r3, #21
 80003ba:	e797      	b.n	80002ec <__aeabi_dmul+0xbc>
 80003bc:	4b73      	ldr	r3, [pc, #460]	@ (800058c <__aeabi_dmul+0x35c>)
 80003be:	4326      	orrs	r6, r4
 80003c0:	469c      	mov	ip, r3
 80003c2:	44e3      	add	fp, ip
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d100      	bne.n	80003ca <__aeabi_dmul+0x19a>
 80003c8:	e16f      	b.n	80006aa <__aeabi_dmul+0x47a>
 80003ca:	2303      	movs	r3, #3
 80003cc:	4649      	mov	r1, r9
 80003ce:	431d      	orrs	r5, r3
 80003d0:	9b00      	ldr	r3, [sp, #0]
 80003d2:	4059      	eors	r1, r3
 80003d4:	b2cb      	uxtb	r3, r1
 80003d6:	9303      	str	r3, [sp, #12]
 80003d8:	2d0a      	cmp	r5, #10
 80003da:	dd00      	ble.n	80003de <__aeabi_dmul+0x1ae>
 80003dc:	e133      	b.n	8000646 <__aeabi_dmul+0x416>
 80003de:	2301      	movs	r3, #1
 80003e0:	40ab      	lsls	r3, r5
 80003e2:	001d      	movs	r5, r3
 80003e4:	2303      	movs	r3, #3
 80003e6:	9302      	str	r3, [sp, #8]
 80003e8:	2288      	movs	r2, #136	@ 0x88
 80003ea:	422a      	tst	r2, r5
 80003ec:	d197      	bne.n	800031e <__aeabi_dmul+0xee>
 80003ee:	4642      	mov	r2, r8
 80003f0:	4643      	mov	r3, r8
 80003f2:	0412      	lsls	r2, r2, #16
 80003f4:	0c12      	lsrs	r2, r2, #16
 80003f6:	0016      	movs	r6, r2
 80003f8:	9801      	ldr	r0, [sp, #4]
 80003fa:	0c1d      	lsrs	r5, r3, #16
 80003fc:	0c03      	lsrs	r3, r0, #16
 80003fe:	0400      	lsls	r0, r0, #16
 8000400:	0c00      	lsrs	r0, r0, #16
 8000402:	4346      	muls	r6, r0
 8000404:	46b4      	mov	ip, r6
 8000406:	001e      	movs	r6, r3
 8000408:	436e      	muls	r6, r5
 800040a:	9600      	str	r6, [sp, #0]
 800040c:	0016      	movs	r6, r2
 800040e:	0007      	movs	r7, r0
 8000410:	435e      	muls	r6, r3
 8000412:	4661      	mov	r1, ip
 8000414:	46b0      	mov	r8, r6
 8000416:	436f      	muls	r7, r5
 8000418:	0c0e      	lsrs	r6, r1, #16
 800041a:	44b8      	add	r8, r7
 800041c:	4446      	add	r6, r8
 800041e:	42b7      	cmp	r7, r6
 8000420:	d905      	bls.n	800042e <__aeabi_dmul+0x1fe>
 8000422:	2180      	movs	r1, #128	@ 0x80
 8000424:	0249      	lsls	r1, r1, #9
 8000426:	4688      	mov	r8, r1
 8000428:	9f00      	ldr	r7, [sp, #0]
 800042a:	4447      	add	r7, r8
 800042c:	9700      	str	r7, [sp, #0]
 800042e:	4661      	mov	r1, ip
 8000430:	0409      	lsls	r1, r1, #16
 8000432:	0c09      	lsrs	r1, r1, #16
 8000434:	0c37      	lsrs	r7, r6, #16
 8000436:	0436      	lsls	r6, r6, #16
 8000438:	468c      	mov	ip, r1
 800043a:	0031      	movs	r1, r6
 800043c:	4461      	add	r1, ip
 800043e:	9101      	str	r1, [sp, #4]
 8000440:	0011      	movs	r1, r2
 8000442:	0c26      	lsrs	r6, r4, #16
 8000444:	0424      	lsls	r4, r4, #16
 8000446:	0c24      	lsrs	r4, r4, #16
 8000448:	4361      	muls	r1, r4
 800044a:	468c      	mov	ip, r1
 800044c:	0021      	movs	r1, r4
 800044e:	4369      	muls	r1, r5
 8000450:	4689      	mov	r9, r1
 8000452:	4661      	mov	r1, ip
 8000454:	0c09      	lsrs	r1, r1, #16
 8000456:	4688      	mov	r8, r1
 8000458:	4372      	muls	r2, r6
 800045a:	444a      	add	r2, r9
 800045c:	4442      	add	r2, r8
 800045e:	4375      	muls	r5, r6
 8000460:	4591      	cmp	r9, r2
 8000462:	d903      	bls.n	800046c <__aeabi_dmul+0x23c>
 8000464:	2180      	movs	r1, #128	@ 0x80
 8000466:	0249      	lsls	r1, r1, #9
 8000468:	4688      	mov	r8, r1
 800046a:	4445      	add	r5, r8
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	4688      	mov	r8, r1
 8000470:	4661      	mov	r1, ip
 8000472:	0409      	lsls	r1, r1, #16
 8000474:	0c09      	lsrs	r1, r1, #16
 8000476:	468c      	mov	ip, r1
 8000478:	0412      	lsls	r2, r2, #16
 800047a:	4462      	add	r2, ip
 800047c:	18b9      	adds	r1, r7, r2
 800047e:	9102      	str	r1, [sp, #8]
 8000480:	4651      	mov	r1, sl
 8000482:	0c09      	lsrs	r1, r1, #16
 8000484:	468c      	mov	ip, r1
 8000486:	4651      	mov	r1, sl
 8000488:	040f      	lsls	r7, r1, #16
 800048a:	0c3f      	lsrs	r7, r7, #16
 800048c:	0039      	movs	r1, r7
 800048e:	4341      	muls	r1, r0
 8000490:	4445      	add	r5, r8
 8000492:	4688      	mov	r8, r1
 8000494:	4661      	mov	r1, ip
 8000496:	4341      	muls	r1, r0
 8000498:	468a      	mov	sl, r1
 800049a:	4641      	mov	r1, r8
 800049c:	4660      	mov	r0, ip
 800049e:	0c09      	lsrs	r1, r1, #16
 80004a0:	4689      	mov	r9, r1
 80004a2:	4358      	muls	r0, r3
 80004a4:	437b      	muls	r3, r7
 80004a6:	4453      	add	r3, sl
 80004a8:	444b      	add	r3, r9
 80004aa:	459a      	cmp	sl, r3
 80004ac:	d903      	bls.n	80004b6 <__aeabi_dmul+0x286>
 80004ae:	2180      	movs	r1, #128	@ 0x80
 80004b0:	0249      	lsls	r1, r1, #9
 80004b2:	4689      	mov	r9, r1
 80004b4:	4448      	add	r0, r9
 80004b6:	0c19      	lsrs	r1, r3, #16
 80004b8:	4689      	mov	r9, r1
 80004ba:	4641      	mov	r1, r8
 80004bc:	0409      	lsls	r1, r1, #16
 80004be:	0c09      	lsrs	r1, r1, #16
 80004c0:	4688      	mov	r8, r1
 80004c2:	0039      	movs	r1, r7
 80004c4:	4361      	muls	r1, r4
 80004c6:	041b      	lsls	r3, r3, #16
 80004c8:	4443      	add	r3, r8
 80004ca:	4688      	mov	r8, r1
 80004cc:	4661      	mov	r1, ip
 80004ce:	434c      	muls	r4, r1
 80004d0:	4371      	muls	r1, r6
 80004d2:	468c      	mov	ip, r1
 80004d4:	4641      	mov	r1, r8
 80004d6:	4377      	muls	r7, r6
 80004d8:	0c0e      	lsrs	r6, r1, #16
 80004da:	193f      	adds	r7, r7, r4
 80004dc:	19f6      	adds	r6, r6, r7
 80004de:	4448      	add	r0, r9
 80004e0:	42b4      	cmp	r4, r6
 80004e2:	d903      	bls.n	80004ec <__aeabi_dmul+0x2bc>
 80004e4:	2180      	movs	r1, #128	@ 0x80
 80004e6:	0249      	lsls	r1, r1, #9
 80004e8:	4689      	mov	r9, r1
 80004ea:	44cc      	add	ip, r9
 80004ec:	9902      	ldr	r1, [sp, #8]
 80004ee:	9f00      	ldr	r7, [sp, #0]
 80004f0:	4689      	mov	r9, r1
 80004f2:	0431      	lsls	r1, r6, #16
 80004f4:	444f      	add	r7, r9
 80004f6:	4689      	mov	r9, r1
 80004f8:	4641      	mov	r1, r8
 80004fa:	4297      	cmp	r7, r2
 80004fc:	4192      	sbcs	r2, r2
 80004fe:	040c      	lsls	r4, r1, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	444c      	add	r4, r9
 8000504:	18ff      	adds	r7, r7, r3
 8000506:	4252      	negs	r2, r2
 8000508:	1964      	adds	r4, r4, r5
 800050a:	18a1      	adds	r1, r4, r2
 800050c:	429f      	cmp	r7, r3
 800050e:	419b      	sbcs	r3, r3
 8000510:	4688      	mov	r8, r1
 8000512:	4682      	mov	sl, r0
 8000514:	425b      	negs	r3, r3
 8000516:	4699      	mov	r9, r3
 8000518:	4590      	cmp	r8, r2
 800051a:	4192      	sbcs	r2, r2
 800051c:	42ac      	cmp	r4, r5
 800051e:	41a4      	sbcs	r4, r4
 8000520:	44c2      	add	sl, r8
 8000522:	44d1      	add	r9, sl
 8000524:	4252      	negs	r2, r2
 8000526:	4264      	negs	r4, r4
 8000528:	4314      	orrs	r4, r2
 800052a:	4599      	cmp	r9, r3
 800052c:	419b      	sbcs	r3, r3
 800052e:	4582      	cmp	sl, r0
 8000530:	4192      	sbcs	r2, r2
 8000532:	425b      	negs	r3, r3
 8000534:	4252      	negs	r2, r2
 8000536:	4313      	orrs	r3, r2
 8000538:	464a      	mov	r2, r9
 800053a:	0c36      	lsrs	r6, r6, #16
 800053c:	19a4      	adds	r4, r4, r6
 800053e:	18e3      	adds	r3, r4, r3
 8000540:	4463      	add	r3, ip
 8000542:	025b      	lsls	r3, r3, #9
 8000544:	0dd2      	lsrs	r2, r2, #23
 8000546:	431a      	orrs	r2, r3
 8000548:	9901      	ldr	r1, [sp, #4]
 800054a:	4692      	mov	sl, r2
 800054c:	027a      	lsls	r2, r7, #9
 800054e:	430a      	orrs	r2, r1
 8000550:	1e50      	subs	r0, r2, #1
 8000552:	4182      	sbcs	r2, r0
 8000554:	0dff      	lsrs	r7, r7, #23
 8000556:	4317      	orrs	r7, r2
 8000558:	464a      	mov	r2, r9
 800055a:	0252      	lsls	r2, r2, #9
 800055c:	4317      	orrs	r7, r2
 800055e:	46b8      	mov	r8, r7
 8000560:	01db      	lsls	r3, r3, #7
 8000562:	d500      	bpl.n	8000566 <__aeabi_dmul+0x336>
 8000564:	e6ed      	b.n	8000342 <__aeabi_dmul+0x112>
 8000566:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <__aeabi_dmul+0x36c>)
 8000568:	9a03      	ldr	r2, [sp, #12]
 800056a:	445b      	add	r3, fp
 800056c:	4691      	mov	r9, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	dc00      	bgt.n	8000574 <__aeabi_dmul+0x344>
 8000572:	e0ac      	b.n	80006ce <__aeabi_dmul+0x49e>
 8000574:	003a      	movs	r2, r7
 8000576:	0752      	lsls	r2, r2, #29
 8000578:	d100      	bne.n	800057c <__aeabi_dmul+0x34c>
 800057a:	e710      	b.n	800039e <__aeabi_dmul+0x16e>
 800057c:	220f      	movs	r2, #15
 800057e:	4658      	mov	r0, fp
 8000580:	403a      	ands	r2, r7
 8000582:	2a04      	cmp	r2, #4
 8000584:	d000      	beq.n	8000588 <__aeabi_dmul+0x358>
 8000586:	e6f9      	b.n	800037c <__aeabi_dmul+0x14c>
 8000588:	e709      	b.n	800039e <__aeabi_dmul+0x16e>
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	000007ff 	.word	0x000007ff
 8000590:	fffffc01 	.word	0xfffffc01
 8000594:	feffffff 	.word	0xfeffffff
 8000598:	000007fe 	.word	0x000007fe
 800059c:	000003ff 	.word	0x000003ff
 80005a0:	0022      	movs	r2, r4
 80005a2:	4332      	orrs	r2, r6
 80005a4:	d06f      	beq.n	8000686 <__aeabi_dmul+0x456>
 80005a6:	2c00      	cmp	r4, #0
 80005a8:	d100      	bne.n	80005ac <__aeabi_dmul+0x37c>
 80005aa:	e0c2      	b.n	8000732 <__aeabi_dmul+0x502>
 80005ac:	0020      	movs	r0, r4
 80005ae:	f000 f953 	bl	8000858 <__clzsi2>
 80005b2:	0002      	movs	r2, r0
 80005b4:	0003      	movs	r3, r0
 80005b6:	3a0b      	subs	r2, #11
 80005b8:	201d      	movs	r0, #29
 80005ba:	1a82      	subs	r2, r0, r2
 80005bc:	0030      	movs	r0, r6
 80005be:	0019      	movs	r1, r3
 80005c0:	40d0      	lsrs	r0, r2
 80005c2:	3908      	subs	r1, #8
 80005c4:	408c      	lsls	r4, r1
 80005c6:	0002      	movs	r2, r0
 80005c8:	4322      	orrs	r2, r4
 80005ca:	0034      	movs	r4, r6
 80005cc:	408c      	lsls	r4, r1
 80005ce:	4659      	mov	r1, fp
 80005d0:	1acb      	subs	r3, r1, r3
 80005d2:	4986      	ldr	r1, [pc, #536]	@ (80007ec <__aeabi_dmul+0x5bc>)
 80005d4:	468b      	mov	fp, r1
 80005d6:	449b      	add	fp, r3
 80005d8:	2d0a      	cmp	r5, #10
 80005da:	dd00      	ble.n	80005de <__aeabi_dmul+0x3ae>
 80005dc:	e6a4      	b.n	8000328 <__aeabi_dmul+0xf8>
 80005de:	4649      	mov	r1, r9
 80005e0:	9b00      	ldr	r3, [sp, #0]
 80005e2:	9401      	str	r4, [sp, #4]
 80005e4:	4059      	eors	r1, r3
 80005e6:	b2cb      	uxtb	r3, r1
 80005e8:	0014      	movs	r4, r2
 80005ea:	2000      	movs	r0, #0
 80005ec:	9303      	str	r3, [sp, #12]
 80005ee:	2d02      	cmp	r5, #2
 80005f0:	dd00      	ble.n	80005f4 <__aeabi_dmul+0x3c4>
 80005f2:	e667      	b.n	80002c4 <__aeabi_dmul+0x94>
 80005f4:	e6fb      	b.n	80003ee <__aeabi_dmul+0x1be>
 80005f6:	4653      	mov	r3, sl
 80005f8:	4303      	orrs	r3, r0
 80005fa:	4698      	mov	r8, r3
 80005fc:	d03c      	beq.n	8000678 <__aeabi_dmul+0x448>
 80005fe:	4653      	mov	r3, sl
 8000600:	2b00      	cmp	r3, #0
 8000602:	d100      	bne.n	8000606 <__aeabi_dmul+0x3d6>
 8000604:	e0a3      	b.n	800074e <__aeabi_dmul+0x51e>
 8000606:	4650      	mov	r0, sl
 8000608:	f000 f926 	bl	8000858 <__clzsi2>
 800060c:	230b      	movs	r3, #11
 800060e:	425b      	negs	r3, r3
 8000610:	469c      	mov	ip, r3
 8000612:	0002      	movs	r2, r0
 8000614:	4484      	add	ip, r0
 8000616:	0011      	movs	r1, r2
 8000618:	4650      	mov	r0, sl
 800061a:	3908      	subs	r1, #8
 800061c:	4088      	lsls	r0, r1
 800061e:	231d      	movs	r3, #29
 8000620:	4680      	mov	r8, r0
 8000622:	4660      	mov	r0, ip
 8000624:	1a1b      	subs	r3, r3, r0
 8000626:	0020      	movs	r0, r4
 8000628:	40d8      	lsrs	r0, r3
 800062a:	0003      	movs	r3, r0
 800062c:	4640      	mov	r0, r8
 800062e:	4303      	orrs	r3, r0
 8000630:	469a      	mov	sl, r3
 8000632:	0023      	movs	r3, r4
 8000634:	408b      	lsls	r3, r1
 8000636:	4698      	mov	r8, r3
 8000638:	4b6c      	ldr	r3, [pc, #432]	@ (80007ec <__aeabi_dmul+0x5bc>)
 800063a:	2500      	movs	r5, #0
 800063c:	1a9b      	subs	r3, r3, r2
 800063e:	469b      	mov	fp, r3
 8000640:	2300      	movs	r3, #0
 8000642:	9302      	str	r3, [sp, #8]
 8000644:	e61a      	b.n	800027c <__aeabi_dmul+0x4c>
 8000646:	2d0f      	cmp	r5, #15
 8000648:	d000      	beq.n	800064c <__aeabi_dmul+0x41c>
 800064a:	e0c9      	b.n	80007e0 <__aeabi_dmul+0x5b0>
 800064c:	2380      	movs	r3, #128	@ 0x80
 800064e:	4652      	mov	r2, sl
 8000650:	031b      	lsls	r3, r3, #12
 8000652:	421a      	tst	r2, r3
 8000654:	d002      	beq.n	800065c <__aeabi_dmul+0x42c>
 8000656:	421c      	tst	r4, r3
 8000658:	d100      	bne.n	800065c <__aeabi_dmul+0x42c>
 800065a:	e092      	b.n	8000782 <__aeabi_dmul+0x552>
 800065c:	2480      	movs	r4, #128	@ 0x80
 800065e:	4653      	mov	r3, sl
 8000660:	0324      	lsls	r4, r4, #12
 8000662:	431c      	orrs	r4, r3
 8000664:	0324      	lsls	r4, r4, #12
 8000666:	4642      	mov	r2, r8
 8000668:	0b24      	lsrs	r4, r4, #12
 800066a:	e63e      	b.n	80002ea <__aeabi_dmul+0xba>
 800066c:	469b      	mov	fp, r3
 800066e:	2303      	movs	r3, #3
 8000670:	4680      	mov	r8, r0
 8000672:	250c      	movs	r5, #12
 8000674:	9302      	str	r3, [sp, #8]
 8000676:	e601      	b.n	800027c <__aeabi_dmul+0x4c>
 8000678:	2300      	movs	r3, #0
 800067a:	469a      	mov	sl, r3
 800067c:	469b      	mov	fp, r3
 800067e:	3301      	adds	r3, #1
 8000680:	2504      	movs	r5, #4
 8000682:	9302      	str	r3, [sp, #8]
 8000684:	e5fa      	b.n	800027c <__aeabi_dmul+0x4c>
 8000686:	2101      	movs	r1, #1
 8000688:	430d      	orrs	r5, r1
 800068a:	2d0a      	cmp	r5, #10
 800068c:	dd00      	ble.n	8000690 <__aeabi_dmul+0x460>
 800068e:	e64b      	b.n	8000328 <__aeabi_dmul+0xf8>
 8000690:	4649      	mov	r1, r9
 8000692:	9800      	ldr	r0, [sp, #0]
 8000694:	4041      	eors	r1, r0
 8000696:	b2c9      	uxtb	r1, r1
 8000698:	9103      	str	r1, [sp, #12]
 800069a:	2d02      	cmp	r5, #2
 800069c:	dc00      	bgt.n	80006a0 <__aeabi_dmul+0x470>
 800069e:	e096      	b.n	80007ce <__aeabi_dmul+0x59e>
 80006a0:	2300      	movs	r3, #0
 80006a2:	2400      	movs	r4, #0
 80006a4:	2001      	movs	r0, #1
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	e60c      	b.n	80002c4 <__aeabi_dmul+0x94>
 80006aa:	4649      	mov	r1, r9
 80006ac:	2302      	movs	r3, #2
 80006ae:	9a00      	ldr	r2, [sp, #0]
 80006b0:	432b      	orrs	r3, r5
 80006b2:	4051      	eors	r1, r2
 80006b4:	b2ca      	uxtb	r2, r1
 80006b6:	9203      	str	r2, [sp, #12]
 80006b8:	2b0a      	cmp	r3, #10
 80006ba:	dd00      	ble.n	80006be <__aeabi_dmul+0x48e>
 80006bc:	e634      	b.n	8000328 <__aeabi_dmul+0xf8>
 80006be:	2d00      	cmp	r5, #0
 80006c0:	d157      	bne.n	8000772 <__aeabi_dmul+0x542>
 80006c2:	9b03      	ldr	r3, [sp, #12]
 80006c4:	4699      	mov	r9, r3
 80006c6:	2400      	movs	r4, #0
 80006c8:	2200      	movs	r2, #0
 80006ca:	4b49      	ldr	r3, [pc, #292]	@ (80007f0 <__aeabi_dmul+0x5c0>)
 80006cc:	e60e      	b.n	80002ec <__aeabi_dmul+0xbc>
 80006ce:	4658      	mov	r0, fp
 80006d0:	2101      	movs	r1, #1
 80006d2:	1ac9      	subs	r1, r1, r3
 80006d4:	2938      	cmp	r1, #56	@ 0x38
 80006d6:	dd00      	ble.n	80006da <__aeabi_dmul+0x4aa>
 80006d8:	e62f      	b.n	800033a <__aeabi_dmul+0x10a>
 80006da:	291f      	cmp	r1, #31
 80006dc:	dd56      	ble.n	800078c <__aeabi_dmul+0x55c>
 80006de:	221f      	movs	r2, #31
 80006e0:	4654      	mov	r4, sl
 80006e2:	4252      	negs	r2, r2
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	40dc      	lsrs	r4, r3
 80006e8:	2920      	cmp	r1, #32
 80006ea:	d007      	beq.n	80006fc <__aeabi_dmul+0x4cc>
 80006ec:	4b41      	ldr	r3, [pc, #260]	@ (80007f4 <__aeabi_dmul+0x5c4>)
 80006ee:	4642      	mov	r2, r8
 80006f0:	469c      	mov	ip, r3
 80006f2:	4653      	mov	r3, sl
 80006f4:	4460      	add	r0, ip
 80006f6:	4083      	lsls	r3, r0
 80006f8:	431a      	orrs	r2, r3
 80006fa:	4690      	mov	r8, r2
 80006fc:	4642      	mov	r2, r8
 80006fe:	2107      	movs	r1, #7
 8000700:	1e53      	subs	r3, r2, #1
 8000702:	419a      	sbcs	r2, r3
 8000704:	000b      	movs	r3, r1
 8000706:	4322      	orrs	r2, r4
 8000708:	4013      	ands	r3, r2
 800070a:	2400      	movs	r4, #0
 800070c:	4211      	tst	r1, r2
 800070e:	d009      	beq.n	8000724 <__aeabi_dmul+0x4f4>
 8000710:	230f      	movs	r3, #15
 8000712:	4013      	ands	r3, r2
 8000714:	2b04      	cmp	r3, #4
 8000716:	d05d      	beq.n	80007d4 <__aeabi_dmul+0x5a4>
 8000718:	1d11      	adds	r1, r2, #4
 800071a:	4291      	cmp	r1, r2
 800071c:	419b      	sbcs	r3, r3
 800071e:	000a      	movs	r2, r1
 8000720:	425b      	negs	r3, r3
 8000722:	075b      	lsls	r3, r3, #29
 8000724:	08d2      	lsrs	r2, r2, #3
 8000726:	431a      	orrs	r2, r3
 8000728:	2300      	movs	r3, #0
 800072a:	e5df      	b.n	80002ec <__aeabi_dmul+0xbc>
 800072c:	9b03      	ldr	r3, [sp, #12]
 800072e:	4699      	mov	r9, r3
 8000730:	e5fa      	b.n	8000328 <__aeabi_dmul+0xf8>
 8000732:	9801      	ldr	r0, [sp, #4]
 8000734:	f000 f890 	bl	8000858 <__clzsi2>
 8000738:	0002      	movs	r2, r0
 800073a:	0003      	movs	r3, r0
 800073c:	3215      	adds	r2, #21
 800073e:	3320      	adds	r3, #32
 8000740:	2a1c      	cmp	r2, #28
 8000742:	dc00      	bgt.n	8000746 <__aeabi_dmul+0x516>
 8000744:	e738      	b.n	80005b8 <__aeabi_dmul+0x388>
 8000746:	9a01      	ldr	r2, [sp, #4]
 8000748:	3808      	subs	r0, #8
 800074a:	4082      	lsls	r2, r0
 800074c:	e73f      	b.n	80005ce <__aeabi_dmul+0x39e>
 800074e:	f000 f883 	bl	8000858 <__clzsi2>
 8000752:	2315      	movs	r3, #21
 8000754:	469c      	mov	ip, r3
 8000756:	4484      	add	ip, r0
 8000758:	0002      	movs	r2, r0
 800075a:	4663      	mov	r3, ip
 800075c:	3220      	adds	r2, #32
 800075e:	2b1c      	cmp	r3, #28
 8000760:	dc00      	bgt.n	8000764 <__aeabi_dmul+0x534>
 8000762:	e758      	b.n	8000616 <__aeabi_dmul+0x3e6>
 8000764:	2300      	movs	r3, #0
 8000766:	4698      	mov	r8, r3
 8000768:	0023      	movs	r3, r4
 800076a:	3808      	subs	r0, #8
 800076c:	4083      	lsls	r3, r0
 800076e:	469a      	mov	sl, r3
 8000770:	e762      	b.n	8000638 <__aeabi_dmul+0x408>
 8000772:	001d      	movs	r5, r3
 8000774:	2300      	movs	r3, #0
 8000776:	2400      	movs	r4, #0
 8000778:	2002      	movs	r0, #2
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	e5a2      	b.n	80002c4 <__aeabi_dmul+0x94>
 800077e:	9002      	str	r0, [sp, #8]
 8000780:	e632      	b.n	80003e8 <__aeabi_dmul+0x1b8>
 8000782:	431c      	orrs	r4, r3
 8000784:	9b00      	ldr	r3, [sp, #0]
 8000786:	9a01      	ldr	r2, [sp, #4]
 8000788:	4699      	mov	r9, r3
 800078a:	e5ae      	b.n	80002ea <__aeabi_dmul+0xba>
 800078c:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <__aeabi_dmul+0x5c8>)
 800078e:	4652      	mov	r2, sl
 8000790:	18c3      	adds	r3, r0, r3
 8000792:	4640      	mov	r0, r8
 8000794:	409a      	lsls	r2, r3
 8000796:	40c8      	lsrs	r0, r1
 8000798:	4302      	orrs	r2, r0
 800079a:	4640      	mov	r0, r8
 800079c:	4098      	lsls	r0, r3
 800079e:	0003      	movs	r3, r0
 80007a0:	1e58      	subs	r0, r3, #1
 80007a2:	4183      	sbcs	r3, r0
 80007a4:	4654      	mov	r4, sl
 80007a6:	431a      	orrs	r2, r3
 80007a8:	40cc      	lsrs	r4, r1
 80007aa:	0753      	lsls	r3, r2, #29
 80007ac:	d009      	beq.n	80007c2 <__aeabi_dmul+0x592>
 80007ae:	230f      	movs	r3, #15
 80007b0:	4013      	ands	r3, r2
 80007b2:	2b04      	cmp	r3, #4
 80007b4:	d005      	beq.n	80007c2 <__aeabi_dmul+0x592>
 80007b6:	1d13      	adds	r3, r2, #4
 80007b8:	4293      	cmp	r3, r2
 80007ba:	4192      	sbcs	r2, r2
 80007bc:	4252      	negs	r2, r2
 80007be:	18a4      	adds	r4, r4, r2
 80007c0:	001a      	movs	r2, r3
 80007c2:	0223      	lsls	r3, r4, #8
 80007c4:	d508      	bpl.n	80007d8 <__aeabi_dmul+0x5a8>
 80007c6:	2301      	movs	r3, #1
 80007c8:	2400      	movs	r4, #0
 80007ca:	2200      	movs	r2, #0
 80007cc:	e58e      	b.n	80002ec <__aeabi_dmul+0xbc>
 80007ce:	4689      	mov	r9, r1
 80007d0:	2400      	movs	r4, #0
 80007d2:	e58b      	b.n	80002ec <__aeabi_dmul+0xbc>
 80007d4:	2300      	movs	r3, #0
 80007d6:	e7a5      	b.n	8000724 <__aeabi_dmul+0x4f4>
 80007d8:	0763      	lsls	r3, r4, #29
 80007da:	0264      	lsls	r4, r4, #9
 80007dc:	0b24      	lsrs	r4, r4, #12
 80007de:	e7a1      	b.n	8000724 <__aeabi_dmul+0x4f4>
 80007e0:	9b00      	ldr	r3, [sp, #0]
 80007e2:	46a2      	mov	sl, r4
 80007e4:	4699      	mov	r9, r3
 80007e6:	9b01      	ldr	r3, [sp, #4]
 80007e8:	4698      	mov	r8, r3
 80007ea:	e737      	b.n	800065c <__aeabi_dmul+0x42c>
 80007ec:	fffffc0d 	.word	0xfffffc0d
 80007f0:	000007ff 	.word	0x000007ff
 80007f4:	0000043e 	.word	0x0000043e
 80007f8:	0000041e 	.word	0x0000041e

080007fc <__aeabi_i2d>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	2800      	cmp	r0, #0
 8000800:	d016      	beq.n	8000830 <__aeabi_i2d+0x34>
 8000802:	17c3      	asrs	r3, r0, #31
 8000804:	18c5      	adds	r5, r0, r3
 8000806:	405d      	eors	r5, r3
 8000808:	0fc4      	lsrs	r4, r0, #31
 800080a:	0028      	movs	r0, r5
 800080c:	f000 f824 	bl	8000858 <__clzsi2>
 8000810:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <__aeabi_i2d+0x58>)
 8000812:	1a1b      	subs	r3, r3, r0
 8000814:	055b      	lsls	r3, r3, #21
 8000816:	0d5b      	lsrs	r3, r3, #21
 8000818:	280a      	cmp	r0, #10
 800081a:	dc14      	bgt.n	8000846 <__aeabi_i2d+0x4a>
 800081c:	0002      	movs	r2, r0
 800081e:	002e      	movs	r6, r5
 8000820:	3215      	adds	r2, #21
 8000822:	4096      	lsls	r6, r2
 8000824:	220b      	movs	r2, #11
 8000826:	1a12      	subs	r2, r2, r0
 8000828:	40d5      	lsrs	r5, r2
 800082a:	032d      	lsls	r5, r5, #12
 800082c:	0b2d      	lsrs	r5, r5, #12
 800082e:	e003      	b.n	8000838 <__aeabi_i2d+0x3c>
 8000830:	2400      	movs	r4, #0
 8000832:	2300      	movs	r3, #0
 8000834:	2500      	movs	r5, #0
 8000836:	2600      	movs	r6, #0
 8000838:	051b      	lsls	r3, r3, #20
 800083a:	432b      	orrs	r3, r5
 800083c:	07e4      	lsls	r4, r4, #31
 800083e:	4323      	orrs	r3, r4
 8000840:	0030      	movs	r0, r6
 8000842:	0019      	movs	r1, r3
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	380b      	subs	r0, #11
 8000848:	4085      	lsls	r5, r0
 800084a:	032d      	lsls	r5, r5, #12
 800084c:	2600      	movs	r6, #0
 800084e:	0b2d      	lsrs	r5, r5, #12
 8000850:	e7f2      	b.n	8000838 <__aeabi_i2d+0x3c>
 8000852:	46c0      	nop			@ (mov r8, r8)
 8000854:	0000041e 	.word	0x0000041e

08000858 <__clzsi2>:
 8000858:	211c      	movs	r1, #28
 800085a:	2301      	movs	r3, #1
 800085c:	041b      	lsls	r3, r3, #16
 800085e:	4298      	cmp	r0, r3
 8000860:	d301      	bcc.n	8000866 <__clzsi2+0xe>
 8000862:	0c00      	lsrs	r0, r0, #16
 8000864:	3910      	subs	r1, #16
 8000866:	0a1b      	lsrs	r3, r3, #8
 8000868:	4298      	cmp	r0, r3
 800086a:	d301      	bcc.n	8000870 <__clzsi2+0x18>
 800086c:	0a00      	lsrs	r0, r0, #8
 800086e:	3908      	subs	r1, #8
 8000870:	091b      	lsrs	r3, r3, #4
 8000872:	4298      	cmp	r0, r3
 8000874:	d301      	bcc.n	800087a <__clzsi2+0x22>
 8000876:	0900      	lsrs	r0, r0, #4
 8000878:	3904      	subs	r1, #4
 800087a:	a202      	add	r2, pc, #8	@ (adr r2, 8000884 <__clzsi2+0x2c>)
 800087c:	5c10      	ldrb	r0, [r2, r0]
 800087e:	1840      	adds	r0, r0, r1
 8000880:	4770      	bx	lr
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	02020304 	.word	0x02020304
 8000888:	01010101 	.word	0x01010101
	...

08000894 <LTC6813_init_reg_limits>:

/* Helper function to initialize register limits. */
void LTC6813_init_reg_limits(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic // A two dimensional array that will store the data
							 )
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	0002      	movs	r2, r0
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	701a      	strb	r2, [r3, #0]
	uint8_t cic = 0;
 80008a2:	210f      	movs	r1, #15
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
    for(cic=0; cic<total_ic; cic++)
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
 80008b0:	e03b      	b.n	800092a <LTC6813_init_reg_limits+0x96>
    {
        ic[cic].ic_reg.cell_channels=18;
 80008b2:	200f      	movs	r0, #15
 80008b4:	183b      	adds	r3, r7, r0
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	22e8      	movs	r2, #232	@ 0xe8
 80008ba:	4353      	muls	r3, r2
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	18d3      	adds	r3, r2, r3
 80008c0:	22dc      	movs	r2, #220	@ 0xdc
 80008c2:	2112      	movs	r1, #18
 80008c4:	5499      	strb	r1, [r3, r2]
        ic[cic].ic_reg.stat_channels=4;
 80008c6:	183b      	adds	r3, r7, r0
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	22e8      	movs	r2, #232	@ 0xe8
 80008cc:	4353      	muls	r3, r2
 80008ce:	683a      	ldr	r2, [r7, #0]
 80008d0:	18d3      	adds	r3, r2, r3
 80008d2:	22dd      	movs	r2, #221	@ 0xdd
 80008d4:	2104      	movs	r1, #4
 80008d6:	5499      	strb	r1, [r3, r2]
        ic[cic].ic_reg.aux_channels=9;
 80008d8:	183b      	adds	r3, r7, r0
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	22e8      	movs	r2, #232	@ 0xe8
 80008de:	4353      	muls	r3, r2
 80008e0:	683a      	ldr	r2, [r7, #0]
 80008e2:	18d3      	adds	r3, r2, r3
 80008e4:	22de      	movs	r2, #222	@ 0xde
 80008e6:	2109      	movs	r1, #9
 80008e8:	5499      	strb	r1, [r3, r2]
        ic[cic].ic_reg.num_cv_reg=6;
 80008ea:	183b      	adds	r3, r7, r0
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	22e8      	movs	r2, #232	@ 0xe8
 80008f0:	4353      	muls	r3, r2
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	18d3      	adds	r3, r2, r3
 80008f6:	22df      	movs	r2, #223	@ 0xdf
 80008f8:	2106      	movs	r1, #6
 80008fa:	5499      	strb	r1, [r3, r2]
        ic[cic].ic_reg.num_gpio_reg=4;
 80008fc:	183b      	adds	r3, r7, r0
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	22e8      	movs	r2, #232	@ 0xe8
 8000902:	4353      	muls	r3, r2
 8000904:	683a      	ldr	r2, [r7, #0]
 8000906:	18d3      	adds	r3, r2, r3
 8000908:	22e0      	movs	r2, #224	@ 0xe0
 800090a:	2104      	movs	r1, #4
 800090c:	5499      	strb	r1, [r3, r2]
        ic[cic].ic_reg.num_stat_reg=2;
 800090e:	183b      	adds	r3, r7, r0
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	22e8      	movs	r2, #232	@ 0xe8
 8000914:	4353      	muls	r3, r2
 8000916:	683a      	ldr	r2, [r7, #0]
 8000918:	18d3      	adds	r3, r2, r3
 800091a:	22e1      	movs	r2, #225	@ 0xe1
 800091c:	2102      	movs	r1, #2
 800091e:	5499      	strb	r1, [r3, r2]
    for(cic=0; cic<total_ic; cic++)
 8000920:	183b      	adds	r3, r7, r0
 8000922:	781a      	ldrb	r2, [r3, #0]
 8000924:	183b      	adds	r3, r7, r0
 8000926:	3201      	adds	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]
 800092a:	230f      	movs	r3, #15
 800092c:	18fa      	adds	r2, r7, r3
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	7812      	ldrb	r2, [r2, #0]
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	429a      	cmp	r2, r3
 8000936:	d3bc      	bcc.n	80008b2 <LTC6813_init_reg_limits+0x1e>
    }
}
 8000938:	46c0      	nop			@ (mov r8, r8)
 800093a:	46c0      	nop			@ (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b004      	add	sp, #16
 8000940:	bd80      	pop	{r7, pc}

08000942 <LTC6813_wrcfg>:
order so the last device's configuration is written first.
*/
void LTC6813_wrcfg(uint8_t total_ic, //The number of ICs being written to
                     cell_asic *ic //A two dimensional array of the configuration data that will be written
                    )
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	0002      	movs	r2, r0
 800094a:	6039      	str	r1, [r7, #0]
 800094c:	1dfb      	adds	r3, r7, #7
 800094e:	701a      	strb	r2, [r3, #0]
	LTC681x_wrcfg(total_ic,ic);
 8000950:	683a      	ldr	r2, [r7, #0]
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	0011      	movs	r1, r2
 8000958:	0018      	movs	r0, r3
 800095a:	f000 fb73 	bl	8001044 <LTC681x_wrcfg>
}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}

08000966 <LTC6813_rdcfg>:

/* Reads configuration registers of a LTC6813 daisy chain */
int8_t LTC6813_rdcfg(uint8_t total_ic, //Number of ICs in the system
				   cell_asic *ic //A two dimensional array that the function stores the read configuration data.
				  )
{
 8000966:	b5b0      	push	{r4, r5, r7, lr}
 8000968:	b084      	sub	sp, #16
 800096a:	af00      	add	r7, sp, #0
 800096c:	0002      	movs	r2, r0
 800096e:	6039      	str	r1, [r7, #0]
 8000970:	1dfb      	adds	r3, r7, #7
 8000972:	701a      	strb	r2, [r3, #0]
	int8_t pec_error = 0;
 8000974:	250f      	movs	r5, #15
 8000976:	197b      	adds	r3, r7, r5
 8000978:	2200      	movs	r2, #0
 800097a:	701a      	strb	r2, [r3, #0]
	pec_error = LTC681x_rdcfg(total_ic,ic);
 800097c:	197c      	adds	r4, r7, r5
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	0011      	movs	r1, r2
 8000986:	0018      	movs	r0, r3
 8000988:	f000 fbfa 	bl	8001180 <LTC681x_rdcfg>
 800098c:	0003      	movs	r3, r0
 800098e:	7023      	strb	r3, [r4, #0]
	return(pec_error);
 8000990:	197b      	adds	r3, r7, r5
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b25b      	sxtb	r3, r3
}
 8000996:	0018      	movs	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	b004      	add	sp, #16
 800099c:	bdb0      	pop	{r4, r5, r7, pc}

0800099e <LTC6813_adcv>:
/* Starts cell voltage conversion */
void LTC6813_adcv(uint8_t MD, //ADC Mode
				  uint8_t DCP, //Discharge Permit
				  uint8_t CH //Cell Channels to be measured
				 )
{
 800099e:	b590      	push	{r4, r7, lr}
 80009a0:	b083      	sub	sp, #12
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	0004      	movs	r4, r0
 80009a6:	0008      	movs	r0, r1
 80009a8:	0011      	movs	r1, r2
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	1c22      	adds	r2, r4, #0
 80009ae:	701a      	strb	r2, [r3, #0]
 80009b0:	1dbb      	adds	r3, r7, #6
 80009b2:	1c02      	adds	r2, r0, #0
 80009b4:	701a      	strb	r2, [r3, #0]
 80009b6:	1d7b      	adds	r3, r7, #5
 80009b8:	1c0a      	adds	r2, r1, #0
 80009ba:	701a      	strb	r2, [r3, #0]
    LTC681x_adcv(MD,DCP,CH);
 80009bc:	1d7b      	adds	r3, r7, #5
 80009be:	781a      	ldrb	r2, [r3, #0]
 80009c0:	1dbb      	adds	r3, r7, #6
 80009c2:	7819      	ldrb	r1, [r3, #0]
 80009c4:	1dfb      	adds	r3, r7, #7
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	0018      	movs	r0, r3
 80009ca:	f000 fcd3 	bl	8001374 <LTC681x_adcv>
}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b003      	add	sp, #12
 80009d4:	bd90      	pop	{r4, r7, pc}

080009d6 <LTC6813_adax>:

/* Start a GPIO and Vref2 Conversion */
void LTC6813_adax(uint8_t MD, //ADC Mode
				  uint8_t CHG //GPIO Channels to be measured)
                 )
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	0002      	movs	r2, r0
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	1dbb      	adds	r3, r7, #6
 80009e4:	1c0a      	adds	r2, r1, #0
 80009e6:	701a      	strb	r2, [r3, #0]
	LTC681x_adax(MD,CHG);
 80009e8:	1dbb      	adds	r3, r7, #6
 80009ea:	781a      	ldrb	r2, [r3, #0]
 80009ec:	1dfb      	adds	r3, r7, #7
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	0011      	movs	r1, r2
 80009f2:	0018      	movs	r0, r3
 80009f4:	f000 fcfb 	bl	80013ee <LTC681x_adax>
}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b002      	add	sp, #8
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <LTC6813_rdcv>:
/*  Reads and parses the LTC6813 cell voltage registers */
uint8_t LTC6813_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	603a      	str	r2, [r7, #0]
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	1c02      	adds	r2, r0, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
 8000a0e:	1dbb      	adds	r3, r7, #6
 8000a10:	1c0a      	adds	r2, r1, #0
 8000a12:	701a      	strb	r2, [r3, #0]
	int8_t pec_error = 0;
 8000a14:	240f      	movs	r4, #15
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
	pec_error = LTC681x_rdcv(reg,total_ic,ic);
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	1dbb      	adds	r3, r7, #6
 8000a20:	7819      	ldrb	r1, [r3, #0]
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 fd12 	bl	8001450 <LTC681x_rdcv>
 8000a2c:	0003      	movs	r3, r0
 8000a2e:	001a      	movs	r2, r3
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	701a      	strb	r2, [r3, #0]
	return(pec_error);
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	781b      	ldrb	r3, [r3, #0]
}
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b005      	add	sp, #20
 8000a3e:	bd90      	pop	{r4, r7, pc}

08000a40 <LTC6813_rdaux>:
*/
int8_t LTC6813_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
				     uint8_t total_ic,//The number of ICs in the system
				     cell_asic *ic//A two dimensional array of the gpio voltage codes.
				    )
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	603a      	str	r2, [r7, #0]
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	1c02      	adds	r2, r0, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
 8000a4e:	1dbb      	adds	r3, r7, #6
 8000a50:	1c0a      	adds	r2, r1, #0
 8000a52:	701a      	strb	r2, [r3, #0]
	int8_t pec_error = 0;
 8000a54:	240f      	movs	r4, #15
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
	LTC681x_rdaux(reg,total_ic,ic);
 8000a5c:	683a      	ldr	r2, [r7, #0]
 8000a5e:	1dbb      	adds	r3, r7, #6
 8000a60:	7819      	ldrb	r1, [r3, #0]
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 fdde 	bl	8001628 <LTC681x_rdaux>
	return (pec_error);
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b25b      	sxtb	r3, r3
}
 8000a72:	0018      	movs	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b005      	add	sp, #20
 8000a78:	bd90      	pop	{r4, r7, pc}

08000a7a <LTC6813_pollAdc>:
	return(LTC681x_pladc());
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC6813_pollAdc()
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
	return(LTC681x_pollAdc());
 8000a7e:	f001 f851 	bl	8001b24 <LTC681x_pollAdc>
 8000a82:	0003      	movs	r3, r0
}
 8000a84:	0018      	movs	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <LTC6813_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC6813_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic // A two dimensional array that will store the data
							 )
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	0002      	movs	r2, r0
 8000a92:	6039      	str	r1, [r7, #0]
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	701a      	strb	r2, [r3, #0]
	LTC681x_reset_crc_count(total_ic,ic);
 8000a98:	683a      	ldr	r2, [r7, #0]
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	0011      	movs	r1, r2
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f001 fa29 	bl	8001ef8 <LTC681x_reset_crc_count>
}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b002      	add	sp, #8
 8000aac:	bd80      	pop	{r7, pc}

08000aae <LTC6813_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC6813_init_cfg(uint8_t total_ic, cell_asic *ic)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	0002      	movs	r2, r0
 8000ab6:	6039      	str	r1, [r7, #0]
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	701a      	strb	r2, [r3, #0]
   LTC681x_init_cfg(total_ic,ic);
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	1dfb      	adds	r3, r7, #7
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f001 fa7d 	bl	8001fc4 <LTC681x_init_cfg>
}
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b002      	add	sp, #8
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <LTC6813_set_cfgr>:

/* Helper function to set CFGR variable */
void LTC6813_set_cfgr(uint8_t nIC, cell_asic *ic, bool refon, bool adcopt, bool gpio[5],bool dcc[12],bool dcto[4], uint16_t uv, uint16_t  ov)
{
 8000ad2:	b590      	push	{r4, r7, lr}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	0004      	movs	r4, r0
 8000ada:	6039      	str	r1, [r7, #0]
 8000adc:	0010      	movs	r0, r2
 8000ade:	0019      	movs	r1, r3
 8000ae0:	1dfb      	adds	r3, r7, #7
 8000ae2:	1c22      	adds	r2, r4, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
 8000ae6:	1dbb      	adds	r3, r7, #6
 8000ae8:	1c02      	adds	r2, r0, #0
 8000aea:	701a      	strb	r2, [r3, #0]
 8000aec:	1d7b      	adds	r3, r7, #5
 8000aee:	1c0a      	adds	r2, r1, #0
 8000af0:	701a      	strb	r2, [r3, #0]
    LTC681x_set_cfgr_refon(nIC,ic,refon);
 8000af2:	1dbb      	adds	r3, r7, #6
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	6839      	ldr	r1, [r7, #0]
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	0018      	movs	r0, r3
 8000afe:	f001 fa98 	bl	8002032 <LTC681x_set_cfgr_refon>
    LTC681x_set_cfgr_adcopt(nIC,ic,adcopt);
 8000b02:	1d7b      	adds	r3, r7, #5
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	6839      	ldr	r1, [r7, #0]
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f001 fac6 	bl	800209e <LTC681x_set_cfgr_adcopt>
    LTC681x_set_cfgr_gpio(nIC,ic,gpio);
 8000b12:	69ba      	ldr	r2, [r7, #24]
 8000b14:	6839      	ldr	r1, [r7, #0]
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f001 faf5 	bl	800210a <LTC681x_set_cfgr_gpio>
    LTC681x_set_cfgr_dis(nIC,ic,dcc);
 8000b20:	69fa      	ldr	r2, [r7, #28]
 8000b22:	6839      	ldr	r1, [r7, #0]
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f001 fb42 	bl	80021b2 <LTC681x_set_cfgr_dis>
	LTC681x_set_cfgr_dcto(nIC,ic,dcto);
 8000b2e:	6a3a      	ldr	r2, [r7, #32]
 8000b30:	6839      	ldr	r1, [r7, #0]
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	0018      	movs	r0, r3
 8000b38:	f001 fbd0 	bl	80022dc <LTC681x_set_cfgr_dcto>
	LTC681x_set_cfgr_uv(nIC, ic, uv);
 8000b3c:	2324      	movs	r3, #36	@ 0x24
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	881a      	ldrh	r2, [r3, #0]
 8000b42:	6839      	ldr	r1, [r7, #0]
 8000b44:	1dfb      	adds	r3, r7, #7
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f001 fc1b 	bl	8002384 <LTC681x_set_cfgr_uv>
    LTC681x_set_cfgr_ov(nIC, ic, ov);
 8000b4e:	2328      	movs	r3, #40	@ 0x28
 8000b50:	18fb      	adds	r3, r7, r3
 8000b52:	881a      	ldrh	r2, [r3, #0]
 8000b54:	6839      	ldr	r1, [r7, #0]
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f001 fc5e 	bl	800241c <LTC681x_set_cfgr_ov>
}
 8000b60:	46c0      	nop			@ (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b003      	add	sp, #12
 8000b66:	bd90      	pop	{r4, r7, pc}

08000b68 <wakeup_idle>:
		0xba39, 0xb10b, 0x7492, 0x5368, 0x96f1, 0x9dc3, 0x585a, 0x8ba7, 0x4e3e,
		0x450c, 0x8095 };

/* Wake isoSPI up from IDlE state and enters the READY state */
void wakeup_idle(uint8_t total_ic) //Number of ICs in the system
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	0002      	movs	r2, r0
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	701a      	strb	r2, [r3, #0]
	int i = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < total_ic; i++) {
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	e00b      	b.n	8000b96 <wakeup_idle+0x2e>
		cs_low(CS_PIN);
 8000b7e:	2004      	movs	r0, #4
 8000b80:	f001 fc95 	bl	80024ae <cs_low>
		spi_read_byte(0xff); //Guarantees the isoSPI will be in ready mode
 8000b84:	20ff      	movs	r0, #255	@ 0xff
 8000b86:	f001 fd57 	bl	8002638 <spi_read_byte>
		cs_high(CS_PIN);
 8000b8a:	2004      	movs	r0, #4
 8000b8c:	f001 fca2 	bl	80024d4 <cs_high>
	for (i = 0; i < total_ic; i++) {
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	3301      	adds	r3, #1
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	dbee      	blt.n	8000b7e <wakeup_idle+0x16>
	}
}
 8000ba0:	46c0      	nop			@ (mov r8, r8)
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b004      	add	sp, #16
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <wakeup_sleep>:

/* Generic wakeup command to wake the LTC681x from sleep state */
void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b084      	sub	sp, #16
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	0002      	movs	r2, r0
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	701a      	strb	r2, [r3, #0]
	int i = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < total_ic; i++) {
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	e010      	b.n	8000be2 <wakeup_sleep+0x38>
		cs_low(CS_PIN);
 8000bc0:	2004      	movs	r0, #4
 8000bc2:	f001 fc74 	bl	80024ae <cs_low>
		delay_u(300); // Guarantees the LTC681x will be in standby
 8000bc6:	2396      	movs	r3, #150	@ 0x96
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f001 fc96 	bl	80024fc <delay_u>
		cs_high(CS_PIN);
 8000bd0:	2004      	movs	r0, #4
 8000bd2:	f001 fc7f 	bl	80024d4 <cs_high>
		delay_u(10);
 8000bd6:	200a      	movs	r0, #10
 8000bd8:	f001 fc90 	bl	80024fc <delay_u>
	for (i = 0; i < total_ic; i++) {
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3301      	adds	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	dbe9      	blt.n	8000bc0 <wakeup_sleep+0x16>
	}
}
 8000bec:	46c0      	nop			@ (mov r8, r8)
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b004      	add	sp, #16
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <cmd_68>:

/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 8000bf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf8:	b085      	sub	sp, #20
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	cmd[0] = tx_cmd[0];
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	2508      	movs	r5, #8
 8000c04:	197b      	adds	r3, r7, r5
 8000c06:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	785a      	ldrb	r2, [r3, #1]
 8000c0c:	197b      	adds	r3, r7, r5
 8000c0e:	705a      	strb	r2, [r3, #1]
	cmd_pec = pec15_calc(2, cmd);
 8000c10:	260e      	movs	r6, #14
 8000c12:	19bc      	adds	r4, r7, r6
 8000c14:	197b      	adds	r3, r7, r5
 8000c16:	0019      	movs	r1, r3
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f000 f9c7 	bl	8000fac <pec15_calc>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	8023      	strh	r3, [r4, #0]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000c22:	0031      	movs	r1, r6
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	197b      	adds	r3, r7, r5
 8000c30:	709a      	strb	r2, [r3, #2]
	cmd[3] = (uint8_t) (cmd_pec);
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	197b      	adds	r3, r7, r5
 8000c3a:	70da      	strb	r2, [r3, #3]

	cs_low(CS_PIN);
 8000c3c:	2004      	movs	r0, #4
 8000c3e:	f001 fc36 	bl	80024ae <cs_low>
	spi_write_array(4, cmd);
 8000c42:	197b      	adds	r3, r7, r5
 8000c44:	0019      	movs	r1, r3
 8000c46:	2004      	movs	r0, #4
 8000c48:	f001 fc72 	bl	8002530 <spi_write_array>
	cs_high(CS_PIN);
 8000c4c:	2004      	movs	r0, #4
 8000c4e:	f001 fc41 	bl	80024d4 <cs_high>
}
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b005      	add	sp, #20
 8000c58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c5a <write_68>:
 Function calculates PEC for tx_cmd data and the data to be transmitted.
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
		uint8_t tx_cmd[2], //The command to be transmitted
		uint8_t data[] // Payload Data
		) {
 8000c5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5c:	b089      	sub	sp, #36	@ 0x24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
 8000c64:	250f      	movs	r5, #15
 8000c66:	197b      	adds	r3, r7, r5
 8000c68:	1c02      	adds	r2, r0, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
	const uint8_t BYTES_IN_REG = 6;
 8000c6c:	231c      	movs	r3, #28
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	2206      	movs	r2, #6
 8000c72:	701a      	strb	r2, [r3, #0]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8000c74:	197b      	adds	r3, r7, r5
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	211b      	movs	r1, #27
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	3204      	adds	r2, #4
 8000c82:	701a      	strb	r2, [r3, #0]
	uint8_t *cmd;
	uint16_t data_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index;

	cmd = (uint8_t*) malloc(CMD_LEN * sizeof(uint8_t));
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f005 fd4b 	bl	8006724 <malloc>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	617b      	str	r3, [r7, #20]
	cmd[0] = tx_cmd[0];
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	781a      	ldrb	r2, [r3, #0]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	7852      	ldrb	r2, [r2, #1]
 8000ca2:	701a      	strb	r2, [r3, #0]
	cmd_pec = pec15_calc(2, cmd);
 8000ca4:	2612      	movs	r6, #18
 8000ca6:	19bc      	adds	r4, r7, r6
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	0019      	movs	r1, r3
 8000cac:	2002      	movs	r0, #2
 8000cae:	f000 f97d 	bl	8000fac <pec15_calc>
 8000cb2:	0003      	movs	r3, r0
 8000cb4:	8023      	strh	r3, [r4, #0]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000cb6:	0031      	movs	r1, r6
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t) (cmd_pec);
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	3303      	adds	r3, #3
 8000ccc:	187a      	adds	r2, r7, r1
 8000cce:	8812      	ldrh	r2, [r2, #0]
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 8000cd4:	231f      	movs	r3, #31
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	2204      	movs	r2, #4
 8000cda:	701a      	strb	r2, [r3, #0]
	uint8_t current_ic = 0;
 8000cdc:	211e      	movs	r1, #30
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
	for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	197a      	adds	r2, r7, r5
 8000ce8:	7812      	ldrb	r2, [r2, #0]
 8000cea:	701a      	strb	r2, [r3, #0]
 8000cec:	e062      	b.n	8000db4 <write_68+0x15a>
			{//The first configuration written is received by the last IC in the daisy chain
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 8000cee:	231d      	movs	r3, #29
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	e020      	b.n	8000d3a <write_68+0xe0>
				current_byte++) {
			cmd[cmd_index] = data[((current_ic - 1) * 6) + current_byte];
 8000cf8:	231e      	movs	r3, #30
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	1e5a      	subs	r2, r3, #1
 8000d00:	0013      	movs	r3, r2
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	189b      	adds	r3, r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	001a      	movs	r2, r3
 8000d0a:	201d      	movs	r0, #29
 8000d0c:	183b      	adds	r3, r7, r0
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	18d3      	adds	r3, r2, r3
 8000d12:	001a      	movs	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	189a      	adds	r2, r3, r2
 8000d18:	241f      	movs	r4, #31
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	6979      	ldr	r1, [r7, #20]
 8000d20:	18cb      	adds	r3, r1, r3
 8000d22:	7812      	ldrb	r2, [r2, #0]
 8000d24:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8000d26:	193b      	adds	r3, r7, r4
 8000d28:	193a      	adds	r2, r7, r4
 8000d2a:	7812      	ldrb	r2, [r2, #0]
 8000d2c:	3201      	adds	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
				current_byte++) {
 8000d30:	183b      	adds	r3, r7, r0
 8000d32:	781a      	ldrb	r2, [r3, #0]
 8000d34:	183b      	adds	r3, r7, r0
 8000d36:	3201      	adds	r2, #1
 8000d38:	701a      	strb	r2, [r3, #0]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 8000d3a:	231d      	movs	r3, #29
 8000d3c:	18fa      	adds	r2, r7, r3
 8000d3e:	211c      	movs	r1, #28
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	7812      	ldrb	r2, [r2, #0]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d3d6      	bcc.n	8000cf8 <write_68+0x9e>
		}

		data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
				&data[(current_ic - 1) * 6]); // Calculating the PEC for each ICs configuration register data
 8000d4a:	251e      	movs	r5, #30
 8000d4c:	197b      	adds	r3, r7, r5
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	1e5a      	subs	r2, r3, #1
 8000d52:	0013      	movs	r3, r2
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	189b      	adds	r3, r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	001a      	movs	r2, r3
		data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	189a      	adds	r2, r3, r2
 8000d60:	2610      	movs	r6, #16
 8000d62:	19bc      	adds	r4, r7, r6
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	0011      	movs	r1, r2
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f000 f91e 	bl	8000fac <pec15_calc>
 8000d70:	0003      	movs	r3, r0
 8000d72:	8023      	strh	r3, [r4, #0]
		cmd[cmd_index] = (uint8_t) (data_pec >> 8);
 8000d74:	0034      	movs	r4, r6
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	0a1b      	lsrs	r3, r3, #8
 8000d7c:	b299      	uxth	r1, r3
 8000d7e:	201f      	movs	r0, #31
 8000d80:	183b      	adds	r3, r7, r0
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	18d3      	adds	r3, r2, r3
 8000d88:	b2ca      	uxtb	r2, r1
 8000d8a:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t) data_pec;
 8000d8c:	0001      	movs	r1, r0
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	3301      	adds	r3, #1
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	18d3      	adds	r3, r2, r3
 8000d98:	193a      	adds	r2, r7, r4
 8000d9a:	8812      	ldrh	r2, [r2, #0]
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	187a      	adds	r2, r7, r1
 8000da4:	7812      	ldrb	r2, [r2, #0]
 8000da6:	3202      	adds	r2, #2
 8000da8:	701a      	strb	r2, [r3, #0]
	for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8000daa:	197b      	adds	r3, r7, r5
 8000dac:	781a      	ldrb	r2, [r3, #0]
 8000dae:	197b      	adds	r3, r7, r5
 8000db0:	3a01      	subs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
 8000db4:	231e      	movs	r3, #30
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d197      	bne.n	8000cee <write_68+0x94>
	}

	cs_low(CS_PIN);
 8000dbe:	2004      	movs	r0, #4
 8000dc0:	f001 fb75 	bl	80024ae <cs_low>
	spi_write_array(CMD_LEN, cmd);
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	231b      	movs	r3, #27
 8000dc8:	18fb      	adds	r3, r7, r3
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	0011      	movs	r1, r2
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f001 fbae 	bl	8002530 <spi_write_array>
	cs_high(CS_PIN);
 8000dd4:	2004      	movs	r0, #4
 8000dd6:	f001 fb7d 	bl	80024d4 <cs_high>

	free(cmd);
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f005 fcab 	bl	8006738 <free>
}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b009      	add	sp, #36	@ 0x24
 8000de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000dec <read_68>:

/* Generic function to write 68xx commands and read data. Function calculated PEC for tx_cmd data */
int8_t read_68(uint8_t total_ic, // Number of ICs in the system
		uint8_t tx_cmd[2], // The command to be transmitted
		uint8_t *rx_data // Data to be read
		) {
 8000dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dee:	b0c9      	sub	sp, #292	@ 0x124
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	4b6b      	ldr	r3, [pc, #428]	@ (8000fa4 <read_68+0x1b8>)
 8000df8:	2690      	movs	r6, #144	@ 0x90
 8000dfa:	0076      	lsls	r6, r6, #1
 8000dfc:	199b      	adds	r3, r3, r6
 8000dfe:	19db      	adds	r3, r3, r7
 8000e00:	1c02      	adds	r2, r0, #0
 8000e02:	701a      	strb	r2, [r3, #0]
	const uint8_t BYTES_IN_REG = 8;
 8000e04:	238e      	movs	r3, #142	@ 0x8e
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	18fb      	adds	r3, r7, r3
 8000e0a:	2208      	movs	r2, #8
 8000e0c:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[4];
	uint8_t data[256];
	int8_t pec_error = 0;
 8000e0e:	2220      	movs	r2, #32
 8000e10:	32ff      	adds	r2, #255	@ 0xff
 8000e12:	18bb      	adds	r3, r7, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
	uint16_t cmd_pec;
	uint16_t data_pec;
	uint16_t received_pec;

	cmd[0] = tx_cmd[0];
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	781a      	ldrb	r2, [r3, #0]
 8000e1c:	2588      	movs	r5, #136	@ 0x88
 8000e1e:	006d      	lsls	r5, r5, #1
 8000e20:	197b      	adds	r3, r7, r5
 8000e22:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	785a      	ldrb	r2, [r3, #1]
 8000e28:	197b      	adds	r3, r7, r5
 8000e2a:	705a      	strb	r2, [r3, #1]
	cmd_pec = pec15_calc(2, cmd);
 8000e2c:	218d      	movs	r1, #141	@ 0x8d
 8000e2e:	0049      	lsls	r1, r1, #1
 8000e30:	187c      	adds	r4, r7, r1
 8000e32:	197b      	adds	r3, r7, r5
 8000e34:	0019      	movs	r1, r3
 8000e36:	2002      	movs	r0, #2
 8000e38:	f000 f8b8 	bl	8000fac <pec15_calc>
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	8023      	strh	r3, [r4, #0]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000e40:	218d      	movs	r1, #141	@ 0x8d
 8000e42:	0049      	lsls	r1, r1, #1
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	002c      	movs	r4, r5
 8000e50:	193b      	adds	r3, r7, r4
 8000e52:	709a      	strb	r2, [r3, #2]
	cmd[3] = (uint8_t) (cmd_pec);
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	193b      	adds	r3, r7, r4
 8000e5c:	70da      	strb	r2, [r3, #3]

	cs_low(CS_PIN);
 8000e5e:	2004      	movs	r0, #4
 8000e60:	f001 fb25 	bl	80024ae <cs_low>
	spi_write_read(cmd, 4, data, (BYTES_IN_REG * total_ic)); //Transmits the command and reads the configuration data of all ICs on the daisy chain into rx_data[] array
 8000e64:	238e      	movs	r3, #142	@ 0x8e
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	4a4e      	ldr	r2, [pc, #312]	@ (8000fa4 <read_68+0x1b8>)
 8000e6c:	1992      	adds	r2, r2, r6
 8000e6e:	19d2      	adds	r2, r2, r7
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	7812      	ldrb	r2, [r2, #0]
 8000e74:	4353      	muls	r3, r2
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2210      	movs	r2, #16
 8000e7a:	18ba      	adds	r2, r7, r2
 8000e7c:	1938      	adds	r0, r7, r4
 8000e7e:	2104      	movs	r1, #4
 8000e80:	f001 fb84 	bl	800258c <spi_write_read>
	cs_high(CS_PIN);
 8000e84:	2004      	movs	r0, #4
 8000e86:	f001 fb25 	bl	80024d4 <cs_high>

	uint8_t current_ic = 0;
 8000e8a:	218f      	movs	r1, #143	@ 0x8f
 8000e8c:	0049      	lsls	r1, r1, #1
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
	uint8_t current_byte = 0;
 8000e94:	231e      	movs	r3, #30
 8000e96:	33ff      	adds	r3, #255	@ 0xff
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
	for (current_ic = total_ic; current_ic > 0; current_ic--) //Executes for each LTC681x in the daisy chain and packs the data
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	4a40      	ldr	r2, [pc, #256]	@ (8000fa4 <read_68+0x1b8>)
 8000ea2:	1992      	adds	r2, r2, r6
 8000ea4:	19d2      	adds	r2, r2, r7
 8000ea6:	7812      	ldrb	r2, [r2, #0]
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	e06b      	b.n	8000f84 <read_68+0x198>
			{//into the rx_data array as well as check the received data for any bit errors
		for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) {
 8000eac:	231e      	movs	r3, #30
 8000eae:	33ff      	adds	r3, #255	@ 0xff
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	e022      	b.n	8000efe <read_68+0x112>
			rx_data[(current_ic * 8) + current_byte] = data[current_byte
					+ (current_ic * BYTES_IN_REG)];
 8000eb8:	201e      	movs	r0, #30
 8000eba:	30ff      	adds	r0, #255	@ 0xff
 8000ebc:	183b      	adds	r3, r7, r0
 8000ebe:	781a      	ldrb	r2, [r3, #0]
 8000ec0:	248f      	movs	r4, #143	@ 0x8f
 8000ec2:	0064      	lsls	r4, r4, #1
 8000ec4:	193b      	adds	r3, r7, r4
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	218e      	movs	r1, #142	@ 0x8e
 8000eca:	0049      	lsls	r1, r1, #1
 8000ecc:	1879      	adds	r1, r7, r1
 8000ece:	7809      	ldrb	r1, [r1, #0]
 8000ed0:	434b      	muls	r3, r1
 8000ed2:	18d2      	adds	r2, r2, r3
			rx_data[(current_ic * 8) + current_byte] = data[current_byte
 8000ed4:	193b      	adds	r3, r7, r4
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	00d9      	lsls	r1, r3, #3
 8000eda:	183b      	adds	r3, r7, r0
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	18cb      	adds	r3, r1, r3
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	185b      	adds	r3, r3, r1
 8000ee6:	4930      	ldr	r1, [pc, #192]	@ (8000fa8 <read_68+0x1bc>)
 8000ee8:	2490      	movs	r4, #144	@ 0x90
 8000eea:	0064      	lsls	r4, r4, #1
 8000eec:	1909      	adds	r1, r1, r4
 8000eee:	19c9      	adds	r1, r1, r7
 8000ef0:	5c8a      	ldrb	r2, [r1, r2]
 8000ef2:	701a      	strb	r2, [r3, #0]
		for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) {
 8000ef4:	183b      	adds	r3, r7, r0
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	183b      	adds	r3, r7, r0
 8000efa:	3201      	adds	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
 8000efe:	231e      	movs	r3, #30
 8000f00:	33ff      	adds	r3, #255	@ 0xff
 8000f02:	18fa      	adds	r2, r7, r3
 8000f04:	238e      	movs	r3, #142	@ 0x8e
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	7812      	ldrb	r2, [r2, #0]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d3d2      	bcc.n	8000eb8 <read_68+0xcc>
		}

		received_pec = (rx_data[(current_ic * 8) + 6] << 8)
 8000f12:	208f      	movs	r0, #143	@ 0x8f
 8000f14:	0040      	lsls	r0, r0, #1
 8000f16:	183b      	adds	r3, r7, r0
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	3306      	adds	r3, #6
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	18d3      	adds	r3, r2, r3
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b29a      	uxth	r2, r3
				+ rx_data[(current_ic * 8) + 7];
 8000f28:	183b      	adds	r3, r7, r0
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	3307      	adds	r3, #7
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	18cb      	adds	r3, r1, r3
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	0019      	movs	r1, r3
		received_pec = (rx_data[(current_ic * 8) + 6] << 8)
 8000f38:	258c      	movs	r5, #140	@ 0x8c
 8000f3a:	006d      	lsls	r5, r5, #1
 8000f3c:	197b      	adds	r3, r7, r5
 8000f3e:	1852      	adds	r2, r2, r1
 8000f40:	801a      	strh	r2, [r3, #0]
		data_pec = pec15_calc(6, &rx_data[current_ic * 8]);
 8000f42:	183b      	adds	r3, r7, r0
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	001a      	movs	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	189b      	adds	r3, r3, r2
 8000f4e:	268b      	movs	r6, #139	@ 0x8b
 8000f50:	0076      	lsls	r6, r6, #1
 8000f52:	19bc      	adds	r4, r7, r6
 8000f54:	0019      	movs	r1, r3
 8000f56:	2006      	movs	r0, #6
 8000f58:	f000 f828 	bl	8000fac <pec15_calc>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	8023      	strh	r3, [r4, #0]

		if (received_pec != data_pec) {
 8000f60:	197a      	adds	r2, r7, r5
 8000f62:	19bb      	adds	r3, r7, r6
 8000f64:	8812      	ldrh	r2, [r2, #0]
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d004      	beq.n	8000f76 <read_68+0x18a>
			pec_error = -1;
 8000f6c:	2320      	movs	r3, #32
 8000f6e:	33ff      	adds	r3, #255	@ 0xff
 8000f70:	18fb      	adds	r3, r7, r3
 8000f72:	22ff      	movs	r2, #255	@ 0xff
 8000f74:	701a      	strb	r2, [r3, #0]
	for (current_ic = total_ic; current_ic > 0; current_ic--) //Executes for each LTC681x in the daisy chain and packs the data
 8000f76:	218f      	movs	r1, #143	@ 0x8f
 8000f78:	0049      	lsls	r1, r1, #1
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	781a      	ldrb	r2, [r3, #0]
 8000f7e:	187b      	adds	r3, r7, r1
 8000f80:	3a01      	subs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
 8000f84:	238f      	movs	r3, #143	@ 0x8f
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d18d      	bne.n	8000eac <read_68+0xc0>
		}
	}

	return (pec_error);
 8000f90:	2320      	movs	r3, #32
 8000f92:	33ff      	adds	r3, #255	@ 0xff
 8000f94:	18fb      	adds	r3, r7, r3
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b25b      	sxtb	r3, r3
}
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b049      	add	sp, #292	@ 0x124
 8000fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	fffffeef 	.word	0xfffffeef
 8000fa8:	fffffef0 	.word	0xfffffef0

08000fac <pec15_calc>:

/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
		uint8_t *data //Array of data that will be used to calculate  a PEC
		) {
 8000fac:	b5b0      	push	{r4, r5, r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	701a      	strb	r2, [r3, #0]
	uint16_t remainder, addr;
	remainder = 16; //initialize the PEC
 8000fba:	230e      	movs	r3, #14
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	2210      	movs	r2, #16
 8000fc0:	801a      	strh	r2, [r3, #0]

	uint8_t i = 0;
 8000fc2:	210d      	movs	r1, #13
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len; i++) // loops for each byte in data array
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
 8000fd0:	e025      	b.n	800101e <pec15_calc+0x72>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8000fd2:	200e      	movs	r0, #14
 8000fd4:	183b      	adds	r3, r7, r0
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	09db      	lsrs	r3, r3, #7
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	240d      	movs	r4, #13
 8000fde:	193a      	adds	r2, r7, r4
 8000fe0:	7812      	ldrb	r2, [r2, #0]
 8000fe2:	6839      	ldr	r1, [r7, #0]
 8000fe4:	188a      	adds	r2, r1, r2
 8000fe6:	7812      	ldrb	r2, [r2, #0]
 8000fe8:	4053      	eors	r3, r2
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	250a      	movs	r5, #10
 8000fee:	197b      	adds	r3, r7, r5
 8000ff0:	21ff      	movs	r1, #255	@ 0xff
 8000ff2:	400a      	ands	r2, r1
 8000ff4:	801a      	strh	r2, [r3, #0]
//		#ifdef MBED
		remainder = (remainder << 8) ^ crc15Table[addr];
 8000ff6:	183b      	adds	r3, r7, r0
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	5e9b      	ldrsh	r3, [r3, r2]
 8000ffc:	021b      	lsls	r3, r3, #8
 8000ffe:	b21a      	sxth	r2, r3
 8001000:	197b      	adds	r3, r7, r5
 8001002:	8819      	ldrh	r1, [r3, #0]
 8001004:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <pec15_calc+0x94>)
 8001006:	0049      	lsls	r1, r1, #1
 8001008:	5acb      	ldrh	r3, [r1, r3]
 800100a:	b21b      	sxth	r3, r3
 800100c:	4053      	eors	r3, r2
 800100e:	b21a      	sxth	r2, r3
 8001010:	183b      	adds	r3, r7, r0
 8001012:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; i++) // loops for each byte in data array
 8001014:	193b      	adds	r3, r7, r4
 8001016:	781a      	ldrb	r2, [r3, #0]
 8001018:	193b      	adds	r3, r7, r4
 800101a:	3201      	adds	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	230d      	movs	r3, #13
 8001020:	18fa      	adds	r2, r7, r3
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	7812      	ldrb	r2, [r2, #0]
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d3d2      	bcc.n	8000fd2 <pec15_calc+0x26>
//		#else
//			remainder = (remainder<<8)^pgm_read_word_near(crc15Table+addr); // what is pgm_read_word_near
//		#endif
	}

	return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 800102c:	230e      	movs	r3, #14
 800102e:	18fb      	adds	r3, r7, r3
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	18db      	adds	r3, r3, r3
 8001034:	b29b      	uxth	r3, r3
}
 8001036:	0018      	movs	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	b004      	add	sp, #16
 800103c:	bdb0      	pop	{r4, r5, r7, pc}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	08007888 	.word	0x08007888

08001044 <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
		cell_asic ic[] // A two dimensional array of the configuration data that will be written
		) {
 8001044:	b5b0      	push	{r4, r5, r7, lr}
 8001046:	b0c4      	sub	sp, #272	@ 0x110
 8001048:	af00      	add	r7, sp, #0
 800104a:	0002      	movs	r2, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	4b4a      	ldr	r3, [pc, #296]	@ (8001178 <LTC681x_wrcfg+0x134>)
 8001050:	2188      	movs	r1, #136	@ 0x88
 8001052:	0049      	lsls	r1, r1, #1
 8001054:	185b      	adds	r3, r3, r1
 8001056:	19db      	adds	r3, r3, r7
 8001058:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = { 0x00, 0x01 };
 800105a:	2384      	movs	r3, #132	@ 0x84
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	18fb      	adds	r3, r7, r3
 8001060:	2280      	movs	r2, #128	@ 0x80
 8001062:	0052      	lsls	r2, r2, #1
 8001064:	801a      	strh	r2, [r3, #0]
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 8001066:	2310      	movs	r3, #16
 8001068:	33ff      	adds	r3, #255	@ 0xff
 800106a:	18fb      	adds	r3, r7, r3
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
	uint8_t c_ic = 0;
 8001070:	2387      	movs	r3, #135	@ 0x87
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]

	uint8_t current_ic = 0;
 800107a:	200e      	movs	r0, #14
 800107c:	30ff      	adds	r0, #255	@ 0xff
 800107e:	183b      	adds	r3, r7, r0
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
	uint8_t data = 0;
 8001084:	2386      	movs	r3, #134	@ 0x86
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	18fb      	adds	r3, r7, r3
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
	for (current_ic = total_ic; current_ic > 0; current_ic--) {
 800108e:	183b      	adds	r3, r7, r0
 8001090:	4a39      	ldr	r2, [pc, #228]	@ (8001178 <LTC681x_wrcfg+0x134>)
 8001092:	1852      	adds	r2, r2, r1
 8001094:	19d2      	adds	r2, r2, r7
 8001096:	7812      	ldrb	r2, [r2, #0]
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	e055      	b.n	8001148 <LTC681x_wrcfg+0x104>
		if (ic->isospi_reverse == false) {
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	22bf      	movs	r2, #191	@ 0xbf
 80010a0:	5c9b      	ldrb	r3, [r3, r2]
 80010a2:	2201      	movs	r2, #1
 80010a4:	4053      	eors	r3, r2
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d008      	beq.n	80010be <LTC681x_wrcfg+0x7a>
			c_ic = current_ic;
 80010ac:	2387      	movs	r3, #135	@ 0x87
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	220e      	movs	r2, #14
 80010b4:	32ff      	adds	r2, #255	@ 0xff
 80010b6:	18ba      	adds	r2, r7, r2
 80010b8:	7812      	ldrb	r2, [r2, #0]
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	e010      	b.n	80010e0 <LTC681x_wrcfg+0x9c>
		} else {
			c_ic = total_ic - current_ic - 1;
 80010be:	4b2e      	ldr	r3, [pc, #184]	@ (8001178 <LTC681x_wrcfg+0x134>)
 80010c0:	2288      	movs	r2, #136	@ 0x88
 80010c2:	0052      	lsls	r2, r2, #1
 80010c4:	189b      	adds	r3, r3, r2
 80010c6:	19da      	adds	r2, r3, r7
 80010c8:	230e      	movs	r3, #14
 80010ca:	33ff      	adds	r3, #255	@ 0xff
 80010cc:	18fb      	adds	r3, r7, r3
 80010ce:	7812      	ldrb	r2, [r2, #0]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	2387      	movs	r3, #135	@ 0x87
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	18fb      	adds	r3, r7, r3
 80010dc:	3a01      	subs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
		}

		for (data = 0; data < 6; data++) {
 80010e0:	2386      	movs	r3, #134	@ 0x86
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	18fb      	adds	r3, r7, r3
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	e020      	b.n	800112e <LTC681x_wrcfg+0xea>
			write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 80010ec:	2387      	movs	r3, #135	@ 0x87
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	18fb      	adds	r3, r7, r3
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	22e8      	movs	r2, #232	@ 0xe8
 80010f6:	4353      	muls	r3, r2
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	18d1      	adds	r1, r2, r3
 80010fc:	2086      	movs	r0, #134	@ 0x86
 80010fe:	0040      	lsls	r0, r0, #1
 8001100:	183b      	adds	r3, r7, r0
 8001102:	781a      	ldrb	r2, [r3, #0]
 8001104:	2410      	movs	r4, #16
 8001106:	34ff      	adds	r4, #255	@ 0xff
 8001108:	193b      	adds	r3, r7, r4
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	5c89      	ldrb	r1, [r1, r2]
 800110e:	4a1b      	ldr	r2, [pc, #108]	@ (800117c <LTC681x_wrcfg+0x138>)
 8001110:	2588      	movs	r5, #136	@ 0x88
 8001112:	006d      	lsls	r5, r5, #1
 8001114:	1952      	adds	r2, r2, r5
 8001116:	19d2      	adds	r2, r2, r7
 8001118:	54d1      	strb	r1, [r2, r3]
			write_count++;
 800111a:	193b      	adds	r3, r7, r4
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	193b      	adds	r3, r7, r4
 8001120:	3201      	adds	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]
		for (data = 0; data < 6; data++) {
 8001124:	183b      	adds	r3, r7, r0
 8001126:	781a      	ldrb	r2, [r3, #0]
 8001128:	183b      	adds	r3, r7, r0
 800112a:	3201      	adds	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	2386      	movs	r3, #134	@ 0x86
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	18fb      	adds	r3, r7, r3
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b05      	cmp	r3, #5
 8001138:	d9d8      	bls.n	80010ec <LTC681x_wrcfg+0xa8>
	for (current_ic = total_ic; current_ic > 0; current_ic--) {
 800113a:	210e      	movs	r1, #14
 800113c:	31ff      	adds	r1, #255	@ 0xff
 800113e:	187b      	adds	r3, r7, r1
 8001140:	781a      	ldrb	r2, [r3, #0]
 8001142:	187b      	adds	r3, r7, r1
 8001144:	3a01      	subs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
 8001148:	230e      	movs	r3, #14
 800114a:	33ff      	adds	r3, #255	@ 0xff
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1a3      	bne.n	800109c <LTC681x_wrcfg+0x58>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 8001154:	2308      	movs	r3, #8
 8001156:	18fa      	adds	r2, r7, r3
 8001158:	2384      	movs	r3, #132	@ 0x84
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	18f9      	adds	r1, r7, r3
 800115e:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <LTC681x_wrcfg+0x134>)
 8001160:	2088      	movs	r0, #136	@ 0x88
 8001162:	0040      	lsls	r0, r0, #1
 8001164:	181b      	adds	r3, r3, r0
 8001166:	19db      	adds	r3, r3, r7
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	0018      	movs	r0, r3
 800116c:	f7ff fd75 	bl	8000c5a <write_68>
}
 8001170:	46c0      	nop			@ (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b044      	add	sp, #272	@ 0x110
 8001176:	bdb0      	pop	{r4, r5, r7, pc}
 8001178:	fffffef7 	.word	0xfffffef7
 800117c:	fffffef8 	.word	0xfffffef8

08001180 <LTC681x_rdcfg>:
}

/* Read the LTC681x CFGA */
int8_t LTC681x_rdcfg(uint8_t total_ic, //Number of ICs in the system
		cell_asic ic[] // A two dimensional array that the function stores the read configuration data.
		) {
 8001180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001182:	b0c7      	sub	sp, #284	@ 0x11c
 8001184:	af00      	add	r7, sp, #0
 8001186:	0002      	movs	r2, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	4b78      	ldr	r3, [pc, #480]	@ (800136c <LTC681x_rdcfg+0x1ec>)
 800118c:	208c      	movs	r0, #140	@ 0x8c
 800118e:	0040      	lsls	r0, r0, #1
 8001190:	181b      	adds	r3, r3, r0
 8001192:	19db      	adds	r3, r3, r7
 8001194:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = { 0x00, 0x02 };
 8001196:	2184      	movs	r1, #132	@ 0x84
 8001198:	0049      	lsls	r1, r1, #1
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2280      	movs	r2, #128	@ 0x80
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	801a      	strh	r2, [r3, #0]
	uint8_t read_buffer[256];
	int8_t pec_error = 0;
 80011a2:	2410      	movs	r4, #16
 80011a4:	34ff      	adds	r4, #255	@ 0xff
 80011a6:	193b      	adds	r3, r7, r4
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
	uint16_t data_pec;
	uint16_t calc_pec;
	uint8_t c_ic = 0;
 80011ac:	2318      	movs	r3, #24
 80011ae:	33ff      	adds	r3, #255	@ 0xff
 80011b0:	18fb      	adds	r3, r7, r3
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]

	pec_error = read_68(total_ic, cmd, read_buffer);
 80011b6:	193c      	adds	r4, r7, r4
 80011b8:	2308      	movs	r3, #8
 80011ba:	18fa      	adds	r2, r7, r3
 80011bc:	1879      	adds	r1, r7, r1
 80011be:	4b6b      	ldr	r3, [pc, #428]	@ (800136c <LTC681x_rdcfg+0x1ec>)
 80011c0:	0005      	movs	r5, r0
 80011c2:	181b      	adds	r3, r3, r0
 80011c4:	19db      	adds	r3, r3, r7
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff fe0f 	bl	8000dec <read_68>
 80011ce:	0003      	movs	r3, r0
 80011d0:	7023      	strb	r3, [r4, #0]

	uint8_t current_ic = 0;
 80011d2:	218b      	movs	r1, #139	@ 0x8b
 80011d4:	0049      	lsls	r1, r1, #1
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
	int byte = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	2288      	movs	r2, #136	@ 0x88
 80011e0:	0052      	lsls	r2, r2, #1
 80011e2:	18ba      	adds	r2, r7, r2
 80011e4:	6013      	str	r3, [r2, #0]
	for (current_ic = total_ic; current_ic > 0; current_ic--) {
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	4a60      	ldr	r2, [pc, #384]	@ (800136c <LTC681x_rdcfg+0x1ec>)
 80011ea:	1952      	adds	r2, r2, r5
 80011ec:	19d2      	adds	r2, r2, r7
 80011ee:	7812      	ldrb	r2, [r2, #0]
 80011f0:	701a      	strb	r2, [r3, #0]
 80011f2:	e09f      	b.n	8001334 <LTC681x_rdcfg+0x1b4>
		if (ic->isospi_reverse == false) {
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	22bf      	movs	r2, #191	@ 0xbf
 80011f8:	5c9b      	ldrb	r3, [r3, r2]
 80011fa:	2201      	movs	r2, #1
 80011fc:	4053      	eors	r3, r2
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b00      	cmp	r3, #0
 8001202:	d008      	beq.n	8001216 <LTC681x_rdcfg+0x96>
			c_ic = current_ic;
 8001204:	2318      	movs	r3, #24
 8001206:	33ff      	adds	r3, #255	@ 0xff
 8001208:	18fb      	adds	r3, r7, r3
 800120a:	228b      	movs	r2, #139	@ 0x8b
 800120c:	0052      	lsls	r2, r2, #1
 800120e:	18ba      	adds	r2, r7, r2
 8001210:	7812      	ldrb	r2, [r2, #0]
 8001212:	701a      	strb	r2, [r3, #0]
 8001214:	e010      	b.n	8001238 <LTC681x_rdcfg+0xb8>
		} else {
			c_ic = total_ic - current_ic - 1;
 8001216:	4b55      	ldr	r3, [pc, #340]	@ (800136c <LTC681x_rdcfg+0x1ec>)
 8001218:	228c      	movs	r2, #140	@ 0x8c
 800121a:	0052      	lsls	r2, r2, #1
 800121c:	189b      	adds	r3, r3, r2
 800121e:	19da      	adds	r2, r3, r7
 8001220:	238b      	movs	r3, #139	@ 0x8b
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	7812      	ldrb	r2, [r2, #0]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	b2da      	uxtb	r2, r3
 800122e:	2318      	movs	r3, #24
 8001230:	33ff      	adds	r3, #255	@ 0xff
 8001232:	18fb      	adds	r3, r7, r3
 8001234:	3a01      	subs	r2, #1
 8001236:	701a      	strb	r2, [r3, #0]
		}

		for (byte = 0; byte < 8; byte++) {
 8001238:	2300      	movs	r3, #0
 800123a:	2288      	movs	r2, #136	@ 0x88
 800123c:	0052      	lsls	r2, r2, #1
 800123e:	18ba      	adds	r2, r7, r2
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e022      	b.n	800128a <LTC681x_rdcfg+0x10a>
			ic[c_ic].config.rx_data[byte] =
					read_buffer[byte + (8 * current_ic)];
 8001244:	238b      	movs	r3, #139	@ 0x8b
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	00da      	lsls	r2, r3, #3
 800124e:	2088      	movs	r0, #136	@ 0x88
 8001250:	0040      	lsls	r0, r0, #1
 8001252:	183b      	adds	r3, r7, r0
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	18d3      	adds	r3, r2, r3
			ic[c_ic].config.rx_data[byte] =
 8001258:	2218      	movs	r2, #24
 800125a:	32ff      	adds	r2, #255	@ 0xff
 800125c:	18ba      	adds	r2, r7, r2
 800125e:	7812      	ldrb	r2, [r2, #0]
 8001260:	21e8      	movs	r1, #232	@ 0xe8
 8001262:	434a      	muls	r2, r1
 8001264:	6839      	ldr	r1, [r7, #0]
 8001266:	188a      	adds	r2, r1, r2
					read_buffer[byte + (8 * current_ic)];
 8001268:	4941      	ldr	r1, [pc, #260]	@ (8001370 <LTC681x_rdcfg+0x1f0>)
 800126a:	248c      	movs	r4, #140	@ 0x8c
 800126c:	0064      	lsls	r4, r4, #1
 800126e:	1909      	adds	r1, r1, r4
 8001270:	19c9      	adds	r1, r1, r7
 8001272:	5cc9      	ldrb	r1, [r1, r3]
			ic[c_ic].config.rx_data[byte] =
 8001274:	183b      	adds	r3, r7, r0
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	18d3      	adds	r3, r2, r3
 800127a:	3306      	adds	r3, #6
 800127c:	1c0a      	adds	r2, r1, #0
 800127e:	701a      	strb	r2, [r3, #0]
		for (byte = 0; byte < 8; byte++) {
 8001280:	183b      	adds	r3, r7, r0
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	183a      	adds	r2, r7, r0
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	2388      	movs	r3, #136	@ 0x88
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	18fb      	adds	r3, r7, r3
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b07      	cmp	r3, #7
 8001294:	ddd6      	ble.n	8001244 <LTC681x_rdcfg+0xc4>
		}

		calc_pec = pec15_calc(6, &read_buffer[8 * current_ic]);
 8001296:	258b      	movs	r5, #139	@ 0x8b
 8001298:	006d      	lsls	r5, r5, #1
 800129a:	197b      	adds	r3, r7, r5
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	2208      	movs	r2, #8
 80012a2:	18ba      	adds	r2, r7, r2
 80012a4:	18d3      	adds	r3, r2, r3
 80012a6:	2686      	movs	r6, #134	@ 0x86
 80012a8:	0076      	lsls	r6, r6, #1
 80012aa:	19bc      	adds	r4, r7, r6
 80012ac:	0019      	movs	r1, r3
 80012ae:	2006      	movs	r0, #6
 80012b0:	f7ff fe7c 	bl	8000fac <pec15_calc>
 80012b4:	0003      	movs	r3, r0
 80012b6:	8023      	strh	r3, [r4, #0]
		data_pec = read_buffer[7 + (8 * current_ic)]
 80012b8:	197b      	adds	r3, r7, r5
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	3307      	adds	r3, #7
 80012c0:	4a2b      	ldr	r2, [pc, #172]	@ (8001370 <LTC681x_rdcfg+0x1f0>)
 80012c2:	208c      	movs	r0, #140	@ 0x8c
 80012c4:	0040      	lsls	r0, r0, #1
 80012c6:	1812      	adds	r2, r2, r0
 80012c8:	19d2      	adds	r2, r2, r7
 80012ca:	5cd3      	ldrb	r3, [r2, r3]
 80012cc:	b21a      	sxth	r2, r3
				| (read_buffer[6 + (8 * current_ic)] << 8);
 80012ce:	197b      	adds	r3, r7, r5
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	3306      	adds	r3, #6
 80012d6:	4926      	ldr	r1, [pc, #152]	@ (8001370 <LTC681x_rdcfg+0x1f0>)
 80012d8:	1809      	adds	r1, r1, r0
 80012da:	19c9      	adds	r1, r1, r7
 80012dc:	5ccb      	ldrb	r3, [r1, r3]
 80012de:	b21b      	sxth	r3, r3
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	4313      	orrs	r3, r2
 80012e6:	b21a      	sxth	r2, r3
		data_pec = read_buffer[7 + (8 * current_ic)]
 80012e8:	2185      	movs	r1, #133	@ 0x85
 80012ea:	0049      	lsls	r1, r1, #1
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	801a      	strh	r2, [r3, #0]
		if (calc_pec != data_pec) {
 80012f0:	19ba      	adds	r2, r7, r6
 80012f2:	187b      	adds	r3, r7, r1
 80012f4:	8812      	ldrh	r2, [r2, #0]
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d00a      	beq.n	8001312 <LTC681x_rdcfg+0x192>
			ic[c_ic].config.rx_pec_match = 1;
 80012fc:	2318      	movs	r3, #24
 80012fe:	33ff      	adds	r3, #255	@ 0xff
 8001300:	18fb      	adds	r3, r7, r3
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	22e8      	movs	r2, #232	@ 0xe8
 8001306:	4353      	muls	r3, r2
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	18d3      	adds	r3, r2, r3
 800130c:	2201      	movs	r2, #1
 800130e:	739a      	strb	r2, [r3, #14]
 8001310:	e009      	b.n	8001326 <LTC681x_rdcfg+0x1a6>
		} else
			ic[c_ic].config.rx_pec_match = 0;
 8001312:	2318      	movs	r3, #24
 8001314:	33ff      	adds	r3, #255	@ 0xff
 8001316:	18fb      	adds	r3, r7, r3
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	22e8      	movs	r2, #232	@ 0xe8
 800131c:	4353      	muls	r3, r2
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	18d3      	adds	r3, r2, r3
 8001322:	2200      	movs	r2, #0
 8001324:	739a      	strb	r2, [r3, #14]
	for (current_ic = total_ic; current_ic > 0; current_ic--) {
 8001326:	218b      	movs	r1, #139	@ 0x8b
 8001328:	0049      	lsls	r1, r1, #1
 800132a:	187b      	adds	r3, r7, r1
 800132c:	781a      	ldrb	r2, [r3, #0]
 800132e:	187b      	adds	r3, r7, r1
 8001330:	3a01      	subs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]
 8001334:	238b      	movs	r3, #139	@ 0x8b
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	18fb      	adds	r3, r7, r3
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d000      	beq.n	8001342 <LTC681x_rdcfg+0x1c2>
 8001340:	e758      	b.n	80011f4 <LTC681x_rdcfg+0x74>
	}
	LTC681x_check_pec(total_ic, CFGR, ic);
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	4b09      	ldr	r3, [pc, #36]	@ (800136c <LTC681x_rdcfg+0x1ec>)
 8001346:	218c      	movs	r1, #140	@ 0x8c
 8001348:	0049      	lsls	r1, r1, #1
 800134a:	185b      	adds	r3, r3, r1
 800134c:	19db      	adds	r3, r3, r7
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2100      	movs	r1, #0
 8001352:	0018      	movs	r0, r3
 8001354:	f000 fc3e 	bl	8001bd4 <LTC681x_check_pec>

	return (pec_error);
 8001358:	2310      	movs	r3, #16
 800135a:	33ff      	adds	r3, #255	@ 0xff
 800135c:	18fb      	adds	r3, r7, r3
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b25b      	sxtb	r3, r3
}
 8001362:	0018      	movs	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	b047      	add	sp, #284	@ 0x11c
 8001368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800136a:	46c0      	nop			@ (mov r8, r8)
 800136c:	fffffeef 	.word	0xfffffeef
 8001370:	fffffef0 	.word	0xfffffef0

08001374 <LTC681x_adcv>:

/* Starts ADC conversion for cell voltage */
void LTC681x_adcv(uint8_t MD, //ADC Mode
		uint8_t DCP, //Discharge Permit
		uint8_t CH //Cell Channels to be measured
		) {
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	0004      	movs	r4, r0
 800137c:	0008      	movs	r0, r1
 800137e:	0011      	movs	r1, r2
 8001380:	1dfb      	adds	r3, r7, #7
 8001382:	1c22      	adds	r2, r4, #0
 8001384:	701a      	strb	r2, [r3, #0]
 8001386:	1dbb      	adds	r3, r7, #6
 8001388:	1c02      	adds	r2, r0, #0
 800138a:	701a      	strb	r2, [r3, #0]
 800138c:	1d7b      	adds	r3, r7, #5
 800138e:	1c0a      	adds	r2, r1, #0
 8001390:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	105b      	asrs	r3, r3, #1
 8001398:	b2da      	uxtb	r2, r3
 800139a:	200f      	movs	r0, #15
 800139c:	183b      	adds	r3, r7, r0
 800139e:	2101      	movs	r1, #1
 80013a0:	400a      	ands	r2, r1
 80013a2:	701a      	strb	r2, [r3, #0]
	cmd[0] = md_bits + 0x02;
 80013a4:	0001      	movs	r1, r0
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	3302      	adds	r3, #2
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	200c      	movs	r0, #12
 80013b0:	183b      	adds	r3, r7, r0
 80013b2:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 80013b4:	187b      	adds	r3, r7, r1
 80013b6:	1dfa      	adds	r2, r7, #7
 80013b8:	7812      	ldrb	r2, [r2, #0]
 80013ba:	01d2      	lsls	r2, r2, #7
 80013bc:	701a      	strb	r2, [r3, #0]
	cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 80013be:	1dbb      	adds	r3, r7, #6
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	187b      	adds	r3, r7, r1
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	18d3      	adds	r3, r2, r3
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	1d7b      	adds	r3, r7, #5
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	18d3      	adds	r3, r2, r3
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	3360      	adds	r3, #96	@ 0x60
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	183b      	adds	r3, r7, r0
 80013dc:	705a      	strb	r2, [r3, #1]

	cmd_68(cmd);
 80013de:	183b      	adds	r3, r7, r0
 80013e0:	0018      	movs	r0, r3
 80013e2:	f7ff fc08 	bl	8000bf6 <cmd_68>
}
 80013e6:	46c0      	nop			@ (mov r8, r8)
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b005      	add	sp, #20
 80013ec:	bd90      	pop	{r4, r7, pc}

080013ee <LTC681x_adax>:

/* Start ADC Conversion for GPIO and Vref2  */
void LTC681x_adax(uint8_t MD, //ADC Mode
		uint8_t CHG //GPIO Channels to be measured
		) {
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b084      	sub	sp, #16
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	0002      	movs	r2, r0
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	701a      	strb	r2, [r3, #0]
 80013fa:	1dbb      	adds	r3, r7, #6
 80013fc:	1c0a      	adds	r2, r1, #0
 80013fe:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[4];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8001400:	1dfb      	adds	r3, r7, #7
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	105b      	asrs	r3, r3, #1
 8001406:	b2da      	uxtb	r2, r3
 8001408:	200f      	movs	r0, #15
 800140a:	183b      	adds	r3, r7, r0
 800140c:	2101      	movs	r1, #1
 800140e:	400a      	ands	r2, r1
 8001410:	701a      	strb	r2, [r3, #0]
	cmd[0] = md_bits + 0x04;
 8001412:	0001      	movs	r1, r0
 8001414:	187b      	adds	r3, r7, r1
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	3304      	adds	r3, #4
 800141a:	b2da      	uxtb	r2, r3
 800141c:	2008      	movs	r0, #8
 800141e:	183b      	adds	r3, r7, r0
 8001420:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8001422:	187b      	adds	r3, r7, r1
 8001424:	1dfa      	adds	r2, r7, #7
 8001426:	7812      	ldrb	r2, [r2, #0]
 8001428:	01d2      	lsls	r2, r2, #7
 800142a:	701a      	strb	r2, [r3, #0]
	cmd[1] = md_bits + 0x60 + CHG;
 800142c:	187a      	adds	r2, r7, r1
 800142e:	1dbb      	adds	r3, r7, #6
 8001430:	7812      	ldrb	r2, [r2, #0]
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	18d3      	adds	r3, r2, r3
 8001436:	b2db      	uxtb	r3, r3
 8001438:	3360      	adds	r3, #96	@ 0x60
 800143a:	b2da      	uxtb	r2, r3
 800143c:	183b      	adds	r3, r7, r0
 800143e:	705a      	strb	r2, [r3, #1]

	cmd_68(cmd);
 8001440:	183b      	adds	r3, r7, r0
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff fbd7 	bl	8000bf6 <cmd_68>
}
 8001448:	46c0      	nop			@ (mov r8, r8)
 800144a:	46bd      	mov	sp, r7
 800144c:	b004      	add	sp, #16
 800144e:	bd80      	pop	{r7, pc}

08001450 <LTC681x_rdcv>:
 and store the cell voltages in c_codes variable.
 */
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
		uint8_t total_ic, // The number of ICs in the system
		cell_asic *ic // Array of the parsed cell codes
		) {
 8001450:	b5b0      	push	{r4, r5, r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af02      	add	r7, sp, #8
 8001456:	603a      	str	r2, [r7, #0]
 8001458:	1dfb      	adds	r3, r7, #7
 800145a:	1c02      	adds	r2, r0, #0
 800145c:	701a      	strb	r2, [r3, #0]
 800145e:	1dbb      	adds	r3, r7, #6
 8001460:	1c0a      	adds	r2, r1, #0
 8001462:	701a      	strb	r2, [r3, #0]
	int8_t pec_error = 0;
 8001464:	2317      	movs	r3, #23
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
	uint8_t *cell_data;
	uint8_t c_ic = 0;
 800146c:	2316      	movs	r3, #22
 800146e:	18fb      	adds	r3, r7, r3
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
	cell_data = (uint8_t*) malloc((NUM_RX_BYT * total_ic) * sizeof(uint8_t));
 8001474:	1dbb      	adds	r3, r7, #6
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	0018      	movs	r0, r3
 800147c:	f005 f952 	bl	8006724 <malloc>
 8001480:	0003      	movs	r3, r0
 8001482:	60bb      	str	r3, [r7, #8]

	if (reg == 0) {
 8001484:	1dfb      	adds	r3, r7, #7
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d167      	bne.n	800155c <LTC681x_rdcv+0x10c>
		uint8_t cell_reg = 0;
 800148c:	2115      	movs	r1, #21
 800148e:	187b      	adds	r3, r7, r1
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
		int current_ic = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
		for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8001498:	187b      	adds	r3, r7, r1
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	e054      	b.n	800154a <LTC681x_rdcv+0xfa>
				{
			LTC681x_rdcv_reg(cell_reg, total_ic, cell_data);
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	1dbb      	adds	r3, r7, #6
 80014a4:	7819      	ldrb	r1, [r3, #0]
 80014a6:	2315      	movs	r3, #21
 80014a8:	18fb      	adds	r3, r7, r3
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	0018      	movs	r0, r3
 80014ae:	f000 f996 	bl	80017de <LTC681x_rdcv_reg>
			for (current_ic = 0; current_ic < total_ic; current_ic++) {
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	e03d      	b.n	8001534 <LTC681x_rdcv+0xe4>
				if (ic->isospi_reverse == false) {
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	22bf      	movs	r2, #191	@ 0xbf
 80014bc:	5c9b      	ldrb	r3, [r3, r2]
 80014be:	2201      	movs	r2, #1
 80014c0:	4053      	eors	r3, r2
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d004      	beq.n	80014d2 <LTC681x_rdcv+0x82>
					c_ic = current_ic;
 80014c8:	2316      	movs	r3, #22
 80014ca:	18fb      	adds	r3, r7, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	701a      	strb	r2, [r3, #0]
 80014d0:	e009      	b.n	80014e6 <LTC681x_rdcv+0x96>
				} else {
					c_ic = total_ic - current_ic - 1;
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	1dba      	adds	r2, r7, #6
 80014d8:	7812      	ldrb	r2, [r2, #0]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	2316      	movs	r3, #22
 80014e0:	18fb      	adds	r3, r7, r3
 80014e2:	3a01      	subs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
				}
				pec_error = pec_error
						+ parse_cells(current_ic, cell_reg, cell_data,
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	b2d8      	uxtb	r0, r3
								&ic[c_ic].cells.c_codes[0],
 80014ea:	2116      	movs	r1, #22
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	22e8      	movs	r2, #232	@ 0xe8
 80014f2:	4353      	muls	r3, r2
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	18d3      	adds	r3, r2, r3
						+ parse_cells(current_ic, cell_reg, cell_data,
 80014f8:	331e      	adds	r3, #30
 80014fa:	001d      	movs	r5, r3
								&ic[c_ic].cells.pec_match[0]);
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	22e8      	movs	r2, #232	@ 0xe8
 8001502:	4353      	muls	r3, r2
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	18d3      	adds	r3, r2, r3
						+ parse_cells(current_ic, cell_reg, cell_data,
 8001508:	3342      	adds	r3, #66	@ 0x42
 800150a:	68bc      	ldr	r4, [r7, #8]
 800150c:	2215      	movs	r2, #21
 800150e:	18ba      	adds	r2, r7, r2
 8001510:	7811      	ldrb	r1, [r2, #0]
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	002b      	movs	r3, r5
 8001516:	0022      	movs	r2, r4
 8001518:	f000 fa55 	bl	80019c6 <parse_cells>
 800151c:	0003      	movs	r3, r0
 800151e:	b2da      	uxtb	r2, r3
 8001520:	2117      	movs	r1, #23
 8001522:	187b      	adds	r3, r7, r1
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	18d3      	adds	r3, r2, r3
 8001528:	b2da      	uxtb	r2, r3
				pec_error = pec_error
 800152a:	187b      	adds	r3, r7, r1
 800152c:	701a      	strb	r2, [r3, #0]
			for (current_ic = 0; current_ic < total_ic; current_ic++) {
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	3301      	adds	r3, #1
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	1dbb      	adds	r3, r7, #6
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	429a      	cmp	r2, r3
 800153c:	dbbc      	blt.n	80014b8 <LTC681x_rdcv+0x68>
		for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 800153e:	2115      	movs	r1, #21
 8001540:	187b      	adds	r3, r7, r1
 8001542:	781a      	ldrb	r2, [r3, #0]
 8001544:	187b      	adds	r3, r7, r1
 8001546:	3201      	adds	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	22df      	movs	r2, #223	@ 0xdf
 800154e:	5c9b      	ldrb	r3, [r3, r2]
 8001550:	2215      	movs	r2, #21
 8001552:	18ba      	adds	r2, r7, r2
 8001554:	7812      	ldrb	r2, [r2, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d9a2      	bls.n	80014a0 <LTC681x_rdcv+0x50>
 800155a:	e053      	b.n	8001604 <LTC681x_rdcv+0x1b4>
			}
		}
	}

	else {
		LTC681x_rdcv_reg(reg, total_ic, cell_data);
 800155c:	68ba      	ldr	r2, [r7, #8]
 800155e:	1dbb      	adds	r3, r7, #6
 8001560:	7819      	ldrb	r1, [r3, #0]
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	0018      	movs	r0, r3
 8001568:	f000 f939 	bl	80017de <LTC681x_rdcv_reg>

		int current_ic = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
		for (current_ic = 0; current_ic < total_ic; current_ic++) {
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	e041      	b.n	80015fa <LTC681x_rdcv+0x1aa>
			if (ic->isospi_reverse == false) {
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	22bf      	movs	r2, #191	@ 0xbf
 800157a:	5c9b      	ldrb	r3, [r3, r2]
 800157c:	2201      	movs	r2, #1
 800157e:	4053      	eors	r3, r2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d004      	beq.n	8001590 <LTC681x_rdcv+0x140>
				c_ic = current_ic;
 8001586:	2316      	movs	r3, #22
 8001588:	18fb      	adds	r3, r7, r3
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	701a      	strb	r2, [r3, #0]
 800158e:	e009      	b.n	80015a4 <LTC681x_rdcv+0x154>
			} else {
				c_ic = total_ic - current_ic - 1;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	1dba      	adds	r2, r7, #6
 8001596:	7812      	ldrb	r2, [r2, #0]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	b2da      	uxtb	r2, r3
 800159c:	2316      	movs	r3, #22
 800159e:	18fb      	adds	r3, r7, r3
 80015a0:	3a01      	subs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]
			}
			pec_error = pec_error
					+ parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	b2d8      	uxtb	r0, r3
 80015a8:	2116      	movs	r1, #22
 80015aa:	187b      	adds	r3, r7, r1
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	001a      	movs	r2, r3
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	189c      	adds	r4, r3, r2
							&ic[c_ic].cells.c_codes[0],
 80015b6:	187b      	adds	r3, r7, r1
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	22e8      	movs	r2, #232	@ 0xe8
 80015bc:	4353      	muls	r3, r2
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	18d3      	adds	r3, r2, r3
					+ parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 80015c2:	331e      	adds	r3, #30
 80015c4:	001d      	movs	r5, r3
							&ic[c_ic].cells.pec_match[0]);
 80015c6:	187b      	adds	r3, r7, r1
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	22e8      	movs	r2, #232	@ 0xe8
 80015cc:	4353      	muls	r3, r2
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	18d3      	adds	r3, r2, r3
					+ parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 80015d2:	3342      	adds	r3, #66	@ 0x42
 80015d4:	1dfa      	adds	r2, r7, #7
 80015d6:	7811      	ldrb	r1, [r2, #0]
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	002b      	movs	r3, r5
 80015dc:	0022      	movs	r2, r4
 80015de:	f000 f9f2 	bl	80019c6 <parse_cells>
 80015e2:	0003      	movs	r3, r0
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	2117      	movs	r1, #23
 80015e8:	187b      	adds	r3, r7, r1
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	18d3      	adds	r3, r2, r3
 80015ee:	b2da      	uxtb	r2, r3
			pec_error = pec_error
 80015f0:	187b      	adds	r3, r7, r1
 80015f2:	701a      	strb	r2, [r3, #0]
		for (current_ic = 0; current_ic < total_ic; current_ic++) {
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3301      	adds	r3, #1
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	1dbb      	adds	r3, r7, #6
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	429a      	cmp	r2, r3
 8001602:	dbb8      	blt.n	8001576 <LTC681x_rdcv+0x126>
		}
	}
	LTC681x_check_pec(total_ic, CELL, ic);
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	1dbb      	adds	r3, r7, #6
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2101      	movs	r1, #1
 800160c:	0018      	movs	r0, r3
 800160e:	f000 fae1 	bl	8001bd4 <LTC681x_check_pec>
	free(cell_data);
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	0018      	movs	r0, r3
 8001616:	f005 f88f 	bl	8006738 <free>

	return (pec_error);
 800161a:	2317      	movs	r3, #23
 800161c:	18fb      	adds	r3, r7, r3
 800161e:	781b      	ldrb	r3, [r3, #0]
}
 8001620:	0018      	movs	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	b006      	add	sp, #24
 8001626:	bdb0      	pop	{r4, r5, r7, pc}

08001628 <LTC681x_rdaux>:
 and store the gpio voltages in a_codes variable.
 */
int8_t LTC681x_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
		uint8_t total_ic, //The number of ICs in the system
		cell_asic *ic //A two dimensional array of the gpio voltage codes.
		) {
 8001628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162a:	b089      	sub	sp, #36	@ 0x24
 800162c:	af02      	add	r7, sp, #8
 800162e:	603a      	str	r2, [r7, #0]
 8001630:	1dfb      	adds	r3, r7, #7
 8001632:	1c02      	adds	r2, r0, #0
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	1dbb      	adds	r3, r7, #6
 8001638:	1c0a      	adds	r2, r1, #0
 800163a:	701a      	strb	r2, [r3, #0]
	uint8_t *data;
	int8_t pec_error = 0;
 800163c:	2317      	movs	r3, #23
 800163e:	18fb      	adds	r3, r7, r3
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
	uint8_t c_ic = 0;
 8001644:	2316      	movs	r3, #22
 8001646:	18fb      	adds	r3, r7, r3
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
	data = (uint8_t*) malloc((NUM_RX_BYT * total_ic) * sizeof(uint8_t));
 800164c:	1dbb      	adds	r3, r7, #6
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	0018      	movs	r0, r3
 8001654:	f005 f866 	bl	8006724 <malloc>
 8001658:	0003      	movs	r3, r0
 800165a:	60bb      	str	r3, [r7, #8]

	if (reg == 0) {
 800165c:	1dfb      	adds	r3, r7, #7
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d15f      	bne.n	8001724 <LTC681x_rdaux+0xfc>
		uint8_t gpio_reg = 0;
 8001664:	2315      	movs	r3, #21
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
		int current_ic = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
		for (gpio_reg; gpio_reg < ic[0].ic_reg.num_gpio_reg + 1;
 8001670:	e04f      	b.n	8001712 <LTC681x_rdaux+0xea>
				gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
				{
			LTC681x_rdaux_reg(gpio_reg, total_ic, data); //Reads the raw auxiliary register data into the data[] array
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	1dbb      	adds	r3, r7, #6
 8001676:	7819      	ldrb	r1, [r3, #0]
 8001678:	2315      	movs	r3, #21
 800167a:	18fb      	adds	r3, r7, r3
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	0018      	movs	r0, r3
 8001680:	f000 f92f 	bl	80018e2 <LTC681x_rdaux_reg>
			for (current_ic = 0; current_ic < total_ic; current_ic++) {
 8001684:	2300      	movs	r3, #0
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	e038      	b.n	80016fc <LTC681x_rdaux+0xd4>
				if (ic->isospi_reverse == false) {
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	22bf      	movs	r2, #191	@ 0xbf
 800168e:	5c9b      	ldrb	r3, [r3, r2]
 8001690:	2201      	movs	r2, #1
 8001692:	4053      	eors	r3, r2
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d004      	beq.n	80016a4 <LTC681x_rdaux+0x7c>
					c_ic = current_ic;
 800169a:	2316      	movs	r3, #22
 800169c:	18fb      	adds	r3, r7, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	701a      	strb	r2, [r3, #0]
 80016a2:	e009      	b.n	80016b8 <LTC681x_rdaux+0x90>
				} else {
					c_ic = total_ic - current_ic - 1;
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	1dba      	adds	r2, r7, #6
 80016aa:	7812      	ldrb	r2, [r2, #0]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	2316      	movs	r3, #22
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	3a01      	subs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
				}
				pec_error = parse_cells(current_ic, gpio_reg, data,
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	b2d8      	uxtb	r0, r3
						&ic[c_ic].aux.a_codes[0], &ic[c_ic].aux.pec_match[0]);
 80016bc:	2116      	movs	r1, #22
 80016be:	187b      	adds	r3, r7, r1
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	22e8      	movs	r2, #232	@ 0xe8
 80016c4:	4353      	muls	r3, r2
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	18d3      	adds	r3, r2, r3
				pec_error = parse_cells(current_ic, gpio_reg, data,
 80016ca:	3348      	adds	r3, #72	@ 0x48
 80016cc:	001e      	movs	r6, r3
						&ic[c_ic].aux.a_codes[0], &ic[c_ic].aux.pec_match[0]);
 80016ce:	187b      	adds	r3, r7, r1
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	22e8      	movs	r2, #232	@ 0xe8
 80016d4:	4353      	muls	r3, r2
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	18d3      	adds	r3, r2, r3
				pec_error = parse_cells(current_ic, gpio_reg, data,
 80016da:	335a      	adds	r3, #90	@ 0x5a
 80016dc:	2217      	movs	r2, #23
 80016de:	18bc      	adds	r4, r7, r2
 80016e0:	68bd      	ldr	r5, [r7, #8]
 80016e2:	2215      	movs	r2, #21
 80016e4:	18ba      	adds	r2, r7, r2
 80016e6:	7811      	ldrb	r1, [r2, #0]
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	0033      	movs	r3, r6
 80016ec:	002a      	movs	r2, r5
 80016ee:	f000 f96a 	bl	80019c6 <parse_cells>
 80016f2:	0003      	movs	r3, r0
 80016f4:	7023      	strb	r3, [r4, #0]
			for (current_ic = 0; current_ic < total_ic; current_ic++) {
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	3301      	adds	r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	1dbb      	adds	r3, r7, #6
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	429a      	cmp	r2, r3
 8001704:	dbc1      	blt.n	800168a <LTC681x_rdaux+0x62>
				gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 8001706:	2115      	movs	r1, #21
 8001708:	187b      	adds	r3, r7, r1
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	187b      	adds	r3, r7, r1
 800170e:	3201      	adds	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
		for (gpio_reg; gpio_reg < ic[0].ic_reg.num_gpio_reg + 1;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	22e0      	movs	r2, #224	@ 0xe0
 8001716:	5c9b      	ldrb	r3, [r3, r2]
 8001718:	2215      	movs	r2, #21
 800171a:	18ba      	adds	r2, r7, r2
 800171c:	7812      	ldrb	r2, [r2, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d9a7      	bls.n	8001672 <LTC681x_rdaux+0x4a>
 8001722:	e049      	b.n	80017b8 <LTC681x_rdaux+0x190>
			}
		}
	} else {
		LTC681x_rdaux_reg(reg, total_ic, data);
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	1dbb      	adds	r3, r7, #6
 8001728:	7819      	ldrb	r1, [r3, #0]
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	0018      	movs	r0, r3
 8001730:	f000 f8d7 	bl	80018e2 <LTC681x_rdaux_reg>

		int current_ic = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
		for (current_ic = 0; current_ic < total_ic; current_ic++) {
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	e037      	b.n	80017ae <LTC681x_rdaux+0x186>
			if (ic->isospi_reverse == false) {
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	22bf      	movs	r2, #191	@ 0xbf
 8001742:	5c9b      	ldrb	r3, [r3, r2]
 8001744:	2201      	movs	r2, #1
 8001746:	4053      	eors	r3, r2
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d004      	beq.n	8001758 <LTC681x_rdaux+0x130>
				c_ic = current_ic;
 800174e:	2316      	movs	r3, #22
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	701a      	strb	r2, [r3, #0]
 8001756:	e009      	b.n	800176c <LTC681x_rdaux+0x144>
			} else {
				c_ic = total_ic - current_ic - 1;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	1dba      	adds	r2, r7, #6
 800175e:	7812      	ldrb	r2, [r2, #0]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	b2da      	uxtb	r2, r3
 8001764:	2316      	movs	r3, #22
 8001766:	18fb      	adds	r3, r7, r3
 8001768:	3a01      	subs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
			}
			pec_error = parse_cells(current_ic, reg, data,
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	b2d8      	uxtb	r0, r3
					&ic[c_ic].aux.a_codes[0], &ic[c_ic].aux.pec_match[0]);
 8001770:	2116      	movs	r1, #22
 8001772:	187b      	adds	r3, r7, r1
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	22e8      	movs	r2, #232	@ 0xe8
 8001778:	4353      	muls	r3, r2
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	18d3      	adds	r3, r2, r3
			pec_error = parse_cells(current_ic, reg, data,
 800177e:	3348      	adds	r3, #72	@ 0x48
 8001780:	001e      	movs	r6, r3
					&ic[c_ic].aux.a_codes[0], &ic[c_ic].aux.pec_match[0]);
 8001782:	187b      	adds	r3, r7, r1
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	22e8      	movs	r2, #232	@ 0xe8
 8001788:	4353      	muls	r3, r2
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	18d3      	adds	r3, r2, r3
			pec_error = parse_cells(current_ic, reg, data,
 800178e:	335a      	adds	r3, #90	@ 0x5a
 8001790:	2217      	movs	r2, #23
 8001792:	18bc      	adds	r4, r7, r2
 8001794:	68bd      	ldr	r5, [r7, #8]
 8001796:	1dfa      	adds	r2, r7, #7
 8001798:	7811      	ldrb	r1, [r2, #0]
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	0033      	movs	r3, r6
 800179e:	002a      	movs	r2, r5
 80017a0:	f000 f911 	bl	80019c6 <parse_cells>
 80017a4:	0003      	movs	r3, r0
 80017a6:	7023      	strb	r3, [r4, #0]
		for (current_ic = 0; current_ic < total_ic; current_ic++) {
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3301      	adds	r3, #1
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	1dbb      	adds	r3, r7, #6
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dbc2      	blt.n	800173e <LTC681x_rdaux+0x116>
		}
	}
	LTC681x_check_pec(total_ic, AUX, ic);
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	1dbb      	adds	r3, r7, #6
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2102      	movs	r1, #2
 80017c0:	0018      	movs	r0, r3
 80017c2:	f000 fa07 	bl	8001bd4 <LTC681x_check_pec>
	free(data);
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	0018      	movs	r0, r3
 80017ca:	f004 ffb5 	bl	8006738 <free>

	return (pec_error);
 80017ce:	2317      	movs	r3, #23
 80017d0:	18fb      	adds	r3, r7, r3
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b25b      	sxtb	r3, r3
}
 80017d6:	0018      	movs	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	b007      	add	sp, #28
 80017dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017de <LTC681x_rdcv_reg>:

/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
		uint8_t total_ic, //the number of ICs in the
		uint8_t *data //An array of the unparsed cell codes
		) {
 80017de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e0:	b085      	sub	sp, #20
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	603a      	str	r2, [r7, #0]
 80017e6:	1dfb      	adds	r3, r7, #7
 80017e8:	1c02      	adds	r2, r0, #0
 80017ea:	701a      	strb	r2, [r3, #0]
 80017ec:	1dbb      	adds	r3, r7, #6
 80017ee:	1c0a      	adds	r2, r1, #0
 80017f0:	701a      	strb	r2, [r3, #0]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 80017f2:	230f      	movs	r3, #15
 80017f4:	18fb      	adds	r3, r7, r3
 80017f6:	2208      	movs	r2, #8
 80017f8:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //1: RDCVA
 80017fa:	1dfb      	adds	r3, r7, #7
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d107      	bne.n	8001812 <LTC681x_rdcv_reg+0x34>
			{
		cmd[1] = 0x04;
 8001802:	2108      	movs	r1, #8
 8001804:	187b      	adds	r3, r7, r1
 8001806:	2204      	movs	r2, #4
 8001808:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 800180a:	187b      	adds	r3, r7, r1
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
 8001810:	e03a      	b.n	8001888 <LTC681x_rdcv_reg+0xaa>
	} else if (reg == 2) //2: RDCVB
 8001812:	1dfb      	adds	r3, r7, #7
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d107      	bne.n	800182a <LTC681x_rdcv_reg+0x4c>
			{
		cmd[1] = 0x06;
 800181a:	2108      	movs	r1, #8
 800181c:	187b      	adds	r3, r7, r1
 800181e:	2206      	movs	r2, #6
 8001820:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 8001822:	187b      	adds	r3, r7, r1
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	e02e      	b.n	8001888 <LTC681x_rdcv_reg+0xaa>
	} else if (reg == 3) //3: RDCVC
 800182a:	1dfb      	adds	r3, r7, #7
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b03      	cmp	r3, #3
 8001830:	d107      	bne.n	8001842 <LTC681x_rdcv_reg+0x64>
			{
		cmd[1] = 0x08;
 8001832:	2108      	movs	r1, #8
 8001834:	187b      	adds	r3, r7, r1
 8001836:	2208      	movs	r2, #8
 8001838:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 800183a:	187b      	adds	r3, r7, r1
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	e022      	b.n	8001888 <LTC681x_rdcv_reg+0xaa>
	} else if (reg == 4) //4: RDCVD
 8001842:	1dfb      	adds	r3, r7, #7
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b04      	cmp	r3, #4
 8001848:	d107      	bne.n	800185a <LTC681x_rdcv_reg+0x7c>
			{
		cmd[1] = 0x0A;
 800184a:	2108      	movs	r1, #8
 800184c:	187b      	adds	r3, r7, r1
 800184e:	220a      	movs	r2, #10
 8001850:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 8001852:	187b      	adds	r3, r7, r1
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
 8001858:	e016      	b.n	8001888 <LTC681x_rdcv_reg+0xaa>
	} else if (reg == 5) //4: RDCVE
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b05      	cmp	r3, #5
 8001860:	d107      	bne.n	8001872 <LTC681x_rdcv_reg+0x94>
			{
		cmd[1] = 0x09;
 8001862:	2108      	movs	r1, #8
 8001864:	187b      	adds	r3, r7, r1
 8001866:	2209      	movs	r2, #9
 8001868:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 800186a:	187b      	adds	r3, r7, r1
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
 8001870:	e00a      	b.n	8001888 <LTC681x_rdcv_reg+0xaa>
	} else if (reg == 6) //4: RDCVF
 8001872:	1dfb      	adds	r3, r7, #7
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b06      	cmp	r3, #6
 8001878:	d106      	bne.n	8001888 <LTC681x_rdcv_reg+0xaa>
			{
		cmd[1] = 0x0B;
 800187a:	2108      	movs	r1, #8
 800187c:	187b      	adds	r3, r7, r1
 800187e:	220b      	movs	r2, #11
 8001880:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 8001882:	187b      	adds	r3, r7, r1
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
	}

	cmd_pec = pec15_calc(2, cmd);
 8001888:	260c      	movs	r6, #12
 800188a:	19bc      	adds	r4, r7, r6
 800188c:	2508      	movs	r5, #8
 800188e:	197b      	adds	r3, r7, r5
 8001890:	0019      	movs	r1, r3
 8001892:	2002      	movs	r0, #2
 8001894:	f7ff fb8a 	bl	8000fac <pec15_calc>
 8001898:	0003      	movs	r3, r0
 800189a:	8023      	strh	r3, [r4, #0]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800189c:	0031      	movs	r1, r6
 800189e:	187b      	adds	r3, r7, r1
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	197b      	adds	r3, r7, r5
 80018aa:	709a      	strb	r2, [r3, #2]
	cmd[3] = (uint8_t) (cmd_pec);
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	197b      	adds	r3, r7, r5
 80018b4:	70da      	strb	r2, [r3, #3]

	cs_low(CS_PIN);
 80018b6:	2004      	movs	r0, #4
 80018b8:	f000 fdf9 	bl	80024ae <cs_low>
	spi_write_read(cmd, 4, data, (REG_LEN * total_ic));
 80018bc:	230f      	movs	r3, #15
 80018be:	18fb      	adds	r3, r7, r3
 80018c0:	1dba      	adds	r2, r7, #6
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	4353      	muls	r3, r2
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	1978      	adds	r0, r7, r5
 80018ce:	2104      	movs	r1, #4
 80018d0:	f000 fe5c 	bl	800258c <spi_write_read>
	cs_high(CS_PIN);
 80018d4:	2004      	movs	r0, #4
 80018d6:	f000 fdfd 	bl	80024d4 <cs_high>
}
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	46bd      	mov	sp, r7
 80018de:	b005      	add	sp, #20
 80018e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018e2 <LTC681x_rdaux_reg>:
 the LTC681x_rdaux() command.
 */
void LTC681x_rdaux_reg(uint8_t reg, //Determines which GPIO voltage register is read back
		uint8_t total_ic, //The number of ICs in the system
		uint8_t *data //Array of the unparsed auxiliary codes
		) {
 80018e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e4:	b085      	sub	sp, #20
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	603a      	str	r2, [r7, #0]
 80018ea:	1dfb      	adds	r3, r7, #7
 80018ec:	1c02      	adds	r2, r0, #0
 80018ee:	701a      	strb	r2, [r3, #0]
 80018f0:	1dbb      	adds	r3, r7, #6
 80018f2:	1c0a      	adds	r2, r1, #0
 80018f4:	701a      	strb	r2, [r3, #0]
	const uint8_t REG_LEN = 8; // Number of bytes in the register + 2 bytes for the PEC
 80018f6:	230f      	movs	r3, #15
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	2208      	movs	r2, #8
 80018fc:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back auxiliary group A
 80018fe:	1dfb      	adds	r3, r7, #7
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d107      	bne.n	8001916 <LTC681x_rdaux_reg+0x34>
			{
		cmd[1] = 0x0C;
 8001906:	2108      	movs	r1, #8
 8001908:	187b      	adds	r3, r7, r1
 800190a:	220c      	movs	r2, #12
 800190c:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 800190e:	187b      	adds	r3, r7, r1
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	e02a      	b.n	800196c <LTC681x_rdaux_reg+0x8a>
	} else if (reg == 2)  //Read back auxiliary group B
 8001916:	1dfb      	adds	r3, r7, #7
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d107      	bne.n	800192e <LTC681x_rdaux_reg+0x4c>
			{
		cmd[1] = 0x0E;
 800191e:	2108      	movs	r1, #8
 8001920:	187b      	adds	r3, r7, r1
 8001922:	220e      	movs	r2, #14
 8001924:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 8001926:	187b      	adds	r3, r7, r1
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
 800192c:	e01e      	b.n	800196c <LTC681x_rdaux_reg+0x8a>
	} else if (reg == 3)  //Read back auxiliary group C
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d107      	bne.n	8001946 <LTC681x_rdaux_reg+0x64>
			{
		cmd[1] = 0x0D;
 8001936:	2108      	movs	r1, #8
 8001938:	187b      	adds	r3, r7, r1
 800193a:	220d      	movs	r2, #13
 800193c:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 800193e:	187b      	adds	r3, r7, r1
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	e012      	b.n	800196c <LTC681x_rdaux_reg+0x8a>
	} else if (reg == 4)  //Read back auxiliary group D
 8001946:	1dfb      	adds	r3, r7, #7
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b04      	cmp	r3, #4
 800194c:	d107      	bne.n	800195e <LTC681x_rdaux_reg+0x7c>
			{
		cmd[1] = 0x0F;
 800194e:	2108      	movs	r1, #8
 8001950:	187b      	adds	r3, r7, r1
 8001952:	220f      	movs	r2, #15
 8001954:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 8001956:	187b      	adds	r3, r7, r1
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
 800195c:	e006      	b.n	800196c <LTC681x_rdaux_reg+0x8a>
	} else          //Read back auxiliary group A
	{
		cmd[1] = 0x0C;
 800195e:	2108      	movs	r1, #8
 8001960:	187b      	adds	r3, r7, r1
 8001962:	220c      	movs	r2, #12
 8001964:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
 8001966:	187b      	adds	r3, r7, r1
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
	}

	cmd_pec = pec15_calc(2, cmd);
 800196c:	260c      	movs	r6, #12
 800196e:	19bc      	adds	r4, r7, r6
 8001970:	2508      	movs	r5, #8
 8001972:	197b      	adds	r3, r7, r5
 8001974:	0019      	movs	r1, r3
 8001976:	2002      	movs	r0, #2
 8001978:	f7ff fb18 	bl	8000fac <pec15_calc>
 800197c:	0003      	movs	r3, r0
 800197e:	8023      	strh	r3, [r4, #0]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001980:	0031      	movs	r1, r6
 8001982:	187b      	adds	r3, r7, r1
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	b29b      	uxth	r3, r3
 800198a:	b2da      	uxtb	r2, r3
 800198c:	197b      	adds	r3, r7, r5
 800198e:	709a      	strb	r2, [r3, #2]
	cmd[3] = (uint8_t) (cmd_pec);
 8001990:	187b      	adds	r3, r7, r1
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	197b      	adds	r3, r7, r5
 8001998:	70da      	strb	r2, [r3, #3]

	cs_low(CS_PIN);
 800199a:	2004      	movs	r0, #4
 800199c:	f000 fd87 	bl	80024ae <cs_low>
	spi_write_read(cmd, 4, data, (REG_LEN * total_ic));
 80019a0:	230f      	movs	r3, #15
 80019a2:	18fb      	adds	r3, r7, r3
 80019a4:	1dba      	adds	r2, r7, #6
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	7812      	ldrb	r2, [r2, #0]
 80019aa:	4353      	muls	r3, r2
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	1978      	adds	r0, r7, r5
 80019b2:	2104      	movs	r1, #4
 80019b4:	f000 fdea 	bl	800258c <spi_write_read>
	cs_high(CS_PIN);
 80019b8:	2004      	movs	r0, #4
 80019ba:	f000 fd8b 	bl	80024d4 <cs_high>
}
 80019be:	46c0      	nop			@ (mov r8, r8)
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b005      	add	sp, #20
 80019c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019c6 <parse_cells>:
int8_t parse_cells(uint8_t current_ic, // Current IC
		uint8_t cell_reg,  // Type of register
		uint8_t cell_data[], // Unparsed data
		uint16_t *cell_codes, // Parsed data
		uint8_t *ic_pec // PEC error
		) {
 80019c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c8:	b089      	sub	sp, #36	@ 0x24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60ba      	str	r2, [r7, #8]
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	240f      	movs	r4, #15
 80019d2:	193b      	adds	r3, r7, r4
 80019d4:	1c02      	adds	r2, r0, #0
 80019d6:	701a      	strb	r2, [r3, #0]
 80019d8:	230e      	movs	r3, #14
 80019da:	18fb      	adds	r3, r7, r3
 80019dc:	1c0a      	adds	r2, r1, #0
 80019de:	701a      	strb	r2, [r3, #0]
	const uint8_t BYT_IN_REG = 6;
 80019e0:	231c      	movs	r3, #28
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	2206      	movs	r2, #6
 80019e6:	701a      	strb	r2, [r3, #0]
	const uint8_t CELL_IN_REG = 3;
 80019e8:	231b      	movs	r3, #27
 80019ea:	18fb      	adds	r3, r7, r3
 80019ec:	2203      	movs	r2, #3
 80019ee:	701a      	strb	r2, [r3, #0]
	int8_t pec_error = 0;
 80019f0:	231f      	movs	r3, #31
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic * NUM_RX_BYT; //data counter
 80019f8:	231e      	movs	r3, #30
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	193a      	adds	r2, r7, r4
 80019fe:	7812      	ldrb	r2, [r2, #0]
 8001a00:	00d2      	lsls	r2, r2, #3
 8001a02:	701a      	strb	r2, [r3, #0]

	uint8_t current_cell = 0;
 8001a04:	211d      	movs	r1, #29
 8001a06:	187b      	adds	r3, r7, r1
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
	for (current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	e02e      	b.n	8001a72 <parse_cells+0xac>
			{			// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter]
 8001a14:	201e      	movs	r0, #30
 8001a16:	183b      	adds	r3, r7, r0
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	18d3      	adds	r3, r2, r3
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	0019      	movs	r1, r3
				+ (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 8001a22:	183b      	adds	r3, r7, r0
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	3301      	adds	r3, #1
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	18d3      	adds	r3, r2, r3
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	b29a      	uxth	r2, r3
		parsed_cell = cell_data[data_counter]
 8001a32:	2514      	movs	r5, #20
 8001a34:	197b      	adds	r3, r7, r5
 8001a36:	188a      	adds	r2, r1, r2
 8001a38:	801a      	strh	r2, [r3, #0]
													 // create the parsed code
		cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8001a3a:	241d      	movs	r4, #29
 8001a3c:	193b      	adds	r3, r7, r4
 8001a3e:	781a      	ldrb	r2, [r3, #0]
 8001a40:	230e      	movs	r3, #14
 8001a42:	18fb      	adds	r3, r7, r3
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	211b      	movs	r1, #27
 8001a4a:	1879      	adds	r1, r7, r1
 8001a4c:	7809      	ldrb	r1, [r1, #0]
 8001a4e:	434b      	muls	r3, r1
 8001a50:	18d3      	adds	r3, r2, r3
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	18d3      	adds	r3, r2, r3
 8001a58:	197a      	adds	r2, r7, r5
 8001a5a:	8812      	ldrh	r2, [r2, #0]
 8001a5c:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2; //Because the codes are two bytes, the data counter
 8001a5e:	183b      	adds	r3, r7, r0
 8001a60:	183a      	adds	r2, r7, r0
 8001a62:	7812      	ldrb	r2, [r2, #0]
 8001a64:	3202      	adds	r2, #2
 8001a66:	701a      	strb	r2, [r3, #0]
	for (current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8001a68:	193b      	adds	r3, r7, r4
 8001a6a:	781a      	ldrb	r2, [r3, #0]
 8001a6c:	193b      	adds	r3, r7, r4
 8001a6e:	3201      	adds	r2, #1
 8001a70:	701a      	strb	r2, [r3, #0]
 8001a72:	231d      	movs	r3, #29
 8001a74:	18fa      	adds	r2, r7, r3
 8001a76:	231b      	movs	r3, #27
 8001a78:	18fb      	adds	r3, r7, r3
 8001a7a:	7812      	ldrb	r2, [r2, #0]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d3c8      	bcc.n	8001a14 <parse_cells+0x4e>
										 //must increment by two for each parsed code
	}
	received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001a82:	211e      	movs	r1, #30
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	18d3      	adds	r3, r2, r3
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	187b      	adds	r3, r7, r1
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	68b9      	ldr	r1, [r7, #8]
 8001a9c:	18cb      	adds	r3, r1, r3
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	b21a      	sxth	r2, r3
 8001aa6:	2518      	movs	r5, #24
 8001aa8:	197b      	adds	r3, r7, r5
 8001aaa:	801a      	strh	r2, [r3, #0]
																				 //after the 6 cell voltage data bytes
	data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8001aac:	230f      	movs	r3, #15
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	001a      	movs	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	189a      	adds	r2, r3, r2
 8001aba:	2616      	movs	r6, #22
 8001abc:	19bc      	adds	r4, r7, r6
 8001abe:	231c      	movs	r3, #28
 8001ac0:	18fb      	adds	r3, r7, r3
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	0011      	movs	r1, r2
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f7ff fa70 	bl	8000fac <pec15_calc>
 8001acc:	0003      	movs	r3, r0
 8001ace:	8023      	strh	r3, [r4, #0]

	if (received_pec != data_pec) {
 8001ad0:	197a      	adds	r2, r7, r5
 8001ad2:	19bb      	adds	r3, r7, r6
 8001ad4:	8812      	ldrh	r2, [r2, #0]
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d00c      	beq.n	8001af6 <parse_cells+0x130>
		pec_error = 1; //The pec_error variable is simply set negative if any PEC errors
 8001adc:	231f      	movs	r3, #31
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
		ic_pec[cell_reg - 1] = 1;
 8001ae4:	230e      	movs	r3, #14
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001aee:	18d3      	adds	r3, r2, r3
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	e007      	b.n	8001b06 <parse_cells+0x140>
	} else {
		ic_pec[cell_reg - 1] = 0;
 8001af6:	230e      	movs	r3, #14
 8001af8:	18fb      	adds	r3, r7, r3
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b00:	18d3      	adds	r3, r2, r3
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
	}
	data_counter = data_counter + 2;
 8001b06:	221e      	movs	r2, #30
 8001b08:	18bb      	adds	r3, r7, r2
 8001b0a:	18ba      	adds	r2, r7, r2
 8001b0c:	7812      	ldrb	r2, [r2, #0]
 8001b0e:	3202      	adds	r2, #2
 8001b10:	701a      	strb	r2, [r3, #0]

	return (pec_error);
 8001b12:	231f      	movs	r3, #31
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	b25b      	sxtb	r3, r3
}
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b009      	add	sp, #36	@ 0x24
 8001b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001b24 <LTC681x_pollAdc>:

	return (adc_state);
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC681x_pollAdc() {
 8001b24:	b5b0      	push	{r4, r5, r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8001b2e:	230b      	movs	r3, #11
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
	uint8_t current_time = 0;
 8001b36:	230a      	movs	r3, #10
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	2207      	movs	r2, #7
 8001b42:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x14;
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	2214      	movs	r2, #20
 8001b48:	705a      	strb	r2, [r3, #1]
	cmd_pec = pec15_calc(2, cmd);
 8001b4a:	2508      	movs	r5, #8
 8001b4c:	197c      	adds	r4, r7, r5
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	0019      	movs	r1, r3
 8001b52:	2002      	movs	r0, #2
 8001b54:	f7ff fa2a 	bl	8000fac <pec15_calc>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	8023      	strh	r3, [r4, #0]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001b5c:	0029      	movs	r1, r5
 8001b5e:	187b      	adds	r3, r7, r1
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	0a1b      	lsrs	r3, r3, #8
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	709a      	strb	r2, [r3, #2]
	cmd[3] = (uint8_t) (cmd_pec);
 8001b6c:	187b      	adds	r3, r7, r1
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	70da      	strb	r2, [r3, #3]

	cs_low(CS_PIN);
 8001b76:	2004      	movs	r0, #4
 8001b78:	f000 fc99 	bl	80024ae <cs_low>
	spi_write_array(4, cmd);
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	0019      	movs	r1, r3
 8001b80:	2004      	movs	r0, #4
 8001b82:	f000 fcd5 	bl	8002530 <spi_write_array>
	while ((counter < 200000) && (finished == 0)) {
 8001b86:	e012      	b.n	8001bae <LTC681x_pollAdc+0x8a>
		current_time = spi_read_byte(0xff);
 8001b88:	250a      	movs	r5, #10
 8001b8a:	197c      	adds	r4, r7, r5
 8001b8c:	20ff      	movs	r0, #255	@ 0xff
 8001b8e:	f000 fd53 	bl	8002638 <spi_read_byte>
 8001b92:	0003      	movs	r3, r0
 8001b94:	7023      	strb	r3, [r4, #0]
		if (current_time > 0) {
 8001b96:	197b      	adds	r3, r7, r5
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d004      	beq.n	8001ba8 <LTC681x_pollAdc+0x84>
			finished = 1;
 8001b9e:	230b      	movs	r3, #11
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	701a      	strb	r2, [r3, #0]
 8001ba6:	e002      	b.n	8001bae <LTC681x_pollAdc+0x8a>
		} else {
			counter = counter + 10;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	330a      	adds	r3, #10
 8001bac:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0)) {
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4a07      	ldr	r2, [pc, #28]	@ (8001bd0 <LTC681x_pollAdc+0xac>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d804      	bhi.n	8001bc0 <LTC681x_pollAdc+0x9c>
 8001bb6:	230b      	movs	r3, #11
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0e3      	beq.n	8001b88 <LTC681x_pollAdc+0x64>
		}
	}
	cs_high(CS_PIN);
 8001bc0:	2004      	movs	r0, #4
 8001bc2:	f000 fc87 	bl	80024d4 <cs_high>

	return (counter);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
}
 8001bc8:	0018      	movs	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b004      	add	sp, #16
 8001bce:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd0:	00030d3f 	.word	0x00030d3f

08001bd4 <LTC681x_check_pec>:
/* Helper function that increments PEC counters */
void LTC681x_check_pec(uint8_t total_ic, //Number of ICs in the system
					   uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	603a      	str	r2, [r7, #0]
 8001bdc:	1dfb      	adds	r3, r7, #7
 8001bde:	1c02      	adds	r2, r0, #0
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	1dbb      	adds	r3, r7, #6
 8001be4:	1c0a      	adds	r2, r1, #0
 8001be6:	701a      	strb	r2, [r3, #0]
	int current_ic = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
	int i = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
	switch (reg)
 8001bf0:	1dbb      	adds	r3, r7, #6
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d900      	bls.n	8001bfa <LTC681x_check_pec+0x26>
 8001bf8:	e176      	b.n	8001ee8 <LTC681x_check_pec+0x314>
 8001bfa:	009a      	lsls	r2, r3, #2
 8001bfc:	4bbd      	ldr	r3, [pc, #756]	@ (8001ef4 <LTC681x_check_pec+0x320>)
 8001bfe:	18d3      	adds	r3, r2, r3
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	469f      	mov	pc, r3
	{
		case CFGR:
		  for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	e030      	b.n	8001c6c <LTC681x_check_pec+0x98>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].config.rx_pec_match;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	22e8      	movs	r2, #232	@ 0xe8
 8001c0e:	4353      	muls	r3, r2
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	18d3      	adds	r3, r2, r3
 8001c14:	22c0      	movs	r2, #192	@ 0xc0
 8001c16:	5a9a      	ldrh	r2, [r3, r2]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	21e8      	movs	r1, #232	@ 0xe8
 8001c1c:	434b      	muls	r3, r1
 8001c1e:	6839      	ldr	r1, [r7, #0]
 8001c20:	18cb      	adds	r3, r1, r3
 8001c22:	7b9b      	ldrb	r3, [r3, #14]
 8001c24:	0018      	movs	r0, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	21e8      	movs	r1, #232	@ 0xe8
 8001c2a:	434b      	muls	r3, r1
 8001c2c:	6839      	ldr	r1, [r7, #0]
 8001c2e:	18cb      	adds	r3, r1, r3
 8001c30:	1812      	adds	r2, r2, r0
 8001c32:	b291      	uxth	r1, r2
 8001c34:	22c0      	movs	r2, #192	@ 0xc0
 8001c36:	5299      	strh	r1, [r3, r2]
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].config.rx_pec_match;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	22e8      	movs	r2, #232	@ 0xe8
 8001c3c:	4353      	muls	r3, r2
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	18d3      	adds	r3, r2, r3
 8001c42:	22c2      	movs	r2, #194	@ 0xc2
 8001c44:	5a9a      	ldrh	r2, [r3, r2]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	21e8      	movs	r1, #232	@ 0xe8
 8001c4a:	434b      	muls	r3, r1
 8001c4c:	6839      	ldr	r1, [r7, #0]
 8001c4e:	18cb      	adds	r3, r1, r3
 8001c50:	7b9b      	ldrb	r3, [r3, #14]
 8001c52:	0018      	movs	r0, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	21e8      	movs	r1, #232	@ 0xe8
 8001c58:	434b      	muls	r3, r1
 8001c5a:	6839      	ldr	r1, [r7, #0]
 8001c5c:	18cb      	adds	r3, r1, r3
 8001c5e:	1812      	adds	r2, r2, r0
 8001c60:	b291      	uxth	r1, r2
 8001c62:	22c2      	movs	r2, #194	@ 0xc2
 8001c64:	5299      	strh	r1, [r3, r2]
		  for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	1dfb      	adds	r3, r7, #7
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	dbc9      	blt.n	8001c0a <LTC681x_check_pec+0x36>
		  }
		break;
 8001c76:	e138      	b.n	8001eea <LTC681x_check_pec+0x316>

		case CFGRB:
		  for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	e030      	b.n	8001ce0 <LTC681x_check_pec+0x10c>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	22e8      	movs	r2, #232	@ 0xe8
 8001c82:	4353      	muls	r3, r2
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	18d3      	adds	r3, r2, r3
 8001c88:	22c0      	movs	r2, #192	@ 0xc0
 8001c8a:	5a9a      	ldrh	r2, [r3, r2]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	21e8      	movs	r1, #232	@ 0xe8
 8001c90:	434b      	muls	r3, r1
 8001c92:	6839      	ldr	r1, [r7, #0]
 8001c94:	18cb      	adds	r3, r1, r3
 8001c96:	7f5b      	ldrb	r3, [r3, #29]
 8001c98:	0018      	movs	r0, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	21e8      	movs	r1, #232	@ 0xe8
 8001c9e:	434b      	muls	r3, r1
 8001ca0:	6839      	ldr	r1, [r7, #0]
 8001ca2:	18cb      	adds	r3, r1, r3
 8001ca4:	1812      	adds	r2, r2, r0
 8001ca6:	b291      	uxth	r1, r2
 8001ca8:	22c0      	movs	r2, #192	@ 0xc0
 8001caa:	5299      	strh	r1, [r3, r2]
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	22e8      	movs	r2, #232	@ 0xe8
 8001cb0:	4353      	muls	r3, r2
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	18d3      	adds	r3, r2, r3
 8001cb6:	22c2      	movs	r2, #194	@ 0xc2
 8001cb8:	5a9a      	ldrh	r2, [r3, r2]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	21e8      	movs	r1, #232	@ 0xe8
 8001cbe:	434b      	muls	r3, r1
 8001cc0:	6839      	ldr	r1, [r7, #0]
 8001cc2:	18cb      	adds	r3, r1, r3
 8001cc4:	7f5b      	ldrb	r3, [r3, #29]
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	21e8      	movs	r1, #232	@ 0xe8
 8001ccc:	434b      	muls	r3, r1
 8001cce:	6839      	ldr	r1, [r7, #0]
 8001cd0:	18cb      	adds	r3, r1, r3
 8001cd2:	1812      	adds	r2, r2, r0
 8001cd4:	b291      	uxth	r1, r2
 8001cd6:	22c2      	movs	r2, #194	@ 0xc2
 8001cd8:	5299      	strh	r1, [r3, r2]
		  for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	1dfb      	adds	r3, r7, #7
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	dbc9      	blt.n	8001c7e <LTC681x_check_pec+0xaa>
		  }
		break;
 8001cea:	e0fe      	b.n	8001eea <LTC681x_check_pec+0x316>
		case CELL:
		  for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	e04e      	b.n	8001d90 <LTC681x_check_pec+0x1bc>
		  {
			for (i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	e041      	b.n	8001d7c <LTC681x_check_pec+0x1a8>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	22e8      	movs	r2, #232	@ 0xe8
 8001cfc:	4353      	muls	r3, r2
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	18d3      	adds	r3, r2, r3
 8001d02:	22c0      	movs	r2, #192	@ 0xc0
 8001d04:	5a9a      	ldrh	r2, [r3, r2]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	21e8      	movs	r1, #232	@ 0xe8
 8001d0a:	434b      	muls	r3, r1
 8001d0c:	6839      	ldr	r1, [r7, #0]
 8001d0e:	18c9      	adds	r1, r1, r3
 8001d10:	2042      	movs	r0, #66	@ 0x42
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	18cb      	adds	r3, r1, r3
 8001d16:	181b      	adds	r3, r3, r0
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	21e8      	movs	r1, #232	@ 0xe8
 8001d20:	434b      	muls	r3, r1
 8001d22:	6839      	ldr	r1, [r7, #0]
 8001d24:	18cb      	adds	r3, r1, r3
 8001d26:	1812      	adds	r2, r2, r0
 8001d28:	b291      	uxth	r1, r2
 8001d2a:	22c0      	movs	r2, #192	@ 0xc0
 8001d2c:	5299      	strh	r1, [r3, r2]
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	22e8      	movs	r2, #232	@ 0xe8
 8001d32:	4353      	muls	r3, r2
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	18d2      	adds	r2, r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	3360      	adds	r3, #96	@ 0x60
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	18d3      	adds	r3, r2, r3
 8001d40:	3304      	adds	r3, #4
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	21e8      	movs	r1, #232	@ 0xe8
 8001d48:	434a      	muls	r2, r1
 8001d4a:	6839      	ldr	r1, [r7, #0]
 8001d4c:	1889      	adds	r1, r1, r2
 8001d4e:	2042      	movs	r0, #66	@ 0x42
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	188a      	adds	r2, r1, r2
 8001d54:	1812      	adds	r2, r2, r0
 8001d56:	7812      	ldrb	r2, [r2, #0]
 8001d58:	0010      	movs	r0, r2
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	21e8      	movs	r1, #232	@ 0xe8
 8001d5e:	434a      	muls	r2, r1
 8001d60:	6839      	ldr	r1, [r7, #0]
 8001d62:	188a      	adds	r2, r1, r2
 8001d64:	181b      	adds	r3, r3, r0
 8001d66:	b299      	uxth	r1, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	3360      	adds	r3, #96	@ 0x60
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	18d3      	adds	r3, r2, r3
 8001d70:	3304      	adds	r3, #4
 8001d72:	1c0a      	adds	r2, r1, #0
 8001d74:	801a      	strh	r2, [r3, #0]
			for (i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	22df      	movs	r2, #223	@ 0xdf
 8001d80:	5c9b      	ldrb	r3, [r3, r2]
 8001d82:	001a      	movs	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	4293      	cmp	r3, r2
 8001d88:	dbb6      	blt.n	8001cf8 <LTC681x_check_pec+0x124>
		  for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	1dfb      	adds	r3, r7, #7
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	dbab      	blt.n	8001cf2 <LTC681x_check_pec+0x11e>
			}
		  }
		break;
 8001d9a:	e0a6      	b.n	8001eea <LTC681x_check_pec+0x316>
		case AUX:
		  for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	e049      	b.n	8001e36 <LTC681x_check_pec+0x262>
		  {
			for (i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	e03c      	b.n	8001e22 <LTC681x_check_pec+0x24e>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	22e8      	movs	r2, #232	@ 0xe8
 8001dac:	4353      	muls	r3, r2
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	18d3      	adds	r3, r2, r3
 8001db2:	22c0      	movs	r2, #192	@ 0xc0
 8001db4:	5a9a      	ldrh	r2, [r3, r2]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	21e8      	movs	r1, #232	@ 0xe8
 8001dba:	434b      	muls	r3, r1
 8001dbc:	6839      	ldr	r1, [r7, #0]
 8001dbe:	18c9      	adds	r1, r1, r3
 8001dc0:	205a      	movs	r0, #90	@ 0x5a
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	18cb      	adds	r3, r1, r3
 8001dc6:	181b      	adds	r3, r3, r0
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	0018      	movs	r0, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	21e8      	movs	r1, #232	@ 0xe8
 8001dd0:	434b      	muls	r3, r1
 8001dd2:	6839      	ldr	r1, [r7, #0]
 8001dd4:	18cb      	adds	r3, r1, r3
 8001dd6:	1812      	adds	r2, r2, r0
 8001dd8:	b291      	uxth	r1, r2
 8001dda:	22c0      	movs	r2, #192	@ 0xc0
 8001ddc:	5299      	strh	r1, [r3, r2]
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	22e8      	movs	r2, #232	@ 0xe8
 8001de2:	4353      	muls	r3, r2
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	18d3      	adds	r3, r2, r3
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	3268      	adds	r2, #104	@ 0x68
 8001dec:	0052      	lsls	r2, r2, #1
 8001dee:	5ad2      	ldrh	r2, [r2, r3]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	21e8      	movs	r1, #232	@ 0xe8
 8001df4:	434b      	muls	r3, r1
 8001df6:	6839      	ldr	r1, [r7, #0]
 8001df8:	18c9      	adds	r1, r1, r3
 8001dfa:	205a      	movs	r0, #90	@ 0x5a
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	18cb      	adds	r3, r1, r3
 8001e00:	181b      	adds	r3, r3, r0
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	0018      	movs	r0, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	21e8      	movs	r1, #232	@ 0xe8
 8001e0a:	434b      	muls	r3, r1
 8001e0c:	6839      	ldr	r1, [r7, #0]
 8001e0e:	18cb      	adds	r3, r1, r3
 8001e10:	1812      	adds	r2, r2, r0
 8001e12:	b291      	uxth	r1, r2
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	3268      	adds	r2, #104	@ 0x68
 8001e18:	0052      	lsls	r2, r2, #1
 8001e1a:	52d1      	strh	r1, [r2, r3]
			for (i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	22e0      	movs	r2, #224	@ 0xe0
 8001e26:	5c9b      	ldrb	r3, [r3, r2]
 8001e28:	001a      	movs	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	dbbb      	blt.n	8001da8 <LTC681x_check_pec+0x1d4>
		  for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	3301      	adds	r3, #1
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	1dfb      	adds	r3, r7, #7
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	dbb0      	blt.n	8001da2 <LTC681x_check_pec+0x1ce>
			}
		  }

		break;
 8001e40:	e053      	b.n	8001eea <LTC681x_check_pec+0x316>
		case STAT:
		  for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	e049      	b.n	8001edc <LTC681x_check_pec+0x308>
		  {

			for (i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	e03c      	b.n	8001ec8 <LTC681x_check_pec+0x2f4>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	22e8      	movs	r2, #232	@ 0xe8
 8001e52:	4353      	muls	r3, r2
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	18d3      	adds	r3, r2, r3
 8001e58:	22c0      	movs	r2, #192	@ 0xc0
 8001e5a:	5a9a      	ldrh	r2, [r3, r2]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	21e8      	movs	r1, #232	@ 0xe8
 8001e60:	434b      	muls	r3, r1
 8001e62:	6839      	ldr	r1, [r7, #0]
 8001e64:	18c9      	adds	r1, r1, r3
 8001e66:	206b      	movs	r0, #107	@ 0x6b
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	18cb      	adds	r3, r1, r3
 8001e6c:	181b      	adds	r3, r3, r0
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	0018      	movs	r0, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	21e8      	movs	r1, #232	@ 0xe8
 8001e76:	434b      	muls	r3, r1
 8001e78:	6839      	ldr	r1, [r7, #0]
 8001e7a:	18cb      	adds	r3, r1, r3
 8001e7c:	1812      	adds	r2, r2, r0
 8001e7e:	b291      	uxth	r1, r2
 8001e80:	22c0      	movs	r2, #192	@ 0xc0
 8001e82:	5299      	strh	r1, [r3, r2]
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	22e8      	movs	r2, #232	@ 0xe8
 8001e88:	4353      	muls	r3, r2
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	18d3      	adds	r3, r2, r3
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	326c      	adds	r2, #108	@ 0x6c
 8001e92:	0052      	lsls	r2, r2, #1
 8001e94:	5ad2      	ldrh	r2, [r2, r3]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	21e8      	movs	r1, #232	@ 0xe8
 8001e9a:	434b      	muls	r3, r1
 8001e9c:	6839      	ldr	r1, [r7, #0]
 8001e9e:	18c9      	adds	r1, r1, r3
 8001ea0:	206b      	movs	r0, #107	@ 0x6b
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	18cb      	adds	r3, r1, r3
 8001ea6:	181b      	adds	r3, r3, r0
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	0018      	movs	r0, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	21e8      	movs	r1, #232	@ 0xe8
 8001eb0:	434b      	muls	r3, r1
 8001eb2:	6839      	ldr	r1, [r7, #0]
 8001eb4:	18cb      	adds	r3, r1, r3
 8001eb6:	1812      	adds	r2, r2, r0
 8001eb8:	b291      	uxth	r1, r2
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	326c      	adds	r2, #108	@ 0x6c
 8001ebe:	0052      	lsls	r2, r2, #1
 8001ec0:	52d1      	strh	r1, [r2, r3]
			for (i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	22e1      	movs	r2, #225	@ 0xe1
 8001ecc:	5c9b      	ldrb	r3, [r3, r2]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	dbbb      	blt.n	8001e4e <LTC681x_check_pec+0x27a>
		  for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	1dfb      	adds	r3, r7, #7
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	dbb0      	blt.n	8001e48 <LTC681x_check_pec+0x274>
			}
		  }
		break;
 8001ee6:	e000      	b.n	8001eea <LTC681x_check_pec+0x316>
		default:
		break;
 8001ee8:	46c0      	nop			@ (mov r8, r8)
	}
}
 8001eea:	46c0      	nop			@ (mov r8, r8)
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b004      	add	sp, #16
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			@ (mov r8, r8)
 8001ef4:	08007a88 	.word	0x08007a88

08001ef8 <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that stores the data
							 )
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	0002      	movs	r2, r0
 8001f00:	6039      	str	r1, [r7, #0]
 8001f02:	1dfb      	adds	r3, r7, #7
 8001f04:	701a      	strb	r2, [r3, #0]
	int current_ic = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
	int i = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60bb      	str	r3, [r7, #8]
	for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	e04d      	b.n	8001fb0 <LTC681x_reset_crc_count+0xb8>
	{
		ic[current_ic].crc_count.pec_count = 0;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	22e8      	movs	r2, #232	@ 0xe8
 8001f18:	4353      	muls	r3, r2
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	18d3      	adds	r3, r2, r3
 8001f1e:	22c0      	movs	r2, #192	@ 0xc0
 8001f20:	2100      	movs	r1, #0
 8001f22:	5299      	strh	r1, [r3, r2]
		ic[current_ic].crc_count.cfgr_pec = 0;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	22e8      	movs	r2, #232	@ 0xe8
 8001f28:	4353      	muls	r3, r2
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	18d3      	adds	r3, r2, r3
 8001f2e:	22c2      	movs	r2, #194	@ 0xc2
 8001f30:	2100      	movs	r1, #0
 8001f32:	5299      	strh	r1, [r3, r2]
		for (i=0; i<6; i++)
 8001f34:	2300      	movs	r3, #0
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	e00e      	b.n	8001f58 <LTC681x_reset_crc_count+0x60>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	22e8      	movs	r2, #232	@ 0xe8
 8001f3e:	4353      	muls	r3, r2
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	18d2      	adds	r2, r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	3360      	adds	r3, #96	@ 0x60
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	18d3      	adds	r3, r2, r3
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	2200      	movs	r2, #0
 8001f50:	801a      	strh	r2, [r3, #0]
		for (i=0; i<6; i++)
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	3301      	adds	r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b05      	cmp	r3, #5
 8001f5c:	dded      	ble.n	8001f3a <LTC681x_reset_crc_count+0x42>

		}
		for (i=0; i<4; i++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	e00c      	b.n	8001f7e <LTC681x_reset_crc_count+0x86>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	22e8      	movs	r2, #232	@ 0xe8
 8001f68:	4353      	muls	r3, r2
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	18d3      	adds	r3, r2, r3
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	3268      	adds	r2, #104	@ 0x68
 8001f72:	0052      	lsls	r2, r2, #1
 8001f74:	2100      	movs	r1, #0
 8001f76:	52d1      	strh	r1, [r2, r3]
		for (i=0; i<4; i++)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	ddef      	ble.n	8001f64 <LTC681x_reset_crc_count+0x6c>
		}
		for (i=0; i<2; i++)
 8001f84:	2300      	movs	r3, #0
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	e00c      	b.n	8001fa4 <LTC681x_reset_crc_count+0xac>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	22e8      	movs	r2, #232	@ 0xe8
 8001f8e:	4353      	muls	r3, r2
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	18d3      	adds	r3, r2, r3
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	326c      	adds	r2, #108	@ 0x6c
 8001f98:	0052      	lsls	r2, r2, #1
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	52d1      	strh	r1, [r2, r3]
		for (i=0; i<2; i++)
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	ddef      	ble.n	8001f8a <LTC681x_reset_crc_count+0x92>
	for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	3301      	adds	r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	1dfb      	adds	r3, r7, #7
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	dbac      	blt.n	8001f14 <LTC681x_reset_crc_count+0x1c>
		}
	}
}
 8001fba:	46c0      	nop			@ (mov r8, r8)
 8001fbc:	46c0      	nop			@ (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b004      	add	sp, #16
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	0002      	movs	r2, r0
 8001fcc:	6039      	str	r1, [r7, #0]
 8001fce:	1dfb      	adds	r3, r7, #7
 8001fd0:	701a      	strb	r2, [r3, #0]
	uint8_t current_ic = 0;
 8001fd2:	210f      	movs	r1, #15
 8001fd4:	187b      	adds	r3, r7, r1
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
	int j = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
	for (current_ic = 0; current_ic<total_ic;current_ic++)
 8001fde:	187b      	adds	r3, r7, r1
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
 8001fe4:	e019      	b.n	800201a <LTC681x_init_cfg+0x56>
	{
		for (j =0; j<6; j++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	e00d      	b.n	8002008 <LTC681x_init_cfg+0x44>
		{
		  ic[current_ic].config.tx_data[j] = 0;
 8001fec:	230f      	movs	r3, #15
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	22e8      	movs	r2, #232	@ 0xe8
 8001ff4:	4353      	muls	r3, r2
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	18d2      	adds	r2, r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	18d3      	adds	r3, r2, r3
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
		for (j =0; j<6; j++)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	3301      	adds	r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b05      	cmp	r3, #5
 800200c:	ddee      	ble.n	8001fec <LTC681x_init_cfg+0x28>
	for (current_ic = 0; current_ic<total_ic;current_ic++)
 800200e:	210f      	movs	r1, #15
 8002010:	187b      	adds	r3, r7, r1
 8002012:	781a      	ldrb	r2, [r3, #0]
 8002014:	187b      	adds	r3, r7, r1
 8002016:	3201      	adds	r2, #1
 8002018:	701a      	strb	r2, [r3, #0]
 800201a:	230f      	movs	r3, #15
 800201c:	18fa      	adds	r2, r7, r3
 800201e:	1dfb      	adds	r3, r7, #7
 8002020:	7812      	ldrb	r2, [r2, #0]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d3de      	bcc.n	8001fe6 <LTC681x_init_cfg+0x22>
		}
	}
}
 8002028:	46c0      	nop			@ (mov r8, r8)
 800202a:	46c0      	nop			@ (mov r8, r8)
 800202c:	46bd      	mov	sp, r7
 800202e:	b004      	add	sp, #16
 8002030:	bd80      	pop	{r7, pc}

08002032 <LTC681x_set_cfgr_refon>:
	LTC681x_set_cfgr_ov(nIC, ic, ov);
}

/* Helper function to set the REFON bit */
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	0011      	movs	r1, r2
 800203c:	1dfb      	adds	r3, r7, #7
 800203e:	1c02      	adds	r2, r0, #0
 8002040:	701a      	strb	r2, [r3, #0]
 8002042:	1dbb      	adds	r3, r7, #6
 8002044:	1c0a      	adds	r2, r1, #0
 8002046:	701a      	strb	r2, [r3, #0]
	if (refon) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x04;
 8002048:	1dbb      	adds	r3, r7, #6
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d011      	beq.n	8002074 <LTC681x_set_cfgr_refon+0x42>
 8002050:	1dfb      	adds	r3, r7, #7
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	22e8      	movs	r2, #232	@ 0xe8
 8002056:	4353      	muls	r3, r2
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	18d3      	adds	r3, r2, r3
 800205c:	781a      	ldrb	r2, [r3, #0]
 800205e:	1dfb      	adds	r3, r7, #7
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	21e8      	movs	r1, #232	@ 0xe8
 8002064:	434b      	muls	r3, r1
 8002066:	6839      	ldr	r1, [r7, #0]
 8002068:	18cb      	adds	r3, r1, r3
 800206a:	2104      	movs	r1, #4
 800206c:	430a      	orrs	r2, r1
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
}
 8002072:	e010      	b.n	8002096 <LTC681x_set_cfgr_refon+0x64>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
 8002074:	1dfb      	adds	r3, r7, #7
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	22e8      	movs	r2, #232	@ 0xe8
 800207a:	4353      	muls	r3, r2
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	18d3      	adds	r3, r2, r3
 8002080:	781a      	ldrb	r2, [r3, #0]
 8002082:	1dfb      	adds	r3, r7, #7
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	21e8      	movs	r1, #232	@ 0xe8
 8002088:	434b      	muls	r3, r1
 800208a:	6839      	ldr	r1, [r7, #0]
 800208c:	18cb      	adds	r3, r1, r3
 800208e:	2104      	movs	r1, #4
 8002090:	438a      	bics	r2, r1
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	701a      	strb	r2, [r3, #0]
}
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	b002      	add	sp, #8
 800209c:	bd80      	pop	{r7, pc}

0800209e <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, bool adcopt)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6039      	str	r1, [r7, #0]
 80020a6:	0011      	movs	r1, r2
 80020a8:	1dfb      	adds	r3, r7, #7
 80020aa:	1c02      	adds	r2, r0, #0
 80020ac:	701a      	strb	r2, [r3, #0]
 80020ae:	1dbb      	adds	r3, r7, #6
 80020b0:	1c0a      	adds	r2, r1, #0
 80020b2:	701a      	strb	r2, [r3, #0]
	if (adcopt) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x01;
 80020b4:	1dbb      	adds	r3, r7, #6
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d011      	beq.n	80020e0 <LTC681x_set_cfgr_adcopt+0x42>
 80020bc:	1dfb      	adds	r3, r7, #7
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	22e8      	movs	r2, #232	@ 0xe8
 80020c2:	4353      	muls	r3, r2
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	18d3      	adds	r3, r2, r3
 80020c8:	781a      	ldrb	r2, [r3, #0]
 80020ca:	1dfb      	adds	r3, r7, #7
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	21e8      	movs	r1, #232	@ 0xe8
 80020d0:	434b      	muls	r3, r1
 80020d2:	6839      	ldr	r1, [r7, #0]
 80020d4:	18cb      	adds	r3, r1, r3
 80020d6:	2101      	movs	r1, #1
 80020d8:	430a      	orrs	r2, r1
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
}
 80020de:	e010      	b.n	8002102 <LTC681x_set_cfgr_adcopt+0x64>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
 80020e0:	1dfb      	adds	r3, r7, #7
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	22e8      	movs	r2, #232	@ 0xe8
 80020e6:	4353      	muls	r3, r2
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	18d3      	adds	r3, r2, r3
 80020ec:	781a      	ldrb	r2, [r3, #0]
 80020ee:	1dfb      	adds	r3, r7, #7
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	21e8      	movs	r1, #232	@ 0xe8
 80020f4:	434b      	muls	r3, r1
 80020f6:	6839      	ldr	r1, [r7, #0]
 80020f8:	18cb      	adds	r3, r1, r3
 80020fa:	2101      	movs	r1, #1
 80020fc:	438a      	bics	r2, r1
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	701a      	strb	r2, [r3, #0]
}
 8002102:	46c0      	nop			@ (mov r8, r8)
 8002104:	46bd      	mov	sp, r7
 8002106:	b002      	add	sp, #8
 8002108:	bd80      	pop	{r7, pc}

0800210a <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic,bool gpio[5])
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	230f      	movs	r3, #15
 8002116:	18fb      	adds	r3, r7, r3
 8002118:	1c02      	adds	r2, r0, #0
 800211a:	701a      	strb	r2, [r3, #0]
	int i = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
	for (i =0; i<5; i++)
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	e03d      	b.n	80021a2 <LTC681x_set_cfgr_gpio+0x98>
	{
		if (gpio[i])ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|(0x01<<(i+3));
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	18d3      	adds	r3, r2, r3
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d019      	beq.n	8002166 <LTC681x_set_cfgr_gpio+0x5c>
 8002132:	200f      	movs	r0, #15
 8002134:	183b      	adds	r3, r7, r0
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	22e8      	movs	r2, #232	@ 0xe8
 800213a:	4353      	muls	r3, r2
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	18d3      	adds	r3, r2, r3
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b25a      	sxtb	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3303      	adds	r3, #3
 8002148:	2101      	movs	r1, #1
 800214a:	4099      	lsls	r1, r3
 800214c:	000b      	movs	r3, r1
 800214e:	b25b      	sxtb	r3, r3
 8002150:	4313      	orrs	r3, r2
 8002152:	b259      	sxtb	r1, r3
 8002154:	183b      	adds	r3, r7, r0
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	22e8      	movs	r2, #232	@ 0xe8
 800215a:	4353      	muls	r3, r2
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	18d3      	adds	r3, r2, r3
 8002160:	b2ca      	uxtb	r2, r1
 8002162:	701a      	strb	r2, [r3, #0]
 8002164:	e01a      	b.n	800219c <LTC681x_set_cfgr_gpio+0x92>
		else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&(~(0x01<<(i+3)));
 8002166:	200f      	movs	r0, #15
 8002168:	183b      	adds	r3, r7, r0
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	22e8      	movs	r2, #232	@ 0xe8
 800216e:	4353      	muls	r3, r2
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	18d3      	adds	r3, r2, r3
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	b25b      	sxtb	r3, r3
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	3203      	adds	r2, #3
 800217c:	2101      	movs	r1, #1
 800217e:	4091      	lsls	r1, r2
 8002180:	000a      	movs	r2, r1
 8002182:	b252      	sxtb	r2, r2
 8002184:	43d2      	mvns	r2, r2
 8002186:	b252      	sxtb	r2, r2
 8002188:	4013      	ands	r3, r2
 800218a:	b259      	sxtb	r1, r3
 800218c:	183b      	adds	r3, r7, r0
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	22e8      	movs	r2, #232	@ 0xe8
 8002192:	4353      	muls	r3, r2
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	18d3      	adds	r3, r2, r3
 8002198:	b2ca      	uxtb	r2, r1
 800219a:	701a      	strb	r2, [r3, #0]
	for (i =0; i<5; i++)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	3301      	adds	r3, #1
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	ddbe      	ble.n	8002126 <LTC681x_set_cfgr_gpio+0x1c>
	}
}
 80021a8:	46c0      	nop			@ (mov r8, r8)
 80021aa:	46c0      	nop			@ (mov r8, r8)
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b006      	add	sp, #24
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic,bool dcc[12])
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	230f      	movs	r3, #15
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	1c02      	adds	r2, r0, #0
 80021c2:	701a      	strb	r2, [r3, #0]
	int i = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
	for (i =0; i<8; i++)
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	e03b      	b.n	8002246 <LTC681x_set_cfgr_dis+0x94>
	{
		if (dcc[i])ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]|(0x01<<i);
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	18d3      	adds	r3, r2, r3
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d018      	beq.n	800220c <LTC681x_set_cfgr_dis+0x5a>
 80021da:	200f      	movs	r0, #15
 80021dc:	183b      	adds	r3, r7, r0
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	22e8      	movs	r2, #232	@ 0xe8
 80021e2:	4353      	muls	r3, r2
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	18d3      	adds	r3, r2, r3
 80021e8:	791b      	ldrb	r3, [r3, #4]
 80021ea:	b25a      	sxtb	r2, r3
 80021ec:	2101      	movs	r1, #1
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	4099      	lsls	r1, r3
 80021f2:	000b      	movs	r3, r1
 80021f4:	b25b      	sxtb	r3, r3
 80021f6:	4313      	orrs	r3, r2
 80021f8:	b259      	sxtb	r1, r3
 80021fa:	183b      	adds	r3, r7, r0
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	22e8      	movs	r2, #232	@ 0xe8
 8002200:	4353      	muls	r3, r2
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	18d3      	adds	r3, r2, r3
 8002206:	b2ca      	uxtb	r2, r1
 8002208:	711a      	strb	r2, [r3, #4]
 800220a:	e019      	b.n	8002240 <LTC681x_set_cfgr_dis+0x8e>
		else ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]& (~(0x01<<i));
 800220c:	200f      	movs	r0, #15
 800220e:	183b      	adds	r3, r7, r0
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	22e8      	movs	r2, #232	@ 0xe8
 8002214:	4353      	muls	r3, r2
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	18d3      	adds	r3, r2, r3
 800221a:	791b      	ldrb	r3, [r3, #4]
 800221c:	b25b      	sxtb	r3, r3
 800221e:	2101      	movs	r1, #1
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	4091      	lsls	r1, r2
 8002224:	000a      	movs	r2, r1
 8002226:	b252      	sxtb	r2, r2
 8002228:	43d2      	mvns	r2, r2
 800222a:	b252      	sxtb	r2, r2
 800222c:	4013      	ands	r3, r2
 800222e:	b259      	sxtb	r1, r3
 8002230:	183b      	adds	r3, r7, r0
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	22e8      	movs	r2, #232	@ 0xe8
 8002236:	4353      	muls	r3, r2
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	18d3      	adds	r3, r2, r3
 800223c:	b2ca      	uxtb	r2, r1
 800223e:	711a      	strb	r2, [r3, #4]
	for (i =0; i<8; i++)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	3301      	adds	r3, #1
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b07      	cmp	r3, #7
 800224a:	ddc0      	ble.n	80021ce <LTC681x_set_cfgr_dis+0x1c>
	}
	for (i =0; i<4; i++)
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	e03c      	b.n	80022cc <LTC681x_set_cfgr_dis+0x11a>
	{
		if (dcc[i+8])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<i);
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	3308      	adds	r3, #8
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	18d3      	adds	r3, r2, r3
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d018      	beq.n	8002292 <LTC681x_set_cfgr_dis+0xe0>
 8002260:	200f      	movs	r0, #15
 8002262:	183b      	adds	r3, r7, r0
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	22e8      	movs	r2, #232	@ 0xe8
 8002268:	4353      	muls	r3, r2
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	18d3      	adds	r3, r2, r3
 800226e:	795b      	ldrb	r3, [r3, #5]
 8002270:	b25a      	sxtb	r2, r3
 8002272:	2101      	movs	r1, #1
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	4099      	lsls	r1, r3
 8002278:	000b      	movs	r3, r1
 800227a:	b25b      	sxtb	r3, r3
 800227c:	4313      	orrs	r3, r2
 800227e:	b259      	sxtb	r1, r3
 8002280:	183b      	adds	r3, r7, r0
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	22e8      	movs	r2, #232	@ 0xe8
 8002286:	4353      	muls	r3, r2
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	18d3      	adds	r3, r2, r3
 800228c:	b2ca      	uxtb	r2, r1
 800228e:	715a      	strb	r2, [r3, #5]
 8002290:	e019      	b.n	80022c6 <LTC681x_set_cfgr_dis+0x114>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<i));
 8002292:	200f      	movs	r0, #15
 8002294:	183b      	adds	r3, r7, r0
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	22e8      	movs	r2, #232	@ 0xe8
 800229a:	4353      	muls	r3, r2
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	18d3      	adds	r3, r2, r3
 80022a0:	795b      	ldrb	r3, [r3, #5]
 80022a2:	b25b      	sxtb	r3, r3
 80022a4:	2101      	movs	r1, #1
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	4091      	lsls	r1, r2
 80022aa:	000a      	movs	r2, r1
 80022ac:	b252      	sxtb	r2, r2
 80022ae:	43d2      	mvns	r2, r2
 80022b0:	b252      	sxtb	r2, r2
 80022b2:	4013      	ands	r3, r2
 80022b4:	b259      	sxtb	r1, r3
 80022b6:	183b      	adds	r3, r7, r0
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	22e8      	movs	r2, #232	@ 0xe8
 80022bc:	4353      	muls	r3, r2
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	18d3      	adds	r3, r2, r3
 80022c2:	b2ca      	uxtb	r2, r1
 80022c4:	715a      	strb	r2, [r3, #5]
	for (i =0; i<4; i++)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3301      	adds	r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	ddbf      	ble.n	8002252 <LTC681x_set_cfgr_dis+0xa0>
	}
}
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	46c0      	nop			@ (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b006      	add	sp, #24
 80022da:	bd80      	pop	{r7, pc}

080022dc <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic,bool dcto[4])
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	230f      	movs	r3, #15
 80022e8:	18fb      	adds	r3, r7, r3
 80022ea:	1c02      	adds	r2, r0, #0
 80022ec:	701a      	strb	r2, [r3, #0]
	int i = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
	for(i =0;i<4;i++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	e03d      	b.n	8002374 <LTC681x_set_cfgr_dcto+0x98>
	{
		if(dcto[i])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<(i+4));
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	18d3      	adds	r3, r2, r3
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d019      	beq.n	8002338 <LTC681x_set_cfgr_dcto+0x5c>
 8002304:	200f      	movs	r0, #15
 8002306:	183b      	adds	r3, r7, r0
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	22e8      	movs	r2, #232	@ 0xe8
 800230c:	4353      	muls	r3, r2
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	18d3      	adds	r3, r2, r3
 8002312:	795b      	ldrb	r3, [r3, #5]
 8002314:	b25a      	sxtb	r2, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	3304      	adds	r3, #4
 800231a:	2101      	movs	r1, #1
 800231c:	4099      	lsls	r1, r3
 800231e:	000b      	movs	r3, r1
 8002320:	b25b      	sxtb	r3, r3
 8002322:	4313      	orrs	r3, r2
 8002324:	b259      	sxtb	r1, r3
 8002326:	183b      	adds	r3, r7, r0
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	22e8      	movs	r2, #232	@ 0xe8
 800232c:	4353      	muls	r3, r2
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	18d3      	adds	r3, r2, r3
 8002332:	b2ca      	uxtb	r2, r1
 8002334:	715a      	strb	r2, [r3, #5]
 8002336:	e01a      	b.n	800236e <LTC681x_set_cfgr_dcto+0x92>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<(i+4)));
 8002338:	200f      	movs	r0, #15
 800233a:	183b      	adds	r3, r7, r0
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	22e8      	movs	r2, #232	@ 0xe8
 8002340:	4353      	muls	r3, r2
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	18d3      	adds	r3, r2, r3
 8002346:	795b      	ldrb	r3, [r3, #5]
 8002348:	b25b      	sxtb	r3, r3
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	3204      	adds	r2, #4
 800234e:	2101      	movs	r1, #1
 8002350:	4091      	lsls	r1, r2
 8002352:	000a      	movs	r2, r1
 8002354:	b252      	sxtb	r2, r2
 8002356:	43d2      	mvns	r2, r2
 8002358:	b252      	sxtb	r2, r2
 800235a:	4013      	ands	r3, r2
 800235c:	b259      	sxtb	r1, r3
 800235e:	183b      	adds	r3, r7, r0
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	22e8      	movs	r2, #232	@ 0xe8
 8002364:	4353      	muls	r3, r2
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	18d3      	adds	r3, r2, r3
 800236a:	b2ca      	uxtb	r2, r1
 800236c:	715a      	strb	r2, [r3, #5]
	for(i =0;i<4;i++)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	3301      	adds	r3, #1
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2b03      	cmp	r3, #3
 8002378:	ddbe      	ble.n	80022f8 <LTC681x_set_cfgr_dcto+0x1c>
	}
}
 800237a:	46c0      	nop			@ (mov r8, r8)
 800237c:	46c0      	nop			@ (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	b006      	add	sp, #24
 8002382:	bd80      	pop	{r7, pc}

08002384 <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic,uint16_t uv)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6039      	str	r1, [r7, #0]
 800238c:	0011      	movs	r1, r2
 800238e:	1dfb      	adds	r3, r7, #7
 8002390:	1c02      	adds	r2, r0, #0
 8002392:	701a      	strb	r2, [r3, #0]
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	1c0a      	adds	r2, r1, #0
 8002398:	801a      	strh	r2, [r3, #0]
	uint16_t tmp = (uv/16)-1;
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	200e      	movs	r0, #14
 80023a4:	183b      	adds	r3, r7, r0
 80023a6:	3a01      	subs	r2, #1
 80023a8:	801a      	strh	r2, [r3, #0]
	ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 80023aa:	1dfb      	adds	r3, r7, #7
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	22e8      	movs	r2, #232	@ 0xe8
 80023b0:	4353      	muls	r3, r2
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	18d3      	adds	r3, r2, r3
 80023b6:	183a      	adds	r2, r7, r0
 80023b8:	8812      	ldrh	r2, [r2, #0]
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	705a      	strb	r2, [r3, #1]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0xF0;
 80023be:	1dfb      	adds	r3, r7, #7
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	22e8      	movs	r2, #232	@ 0xe8
 80023c4:	4353      	muls	r3, r2
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	18d3      	adds	r3, r2, r3
 80023ca:	789a      	ldrb	r2, [r3, #2]
 80023cc:	1dfb      	adds	r3, r7, #7
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	21e8      	movs	r1, #232	@ 0xe8
 80023d2:	434b      	muls	r3, r1
 80023d4:	6839      	ldr	r1, [r7, #0]
 80023d6:	18cb      	adds	r3, r1, r3
 80023d8:	210f      	movs	r1, #15
 80023da:	438a      	bics	r2, r1
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x0F00 & tmp)>>8);
 80023e0:	1dfb      	adds	r3, r7, #7
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	22e8      	movs	r2, #232	@ 0xe8
 80023e6:	4353      	muls	r3, r2
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	18d3      	adds	r3, r2, r3
 80023ec:	789b      	ldrb	r3, [r3, #2]
 80023ee:	b25a      	sxtb	r2, r3
 80023f0:	183b      	adds	r3, r7, r0
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	0a1b      	lsrs	r3, r3, #8
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	b25b      	sxtb	r3, r3
 80023fa:	210f      	movs	r1, #15
 80023fc:	400b      	ands	r3, r1
 80023fe:	b25b      	sxtb	r3, r3
 8002400:	4313      	orrs	r3, r2
 8002402:	b259      	sxtb	r1, r3
 8002404:	1dfb      	adds	r3, r7, #7
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	22e8      	movs	r2, #232	@ 0xe8
 800240a:	4353      	muls	r3, r2
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	18d3      	adds	r3, r2, r3
 8002410:	b2ca      	uxtb	r2, r1
 8002412:	709a      	strb	r2, [r3, #2]
}
 8002414:	46c0      	nop			@ (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	b004      	add	sp, #16
 800241a:	bd80      	pop	{r7, pc}

0800241c <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic,uint16_t ov)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6039      	str	r1, [r7, #0]
 8002424:	0011      	movs	r1, r2
 8002426:	1dfb      	adds	r3, r7, #7
 8002428:	1c02      	adds	r2, r0, #0
 800242a:	701a      	strb	r2, [r3, #0]
 800242c:	1d3b      	adds	r3, r7, #4
 800242e:	1c0a      	adds	r2, r1, #0
 8002430:	801a      	strh	r2, [r3, #0]
	uint16_t tmp = (ov/16);
 8002432:	200e      	movs	r0, #14
 8002434:	183b      	adds	r3, r7, r0
 8002436:	1d3a      	adds	r2, r7, #4
 8002438:	8812      	ldrh	r2, [r2, #0]
 800243a:	0912      	lsrs	r2, r2, #4
 800243c:	801a      	strh	r2, [r3, #0]
	ic[nIC].config.tx_data[3] = 0x00FF & (tmp>>4);
 800243e:	183b      	adds	r3, r7, r0
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	091b      	lsrs	r3, r3, #4
 8002444:	b299      	uxth	r1, r3
 8002446:	1dfb      	adds	r3, r7, #7
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	22e8      	movs	r2, #232	@ 0xe8
 800244c:	4353      	muls	r3, r2
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	18d3      	adds	r3, r2, r3
 8002452:	b2ca      	uxtb	r2, r1
 8002454:	70da      	strb	r2, [r3, #3]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0x0F;
 8002456:	1dfb      	adds	r3, r7, #7
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	22e8      	movs	r2, #232	@ 0xe8
 800245c:	4353      	muls	r3, r2
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	18d3      	adds	r3, r2, r3
 8002462:	789a      	ldrb	r2, [r3, #2]
 8002464:	1dfb      	adds	r3, r7, #7
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	21e8      	movs	r1, #232	@ 0xe8
 800246a:	434b      	muls	r3, r1
 800246c:	6839      	ldr	r1, [r7, #0]
 800246e:	18cb      	adds	r3, r1, r3
 8002470:	210f      	movs	r1, #15
 8002472:	400a      	ands	r2, r1
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x000F & tmp)<<4);
 8002478:	1dfb      	adds	r3, r7, #7
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	22e8      	movs	r2, #232	@ 0xe8
 800247e:	4353      	muls	r3, r2
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	18d3      	adds	r3, r2, r3
 8002484:	789b      	ldrb	r3, [r3, #2]
 8002486:	b25a      	sxtb	r2, r3
 8002488:	183b      	adds	r3, r7, r0
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	b25b      	sxtb	r3, r3
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	b25b      	sxtb	r3, r3
 8002492:	4313      	orrs	r3, r2
 8002494:	b259      	sxtb	r1, r3
 8002496:	1dfb      	adds	r3, r7, #7
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	22e8      	movs	r2, #232	@ 0xe8
 800249c:	4353      	muls	r3, r2
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	18d3      	adds	r3, r2, r3
 80024a2:	b2ca      	uxtb	r2, r1
 80024a4:	709a      	strb	r2, [r3, #2]
}
 80024a6:	46c0      	nop			@ (mov r8, r8)
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b004      	add	sp, #16
 80024ac:	bd80      	pop	{r7, pc}

080024ae <cs_low>:

extern SPI_HandleTypeDef hspi1; // SPI Handle
extern TIM_HandleTypeDef htim2; // Timer Handle

void cs_low(uint8_t pin)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	0002      	movs	r2, r0
 80024b6:	1dfb      	adds	r3, r7, #7
 80024b8:	701a      	strb	r2, [r3, #0]
  output_low(pin);
 80024ba:	1dfb      	adds	r3, r7, #7
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	b299      	uxth	r1, r3
 80024c0:	2390      	movs	r3, #144	@ 0x90
 80024c2:	05db      	lsls	r3, r3, #23
 80024c4:	2200      	movs	r2, #0
 80024c6:	0018      	movs	r0, r3
 80024c8:	f001 ff56 	bl	8004378 <HAL_GPIO_WritePin>
}
 80024cc:	46c0      	nop			@ (mov r8, r8)
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b002      	add	sp, #8
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <cs_high>:

void cs_high(uint8_t pin)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	0002      	movs	r2, r0
 80024dc:	1dfb      	adds	r3, r7, #7
 80024de:	701a      	strb	r2, [r3, #0]
  output_high(pin);
 80024e0:	1dfb      	adds	r3, r7, #7
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	b299      	uxth	r1, r3
 80024e6:	2390      	movs	r3, #144	@ 0x90
 80024e8:	05db      	lsls	r3, r3, #23
 80024ea:	2201      	movs	r2, #1
 80024ec:	0018      	movs	r0, r3
 80024ee:	f001 ff43 	bl	8004378 <HAL_GPIO_WritePin>
}
 80024f2:	46c0      	nop			@ (mov r8, r8)
 80024f4:	46bd      	mov	sp, r7
 80024f6:	b002      	add	sp, #8
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <delay_u>:

void delay_u(uint16_t micro)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	0002      	movs	r2, r0
 8002504:	1dbb      	adds	r3, r7, #6
 8002506:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8002508:	4b08      	ldr	r3, [pc, #32]	@ (800252c <delay_u+0x30>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2200      	movs	r2, #0
 800250e:	625a      	str	r2, [r3, #36]	@ 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < micro);  // wait for the counter to reach the us input
 8002510:	46c0      	nop			@ (mov r8, r8)
 8002512:	4b06      	ldr	r3, [pc, #24]	@ (800252c <delay_u+0x30>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002518:	1dbb      	adds	r3, r7, #6
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d3f8      	bcc.n	8002512 <delay_u+0x16>
}
 8002520:	46c0      	nop			@ (mov r8, r8)
 8002522:	46c0      	nop			@ (mov r8, r8)
 8002524:	46bd      	mov	sp, r7
 8002526:	b002      	add	sp, #8
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			@ (mov r8, r8)
 800252c:	20000164 	.word	0x20000164

08002530 <spi_write_array>:
Writes an array of bytes out of the SPI port
*/
void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
                     uint8_t data[] //Array of bytes to be written on the SPI port
                    )
{
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b087      	sub	sp, #28
 8002534:	af02      	add	r7, sp, #8
 8002536:	0002      	movs	r2, r0
 8002538:	6039      	str	r1, [r7, #0]
 800253a:	1dfb      	adds	r3, r7, #7
 800253c:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t rx_data;

  for (i = 0; i < len; i++)
 800253e:	230f      	movs	r3, #15
 8002540:	18fb      	adds	r3, r7, r3
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
 8002546:	e012      	b.n	800256e <spi_write_array+0x3e>
  {
//	  SPI.transfer((int8_t)data[i]);
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&data[i], &rx_data, 1, HAL_MAX_DELAY);
 8002548:	240f      	movs	r4, #15
 800254a:	193b      	adds	r3, r7, r4
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	18d1      	adds	r1, r2, r3
 8002552:	230e      	movs	r3, #14
 8002554:	18fa      	adds	r2, r7, r3
 8002556:	480c      	ldr	r0, [pc, #48]	@ (8002588 <spi_write_array+0x58>)
 8002558:	2301      	movs	r3, #1
 800255a:	425b      	negs	r3, r3
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	2301      	movs	r3, #1
 8002560:	f002 fdd2 	bl	8005108 <HAL_SPI_TransmitReceive>
  for (i = 0; i < len; i++)
 8002564:	193b      	adds	r3, r7, r4
 8002566:	781a      	ldrb	r2, [r3, #0]
 8002568:	193b      	adds	r3, r7, r4
 800256a:	3201      	adds	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	230f      	movs	r3, #15
 8002570:	18fa      	adds	r2, r7, r3
 8002572:	1dfb      	adds	r3, r7, #7
 8002574:	7812      	ldrb	r2, [r2, #0]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d3e5      	bcc.n	8002548 <spi_write_array+0x18>
  }
}
 800257c:	46c0      	nop			@ (mov r8, r8)
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	46bd      	mov	sp, r7
 8002582:	b005      	add	sp, #20
 8002584:	bd90      	pop	{r4, r7, pc}
 8002586:	46c0      	nop			@ (mov r8, r8)
 8002588:	20000100 	.word	0x20000100

0800258c <spi_write_read>:
void spi_write_read(uint8_t tx_Data[],//array of data to be written on SPI port
                    uint8_t tx_len, //length of the tx data arry
                    uint8_t *rx_data,//Input: array that will store the data read by the SPI port
                    uint8_t rx_len //Option: number of bytes to be read from the SPI port
                   )
{
 800258c:	b590      	push	{r4, r7, lr}
 800258e:	b089      	sub	sp, #36	@ 0x24
 8002590:	af02      	add	r7, sp, #8
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	0008      	movs	r0, r1
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	0019      	movs	r1, r3
 800259a:	230b      	movs	r3, #11
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	1c02      	adds	r2, r0, #0
 80025a0:	701a      	strb	r2, [r3, #0]
 80025a2:	230a      	movs	r3, #10
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	1c0a      	adds	r2, r1, #0
 80025a8:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t data;

  for (i = 0; i < tx_len; i++)
 80025aa:	2317      	movs	r3, #23
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	e012      	b.n	80025da <spi_write_read+0x4e>
  {
//	  SPI.transfer(tx_Data[i]);
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&tx_Data[i], &data, 1, HAL_MAX_DELAY);
 80025b4:	2417      	movs	r4, #23
 80025b6:	193b      	adds	r3, r7, r4
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	18d1      	adds	r1, r2, r3
 80025be:	2315      	movs	r3, #21
 80025c0:	18fa      	adds	r2, r7, r3
 80025c2:	481c      	ldr	r0, [pc, #112]	@ (8002634 <spi_write_read+0xa8>)
 80025c4:	2301      	movs	r3, #1
 80025c6:	425b      	negs	r3, r3
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	2301      	movs	r3, #1
 80025cc:	f002 fd9c 	bl	8005108 <HAL_SPI_TransmitReceive>
  for (i = 0; i < tx_len; i++)
 80025d0:	193b      	adds	r3, r7, r4
 80025d2:	781a      	ldrb	r2, [r3, #0]
 80025d4:	193b      	adds	r3, r7, r4
 80025d6:	3201      	adds	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	2317      	movs	r3, #23
 80025dc:	18fa      	adds	r2, r7, r3
 80025de:	230b      	movs	r3, #11
 80025e0:	18fb      	adds	r3, r7, r3
 80025e2:	7812      	ldrb	r2, [r2, #0]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d3e4      	bcc.n	80025b4 <spi_write_read+0x28>
  }

  for (uint8_t i = 0; i < rx_len; i++)
 80025ea:	2316      	movs	r3, #22
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
 80025f2:	e011      	b.n	8002618 <spi_write_read+0x8c>
  {
//    rx_data[i] = (uint8_t)SPI.transfer(0xFF);
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)0xFF, (uint8_t*)&rx_data[i], 1, HAL_MAX_DELAY);
 80025f4:	2416      	movs	r4, #22
 80025f6:	193b      	adds	r3, r7, r4
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	18d2      	adds	r2, r2, r3
 80025fe:	480d      	ldr	r0, [pc, #52]	@ (8002634 <spi_write_read+0xa8>)
 8002600:	2301      	movs	r3, #1
 8002602:	425b      	negs	r3, r3
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	2301      	movs	r3, #1
 8002608:	21ff      	movs	r1, #255	@ 0xff
 800260a:	f002 fd7d 	bl	8005108 <HAL_SPI_TransmitReceive>
  for (uint8_t i = 0; i < rx_len; i++)
 800260e:	193b      	adds	r3, r7, r4
 8002610:	781a      	ldrb	r2, [r3, #0]
 8002612:	193b      	adds	r3, r7, r4
 8002614:	3201      	adds	r2, #1
 8002616:	701a      	strb	r2, [r3, #0]
 8002618:	2316      	movs	r3, #22
 800261a:	18fa      	adds	r2, r7, r3
 800261c:	230a      	movs	r3, #10
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	7812      	ldrb	r2, [r2, #0]
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d3e5      	bcc.n	80025f4 <spi_write_read+0x68>
  }

}
 8002628:	46c0      	nop			@ (mov r8, r8)
 800262a:	46c0      	nop			@ (mov r8, r8)
 800262c:	46bd      	mov	sp, r7
 800262e:	b007      	add	sp, #28
 8002630:	bd90      	pop	{r4, r7, pc}
 8002632:	46c0      	nop			@ (mov r8, r8)
 8002634:	20000100 	.word	0x20000100

08002638 <spi_read_byte>:


uint8_t spi_read_byte(uint8_t tx_dat)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b087      	sub	sp, #28
 800263c:	af02      	add	r7, sp, #8
 800263e:	0002      	movs	r2, r0
 8002640:	1dfb      	adds	r3, r7, #7
 8002642:	701a      	strb	r2, [r3, #0]
  uint8_t data;
//  data = (uint8_t)SPI.transfer(0xFF);
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)0xFF, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8002644:	240f      	movs	r4, #15
 8002646:	193a      	adds	r2, r7, r4
 8002648:	4806      	ldr	r0, [pc, #24]	@ (8002664 <spi_read_byte+0x2c>)
 800264a:	2301      	movs	r3, #1
 800264c:	425b      	negs	r3, r3
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	2301      	movs	r3, #1
 8002652:	21ff      	movs	r1, #255	@ 0xff
 8002654:	f002 fd58 	bl	8005108 <HAL_SPI_TransmitReceive>
  return(data);
 8002658:	193b      	adds	r3, r7, r4
 800265a:	781b      	ldrb	r3, [r3, #0]
}
 800265c:	0018      	movs	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	b005      	add	sp, #20
 8002662:	bd90      	pop	{r4, r7, pc}
 8002664:	20000100 	.word	0x20000100

08002668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800266a:	b089      	sub	sp, #36	@ 0x24
 800266c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800266e:	f001 f8a7 	bl	80037c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002672:	f000 f8d3 	bl	800281c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002676:	f000 fb05 	bl	8002c84 <MX_GPIO_Init>
  MX_SPI1_Init();
 800267a:	f000 fa41 	bl	8002b00 <MX_SPI1_Init>
  MX_TIM2_Init();
 800267e:	f000 fa7d 	bl	8002b7c <MX_TIM2_Init>
  MX_CAN_Init();
 8002682:	f000 fa07 	bl	8002a94 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8002686:	f000 facd 	bl	8002c24 <MX_USART1_UART_Init>
  MX_ADC_Init();
 800268a:	f000 f925 	bl	80028d8 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  int8_t error = 0;
 800268e:	1dbb      	adds	r3, r7, #6
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]

  LTC6813_init_cfg(TOTAL_IC, BMS_IC);
 8002694:	4b59      	ldr	r3, [pc, #356]	@ (80027fc <main+0x194>)
 8002696:	0019      	movs	r1, r3
 8002698:	2012      	movs	r0, #18
 800269a:	f7fe fa08 	bl	8000aae <LTC6813_init_cfg>
//  LTC6813_init_cfgb(TOTAL_IC,BMS_IC);
  for (uint8_t current_ic = 0; current_ic<TOTAL_IC;current_ic++)
 800269e:	1dfb      	adds	r3, r7, #7
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
 80026a4:	e01c      	b.n	80026e0 <main+0x78>
  {
    LTC6813_set_cfgr(current_ic,BMS_IC,REFON,ADCOPT,GPIOBITS_A,DCCBITS_A, DCTOBITS, UV, OV);
 80026a6:	4b56      	ldr	r3, [pc, #344]	@ (8002800 <main+0x198>)
 80026a8:	781d      	ldrb	r5, [r3, #0]
 80026aa:	4b56      	ldr	r3, [pc, #344]	@ (8002804 <main+0x19c>)
 80026ac:	781e      	ldrb	r6, [r3, #0]
 80026ae:	4b56      	ldr	r3, [pc, #344]	@ (8002808 <main+0x1a0>)
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	4a56      	ldr	r2, [pc, #344]	@ (800280c <main+0x1a4>)
 80026b4:	8812      	ldrh	r2, [r2, #0]
 80026b6:	4c51      	ldr	r4, [pc, #324]	@ (80027fc <main+0x194>)
 80026b8:	1df9      	adds	r1, r7, #7
 80026ba:	7808      	ldrb	r0, [r1, #0]
 80026bc:	9204      	str	r2, [sp, #16]
 80026be:	9303      	str	r3, [sp, #12]
 80026c0:	4b53      	ldr	r3, [pc, #332]	@ (8002810 <main+0x1a8>)
 80026c2:	9302      	str	r3, [sp, #8]
 80026c4:	4b53      	ldr	r3, [pc, #332]	@ (8002814 <main+0x1ac>)
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	4b53      	ldr	r3, [pc, #332]	@ (8002818 <main+0x1b0>)
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	0033      	movs	r3, r6
 80026ce:	002a      	movs	r2, r5
 80026d0:	0021      	movs	r1, r4
 80026d2:	f7fe f9fe 	bl	8000ad2 <LTC6813_set_cfgr>
  for (uint8_t current_ic = 0; current_ic<TOTAL_IC;current_ic++)
 80026d6:	1dfb      	adds	r3, r7, #7
 80026d8:	781a      	ldrb	r2, [r3, #0]
 80026da:	1dfb      	adds	r3, r7, #7
 80026dc:	3201      	adds	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
 80026e0:	1dfb      	adds	r3, r7, #7
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b11      	cmp	r3, #17
 80026e6:	d9de      	bls.n	80026a6 <main+0x3e>
//    LTC6813_set_cfgrb(current_ic,BMS_IC,FDRF,DTMEN,PSBITS,GPIOBITS_B,DCCBITS_B);
  }
  LTC6813_reset_crc_count(TOTAL_IC,BMS_IC);
 80026e8:	4b44      	ldr	r3, [pc, #272]	@ (80027fc <main+0x194>)
 80026ea:	0019      	movs	r1, r3
 80026ec:	2012      	movs	r0, #18
 80026ee:	f7fe f9cc 	bl	8000a8a <LTC6813_reset_crc_count>
  LTC6813_init_reg_limits(TOTAL_IC,BMS_IC);
 80026f2:	4b42      	ldr	r3, [pc, #264]	@ (80027fc <main+0x194>)
 80026f4:	0019      	movs	r1, r3
 80026f6:	2012      	movs	r0, #18
 80026f8:	f7fe f8cc 	bl	8000894 <LTC6813_init_reg_limits>

  if (WRITE_CONFIG == ENABLED) {
 80026fc:	2300      	movs	r3, #0
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d109      	bne.n	8002716 <main+0xae>
    wakeup_idle(TOTAL_IC);
 8002702:	2012      	movs	r0, #18
 8002704:	f7fe fa30 	bl	8000b68 <wakeup_idle>
    LTC6813_wrcfg(TOTAL_IC, BMS_IC);
 8002708:	4b3c      	ldr	r3, [pc, #240]	@ (80027fc <main+0x194>)
 800270a:	0019      	movs	r1, r3
 800270c:	2012      	movs	r0, #18
 800270e:	f7fe f918 	bl	8000942 <LTC6813_wrcfg>
//    LTC6813_wrcfgb(TOTAL_IC,BMS_IC);
    print_wrconfig();
 8002712:	f000 fb75 	bl	8002e00 <print_wrconfig>
//    print_wrconfigb();
  }
  if (READ_CONFIG == ENABLED) {
 8002716:	2300      	movs	r3, #0
 8002718:	2b01      	cmp	r3, #1
 800271a:	d112      	bne.n	8002742 <main+0xda>
    wakeup_sleep(TOTAL_IC);
 800271c:	2012      	movs	r0, #18
 800271e:	f7fe fa44 	bl	8000baa <wakeup_sleep>
    error = LTC6813_rdcfg(TOTAL_IC, BMS_IC);
 8002722:	1dbc      	adds	r4, r7, #6
 8002724:	4b35      	ldr	r3, [pc, #212]	@ (80027fc <main+0x194>)
 8002726:	0019      	movs	r1, r3
 8002728:	2012      	movs	r0, #18
 800272a:	f7fe f91c 	bl	8000966 <LTC6813_rdcfg>
 800272e:	0003      	movs	r3, r0
 8002730:	7023      	strb	r3, [r4, #0]
    check_error(error);
 8002732:	1dbb      	adds	r3, r7, #6
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	b25b      	sxtb	r3, r3
 8002738:	0018      	movs	r0, r3
 800273a:	f000 fdb5 	bl	80032a8 <check_error>
    print_rxconfig();
 800273e:	f000 fbc7 	bl	8002ed0 <print_rxconfig>
  }

  if (READ_CONFIG == ENABLED)
 8002742:	2300      	movs	r3, #0
 8002744:	2b01      	cmp	r3, #1
 8002746:	d112      	bne.n	800276e <main+0x106>
        {
          wakeup_idle(TOTAL_IC);
 8002748:	2012      	movs	r0, #18
 800274a:	f7fe fa0d 	bl	8000b68 <wakeup_idle>
          error = LTC6813_rdcfg(TOTAL_IC,BMS_IC);
 800274e:	1dbc      	adds	r4, r7, #6
 8002750:	4b2a      	ldr	r3, [pc, #168]	@ (80027fc <main+0x194>)
 8002752:	0019      	movs	r1, r3
 8002754:	2012      	movs	r0, #18
 8002756:	f7fe f906 	bl	8000966 <LTC6813_rdcfg>
 800275a:	0003      	movs	r3, r0
 800275c:	7023      	strb	r3, [r4, #0]
          check_error(error);
 800275e:	1dbb      	adds	r3, r7, #6
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	b25b      	sxtb	r3, r3
 8002764:	0018      	movs	r0, r3
 8002766:	f000 fd9f 	bl	80032a8 <check_error>
//          error = LTC6813_rdcfgb(TOTAL_IC,BMS_IC);
//          check_error(error);
          print_rxconfig();
 800276a:	f000 fbb1 	bl	8002ed0 <print_rxconfig>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (MEASURE_CELL == ENABLED)
 800276e:	2301      	movs	r3, #1
 8002770:	2b01      	cmp	r3, #1
 8002772:	d120      	bne.n	80027b6 <main+0x14e>
	        {
	          wakeup_idle(TOTAL_IC);
 8002774:	2012      	movs	r0, #18
 8002776:	f7fe f9f7 	bl	8000b68 <wakeup_idle>
	          LTC6813_adcv(ADC_CONVERSION_MODE,ADC_DCP,CELL_CH_TO_CONVERT);
 800277a:	2302      	movs	r3, #2
 800277c:	2100      	movs	r1, #0
 800277e:	2200      	movs	r2, #0
 8002780:	0018      	movs	r0, r3
 8002782:	f7fe f90c 	bl	800099e <LTC6813_adcv>
	          LTC6813_pollAdc();
 8002786:	f7fe f978 	bl	8000a7a <LTC6813_pollAdc>
	          wakeup_idle(TOTAL_IC);
 800278a:	2012      	movs	r0, #18
 800278c:	f7fe f9ec 	bl	8000b68 <wakeup_idle>
	          error = LTC6813_rdcv(0, TOTAL_IC,BMS_IC);
 8002790:	4b1a      	ldr	r3, [pc, #104]	@ (80027fc <main+0x194>)
 8002792:	001a      	movs	r2, r3
 8002794:	2112      	movs	r1, #18
 8002796:	2000      	movs	r0, #0
 8002798:	f7fe f932 	bl	8000a00 <LTC6813_rdcv>
 800279c:	0003      	movs	r3, r0
 800279e:	001a      	movs	r2, r3
 80027a0:	1dbb      	adds	r3, r7, #6
 80027a2:	701a      	strb	r2, [r3, #0]
	          check_error(error);
 80027a4:	1dbb      	adds	r3, r7, #6
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	b25b      	sxtb	r3, r3
 80027aa:	0018      	movs	r0, r3
 80027ac:	f000 fd7c 	bl	80032a8 <check_error>
	          print_cells(DATALOG_ENABLED);
 80027b0:	2001      	movs	r0, #1
 80027b2:	f000 fbf1 	bl	8002f98 <print_cells>
	        }

	        if (MEASURE_AUX == ENABLED)
 80027b6:	2300      	movs	r3, #0
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d1d8      	bne.n	800276e <main+0x106>
	        {
	          wakeup_idle(TOTAL_IC);
 80027bc:	2012      	movs	r0, #18
 80027be:	f7fe f9d3 	bl	8000b68 <wakeup_idle>
	          LTC6813_adax(ADC_CONVERSION_MODE , AUX_CH_ALL);
 80027c2:	2302      	movs	r3, #2
 80027c4:	2100      	movs	r1, #0
 80027c6:	0018      	movs	r0, r3
 80027c8:	f7fe f905 	bl	80009d6 <LTC6813_adax>
	          LTC6813_pollAdc();
 80027cc:	f7fe f955 	bl	8000a7a <LTC6813_pollAdc>
	          wakeup_idle(TOTAL_IC);
 80027d0:	2012      	movs	r0, #18
 80027d2:	f7fe f9c9 	bl	8000b68 <wakeup_idle>
	          error = LTC6813_rdaux(0,TOTAL_IC,BMS_IC); // Set to read back all aux registers
 80027d6:	1dbc      	adds	r4, r7, #6
 80027d8:	4b08      	ldr	r3, [pc, #32]	@ (80027fc <main+0x194>)
 80027da:	001a      	movs	r2, r3
 80027dc:	2112      	movs	r1, #18
 80027de:	2000      	movs	r0, #0
 80027e0:	f7fe f92e 	bl	8000a40 <LTC6813_rdaux>
 80027e4:	0003      	movs	r3, r0
 80027e6:	7023      	strb	r3, [r4, #0]
	          check_error(error);
 80027e8:	1dbb      	adds	r3, r7, #6
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	b25b      	sxtb	r3, r3
 80027ee:	0018      	movs	r0, r3
 80027f0:	f000 fd5a 	bl	80032a8 <check_error>
	          print_aux(DATALOG_ENABLED);
 80027f4:	2001      	movs	r0, #1
 80027f6:	f000 fc69 	bl	80030cc <print_aux>
	  if (MEASURE_CELL == ENABLED)
 80027fa:	e7b8      	b.n	800276e <main+0x106>
 80027fc:	20000234 	.word	0x20000234
 8002800:	20000000 	.word	0x20000000
 8002804:	20001284 	.word	0x20001284
 8002808:	2000000a 	.word	0x2000000a
 800280c:	2000000c 	.word	0x2000000c
 8002810:	20000010 	.word	0x20000010
 8002814:	20001288 	.word	0x20001288
 8002818:	20000004 	.word	0x20000004

0800281c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800281c:	b590      	push	{r4, r7, lr}
 800281e:	b099      	sub	sp, #100	@ 0x64
 8002820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002822:	242c      	movs	r4, #44	@ 0x2c
 8002824:	193b      	adds	r3, r7, r4
 8002826:	0018      	movs	r0, r3
 8002828:	2334      	movs	r3, #52	@ 0x34
 800282a:	001a      	movs	r2, r3
 800282c:	2100      	movs	r1, #0
 800282e:	f004 fa69 	bl	8006d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002832:	231c      	movs	r3, #28
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	0018      	movs	r0, r3
 8002838:	2310      	movs	r3, #16
 800283a:	001a      	movs	r2, r3
 800283c:	2100      	movs	r1, #0
 800283e:	f004 fa61 	bl	8006d04 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002842:	003b      	movs	r3, r7
 8002844:	0018      	movs	r0, r3
 8002846:	231c      	movs	r3, #28
 8002848:	001a      	movs	r2, r3
 800284a:	2100      	movs	r1, #0
 800284c:	f004 fa5a 	bl	8006d04 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002850:	0021      	movs	r1, r4
 8002852:	187b      	adds	r3, r7, r1
 8002854:	2212      	movs	r2, #18
 8002856:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002858:	187b      	adds	r3, r7, r1
 800285a:	2201      	movs	r2, #1
 800285c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800285e:	187b      	adds	r3, r7, r1
 8002860:	2201      	movs	r2, #1
 8002862:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002864:	187b      	adds	r3, r7, r1
 8002866:	2210      	movs	r2, #16
 8002868:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800286a:	187b      	adds	r3, r7, r1
 800286c:	2210      	movs	r2, #16
 800286e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002870:	187b      	adds	r3, r7, r1
 8002872:	2200      	movs	r2, #0
 8002874:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002876:	187b      	adds	r3, r7, r1
 8002878:	0018      	movs	r0, r3
 800287a:	f001 fd9b 	bl	80043b4 <HAL_RCC_OscConfig>
 800287e:	1e03      	subs	r3, r0, #0
 8002880:	d001      	beq.n	8002886 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002882:	f000 fd23 	bl	80032cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002886:	211c      	movs	r1, #28
 8002888:	187b      	adds	r3, r7, r1
 800288a:	2207      	movs	r2, #7
 800288c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800288e:	187b      	adds	r3, r7, r1
 8002890:	2200      	movs	r2, #0
 8002892:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002894:	187b      	adds	r3, r7, r1
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800289a:	187b      	adds	r3, r7, r1
 800289c:	2200      	movs	r2, #0
 800289e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028a0:	187b      	adds	r3, r7, r1
 80028a2:	2100      	movs	r1, #0
 80028a4:	0018      	movs	r0, r3
 80028a6:	f002 f90b 	bl	8004ac0 <HAL_RCC_ClockConfig>
 80028aa:	1e03      	subs	r3, r0, #0
 80028ac:	d001      	beq.n	80028b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80028ae:	f000 fd0d 	bl	80032cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80028b2:	003b      	movs	r3, r7
 80028b4:	2201      	movs	r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80028b8:	003b      	movs	r3, r7
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028be:	003b      	movs	r3, r7
 80028c0:	0018      	movs	r0, r3
 80028c2:	f002 fa69 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 80028c6:	1e03      	subs	r3, r0, #0
 80028c8:	d001      	beq.n	80028ce <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80028ca:	f000 fcff 	bl	80032cc <Error_Handler>
  }
}
 80028ce:	46c0      	nop			@ (mov r8, r8)
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b019      	add	sp, #100	@ 0x64
 80028d4:	bd90      	pop	{r4, r7, pc}
	...

080028d8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028de:	1d3b      	adds	r3, r7, #4
 80028e0:	0018      	movs	r0, r3
 80028e2:	230c      	movs	r3, #12
 80028e4:	001a      	movs	r2, r3
 80028e6:	2100      	movs	r1, #0
 80028e8:	f004 fa0c 	bl	8006d04 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80028ec:	4b67      	ldr	r3, [pc, #412]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 80028ee:	4a68      	ldr	r2, [pc, #416]	@ (8002a90 <MX_ADC_Init+0x1b8>)
 80028f0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80028f2:	4b66      	ldr	r3, [pc, #408]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80028f8:	4b64      	ldr	r3, [pc, #400]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028fe:	4b63      	ldr	r3, [pc, #396]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 8002900:	2200      	movs	r2, #0
 8002902:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002904:	4b61      	ldr	r3, [pc, #388]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 8002906:	2201      	movs	r2, #1
 8002908:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800290a:	4b60      	ldr	r3, [pc, #384]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 800290c:	2204      	movs	r2, #4
 800290e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002910:	4b5e      	ldr	r3, [pc, #376]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 8002912:	2200      	movs	r2, #0
 8002914:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002916:	4b5d      	ldr	r3, [pc, #372]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 8002918:	2200      	movs	r2, #0
 800291a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800291c:	4b5b      	ldr	r3, [pc, #364]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 800291e:	2200      	movs	r2, #0
 8002920:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002922:	4b5a      	ldr	r3, [pc, #360]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 8002924:	2200      	movs	r2, #0
 8002926:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002928:	4b58      	ldr	r3, [pc, #352]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 800292a:	22c2      	movs	r2, #194	@ 0xc2
 800292c:	32ff      	adds	r2, #255	@ 0xff
 800292e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002930:	4b56      	ldr	r3, [pc, #344]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 8002932:	2200      	movs	r2, #0
 8002934:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002936:	4b55      	ldr	r3, [pc, #340]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 8002938:	2224      	movs	r2, #36	@ 0x24
 800293a:	2100      	movs	r1, #0
 800293c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800293e:	4b53      	ldr	r3, [pc, #332]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 8002940:	2201      	movs	r2, #1
 8002942:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002944:	4b51      	ldr	r3, [pc, #324]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 8002946:	0018      	movs	r0, r3
 8002948:	f000 ff9e 	bl	8003888 <HAL_ADC_Init>
 800294c:	1e03      	subs	r3, r0, #0
 800294e:	d001      	beq.n	8002954 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002950:	f000 fcbc 	bl	80032cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	2280      	movs	r2, #128	@ 0x80
 800295e:	0152      	lsls	r2, r2, #5
 8002960:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	2280      	movs	r2, #128	@ 0x80
 8002966:	0552      	lsls	r2, r2, #21
 8002968:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800296a:	1d3a      	adds	r2, r7, #4
 800296c:	4b47      	ldr	r3, [pc, #284]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 800296e:	0011      	movs	r1, r2
 8002970:	0018      	movs	r0, r3
 8002972:	f001 f8c9 	bl	8003b08 <HAL_ADC_ConfigChannel>
 8002976:	1e03      	subs	r3, r0, #0
 8002978:	d001      	beq.n	800297e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800297a:	f000 fca7 	bl	80032cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002984:	1d3a      	adds	r2, r7, #4
 8002986:	4b41      	ldr	r3, [pc, #260]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 8002988:	0011      	movs	r1, r2
 800298a:	0018      	movs	r0, r3
 800298c:	f001 f8bc 	bl	8003b08 <HAL_ADC_ConfigChannel>
 8002990:	1e03      	subs	r3, r0, #0
 8002992:	d001      	beq.n	8002998 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8002994:	f000 fc9a 	bl	80032cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	2202      	movs	r2, #2
 800299c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800299e:	1d3a      	adds	r2, r7, #4
 80029a0:	4b3a      	ldr	r3, [pc, #232]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 80029a2:	0011      	movs	r1, r2
 80029a4:	0018      	movs	r0, r3
 80029a6:	f001 f8af 	bl	8003b08 <HAL_ADC_ConfigChannel>
 80029aa:	1e03      	subs	r3, r0, #0
 80029ac:	d001      	beq.n	80029b2 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80029ae:	f000 fc8d 	bl	80032cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	2203      	movs	r2, #3
 80029b6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80029b8:	1d3a      	adds	r2, r7, #4
 80029ba:	4b34      	ldr	r3, [pc, #208]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 80029bc:	0011      	movs	r1, r2
 80029be:	0018      	movs	r0, r3
 80029c0:	f001 f8a2 	bl	8003b08 <HAL_ADC_ConfigChannel>
 80029c4:	1e03      	subs	r3, r0, #0
 80029c6:	d001      	beq.n	80029cc <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 80029c8:	f000 fc80 	bl	80032cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80029cc:	1d3b      	adds	r3, r7, #4
 80029ce:	2204      	movs	r2, #4
 80029d0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80029d2:	1d3a      	adds	r2, r7, #4
 80029d4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 80029d6:	0011      	movs	r1, r2
 80029d8:	0018      	movs	r0, r3
 80029da:	f001 f895 	bl	8003b08 <HAL_ADC_ConfigChannel>
 80029de:	1e03      	subs	r3, r0, #0
 80029e0:	d001      	beq.n	80029e6 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 80029e2:	f000 fc73 	bl	80032cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80029e6:	1d3b      	adds	r3, r7, #4
 80029e8:	2205      	movs	r2, #5
 80029ea:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80029ec:	1d3a      	adds	r2, r7, #4
 80029ee:	4b27      	ldr	r3, [pc, #156]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 80029f0:	0011      	movs	r1, r2
 80029f2:	0018      	movs	r0, r3
 80029f4:	f001 f888 	bl	8003b08 <HAL_ADC_ConfigChannel>
 80029f8:	1e03      	subs	r3, r0, #0
 80029fa:	d001      	beq.n	8002a00 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 80029fc:	f000 fc66 	bl	80032cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	2206      	movs	r2, #6
 8002a04:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002a06:	1d3a      	adds	r2, r7, #4
 8002a08:	4b20      	ldr	r3, [pc, #128]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 8002a0a:	0011      	movs	r1, r2
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f001 f87b 	bl	8003b08 <HAL_ADC_ConfigChannel>
 8002a12:	1e03      	subs	r3, r0, #0
 8002a14:	d001      	beq.n	8002a1a <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8002a16:	f000 fc59 	bl	80032cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	220a      	movs	r2, #10
 8002a1e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002a20:	1d3a      	adds	r2, r7, #4
 8002a22:	4b1a      	ldr	r3, [pc, #104]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 8002a24:	0011      	movs	r1, r2
 8002a26:	0018      	movs	r0, r3
 8002a28:	f001 f86e 	bl	8003b08 <HAL_ADC_ConfigChannel>
 8002a2c:	1e03      	subs	r3, r0, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8002a30:	f000 fc4c 	bl	80032cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002a34:	1d3b      	adds	r3, r7, #4
 8002a36:	220b      	movs	r2, #11
 8002a38:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002a3a:	1d3a      	adds	r2, r7, #4
 8002a3c:	4b13      	ldr	r3, [pc, #76]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 8002a3e:	0011      	movs	r1, r2
 8002a40:	0018      	movs	r0, r3
 8002a42:	f001 f861 	bl	8003b08 <HAL_ADC_ConfigChannel>
 8002a46:	1e03      	subs	r3, r0, #0
 8002a48:	d001      	beq.n	8002a4e <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8002a4a:	f000 fc3f 	bl	80032cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002a4e:	1d3b      	adds	r3, r7, #4
 8002a50:	220c      	movs	r2, #12
 8002a52:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002a54:	1d3a      	adds	r2, r7, #4
 8002a56:	4b0d      	ldr	r3, [pc, #52]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 8002a58:	0011      	movs	r1, r2
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f001 f854 	bl	8003b08 <HAL_ADC_ConfigChannel>
 8002a60:	1e03      	subs	r3, r0, #0
 8002a62:	d001      	beq.n	8002a68 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8002a64:	f000 fc32 	bl	80032cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002a68:	1d3b      	adds	r3, r7, #4
 8002a6a:	220d      	movs	r2, #13
 8002a6c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002a6e:	1d3a      	adds	r2, r7, #4
 8002a70:	4b06      	ldr	r3, [pc, #24]	@ (8002a8c <MX_ADC_Init+0x1b4>)
 8002a72:	0011      	movs	r1, r2
 8002a74:	0018      	movs	r0, r3
 8002a76:	f001 f847 	bl	8003b08 <HAL_ADC_ConfigChannel>
 8002a7a:	1e03      	subs	r3, r0, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8002a7e:	f000 fc25 	bl	80032cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002a82:	46c0      	nop			@ (mov r8, r8)
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b004      	add	sp, #16
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			@ (mov r8, r8)
 8002a8c:	20000098 	.word	0x20000098
 8002a90:	40012400 	.word	0x40012400

08002a94 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8002a98:	4b17      	ldr	r3, [pc, #92]	@ (8002af8 <MX_CAN_Init+0x64>)
 8002a9a:	4a18      	ldr	r2, [pc, #96]	@ (8002afc <MX_CAN_Init+0x68>)
 8002a9c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8002a9e:	4b16      	ldr	r3, [pc, #88]	@ (8002af8 <MX_CAN_Init+0x64>)
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002aa4:	4b14      	ldr	r3, [pc, #80]	@ (8002af8 <MX_CAN_Init+0x64>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002aaa:	4b13      	ldr	r3, [pc, #76]	@ (8002af8 <MX_CAN_Init+0x64>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8002ab0:	4b11      	ldr	r3, [pc, #68]	@ (8002af8 <MX_CAN_Init+0x64>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002ab6:	4b10      	ldr	r3, [pc, #64]	@ (8002af8 <MX_CAN_Init+0x64>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002abc:	4b0e      	ldr	r3, [pc, #56]	@ (8002af8 <MX_CAN_Init+0x64>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8002af8 <MX_CAN_Init+0x64>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8002af8 <MX_CAN_Init+0x64>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002ace:	4b0a      	ldr	r3, [pc, #40]	@ (8002af8 <MX_CAN_Init+0x64>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002ad4:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <MX_CAN_Init+0x64>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002ada:	4b07      	ldr	r3, [pc, #28]	@ (8002af8 <MX_CAN_Init+0x64>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002ae0:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <MX_CAN_Init+0x64>)
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f001 f91e 	bl	8003d24 <HAL_CAN_Init>
 8002ae8:	1e03      	subs	r3, r0, #0
 8002aea:	d001      	beq.n	8002af0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8002aec:	f000 fbee 	bl	80032cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002af0:	46c0      	nop			@ (mov r8, r8)
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			@ (mov r8, r8)
 8002af8:	200000d8 	.word	0x200000d8
 8002afc:	40006400 	.word	0x40006400

08002b00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b04:	4b1b      	ldr	r3, [pc, #108]	@ (8002b74 <MX_SPI1_Init+0x74>)
 8002b06:	4a1c      	ldr	r2, [pc, #112]	@ (8002b78 <MX_SPI1_Init+0x78>)
 8002b08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002b74 <MX_SPI1_Init+0x74>)
 8002b0c:	2282      	movs	r2, #130	@ 0x82
 8002b0e:	0052      	lsls	r2, r2, #1
 8002b10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b12:	4b18      	ldr	r3, [pc, #96]	@ (8002b74 <MX_SPI1_Init+0x74>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002b18:	4b16      	ldr	r3, [pc, #88]	@ (8002b74 <MX_SPI1_Init+0x74>)
 8002b1a:	22c0      	movs	r2, #192	@ 0xc0
 8002b1c:	0092      	lsls	r2, r2, #2
 8002b1e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b20:	4b14      	ldr	r3, [pc, #80]	@ (8002b74 <MX_SPI1_Init+0x74>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b26:	4b13      	ldr	r3, [pc, #76]	@ (8002b74 <MX_SPI1_Init+0x74>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b2c:	4b11      	ldr	r3, [pc, #68]	@ (8002b74 <MX_SPI1_Init+0x74>)
 8002b2e:	2280      	movs	r2, #128	@ 0x80
 8002b30:	0092      	lsls	r2, r2, #2
 8002b32:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b34:	4b0f      	ldr	r3, [pc, #60]	@ (8002b74 <MX_SPI1_Init+0x74>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b74 <MX_SPI1_Init+0x74>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b40:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <MX_SPI1_Init+0x74>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b46:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <MX_SPI1_Init+0x74>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b4c:	4b09      	ldr	r3, [pc, #36]	@ (8002b74 <MX_SPI1_Init+0x74>)
 8002b4e:	2207      	movs	r2, #7
 8002b50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b52:	4b08      	ldr	r3, [pc, #32]	@ (8002b74 <MX_SPI1_Init+0x74>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b58:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <MX_SPI1_Init+0x74>)
 8002b5a:	2208      	movs	r2, #8
 8002b5c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b5e:	4b05      	ldr	r3, [pc, #20]	@ (8002b74 <MX_SPI1_Init+0x74>)
 8002b60:	0018      	movs	r0, r3
 8002b62:	f002 fa19 	bl	8004f98 <HAL_SPI_Init>
 8002b66:	1e03      	subs	r3, r0, #0
 8002b68:	d001      	beq.n	8002b6e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b6a:	f000 fbaf 	bl	80032cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b6e:	46c0      	nop			@ (mov r8, r8)
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20000100 	.word	0x20000100
 8002b78:	40013000 	.word	0x40013000

08002b7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b82:	2308      	movs	r3, #8
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	0018      	movs	r0, r3
 8002b88:	2310      	movs	r3, #16
 8002b8a:	001a      	movs	r2, r3
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	f004 f8b9 	bl	8006d04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b92:	003b      	movs	r3, r7
 8002b94:	0018      	movs	r0, r3
 8002b96:	2308      	movs	r3, #8
 8002b98:	001a      	movs	r2, r3
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	f004 f8b2 	bl	8006d04 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8002c1c <MX_TIM2_Init+0xa0>)
 8002ba2:	2280      	movs	r2, #128	@ 0x80
 8002ba4:	05d2      	lsls	r2, r2, #23
 8002ba6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c1c <MX_TIM2_Init+0xa0>)
 8002baa:	2247      	movs	r2, #71	@ 0x47
 8002bac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bae:	4b1b      	ldr	r3, [pc, #108]	@ (8002c1c <MX_TIM2_Init+0xa0>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF-1;
 8002bb4:	4b19      	ldr	r3, [pc, #100]	@ (8002c1c <MX_TIM2_Init+0xa0>)
 8002bb6:	4a1a      	ldr	r2, [pc, #104]	@ (8002c20 <MX_TIM2_Init+0xa4>)
 8002bb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bba:	4b18      	ldr	r3, [pc, #96]	@ (8002c1c <MX_TIM2_Init+0xa0>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc0:	4b16      	ldr	r3, [pc, #88]	@ (8002c1c <MX_TIM2_Init+0xa0>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bc6:	4b15      	ldr	r3, [pc, #84]	@ (8002c1c <MX_TIM2_Init+0xa0>)
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f002 fdf5 	bl	80057b8 <HAL_TIM_Base_Init>
 8002bce:	1e03      	subs	r3, r0, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002bd2:	f000 fb7b 	bl	80032cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bd6:	2108      	movs	r1, #8
 8002bd8:	187b      	adds	r3, r7, r1
 8002bda:	2280      	movs	r2, #128	@ 0x80
 8002bdc:	0152      	lsls	r2, r2, #5
 8002bde:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002be0:	187a      	adds	r2, r7, r1
 8002be2:	4b0e      	ldr	r3, [pc, #56]	@ (8002c1c <MX_TIM2_Init+0xa0>)
 8002be4:	0011      	movs	r1, r2
 8002be6:	0018      	movs	r0, r3
 8002be8:	f002 fe36 	bl	8005858 <HAL_TIM_ConfigClockSource>
 8002bec:	1e03      	subs	r3, r0, #0
 8002bee:	d001      	beq.n	8002bf4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002bf0:	f000 fb6c 	bl	80032cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bf4:	003b      	movs	r3, r7
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bfa:	003b      	movs	r3, r7
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c00:	003a      	movs	r2, r7
 8002c02:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <MX_TIM2_Init+0xa0>)
 8002c04:	0011      	movs	r1, r2
 8002c06:	0018      	movs	r0, r3
 8002c08:	f003 f822 	bl	8005c50 <HAL_TIMEx_MasterConfigSynchronization>
 8002c0c:	1e03      	subs	r3, r0, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002c10:	f000 fb5c 	bl	80032cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c14:	46c0      	nop			@ (mov r8, r8)
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b006      	add	sp, #24
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20000164 	.word	0x20000164
 8002c20:	0000fffe 	.word	0x0000fffe

08002c24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c28:	4b14      	ldr	r3, [pc, #80]	@ (8002c7c <MX_USART1_UART_Init+0x58>)
 8002c2a:	4a15      	ldr	r2, [pc, #84]	@ (8002c80 <MX_USART1_UART_Init+0x5c>)
 8002c2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c2e:	4b13      	ldr	r3, [pc, #76]	@ (8002c7c <MX_USART1_UART_Init+0x58>)
 8002c30:	22e1      	movs	r2, #225	@ 0xe1
 8002c32:	0252      	lsls	r2, r2, #9
 8002c34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c36:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <MX_USART1_UART_Init+0x58>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c7c <MX_USART1_UART_Init+0x58>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c42:	4b0e      	ldr	r3, [pc, #56]	@ (8002c7c <MX_USART1_UART_Init+0x58>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c48:	4b0c      	ldr	r3, [pc, #48]	@ (8002c7c <MX_USART1_UART_Init+0x58>)
 8002c4a:	220c      	movs	r2, #12
 8002c4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c7c <MX_USART1_UART_Init+0x58>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c54:	4b09      	ldr	r3, [pc, #36]	@ (8002c7c <MX_USART1_UART_Init+0x58>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c5a:	4b08      	ldr	r3, [pc, #32]	@ (8002c7c <MX_USART1_UART_Init+0x58>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c60:	4b06      	ldr	r3, [pc, #24]	@ (8002c7c <MX_USART1_UART_Init+0x58>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c66:	4b05      	ldr	r3, [pc, #20]	@ (8002c7c <MX_USART1_UART_Init+0x58>)
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f003 f84f 	bl	8005d0c <HAL_UART_Init>
 8002c6e:	1e03      	subs	r3, r0, #0
 8002c70:	d001      	beq.n	8002c76 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002c72:	f000 fb2b 	bl	80032cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c76:	46c0      	nop			@ (mov r8, r8)
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	200001ac 	.word	0x200001ac
 8002c80:	40013800 	.word	0x40013800

08002c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b08b      	sub	sp, #44	@ 0x2c
 8002c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8a:	2414      	movs	r4, #20
 8002c8c:	193b      	adds	r3, r7, r4
 8002c8e:	0018      	movs	r0, r3
 8002c90:	2314      	movs	r3, #20
 8002c92:	001a      	movs	r2, r3
 8002c94:	2100      	movs	r1, #0
 8002c96:	f004 f835 	bl	8006d04 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c9a:	4b48      	ldr	r3, [pc, #288]	@ (8002dbc <MX_GPIO_Init+0x138>)
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	4b47      	ldr	r3, [pc, #284]	@ (8002dbc <MX_GPIO_Init+0x138>)
 8002ca0:	2180      	movs	r1, #128	@ 0x80
 8002ca2:	0309      	lsls	r1, r1, #12
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	615a      	str	r2, [r3, #20]
 8002ca8:	4b44      	ldr	r3, [pc, #272]	@ (8002dbc <MX_GPIO_Init+0x138>)
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	2380      	movs	r3, #128	@ 0x80
 8002cae:	031b      	lsls	r3, r3, #12
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cb6:	4b41      	ldr	r3, [pc, #260]	@ (8002dbc <MX_GPIO_Init+0x138>)
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	4b40      	ldr	r3, [pc, #256]	@ (8002dbc <MX_GPIO_Init+0x138>)
 8002cbc:	2180      	movs	r1, #128	@ 0x80
 8002cbe:	03c9      	lsls	r1, r1, #15
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	615a      	str	r2, [r3, #20]
 8002cc4:	4b3d      	ldr	r3, [pc, #244]	@ (8002dbc <MX_GPIO_Init+0x138>)
 8002cc6:	695a      	ldr	r2, [r3, #20]
 8002cc8:	2380      	movs	r3, #128	@ 0x80
 8002cca:	03db      	lsls	r3, r3, #15
 8002ccc:	4013      	ands	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd2:	4b3a      	ldr	r3, [pc, #232]	@ (8002dbc <MX_GPIO_Init+0x138>)
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	4b39      	ldr	r3, [pc, #228]	@ (8002dbc <MX_GPIO_Init+0x138>)
 8002cd8:	2180      	movs	r1, #128	@ 0x80
 8002cda:	0289      	lsls	r1, r1, #10
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	615a      	str	r2, [r3, #20]
 8002ce0:	4b36      	ldr	r3, [pc, #216]	@ (8002dbc <MX_GPIO_Init+0x138>)
 8002ce2:	695a      	ldr	r2, [r3, #20]
 8002ce4:	2380      	movs	r3, #128	@ 0x80
 8002ce6:	029b      	lsls	r3, r3, #10
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cee:	4b33      	ldr	r3, [pc, #204]	@ (8002dbc <MX_GPIO_Init+0x138>)
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	4b32      	ldr	r3, [pc, #200]	@ (8002dbc <MX_GPIO_Init+0x138>)
 8002cf4:	2180      	movs	r1, #128	@ 0x80
 8002cf6:	02c9      	lsls	r1, r1, #11
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	615a      	str	r2, [r3, #20]
 8002cfc:	4b2f      	ldr	r3, [pc, #188]	@ (8002dbc <MX_GPIO_Init+0x138>)
 8002cfe:	695a      	ldr	r2, [r3, #20]
 8002d00:	2380      	movs	r3, #128	@ 0x80
 8002d02:	02db      	lsls	r3, r3, #11
 8002d04:	4013      	ands	r3, r2
 8002d06:	607b      	str	r3, [r7, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d0a:	4b2c      	ldr	r3, [pc, #176]	@ (8002dbc <MX_GPIO_Init+0x138>)
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002dbc <MX_GPIO_Init+0x138>)
 8002d10:	2180      	movs	r1, #128	@ 0x80
 8002d12:	0349      	lsls	r1, r1, #13
 8002d14:	430a      	orrs	r2, r1
 8002d16:	615a      	str	r2, [r3, #20]
 8002d18:	4b28      	ldr	r3, [pc, #160]	@ (8002dbc <MX_GPIO_Init+0x138>)
 8002d1a:	695a      	ldr	r2, [r3, #20]
 8002d1c:	2380      	movs	r3, #128	@ 0x80
 8002d1e:	035b      	lsls	r3, r3, #13
 8002d20:	4013      	ands	r3, r2
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS1_GPIO_Port, SPI1_CS1_Pin, GPIO_PIN_RESET);
 8002d26:	4b26      	ldr	r3, [pc, #152]	@ (8002dc0 <MX_GPIO_Init+0x13c>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2104      	movs	r1, #4
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f001 fb23 	bl	8004378 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
 8002d32:	193b      	adds	r3, r7, r4
 8002d34:	4a23      	ldr	r2, [pc, #140]	@ (8002dc4 <MX_GPIO_Init+0x140>)
 8002d36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d38:	193b      	adds	r3, r7, r4
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	193b      	adds	r3, r7, r4
 8002d40:	2200      	movs	r2, #0
 8002d42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d44:	193a      	adds	r2, r7, r4
 8002d46:	2390      	movs	r3, #144	@ 0x90
 8002d48:	05db      	lsls	r3, r3, #23
 8002d4a:	0011      	movs	r1, r2
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f001 f99b 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002d52:	193b      	adds	r3, r7, r4
 8002d54:	4a1c      	ldr	r2, [pc, #112]	@ (8002dc8 <MX_GPIO_Init+0x144>)
 8002d56:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d58:	193b      	adds	r3, r7, r4
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	193b      	adds	r3, r7, r4
 8002d60:	2200      	movs	r2, #0
 8002d62:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d64:	193b      	adds	r3, r7, r4
 8002d66:	4a19      	ldr	r2, [pc, #100]	@ (8002dcc <MX_GPIO_Init+0x148>)
 8002d68:	0019      	movs	r1, r3
 8002d6a:	0010      	movs	r0, r2
 8002d6c:	f001 f98c 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 SPI1_CS2_Pin PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002d70:	193b      	adds	r3, r7, r4
 8002d72:	4a17      	ldr	r2, [pc, #92]	@ (8002dd0 <MX_GPIO_Init+0x14c>)
 8002d74:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|SPI1_CS2_Pin|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d76:	193b      	adds	r3, r7, r4
 8002d78:	2200      	movs	r2, #0
 8002d7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	193b      	adds	r3, r7, r4
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d82:	193b      	adds	r3, r7, r4
 8002d84:	4a13      	ldr	r2, [pc, #76]	@ (8002dd4 <MX_GPIO_Init+0x150>)
 8002d86:	0019      	movs	r1, r3
 8002d88:	0010      	movs	r0, r2
 8002d8a:	f001 f97d 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS1_Pin */
  GPIO_InitStruct.Pin = SPI1_CS1_Pin;
 8002d8e:	0021      	movs	r1, r4
 8002d90:	187b      	adds	r3, r7, r1
 8002d92:	2204      	movs	r2, #4
 8002d94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d96:	187b      	adds	r3, r7, r1
 8002d98:	2201      	movs	r2, #1
 8002d9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	187b      	adds	r3, r7, r1
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da2:	187b      	adds	r3, r7, r1
 8002da4:	2200      	movs	r2, #0
 8002da6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS1_GPIO_Port, &GPIO_InitStruct);
 8002da8:	187b      	adds	r3, r7, r1
 8002daa:	4a05      	ldr	r2, [pc, #20]	@ (8002dc0 <MX_GPIO_Init+0x13c>)
 8002dac:	0019      	movs	r1, r3
 8002dae:	0010      	movs	r0, r2
 8002db0:	f001 f96a 	bl	8004088 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002db4:	46c0      	nop			@ (mov r8, r8)
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b00b      	add	sp, #44	@ 0x2c
 8002dba:	bd90      	pop	{r4, r7, pc}
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	48000c00 	.word	0x48000c00
 8002dc4:	00008180 	.word	0x00008180
 8002dc8:	00001ff0 	.word	0x00001ff0
 8002dcc:	48000800 	.word	0x48000800
 8002dd0:	0000ff47 	.word	0x0000ff47
 8002dd4:	48000400 	.word	0x48000400

08002dd8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002de0:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <__io_putchar+0x20>)
 8002de2:	1d39      	adds	r1, r7, #4
 8002de4:	4805      	ldr	r0, [pc, #20]	@ (8002dfc <__io_putchar+0x24>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	f002 ffe4 	bl	8005db4 <HAL_UART_Transmit>

  return ch;
 8002dec:	687b      	ldr	r3, [r7, #4]
}
 8002dee:	0018      	movs	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b002      	add	sp, #8
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	46c0      	nop			@ (mov r8, r8)
 8002df8:	0000ffff 	.word	0x0000ffff
 8002dfc:	200001ac 	.word	0x200001ac

08002e00 <print_wrconfig>:
 \brief Prints the configuration data that is going to be written to the LTC6813
 to the serial port.
 @return void
 ********************************************************************************/
void print_wrconfig(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
    int cfg_pec;
//    Serial.println(F("Written Configuration A Register: "))
    printf("Written Configuration A Register: \n");
 8002e06:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb4 <print_wrconfig+0xb4>)
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f003 fe85 	bl	8006b18 <puts>
    for (int current_ic = 0; current_ic<TOTAL_IC; current_ic++)
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	e047      	b.n	8002ea4 <print_wrconfig+0xa4>
    {
//      Serial.print(F("CFGA IC "));
    	printf("CFGA IC ");
 8002e14:	4b28      	ldr	r3, [pc, #160]	@ (8002eb8 <print_wrconfig+0xb8>)
 8002e16:	0018      	movs	r0, r3
 8002e18:	f003 fe0e 	bl	8006a38 <iprintf>
//      Serial.print(current_ic+1,DEC);
    	printf("%d", current_ic+1);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	4b26      	ldr	r3, [pc, #152]	@ (8002ebc <print_wrconfig+0xbc>)
 8002e22:	0011      	movs	r1, r2
 8002e24:	0018      	movs	r0, r3
 8002e26:	f003 fe07 	bl	8006a38 <iprintf>
      for(int i = 0;i<6;i++)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	e011      	b.n	8002e54 <print_wrconfig+0x54>
      {
//        Serial.print(F(", 0x"));
    	  printf(", 0x");
 8002e30:	4b23      	ldr	r3, [pc, #140]	@ (8002ec0 <print_wrconfig+0xc0>)
 8002e32:	0018      	movs	r0, r3
 8002e34:	f003 fe00 	bl	8006a38 <iprintf>
        serial_print_hex(BMS_IC[current_ic].config.tx_data[i]);
 8002e38:	4a22      	ldr	r2, [pc, #136]	@ (8002ec4 <print_wrconfig+0xc4>)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	21e8      	movs	r1, #232	@ 0xe8
 8002e3e:	434b      	muls	r3, r1
 8002e40:	18d2      	adds	r2, r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	18d3      	adds	r3, r2, r3
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f000 fa0b 	bl	8003264 <serial_print_hex>
      for(int i = 0;i<6;i++)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	3301      	adds	r3, #1
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b05      	cmp	r3, #5
 8002e58:	ddea      	ble.n	8002e30 <print_wrconfig+0x30>
      }
//      Serial.print(F(", Calculated PEC: 0x"));
      printf(", Calculated PEC: 0x");
 8002e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec8 <print_wrconfig+0xc8>)
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f003 fdeb 	bl	8006a38 <iprintf>
      cfg_pec = pec15_calc(6,&BMS_IC[current_ic].config.tx_data[0]);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	22e8      	movs	r2, #232	@ 0xe8
 8002e66:	435a      	muls	r2, r3
 8002e68:	4b16      	ldr	r3, [pc, #88]	@ (8002ec4 <print_wrconfig+0xc4>)
 8002e6a:	18d3      	adds	r3, r2, r3
 8002e6c:	0019      	movs	r1, r3
 8002e6e:	2006      	movs	r0, #6
 8002e70:	f7fe f89c 	bl	8000fac <pec15_calc>
 8002e74:	0003      	movs	r3, r0
 8002e76:	607b      	str	r3, [r7, #4]
      serial_print_hex((uint8_t)(cfg_pec>>8));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	121b      	asrs	r3, r3, #8
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f000 f9f0 	bl	8003264 <serial_print_hex>
//      Serial.print(F(", 0x"));
      printf(", 0x");
 8002e84:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec0 <print_wrconfig+0xc0>)
 8002e86:	0018      	movs	r0, r3
 8002e88:	f003 fdd6 	bl	8006a38 <iprintf>
      serial_print_hex((uint8_t)(cfg_pec));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	0018      	movs	r0, r3
 8002e92:	f000 f9e7 	bl	8003264 <serial_print_hex>
//      Serial.println("\n");
      printf("/n");
 8002e96:	4b0d      	ldr	r3, [pc, #52]	@ (8002ecc <print_wrconfig+0xcc>)
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f003 fdcd 	bl	8006a38 <iprintf>
    for (int current_ic = 0; current_ic<TOTAL_IC; current_ic++)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b11      	cmp	r3, #17
 8002ea8:	ddb4      	ble.n	8002e14 <print_wrconfig+0x14>
    }
}
 8002eaa:	46c0      	nop			@ (mov r8, r8)
 8002eac:	46c0      	nop			@ (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b004      	add	sp, #16
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	08007764 	.word	0x08007764
 8002eb8:	08007788 	.word	0x08007788
 8002ebc:	08007794 	.word	0x08007794
 8002ec0:	08007798 	.word	0x08007798
 8002ec4:	20000234 	.word	0x20000234
 8002ec8:	080077a0 	.word	0x080077a0
 8002ecc:	080077b8 	.word	0x080077b8

08002ed0 <print_rxconfig>:
 \brief Prints the configuration data that was read back from the
 LTC6813 to the serial port.
 @return void
 *******************************************************************/
void print_rxconfig(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
//  Serial.println(F("Received Configuration A Register: "));
	printf("Received Configuration A Register: \n");
 8002ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f80 <print_rxconfig+0xb0>)
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f003 fe1d 	bl	8006b18 <puts>
  for (int current_ic=0; current_ic<TOTAL_IC; current_ic++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	e045      	b.n	8002f70 <print_rxconfig+0xa0>
  {
//    Serial.print(F("CFGA IC "));
	  printf("CFGA IC ");
 8002ee4:	4b27      	ldr	r3, [pc, #156]	@ (8002f84 <print_rxconfig+0xb4>)
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f003 fda6 	bl	8006a38 <iprintf>
//    Serial.print(current_ic+1,DEC);
		printf("%d", current_ic+1);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	4b25      	ldr	r3, [pc, #148]	@ (8002f88 <print_rxconfig+0xb8>)
 8002ef2:	0011      	movs	r1, r2
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f003 fd9f 	bl	8006a38 <iprintf>
    for(int i = 0; i < 6; i++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	603b      	str	r3, [r7, #0]
 8002efe:	e012      	b.n	8002f26 <print_rxconfig+0x56>
    {
//      Serial.print(F(", 0x"));
    	printf(", 0x");
 8002f00:	4b22      	ldr	r3, [pc, #136]	@ (8002f8c <print_rxconfig+0xbc>)
 8002f02:	0018      	movs	r0, r3
 8002f04:	f003 fd98 	bl	8006a38 <iprintf>
      serial_print_hex(BMS_IC[current_ic].config.rx_data[i]);
 8002f08:	4a21      	ldr	r2, [pc, #132]	@ (8002f90 <print_rxconfig+0xc0>)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	21e8      	movs	r1, #232	@ 0xe8
 8002f0e:	434b      	muls	r3, r1
 8002f10:	18d2      	adds	r2, r2, r3
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	18d3      	adds	r3, r2, r3
 8002f16:	3306      	adds	r3, #6
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f000 f9a2 	bl	8003264 <serial_print_hex>
    for(int i = 0; i < 6; i++)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	603b      	str	r3, [r7, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b05      	cmp	r3, #5
 8002f2a:	dde9      	ble.n	8002f00 <print_rxconfig+0x30>
    }
//    Serial.print(F(", Received PEC: 0x"));
    printf(", Received PEC: 0x");
 8002f2c:	4b19      	ldr	r3, [pc, #100]	@ (8002f94 <print_rxconfig+0xc4>)
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f003 fd82 	bl	8006a38 <iprintf>
    serial_print_hex(BMS_IC[current_ic].config.rx_data[6]);
 8002f34:	4a16      	ldr	r2, [pc, #88]	@ (8002f90 <print_rxconfig+0xc0>)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	21e8      	movs	r1, #232	@ 0xe8
 8002f3a:	434b      	muls	r3, r1
 8002f3c:	18d3      	adds	r3, r2, r3
 8002f3e:	330c      	adds	r3, #12
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	0018      	movs	r0, r3
 8002f44:	f000 f98e 	bl	8003264 <serial_print_hex>
//    Serial.print(F(", 0x"));
    printf(", 0x");
 8002f48:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <print_rxconfig+0xbc>)
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f003 fd74 	bl	8006a38 <iprintf>
    serial_print_hex(BMS_IC[current_ic].config.rx_data[7]);
 8002f50:	4a0f      	ldr	r2, [pc, #60]	@ (8002f90 <print_rxconfig+0xc0>)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	21e8      	movs	r1, #232	@ 0xe8
 8002f56:	434b      	muls	r3, r1
 8002f58:	18d3      	adds	r3, r2, r3
 8002f5a:	330d      	adds	r3, #13
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f000 f980 	bl	8003264 <serial_print_hex>
//    Serial.println("\n");
    printf("\n");
 8002f64:	200a      	movs	r0, #10
 8002f66:	f003 fd77 	bl	8006a58 <putchar>
  for (int current_ic=0; current_ic<TOTAL_IC; current_ic++)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	607b      	str	r3, [r7, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b11      	cmp	r3, #17
 8002f74:	ddb6      	ble.n	8002ee4 <print_rxconfig+0x14>
  }
}
 8002f76:	46c0      	nop			@ (mov r8, r8)
 8002f78:	46c0      	nop			@ (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b002      	add	sp, #8
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	080077bc 	.word	0x080077bc
 8002f84:	08007788 	.word	0x08007788
 8002f88:	08007794 	.word	0x08007794
 8002f8c:	08007798 	.word	0x08007798
 8002f90:	20000234 	.word	0x20000234
 8002f94:	080077e0 	.word	0x080077e0

08002f98 <print_cells>:
/*!************************************************************
  \brief Prints cell voltage codes to the serial port
  @return void
 *************************************************************/
void print_cells(uint8_t datalog_en)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	1dfb      	adds	r3, r7, #7
 8002fa2:	701a      	strb	r2, [r3, #0]
  for (int current_ic = 0 ; current_ic < TOTAL_IC; current_ic++)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	e073      	b.n	8003092 <print_cells+0xfa>
  {
    if (datalog_en == 0)
 8002faa:	1dfb      	adds	r3, r7, #7
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d144      	bne.n	800303c <print_cells+0xa4>
    {
//      Serial.print(" IC ");
    	printf("IC ");
 8002fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80030a8 <print_cells+0x110>)
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f003 fd3f 	bl	8006a38 <iprintf>
//      Serial.print(current_ic+1,DEC)
    	printf("%d", current_ic+1);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	4b3b      	ldr	r3, [pc, #236]	@ (80030ac <print_cells+0x114>)
 8002fc0:	0011      	movs	r1, r2
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f003 fd38 	bl	8006a38 <iprintf>
//      Serial.print(", ");
    	printf(", ");
 8002fc8:	4b39      	ldr	r3, [pc, #228]	@ (80030b0 <print_cells+0x118>)
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f003 fd34 	bl	8006a38 <iprintf>
      for (int i=0; i<TOTAL_CELL; i++)
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	613b      	str	r3, [r7, #16]
 8002fd4:	e02b      	b.n	800302e <print_cells+0x96>
      {
//        Serial.print(" C");
    	  printf(" C");
 8002fd6:	4b37      	ldr	r3, [pc, #220]	@ (80030b4 <print_cells+0x11c>)
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f003 fd2d 	bl	8006a38 <iprintf>
//        Serial.print(i+1,DEC);
    	  printf("%d", i+1);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	4b32      	ldr	r3, [pc, #200]	@ (80030ac <print_cells+0x114>)
 8002fe4:	0011      	movs	r1, r2
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f003 fd26 	bl	8006a38 <iprintf>
//        Serial.print(":");
    	  printf(":");
 8002fec:	203a      	movs	r0, #58	@ 0x3a
 8002fee:	f003 fd33 	bl	8006a58 <putchar>
//        Serial.print(BMS_IC[current_ic].cells.c_codes[i]*0.0001,4);
    	  printf("%0.4f", BMS_IC[current_ic].cells.c_codes[i]*0.0001);
 8002ff2:	4a31      	ldr	r2, [pc, #196]	@ (80030b8 <print_cells+0x120>)
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	2174      	movs	r1, #116	@ 0x74
 8002ff8:	4359      	muls	r1, r3
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	18cb      	adds	r3, r1, r3
 8002ffe:	330c      	adds	r3, #12
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	18d3      	adds	r3, r2, r3
 8003004:	3306      	adds	r3, #6
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	0018      	movs	r0, r3
 800300a:	f7fd fbf7 	bl	80007fc <__aeabi_i2d>
 800300e:	4a2b      	ldr	r2, [pc, #172]	@ (80030bc <print_cells+0x124>)
 8003010:	4b2b      	ldr	r3, [pc, #172]	@ (80030c0 <print_cells+0x128>)
 8003012:	f7fd f90d 	bl	8000230 <__aeabi_dmul>
 8003016:	0002      	movs	r2, r0
 8003018:	000b      	movs	r3, r1
 800301a:	492a      	ldr	r1, [pc, #168]	@ (80030c4 <print_cells+0x12c>)
 800301c:	0008      	movs	r0, r1
 800301e:	f003 fd0b 	bl	8006a38 <iprintf>
//        Serial.print(",");
    	  printf(",");
 8003022:	202c      	movs	r0, #44	@ 0x2c
 8003024:	f003 fd18 	bl	8006a58 <putchar>
      for (int i=0; i<TOTAL_CELL; i++)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	3301      	adds	r3, #1
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	2b05      	cmp	r3, #5
 8003032:	ddd0      	ble.n	8002fd6 <print_cells+0x3e>
      }
//      Serial.println();
      printf("\n");
 8003034:	200a      	movs	r0, #10
 8003036:	f003 fd0f 	bl	8006a58 <putchar>
 800303a:	e027      	b.n	800308c <print_cells+0xf4>
    }
    else
    {
//      Serial.print(" Cells, ");
    	printf(" Cells, ");
 800303c:	4b22      	ldr	r3, [pc, #136]	@ (80030c8 <print_cells+0x130>)
 800303e:	0018      	movs	r0, r3
 8003040:	f003 fcfa 	bl	8006a38 <iprintf>
      for (int i=0; i<TOTAL_CELL; i++)
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	e01d      	b.n	8003086 <print_cells+0xee>
      {
//        Serial.print(BMS_IC[current_ic].cells.c_codes[i]*0.0001,4);
    	  printf("%0.4f", BMS_IC[current_ic].cells.c_codes[i]*0.0001);
 800304a:	4a1b      	ldr	r2, [pc, #108]	@ (80030b8 <print_cells+0x120>)
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2174      	movs	r1, #116	@ 0x74
 8003050:	4359      	muls	r1, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	18cb      	adds	r3, r1, r3
 8003056:	330c      	adds	r3, #12
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	18d3      	adds	r3, r2, r3
 800305c:	3306      	adds	r3, #6
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	0018      	movs	r0, r3
 8003062:	f7fd fbcb 	bl	80007fc <__aeabi_i2d>
 8003066:	4a15      	ldr	r2, [pc, #84]	@ (80030bc <print_cells+0x124>)
 8003068:	4b15      	ldr	r3, [pc, #84]	@ (80030c0 <print_cells+0x128>)
 800306a:	f7fd f8e1 	bl	8000230 <__aeabi_dmul>
 800306e:	0002      	movs	r2, r0
 8003070:	000b      	movs	r3, r1
 8003072:	4914      	ldr	r1, [pc, #80]	@ (80030c4 <print_cells+0x12c>)
 8003074:	0008      	movs	r0, r1
 8003076:	f003 fcdf 	bl	8006a38 <iprintf>
//        Serial.print(",");
    	  printf(",");
 800307a:	202c      	movs	r0, #44	@ 0x2c
 800307c:	f003 fcec 	bl	8006a58 <putchar>
      for (int i=0; i<TOTAL_CELL; i++)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	3301      	adds	r3, #1
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2b05      	cmp	r3, #5
 800308a:	ddde      	ble.n	800304a <print_cells+0xb2>
  for (int current_ic = 0 ; current_ic < TOTAL_IC; current_ic++)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	3301      	adds	r3, #1
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2b11      	cmp	r3, #17
 8003096:	dd88      	ble.n	8002faa <print_cells+0x12>
      }
    }
  }
//  Serial.println("\n");
  printf("\n");
 8003098:	200a      	movs	r0, #10
 800309a:	f003 fcdd 	bl	8006a58 <putchar>
}
 800309e:	46c0      	nop			@ (mov r8, r8)
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b006      	add	sp, #24
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	46c0      	nop			@ (mov r8, r8)
 80030a8:	080077f4 	.word	0x080077f4
 80030ac:	08007794 	.word	0x08007794
 80030b0:	080077f8 	.word	0x080077f8
 80030b4:	080077fc 	.word	0x080077fc
 80030b8:	20000234 	.word	0x20000234
 80030bc:	eb1c432d 	.word	0xeb1c432d
 80030c0:	3f1a36e2 	.word	0x3f1a36e2
 80030c4:	08007800 	.word	0x08007800
 80030c8:	08007808 	.word	0x08007808

080030cc <print_aux>:
/*!****************************************************************************
  \brief Prints GPIO voltage codes and Vref2 voltage code onto the serial port
  @return void
 *****************************************************************************/
void print_aux(uint8_t datalog_en)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	0002      	movs	r2, r0
 80030d4:	1dfb      	adds	r3, r7, #7
 80030d6:	701a      	strb	r2, [r3, #0]
  for (int current_ic =0 ; current_ic < TOTAL_IC; current_ic++)
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	e09e      	b.n	800321c <print_aux+0x150>
  {
    if (datalog_en == 0)
 80030de:	1dfb      	adds	r3, r7, #7
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d170      	bne.n	80031c8 <print_aux+0xfc>
    {
//      Serial.print(" IC ");
    	printf(" IC ");
 80030e6:	4b53      	ldr	r3, [pc, #332]	@ (8003234 <print_aux+0x168>)
 80030e8:	0018      	movs	r0, r3
 80030ea:	f003 fca5 	bl	8006a38 <iprintf>
//      Serial.print(current_ic+1,DEC);
      printf("%d", current_ic+1);
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	4b51      	ldr	r3, [pc, #324]	@ (8003238 <print_aux+0x16c>)
 80030f4:	0011      	movs	r1, r2
 80030f6:	0018      	movs	r0, r3
 80030f8:	f003 fc9e 	bl	8006a38 <iprintf>
      for (int i=0; i < 5; i++)
 80030fc:	2300      	movs	r3, #0
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	e029      	b.n	8003156 <print_aux+0x8a>
      {
//        Serial.print(F(" GPIO-"));
    	  printf(" GPIO-");
 8003102:	4b4e      	ldr	r3, [pc, #312]	@ (800323c <print_aux+0x170>)
 8003104:	0018      	movs	r0, r3
 8003106:	f003 fc97 	bl	8006a38 <iprintf>
//        Serial.print(i+1,DEC);
    	  printf("%d", i+1);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	4b4a      	ldr	r3, [pc, #296]	@ (8003238 <print_aux+0x16c>)
 8003110:	0011      	movs	r1, r2
 8003112:	0018      	movs	r0, r3
 8003114:	f003 fc90 	bl	8006a38 <iprintf>
//        Serial.print(":");
    	  printf(":");
 8003118:	203a      	movs	r0, #58	@ 0x3a
 800311a:	f003 fc9d 	bl	8006a58 <putchar>
//        Serial.print(BMS_IC[current_ic].aux.a_codes[i]*0.0001,4);
    	  printf("%0.4f", BMS_IC[current_ic].aux.a_codes[i]*0.0001);
 800311e:	4b48      	ldr	r3, [pc, #288]	@ (8003240 <print_aux+0x174>)
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	2174      	movs	r1, #116	@ 0x74
 8003124:	4351      	muls	r1, r2
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	188a      	adds	r2, r1, r2
 800312a:	3224      	adds	r2, #36	@ 0x24
 800312c:	0052      	lsls	r2, r2, #1
 800312e:	5ad3      	ldrh	r3, [r2, r3]
 8003130:	0018      	movs	r0, r3
 8003132:	f7fd fb63 	bl	80007fc <__aeabi_i2d>
 8003136:	4a43      	ldr	r2, [pc, #268]	@ (8003244 <print_aux+0x178>)
 8003138:	4b43      	ldr	r3, [pc, #268]	@ (8003248 <print_aux+0x17c>)
 800313a:	f7fd f879 	bl	8000230 <__aeabi_dmul>
 800313e:	0002      	movs	r2, r0
 8003140:	000b      	movs	r3, r1
 8003142:	4942      	ldr	r1, [pc, #264]	@ (800324c <print_aux+0x180>)
 8003144:	0008      	movs	r0, r1
 8003146:	f003 fc77 	bl	8006a38 <iprintf>
//        Serial.print(",");
    	  printf(",");
 800314a:	202c      	movs	r0, #44	@ 0x2c
 800314c:	f003 fc84 	bl	8006a58 <putchar>
      for (int i=0; i < 5; i++)
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	3301      	adds	r3, #1
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	2b04      	cmp	r3, #4
 800315a:	ddd2      	ble.n	8003102 <print_aux+0x36>
//        Serial.print(":");
//        Serial.print(BMS_IC[current_ic].aux.a_codes[i]*0.0001,4);
//      }

//      Serial.print(F(" Vref2"));
      printf(" Vref2");
 800315c:	4b3c      	ldr	r3, [pc, #240]	@ (8003250 <print_aux+0x184>)
 800315e:	0018      	movs	r0, r3
 8003160:	f003 fc6a 	bl	8006a38 <iprintf>
//      Serial.print(":");
      printf(":");
 8003164:	203a      	movs	r0, #58	@ 0x3a
 8003166:	f003 fc77 	bl	8006a58 <putchar>
//      Serial.print(BMS_IC[current_ic].aux.a_codes[5]*0.0001,4);
      printf("%0.4f", BMS_IC[current_ic].aux.a_codes[5]*0.0001);
 800316a:	4a35      	ldr	r2, [pc, #212]	@ (8003240 <print_aux+0x174>)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2152      	movs	r1, #82	@ 0x52
 8003170:	20e8      	movs	r0, #232	@ 0xe8
 8003172:	4343      	muls	r3, r0
 8003174:	18d3      	adds	r3, r2, r3
 8003176:	185b      	adds	r3, r3, r1
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	0018      	movs	r0, r3
 800317c:	f7fd fb3e 	bl	80007fc <__aeabi_i2d>
 8003180:	4a30      	ldr	r2, [pc, #192]	@ (8003244 <print_aux+0x178>)
 8003182:	4b31      	ldr	r3, [pc, #196]	@ (8003248 <print_aux+0x17c>)
 8003184:	f7fd f854 	bl	8000230 <__aeabi_dmul>
 8003188:	0002      	movs	r2, r0
 800318a:	000b      	movs	r3, r1
 800318c:	492f      	ldr	r1, [pc, #188]	@ (800324c <print_aux+0x180>)
 800318e:	0008      	movs	r0, r1
 8003190:	f003 fc52 	bl	8006a38 <iprintf>
//      Serial.println();
      printf("\n");
 8003194:	200a      	movs	r0, #10
 8003196:	f003 fc5f 	bl	8006a58 <putchar>

//      Serial.print(" OV/UV Flags : 0x");
      printf(" OV/UV Flags : 0x");
 800319a:	4b2e      	ldr	r3, [pc, #184]	@ (8003254 <print_aux+0x188>)
 800319c:	0018      	movs	r0, r3
 800319e:	f003 fc4b 	bl	8006a38 <iprintf>
//      Serial.print((uint8_t)BMS_IC[current_ic].aux.a_codes[11],HEX);
      printf("%02X", (uint8_t)BMS_IC[current_ic].aux.a_codes[11]);
 80031a2:	4a27      	ldr	r2, [pc, #156]	@ (8003240 <print_aux+0x174>)
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	215e      	movs	r1, #94	@ 0x5e
 80031a8:	20e8      	movs	r0, #232	@ 0xe8
 80031aa:	4343      	muls	r3, r0
 80031ac:	18d3      	adds	r3, r2, r3
 80031ae:	185b      	adds	r3, r3, r1
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	001a      	movs	r2, r3
 80031b6:	4b28      	ldr	r3, [pc, #160]	@ (8003258 <print_aux+0x18c>)
 80031b8:	0011      	movs	r1, r2
 80031ba:	0018      	movs	r0, r3
 80031bc:	f003 fc3c 	bl	8006a38 <iprintf>
//      Serial.println();
      printf("\n");
 80031c0:	200a      	movs	r0, #10
 80031c2:	f003 fc49 	bl	8006a58 <putchar>
 80031c6:	e026      	b.n	8003216 <print_aux+0x14a>
    }
    else
    {
//      Serial.print(" AUX, ");
    	printf(" AUX, ");
 80031c8:	4b24      	ldr	r3, [pc, #144]	@ (800325c <print_aux+0x190>)
 80031ca:	0018      	movs	r0, r3
 80031cc:	f003 fc34 	bl	8006a38 <iprintf>

      for (int i=0; i < 12; i++)
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	e01c      	b.n	8003210 <print_aux+0x144>
      {
//        Serial.print((uint8_t)BMS_IC[current_ic].aux.a_codes[i]*0.0001,4);
    	  printf("%.4f", (uint8_t)BMS_IC[current_ic].aux.a_codes[i] * 0.0001);
 80031d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003240 <print_aux+0x174>)
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	2174      	movs	r1, #116	@ 0x74
 80031dc:	4351      	muls	r1, r2
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	188a      	adds	r2, r1, r2
 80031e2:	3224      	adds	r2, #36	@ 0x24
 80031e4:	0052      	lsls	r2, r2, #1
 80031e6:	5ad3      	ldrh	r3, [r2, r3]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	0018      	movs	r0, r3
 80031ec:	f7fd fb06 	bl	80007fc <__aeabi_i2d>
 80031f0:	4a14      	ldr	r2, [pc, #80]	@ (8003244 <print_aux+0x178>)
 80031f2:	4b15      	ldr	r3, [pc, #84]	@ (8003248 <print_aux+0x17c>)
 80031f4:	f7fd f81c 	bl	8000230 <__aeabi_dmul>
 80031f8:	0002      	movs	r2, r0
 80031fa:	000b      	movs	r3, r1
 80031fc:	4918      	ldr	r1, [pc, #96]	@ (8003260 <print_aux+0x194>)
 80031fe:	0008      	movs	r0, r1
 8003200:	f003 fc1a 	bl	8006a38 <iprintf>
//        Serial.print(",");
        printf(",");
 8003204:	202c      	movs	r0, #44	@ 0x2c
 8003206:	f003 fc27 	bl	8006a58 <putchar>
      for (int i=0; i < 12; i++)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	3301      	adds	r3, #1
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b0b      	cmp	r3, #11
 8003214:	dddf      	ble.n	80031d6 <print_aux+0x10a>
  for (int current_ic =0 ; current_ic < TOTAL_IC; current_ic++)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	3301      	adds	r3, #1
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2b11      	cmp	r3, #17
 8003220:	dc00      	bgt.n	8003224 <print_aux+0x158>
 8003222:	e75c      	b.n	80030de <print_aux+0x12>
      }
    }
  }
// Serial.println("\n");
  printf("\n");
 8003224:	200a      	movs	r0, #10
 8003226:	f003 fc17 	bl	8006a58 <putchar>
}
 800322a:	46c0      	nop			@ (mov r8, r8)
 800322c:	46bd      	mov	sp, r7
 800322e:	b006      	add	sp, #24
 8003230:	bd80      	pop	{r7, pc}
 8003232:	46c0      	nop			@ (mov r8, r8)
 8003234:	08007814 	.word	0x08007814
 8003238:	08007794 	.word	0x08007794
 800323c:	0800781c 	.word	0x0800781c
 8003240:	20000234 	.word	0x20000234
 8003244:	eb1c432d 	.word	0xeb1c432d
 8003248:	3f1a36e2 	.word	0x3f1a36e2
 800324c:	08007800 	.word	0x08007800
 8003250:	08007824 	.word	0x08007824
 8003254:	0800782c 	.word	0x0800782c
 8003258:	08007840 	.word	0x08007840
 800325c:	08007848 	.word	0x08007848
 8003260:	08007850 	.word	0x08007850

08003264 <serial_print_hex>:
/*!****************************************************************************
   \brief Function to print in HEX form
   @return void
 *****************************************************************************/
void serial_print_hex(uint8_t data)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	0002      	movs	r2, r0
 800326c:	1dfb      	adds	r3, r7, #7
 800326e:	701a      	strb	r2, [r3, #0]
  if (data< 16)
 8003270:	1dfb      	adds	r3, r7, #7
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b0f      	cmp	r3, #15
 8003276:	d80a      	bhi.n	800328e <serial_print_hex+0x2a>
  {
//    Serial.print("0");
	  printf("0");
 8003278:	2030      	movs	r0, #48	@ 0x30
 800327a:	f003 fbed 	bl	8006a58 <putchar>
//    Serial.print((byte)data,HEX);
	  printf("%02X", (unsigned char)data);
 800327e:	1dfb      	adds	r3, r7, #7
 8003280:	781a      	ldrb	r2, [r3, #0]
 8003282:	4b08      	ldr	r3, [pc, #32]	@ (80032a4 <serial_print_hex+0x40>)
 8003284:	0011      	movs	r1, r2
 8003286:	0018      	movs	r0, r3
 8003288:	f003 fbd6 	bl	8006a38 <iprintf>
  }
  else
//    Serial.print((byte)data,HEX);
	  printf("%02X", (unsigned char)data);
}
 800328c:	e006      	b.n	800329c <serial_print_hex+0x38>
	  printf("%02X", (unsigned char)data);
 800328e:	1dfb      	adds	r3, r7, #7
 8003290:	781a      	ldrb	r2, [r3, #0]
 8003292:	4b04      	ldr	r3, [pc, #16]	@ (80032a4 <serial_print_hex+0x40>)
 8003294:	0011      	movs	r1, r2
 8003296:	0018      	movs	r0, r3
 8003298:	f003 fbce 	bl	8006a38 <iprintf>
}
 800329c:	46c0      	nop			@ (mov r8, r8)
 800329e:	46bd      	mov	sp, r7
 80032a0:	b002      	add	sp, #8
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	08007840 	.word	0x08007840

080032a8 <check_error>:
/*!****************************************************************************
  \brief Function to check error flag and print PEC error message
  @return void
 *****************************************************************************/
void check_error(int error)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if (error == -1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3301      	adds	r3, #1
 80032b4:	d103      	bne.n	80032be <check_error+0x16>
  {
//    Serial.println(F("A PEC error was detected in the received data"));
	  printf("A PEC error was detected in the received data\n");
 80032b6:	4b04      	ldr	r3, [pc, #16]	@ (80032c8 <check_error+0x20>)
 80032b8:	0018      	movs	r0, r3
 80032ba:	f003 fc2d 	bl	8006b18 <puts>
  }
}
 80032be:	46c0      	nop			@ (mov r8, r8)
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b002      	add	sp, #8
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	46c0      	nop			@ (mov r8, r8)
 80032c8:	08007858 	.word	0x08007858

080032cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032d0:	b672      	cpsid	i
}
 80032d2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032d4:	46c0      	nop			@ (mov r8, r8)
 80032d6:	e7fd      	b.n	80032d4 <Error_Handler+0x8>

080032d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032de:	4b0f      	ldr	r3, [pc, #60]	@ (800331c <HAL_MspInit+0x44>)
 80032e0:	699a      	ldr	r2, [r3, #24]
 80032e2:	4b0e      	ldr	r3, [pc, #56]	@ (800331c <HAL_MspInit+0x44>)
 80032e4:	2101      	movs	r1, #1
 80032e6:	430a      	orrs	r2, r1
 80032e8:	619a      	str	r2, [r3, #24]
 80032ea:	4b0c      	ldr	r3, [pc, #48]	@ (800331c <HAL_MspInit+0x44>)
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	2201      	movs	r2, #1
 80032f0:	4013      	ands	r3, r2
 80032f2:	607b      	str	r3, [r7, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032f6:	4b09      	ldr	r3, [pc, #36]	@ (800331c <HAL_MspInit+0x44>)
 80032f8:	69da      	ldr	r2, [r3, #28]
 80032fa:	4b08      	ldr	r3, [pc, #32]	@ (800331c <HAL_MspInit+0x44>)
 80032fc:	2180      	movs	r1, #128	@ 0x80
 80032fe:	0549      	lsls	r1, r1, #21
 8003300:	430a      	orrs	r2, r1
 8003302:	61da      	str	r2, [r3, #28]
 8003304:	4b05      	ldr	r3, [pc, #20]	@ (800331c <HAL_MspInit+0x44>)
 8003306:	69da      	ldr	r2, [r3, #28]
 8003308:	2380      	movs	r3, #128	@ 0x80
 800330a:	055b      	lsls	r3, r3, #21
 800330c:	4013      	ands	r3, r2
 800330e:	603b      	str	r3, [r7, #0]
 8003310:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	46bd      	mov	sp, r7
 8003316:	b002      	add	sp, #8
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			@ (mov r8, r8)
 800331c:	40021000 	.word	0x40021000

08003320 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003320:	b590      	push	{r4, r7, lr}
 8003322:	b08b      	sub	sp, #44	@ 0x2c
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	2414      	movs	r4, #20
 800332a:	193b      	adds	r3, r7, r4
 800332c:	0018      	movs	r0, r3
 800332e:	2314      	movs	r3, #20
 8003330:	001a      	movs	r2, r3
 8003332:	2100      	movs	r1, #0
 8003334:	f003 fce6 	bl	8006d04 <memset>
  if(hadc->Instance==ADC1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a28      	ldr	r2, [pc, #160]	@ (80033e0 <HAL_ADC_MspInit+0xc0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d149      	bne.n	80033d6 <HAL_ADC_MspInit+0xb6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003342:	4b28      	ldr	r3, [pc, #160]	@ (80033e4 <HAL_ADC_MspInit+0xc4>)
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	4b27      	ldr	r3, [pc, #156]	@ (80033e4 <HAL_ADC_MspInit+0xc4>)
 8003348:	2180      	movs	r1, #128	@ 0x80
 800334a:	0089      	lsls	r1, r1, #2
 800334c:	430a      	orrs	r2, r1
 800334e:	619a      	str	r2, [r3, #24]
 8003350:	4b24      	ldr	r3, [pc, #144]	@ (80033e4 <HAL_ADC_MspInit+0xc4>)
 8003352:	699a      	ldr	r2, [r3, #24]
 8003354:	2380      	movs	r3, #128	@ 0x80
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4013      	ands	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800335e:	4b21      	ldr	r3, [pc, #132]	@ (80033e4 <HAL_ADC_MspInit+0xc4>)
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	4b20      	ldr	r3, [pc, #128]	@ (80033e4 <HAL_ADC_MspInit+0xc4>)
 8003364:	2180      	movs	r1, #128	@ 0x80
 8003366:	0309      	lsls	r1, r1, #12
 8003368:	430a      	orrs	r2, r1
 800336a:	615a      	str	r2, [r3, #20]
 800336c:	4b1d      	ldr	r3, [pc, #116]	@ (80033e4 <HAL_ADC_MspInit+0xc4>)
 800336e:	695a      	ldr	r2, [r3, #20]
 8003370:	2380      	movs	r3, #128	@ 0x80
 8003372:	031b      	lsls	r3, r3, #12
 8003374:	4013      	ands	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800337a:	4b1a      	ldr	r3, [pc, #104]	@ (80033e4 <HAL_ADC_MspInit+0xc4>)
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	4b19      	ldr	r3, [pc, #100]	@ (80033e4 <HAL_ADC_MspInit+0xc4>)
 8003380:	2180      	movs	r1, #128	@ 0x80
 8003382:	0289      	lsls	r1, r1, #10
 8003384:	430a      	orrs	r2, r1
 8003386:	615a      	str	r2, [r3, #20]
 8003388:	4b16      	ldr	r3, [pc, #88]	@ (80033e4 <HAL_ADC_MspInit+0xc4>)
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	2380      	movs	r3, #128	@ 0x80
 800338e:	029b      	lsls	r3, r3, #10
 8003390:	4013      	ands	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003396:	193b      	adds	r3, r7, r4
 8003398:	220f      	movs	r2, #15
 800339a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800339c:	193b      	adds	r3, r7, r4
 800339e:	2203      	movs	r2, #3
 80033a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a2:	193b      	adds	r3, r7, r4
 80033a4:	2200      	movs	r2, #0
 80033a6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a8:	193b      	adds	r3, r7, r4
 80033aa:	4a0f      	ldr	r2, [pc, #60]	@ (80033e8 <HAL_ADC_MspInit+0xc8>)
 80033ac:	0019      	movs	r1, r3
 80033ae:	0010      	movs	r0, r2
 80033b0:	f000 fe6a 	bl	8004088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80033b4:	0021      	movs	r1, r4
 80033b6:	187b      	adds	r3, r7, r1
 80033b8:	227f      	movs	r2, #127	@ 0x7f
 80033ba:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033bc:	187b      	adds	r3, r7, r1
 80033be:	2203      	movs	r2, #3
 80033c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	187b      	adds	r3, r7, r1
 80033c4:	2200      	movs	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c8:	187a      	adds	r2, r7, r1
 80033ca:	2390      	movs	r3, #144	@ 0x90
 80033cc:	05db      	lsls	r3, r3, #23
 80033ce:	0011      	movs	r1, r2
 80033d0:	0018      	movs	r0, r3
 80033d2:	f000 fe59 	bl	8004088 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80033d6:	46c0      	nop			@ (mov r8, r8)
 80033d8:	46bd      	mov	sp, r7
 80033da:	b00b      	add	sp, #44	@ 0x2c
 80033dc:	bd90      	pop	{r4, r7, pc}
 80033de:	46c0      	nop			@ (mov r8, r8)
 80033e0:	40012400 	.word	0x40012400
 80033e4:	40021000 	.word	0x40021000
 80033e8:	48000800 	.word	0x48000800

080033ec <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b08b      	sub	sp, #44	@ 0x2c
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f4:	2414      	movs	r4, #20
 80033f6:	193b      	adds	r3, r7, r4
 80033f8:	0018      	movs	r0, r3
 80033fa:	2314      	movs	r3, #20
 80033fc:	001a      	movs	r2, r3
 80033fe:	2100      	movs	r1, #0
 8003400:	f003 fc80 	bl	8006d04 <memset>
  if(hcan->Instance==CAN)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a1d      	ldr	r2, [pc, #116]	@ (8003480 <HAL_CAN_MspInit+0x94>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d133      	bne.n	8003476 <HAL_CAN_MspInit+0x8a>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800340e:	4b1d      	ldr	r3, [pc, #116]	@ (8003484 <HAL_CAN_MspInit+0x98>)
 8003410:	69da      	ldr	r2, [r3, #28]
 8003412:	4b1c      	ldr	r3, [pc, #112]	@ (8003484 <HAL_CAN_MspInit+0x98>)
 8003414:	2180      	movs	r1, #128	@ 0x80
 8003416:	0489      	lsls	r1, r1, #18
 8003418:	430a      	orrs	r2, r1
 800341a:	61da      	str	r2, [r3, #28]
 800341c:	4b19      	ldr	r3, [pc, #100]	@ (8003484 <HAL_CAN_MspInit+0x98>)
 800341e:	69da      	ldr	r2, [r3, #28]
 8003420:	2380      	movs	r3, #128	@ 0x80
 8003422:	049b      	lsls	r3, r3, #18
 8003424:	4013      	ands	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342a:	4b16      	ldr	r3, [pc, #88]	@ (8003484 <HAL_CAN_MspInit+0x98>)
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	4b15      	ldr	r3, [pc, #84]	@ (8003484 <HAL_CAN_MspInit+0x98>)
 8003430:	2180      	movs	r1, #128	@ 0x80
 8003432:	0289      	lsls	r1, r1, #10
 8003434:	430a      	orrs	r2, r1
 8003436:	615a      	str	r2, [r3, #20]
 8003438:	4b12      	ldr	r3, [pc, #72]	@ (8003484 <HAL_CAN_MspInit+0x98>)
 800343a:	695a      	ldr	r2, [r3, #20]
 800343c:	2380      	movs	r3, #128	@ 0x80
 800343e:	029b      	lsls	r3, r3, #10
 8003440:	4013      	ands	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003446:	193b      	adds	r3, r7, r4
 8003448:	22c0      	movs	r2, #192	@ 0xc0
 800344a:	0152      	lsls	r2, r2, #5
 800344c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344e:	0021      	movs	r1, r4
 8003450:	187b      	adds	r3, r7, r1
 8003452:	2202      	movs	r2, #2
 8003454:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003456:	187b      	adds	r3, r7, r1
 8003458:	2200      	movs	r2, #0
 800345a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800345c:	187b      	adds	r3, r7, r1
 800345e:	2203      	movs	r2, #3
 8003460:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8003462:	187b      	adds	r3, r7, r1
 8003464:	2204      	movs	r2, #4
 8003466:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003468:	187a      	adds	r2, r7, r1
 800346a:	2390      	movs	r3, #144	@ 0x90
 800346c:	05db      	lsls	r3, r3, #23
 800346e:	0011      	movs	r1, r2
 8003470:	0018      	movs	r0, r3
 8003472:	f000 fe09 	bl	8004088 <HAL_GPIO_Init>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	46bd      	mov	sp, r7
 800347a:	b00b      	add	sp, #44	@ 0x2c
 800347c:	bd90      	pop	{r4, r7, pc}
 800347e:	46c0      	nop			@ (mov r8, r8)
 8003480:	40006400 	.word	0x40006400
 8003484:	40021000 	.word	0x40021000

08003488 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003488:	b590      	push	{r4, r7, lr}
 800348a:	b08b      	sub	sp, #44	@ 0x2c
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003490:	2414      	movs	r4, #20
 8003492:	193b      	adds	r3, r7, r4
 8003494:	0018      	movs	r0, r3
 8003496:	2314      	movs	r3, #20
 8003498:	001a      	movs	r2, r3
 800349a:	2100      	movs	r1, #0
 800349c:	f003 fc32 	bl	8006d04 <memset>
  if(hspi->Instance==SPI1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003518 <HAL_SPI_MspInit+0x90>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d131      	bne.n	800350e <HAL_SPI_MspInit+0x86>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034aa:	4b1c      	ldr	r3, [pc, #112]	@ (800351c <HAL_SPI_MspInit+0x94>)
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	4b1b      	ldr	r3, [pc, #108]	@ (800351c <HAL_SPI_MspInit+0x94>)
 80034b0:	2180      	movs	r1, #128	@ 0x80
 80034b2:	0149      	lsls	r1, r1, #5
 80034b4:	430a      	orrs	r2, r1
 80034b6:	619a      	str	r2, [r3, #24]
 80034b8:	4b18      	ldr	r3, [pc, #96]	@ (800351c <HAL_SPI_MspInit+0x94>)
 80034ba:	699a      	ldr	r2, [r3, #24]
 80034bc:	2380      	movs	r3, #128	@ 0x80
 80034be:	015b      	lsls	r3, r3, #5
 80034c0:	4013      	ands	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c6:	4b15      	ldr	r3, [pc, #84]	@ (800351c <HAL_SPI_MspInit+0x94>)
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	4b14      	ldr	r3, [pc, #80]	@ (800351c <HAL_SPI_MspInit+0x94>)
 80034cc:	2180      	movs	r1, #128	@ 0x80
 80034ce:	02c9      	lsls	r1, r1, #11
 80034d0:	430a      	orrs	r2, r1
 80034d2:	615a      	str	r2, [r3, #20]
 80034d4:	4b11      	ldr	r3, [pc, #68]	@ (800351c <HAL_SPI_MspInit+0x94>)
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	2380      	movs	r3, #128	@ 0x80
 80034da:	02db      	lsls	r3, r3, #11
 80034dc:	4013      	ands	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80034e2:	0021      	movs	r1, r4
 80034e4:	187b      	adds	r3, r7, r1
 80034e6:	2238      	movs	r2, #56	@ 0x38
 80034e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ea:	187b      	adds	r3, r7, r1
 80034ec:	2202      	movs	r2, #2
 80034ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f0:	187b      	adds	r3, r7, r1
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034f6:	187b      	adds	r3, r7, r1
 80034f8:	2203      	movs	r2, #3
 80034fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80034fc:	187b      	adds	r3, r7, r1
 80034fe:	2200      	movs	r2, #0
 8003500:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003502:	187b      	adds	r3, r7, r1
 8003504:	4a06      	ldr	r2, [pc, #24]	@ (8003520 <HAL_SPI_MspInit+0x98>)
 8003506:	0019      	movs	r1, r3
 8003508:	0010      	movs	r0, r2
 800350a:	f000 fdbd 	bl	8004088 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800350e:	46c0      	nop			@ (mov r8, r8)
 8003510:	46bd      	mov	sp, r7
 8003512:	b00b      	add	sp, #44	@ 0x2c
 8003514:	bd90      	pop	{r4, r7, pc}
 8003516:	46c0      	nop			@ (mov r8, r8)
 8003518:	40013000 	.word	0x40013000
 800351c:	40021000 	.word	0x40021000
 8003520:	48000400 	.word	0x48000400

08003524 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	2380      	movs	r3, #128	@ 0x80
 8003532:	05db      	lsls	r3, r3, #23
 8003534:	429a      	cmp	r2, r3
 8003536:	d10b      	bne.n	8003550 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003538:	4b07      	ldr	r3, [pc, #28]	@ (8003558 <HAL_TIM_Base_MspInit+0x34>)
 800353a:	69da      	ldr	r2, [r3, #28]
 800353c:	4b06      	ldr	r3, [pc, #24]	@ (8003558 <HAL_TIM_Base_MspInit+0x34>)
 800353e:	2101      	movs	r1, #1
 8003540:	430a      	orrs	r2, r1
 8003542:	61da      	str	r2, [r3, #28]
 8003544:	4b04      	ldr	r3, [pc, #16]	@ (8003558 <HAL_TIM_Base_MspInit+0x34>)
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	2201      	movs	r2, #1
 800354a:	4013      	ands	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003550:	46c0      	nop			@ (mov r8, r8)
 8003552:	46bd      	mov	sp, r7
 8003554:	b004      	add	sp, #16
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40021000 	.word	0x40021000

0800355c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800355c:	b590      	push	{r4, r7, lr}
 800355e:	b08b      	sub	sp, #44	@ 0x2c
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003564:	2414      	movs	r4, #20
 8003566:	193b      	adds	r3, r7, r4
 8003568:	0018      	movs	r0, r3
 800356a:	2314      	movs	r3, #20
 800356c:	001a      	movs	r2, r3
 800356e:	2100      	movs	r1, #0
 8003570:	f003 fbc8 	bl	8006d04 <memset>
  if(huart->Instance==USART1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a1d      	ldr	r2, [pc, #116]	@ (80035f0 <HAL_UART_MspInit+0x94>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d133      	bne.n	80035e6 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800357e:	4b1d      	ldr	r3, [pc, #116]	@ (80035f4 <HAL_UART_MspInit+0x98>)
 8003580:	699a      	ldr	r2, [r3, #24]
 8003582:	4b1c      	ldr	r3, [pc, #112]	@ (80035f4 <HAL_UART_MspInit+0x98>)
 8003584:	2180      	movs	r1, #128	@ 0x80
 8003586:	01c9      	lsls	r1, r1, #7
 8003588:	430a      	orrs	r2, r1
 800358a:	619a      	str	r2, [r3, #24]
 800358c:	4b19      	ldr	r3, [pc, #100]	@ (80035f4 <HAL_UART_MspInit+0x98>)
 800358e:	699a      	ldr	r2, [r3, #24]
 8003590:	2380      	movs	r3, #128	@ 0x80
 8003592:	01db      	lsls	r3, r3, #7
 8003594:	4013      	ands	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800359a:	4b16      	ldr	r3, [pc, #88]	@ (80035f4 <HAL_UART_MspInit+0x98>)
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	4b15      	ldr	r3, [pc, #84]	@ (80035f4 <HAL_UART_MspInit+0x98>)
 80035a0:	2180      	movs	r1, #128	@ 0x80
 80035a2:	0289      	lsls	r1, r1, #10
 80035a4:	430a      	orrs	r2, r1
 80035a6:	615a      	str	r2, [r3, #20]
 80035a8:	4b12      	ldr	r3, [pc, #72]	@ (80035f4 <HAL_UART_MspInit+0x98>)
 80035aa:	695a      	ldr	r2, [r3, #20]
 80035ac:	2380      	movs	r3, #128	@ 0x80
 80035ae:	029b      	lsls	r3, r3, #10
 80035b0:	4013      	ands	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80035b6:	193b      	adds	r3, r7, r4
 80035b8:	22c0      	movs	r2, #192	@ 0xc0
 80035ba:	00d2      	lsls	r2, r2, #3
 80035bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035be:	0021      	movs	r1, r4
 80035c0:	187b      	adds	r3, r7, r1
 80035c2:	2202      	movs	r2, #2
 80035c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c6:	187b      	adds	r3, r7, r1
 80035c8:	2200      	movs	r2, #0
 80035ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035cc:	187b      	adds	r3, r7, r1
 80035ce:	2203      	movs	r2, #3
 80035d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80035d2:	187b      	adds	r3, r7, r1
 80035d4:	2201      	movs	r2, #1
 80035d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d8:	187a      	adds	r2, r7, r1
 80035da:	2390      	movs	r3, #144	@ 0x90
 80035dc:	05db      	lsls	r3, r3, #23
 80035de:	0011      	movs	r1, r2
 80035e0:	0018      	movs	r0, r3
 80035e2:	f000 fd51 	bl	8004088 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80035e6:	46c0      	nop			@ (mov r8, r8)
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b00b      	add	sp, #44	@ 0x2c
 80035ec:	bd90      	pop	{r4, r7, pc}
 80035ee:	46c0      	nop			@ (mov r8, r8)
 80035f0:	40013800 	.word	0x40013800
 80035f4:	40021000 	.word	0x40021000

080035f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035fc:	46c0      	nop			@ (mov r8, r8)
 80035fe:	e7fd      	b.n	80035fc <NMI_Handler+0x4>

08003600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003604:	46c0      	nop			@ (mov r8, r8)
 8003606:	e7fd      	b.n	8003604 <HardFault_Handler+0x4>

08003608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800360c:	46c0      	nop			@ (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003616:	46c0      	nop			@ (mov r8, r8)
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003620:	f000 f916 	bl	8003850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003624:	46c0      	nop			@ (mov r8, r8)
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b086      	sub	sp, #24
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
 800363a:	e00a      	b.n	8003652 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800363c:	e000      	b.n	8003640 <_read+0x16>
 800363e:	bf00      	nop
 8003640:	0001      	movs	r1, r0
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	60ba      	str	r2, [r7, #8]
 8003648:	b2ca      	uxtb	r2, r1
 800364a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	3301      	adds	r3, #1
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	429a      	cmp	r2, r3
 8003658:	dbf0      	blt.n	800363c <_read+0x12>
  }

  return len;
 800365a:	687b      	ldr	r3, [r7, #4]
}
 800365c:	0018      	movs	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	b006      	add	sp, #24
 8003662:	bd80      	pop	{r7, pc}

08003664 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	e009      	b.n	800368a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	60ba      	str	r2, [r7, #8]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	0018      	movs	r0, r3
 8003680:	f7ff fbaa 	bl	8002dd8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	3301      	adds	r3, #1
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	429a      	cmp	r2, r3
 8003690:	dbf1      	blt.n	8003676 <_write+0x12>
  }
  return len;
 8003692:	687b      	ldr	r3, [r7, #4]
}
 8003694:	0018      	movs	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	b006      	add	sp, #24
 800369a:	bd80      	pop	{r7, pc}

0800369c <_close>:

int _close(int file)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036a4:	2301      	movs	r3, #1
 80036a6:	425b      	negs	r3, r3
}
 80036a8:	0018      	movs	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b002      	add	sp, #8
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2280      	movs	r2, #128	@ 0x80
 80036be:	0192      	lsls	r2, r2, #6
 80036c0:	605a      	str	r2, [r3, #4]
  return 0;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	0018      	movs	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	b002      	add	sp, #8
 80036ca:	bd80      	pop	{r7, pc}

080036cc <_isatty>:

int _isatty(int file)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036d4:	2301      	movs	r3, #1
}
 80036d6:	0018      	movs	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	b002      	add	sp, #8
 80036dc:	bd80      	pop	{r7, pc}

080036de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	0018      	movs	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b004      	add	sp, #16
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036fc:	4a14      	ldr	r2, [pc, #80]	@ (8003750 <_sbrk+0x5c>)
 80036fe:	4b15      	ldr	r3, [pc, #84]	@ (8003754 <_sbrk+0x60>)
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003708:	4b13      	ldr	r3, [pc, #76]	@ (8003758 <_sbrk+0x64>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003710:	4b11      	ldr	r3, [pc, #68]	@ (8003758 <_sbrk+0x64>)
 8003712:	4a12      	ldr	r2, [pc, #72]	@ (800375c <_sbrk+0x68>)
 8003714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003716:	4b10      	ldr	r3, [pc, #64]	@ (8003758 <_sbrk+0x64>)
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	18d3      	adds	r3, r2, r3
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	429a      	cmp	r2, r3
 8003722:	d207      	bcs.n	8003734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003724:	f003 fb56 	bl	8006dd4 <__errno>
 8003728:	0003      	movs	r3, r0
 800372a:	220c      	movs	r2, #12
 800372c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800372e:	2301      	movs	r3, #1
 8003730:	425b      	negs	r3, r3
 8003732:	e009      	b.n	8003748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003734:	4b08      	ldr	r3, [pc, #32]	@ (8003758 <_sbrk+0x64>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800373a:	4b07      	ldr	r3, [pc, #28]	@ (8003758 <_sbrk+0x64>)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	18d2      	adds	r2, r2, r3
 8003742:	4b05      	ldr	r3, [pc, #20]	@ (8003758 <_sbrk+0x64>)
 8003744:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003746:	68fb      	ldr	r3, [r7, #12]
}
 8003748:	0018      	movs	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	b006      	add	sp, #24
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20008000 	.word	0x20008000
 8003754:	00000400 	.word	0x00000400
 8003758:	20001294 	.word	0x20001294
 800375c:	200013e8 	.word	0x200013e8

08003760 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003764:	46c0      	nop			@ (mov r8, r8)
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800376c:	480d      	ldr	r0, [pc, #52]	@ (80037a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800376e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003770:	f7ff fff6 	bl	8003760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003774:	480c      	ldr	r0, [pc, #48]	@ (80037a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003776:	490d      	ldr	r1, [pc, #52]	@ (80037ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8003778:	4a0d      	ldr	r2, [pc, #52]	@ (80037b0 <LoopForever+0xe>)
  movs r3, #0
 800377a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800377c:	e002      	b.n	8003784 <LoopCopyDataInit>

0800377e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800377e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003782:	3304      	adds	r3, #4

08003784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003788:	d3f9      	bcc.n	800377e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800378a:	4a0a      	ldr	r2, [pc, #40]	@ (80037b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800378c:	4c0a      	ldr	r4, [pc, #40]	@ (80037b8 <LoopForever+0x16>)
  movs r3, #0
 800378e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003790:	e001      	b.n	8003796 <LoopFillZerobss>

08003792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003794:	3204      	adds	r2, #4

08003796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003798:	d3fb      	bcc.n	8003792 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800379a:	f003 fb21 	bl	8006de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800379e:	f7fe ff63 	bl	8002668 <main>

080037a2 <LoopForever>:

LoopForever:
    b LoopForever
 80037a2:	e7fe      	b.n	80037a2 <LoopForever>
  ldr   r0, =_estack
 80037a4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80037a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037ac:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80037b0:	08007b10 	.word	0x08007b10
  ldr r2, =_sbss
 80037b4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80037b8:	200013e8 	.word	0x200013e8

080037bc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037bc:	e7fe      	b.n	80037bc <ADC1_COMP_IRQHandler>
	...

080037c0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037c4:	4b07      	ldr	r3, [pc, #28]	@ (80037e4 <HAL_Init+0x24>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4b06      	ldr	r3, [pc, #24]	@ (80037e4 <HAL_Init+0x24>)
 80037ca:	2110      	movs	r1, #16
 80037cc:	430a      	orrs	r2, r1
 80037ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80037d0:	2003      	movs	r0, #3
 80037d2:	f000 f809 	bl	80037e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037d6:	f7ff fd7f 	bl	80032d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	0018      	movs	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	40022000 	.word	0x40022000

080037e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037f0:	4b14      	ldr	r3, [pc, #80]	@ (8003844 <HAL_InitTick+0x5c>)
 80037f2:	681c      	ldr	r4, [r3, #0]
 80037f4:	4b14      	ldr	r3, [pc, #80]	@ (8003848 <HAL_InitTick+0x60>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	0019      	movs	r1, r3
 80037fa:	23fa      	movs	r3, #250	@ 0xfa
 80037fc:	0098      	lsls	r0, r3, #2
 80037fe:	f7fc fc8b 	bl	8000118 <__udivsi3>
 8003802:	0003      	movs	r3, r0
 8003804:	0019      	movs	r1, r3
 8003806:	0020      	movs	r0, r4
 8003808:	f7fc fc86 	bl	8000118 <__udivsi3>
 800380c:	0003      	movs	r3, r0
 800380e:	0018      	movs	r0, r3
 8003810:	f000 fc2d 	bl	800406e <HAL_SYSTICK_Config>
 8003814:	1e03      	subs	r3, r0, #0
 8003816:	d001      	beq.n	800381c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e00f      	b.n	800383c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b03      	cmp	r3, #3
 8003820:	d80b      	bhi.n	800383a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	2301      	movs	r3, #1
 8003826:	425b      	negs	r3, r3
 8003828:	2200      	movs	r2, #0
 800382a:	0018      	movs	r0, r3
 800382c:	f000 fc0a 	bl	8004044 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003830:	4b06      	ldr	r3, [pc, #24]	@ (800384c <HAL_InitTick+0x64>)
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e000      	b.n	800383c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
}
 800383c:	0018      	movs	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	b003      	add	sp, #12
 8003842:	bd90      	pop	{r4, r7, pc}
 8003844:	20000014 	.word	0x20000014
 8003848:	2000001c 	.word	0x2000001c
 800384c:	20000018 	.word	0x20000018

08003850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003854:	4b05      	ldr	r3, [pc, #20]	@ (800386c <HAL_IncTick+0x1c>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	001a      	movs	r2, r3
 800385a:	4b05      	ldr	r3, [pc, #20]	@ (8003870 <HAL_IncTick+0x20>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	18d2      	adds	r2, r2, r3
 8003860:	4b03      	ldr	r3, [pc, #12]	@ (8003870 <HAL_IncTick+0x20>)
 8003862:	601a      	str	r2, [r3, #0]
}
 8003864:	46c0      	nop			@ (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	46c0      	nop			@ (mov r8, r8)
 800386c:	2000001c 	.word	0x2000001c
 8003870:	20001298 	.word	0x20001298

08003874 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  return uwTick;
 8003878:	4b02      	ldr	r3, [pc, #8]	@ (8003884 <HAL_GetTick+0x10>)
 800387a:	681b      	ldr	r3, [r3, #0]
}
 800387c:	0018      	movs	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	20001298 	.word	0x20001298

08003888 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003890:	230f      	movs	r3, #15
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e125      	b.n	8003af2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10a      	bne.n	80038c4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2234      	movs	r2, #52	@ 0x34
 80038b8:	2100      	movs	r1, #0
 80038ba:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	0018      	movs	r0, r3
 80038c0:	f7ff fd2e 	bl	8003320 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c8:	2210      	movs	r2, #16
 80038ca:	4013      	ands	r3, r2
 80038cc:	d000      	beq.n	80038d0 <HAL_ADC_Init+0x48>
 80038ce:	e103      	b.n	8003ad8 <HAL_ADC_Init+0x250>
 80038d0:	230f      	movs	r3, #15
 80038d2:	18fb      	adds	r3, r7, r3
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d000      	beq.n	80038dc <HAL_ADC_Init+0x54>
 80038da:	e0fd      	b.n	8003ad8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	2204      	movs	r2, #4
 80038e4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80038e6:	d000      	beq.n	80038ea <HAL_ADC_Init+0x62>
 80038e8:	e0f6      	b.n	8003ad8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ee:	4a83      	ldr	r2, [pc, #524]	@ (8003afc <HAL_ADC_Init+0x274>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	2202      	movs	r2, #2
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2203      	movs	r2, #3
 8003902:	4013      	ands	r3, r2
 8003904:	2b01      	cmp	r3, #1
 8003906:	d112      	bne.n	800392e <HAL_ADC_Init+0xa6>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2201      	movs	r2, #1
 8003910:	4013      	ands	r3, r2
 8003912:	2b01      	cmp	r3, #1
 8003914:	d009      	beq.n	800392a <HAL_ADC_Init+0xa2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	2380      	movs	r3, #128	@ 0x80
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	401a      	ands	r2, r3
 8003922:	2380      	movs	r3, #128	@ 0x80
 8003924:	021b      	lsls	r3, r3, #8
 8003926:	429a      	cmp	r2, r3
 8003928:	d101      	bne.n	800392e <HAL_ADC_Init+0xa6>
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <HAL_ADC_Init+0xa8>
 800392e:	2300      	movs	r3, #0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d116      	bne.n	8003962 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	2218      	movs	r2, #24
 800393c:	4393      	bics	r3, r2
 800393e:	0019      	movs	r1, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	0899      	lsrs	r1, r3, #2
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4964      	ldr	r1, [pc, #400]	@ (8003b00 <HAL_ADC_Init+0x278>)
 800396e:	400a      	ands	r2, r1
 8003970:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	7e1b      	ldrb	r3, [r3, #24]
 8003976:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	7e5b      	ldrb	r3, [r3, #25]
 800397c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800397e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	7e9b      	ldrb	r3, [r3, #26]
 8003984:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003986:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398c:	2b01      	cmp	r3, #1
 800398e:	d002      	beq.n	8003996 <HAL_ADC_Init+0x10e>
 8003990:	2380      	movs	r3, #128	@ 0x80
 8003992:	015b      	lsls	r3, r3, #5
 8003994:	e000      	b.n	8003998 <HAL_ADC_Init+0x110>
 8003996:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003998:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800399e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d101      	bne.n	80039ac <HAL_ADC_Init+0x124>
 80039a8:	2304      	movs	r3, #4
 80039aa:	e000      	b.n	80039ae <HAL_ADC_Init+0x126>
 80039ac:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80039ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2124      	movs	r1, #36	@ 0x24
 80039b4:	5c5b      	ldrb	r3, [r3, r1]
 80039b6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80039b8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	7edb      	ldrb	r3, [r3, #27]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d115      	bne.n	80039f4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	7e9b      	ldrb	r3, [r3, #26]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d105      	bne.n	80039dc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2280      	movs	r2, #128	@ 0x80
 80039d4:	0252      	lsls	r2, r2, #9
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	e00b      	b.n	80039f4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e0:	2220      	movs	r2, #32
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ec:	2201      	movs	r2, #1
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69da      	ldr	r2, [r3, #28]
 80039f8:	23c2      	movs	r3, #194	@ 0xc2
 80039fa:	33ff      	adds	r3, #255	@ 0xff
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d007      	beq.n	8003a10 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68d9      	ldr	r1, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a24:	2380      	movs	r3, #128	@ 0x80
 8003a26:	055b      	lsls	r3, r3, #21
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d01b      	beq.n	8003a64 <HAL_ADC_Init+0x1dc>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d017      	beq.n	8003a64 <HAL_ADC_Init+0x1dc>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d013      	beq.n	8003a64 <HAL_ADC_Init+0x1dc>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d00f      	beq.n	8003a64 <HAL_ADC_Init+0x1dc>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d00b      	beq.n	8003a64 <HAL_ADC_Init+0x1dc>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a50:	2b05      	cmp	r3, #5
 8003a52:	d007      	beq.n	8003a64 <HAL_ADC_Init+0x1dc>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a58:	2b06      	cmp	r3, #6
 8003a5a:	d003      	beq.n	8003a64 <HAL_ADC_Init+0x1dc>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a60:	2b07      	cmp	r3, #7
 8003a62:	d112      	bne.n	8003a8a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2107      	movs	r1, #7
 8003a70:	438a      	bics	r2, r1
 8003a72:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6959      	ldr	r1, [r3, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7e:	2207      	movs	r2, #7
 8003a80:	401a      	ands	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4a1c      	ldr	r2, [pc, #112]	@ (8003b04 <HAL_ADC_Init+0x27c>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d10b      	bne.n	8003ab2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	4393      	bics	r3, r2
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003ab0:	e01c      	b.n	8003aec <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab6:	2212      	movs	r2, #18
 8003ab8:	4393      	bics	r3, r2
 8003aba:	2210      	movs	r2, #16
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003ace:	230f      	movs	r3, #15
 8003ad0:	18fb      	adds	r3, r7, r3
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003ad6:	e009      	b.n	8003aec <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003adc:	2210      	movs	r2, #16
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003ae4:	230f      	movs	r3, #15
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003aec:	230f      	movs	r3, #15
 8003aee:	18fb      	adds	r3, r7, r3
 8003af0:	781b      	ldrb	r3, [r3, #0]
}
 8003af2:	0018      	movs	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b004      	add	sp, #16
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	46c0      	nop			@ (mov r8, r8)
 8003afc:	fffffefd 	.word	0xfffffefd
 8003b00:	fffe0219 	.word	0xfffe0219
 8003b04:	833fffe7 	.word	0x833fffe7

08003b08 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b12:	230f      	movs	r3, #15
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b22:	2380      	movs	r3, #128	@ 0x80
 8003b24:	055b      	lsls	r3, r3, #21
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d011      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0x46>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d00d      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0x46>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d009      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0x46>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d005      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0x46>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d001      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0x46>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2234      	movs	r2, #52	@ 0x34
 8003b52:	5c9b      	ldrb	r3, [r3, r2]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x54>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e0d0      	b.n	8003cfe <HAL_ADC_ConfigChannel+0x1f6>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2234      	movs	r2, #52	@ 0x34
 8003b60:	2101      	movs	r1, #1
 8003b62:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2204      	movs	r2, #4
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d000      	beq.n	8003b72 <HAL_ADC_ConfigChannel+0x6a>
 8003b70:	e0b4      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4a64      	ldr	r2, [pc, #400]	@ (8003d08 <HAL_ADC_ConfigChannel+0x200>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d100      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x76>
 8003b7c:	e082      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b98:	2380      	movs	r3, #128	@ 0x80
 8003b9a:	055b      	lsls	r3, r3, #21
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d037      	beq.n	8003c10 <HAL_ADC_ConfigChannel+0x108>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d033      	beq.n	8003c10 <HAL_ADC_ConfigChannel+0x108>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d02f      	beq.n	8003c10 <HAL_ADC_ConfigChannel+0x108>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d02b      	beq.n	8003c10 <HAL_ADC_ConfigChannel+0x108>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d027      	beq.n	8003c10 <HAL_ADC_ConfigChannel+0x108>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc4:	2b05      	cmp	r3, #5
 8003bc6:	d023      	beq.n	8003c10 <HAL_ADC_ConfigChannel+0x108>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bcc:	2b06      	cmp	r3, #6
 8003bce:	d01f      	beq.n	8003c10 <HAL_ADC_ConfigChannel+0x108>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd4:	2b07      	cmp	r3, #7
 8003bd6:	d01b      	beq.n	8003c10 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	2107      	movs	r1, #7
 8003be4:	400b      	ands	r3, r1
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d012      	beq.n	8003c10 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695a      	ldr	r2, [r3, #20]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2107      	movs	r1, #7
 8003bf6:	438a      	bics	r2, r1
 8003bf8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6959      	ldr	r1, [r3, #20]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2207      	movs	r2, #7
 8003c06:	401a      	ands	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d007      	beq.n	8003c28 <HAL_ADC_ConfigChannel+0x120>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b11      	cmp	r3, #17
 8003c1e:	d003      	beq.n	8003c28 <HAL_ADC_ConfigChannel+0x120>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b12      	cmp	r3, #18
 8003c26:	d163      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003c28:	4b38      	ldr	r3, [pc, #224]	@ (8003d0c <HAL_ADC_ConfigChannel+0x204>)
 8003c2a:	6819      	ldr	r1, [r3, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b10      	cmp	r3, #16
 8003c32:	d009      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0x140>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b11      	cmp	r3, #17
 8003c3a:	d102      	bne.n	8003c42 <HAL_ADC_ConfigChannel+0x13a>
 8003c3c:	2380      	movs	r3, #128	@ 0x80
 8003c3e:	03db      	lsls	r3, r3, #15
 8003c40:	e004      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x144>
 8003c42:	2380      	movs	r3, #128	@ 0x80
 8003c44:	045b      	lsls	r3, r3, #17
 8003c46:	e001      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x144>
 8003c48:	2380      	movs	r3, #128	@ 0x80
 8003c4a:	041b      	lsls	r3, r3, #16
 8003c4c:	4a2f      	ldr	r2, [pc, #188]	@ (8003d0c <HAL_ADC_ConfigChannel+0x204>)
 8003c4e:	430b      	orrs	r3, r1
 8003c50:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b10      	cmp	r3, #16
 8003c58:	d14a      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8003d10 <HAL_ADC_ConfigChannel+0x208>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	492d      	ldr	r1, [pc, #180]	@ (8003d14 <HAL_ADC_ConfigChannel+0x20c>)
 8003c60:	0018      	movs	r0, r3
 8003c62:	f7fc fa59 	bl	8000118 <__udivsi3>
 8003c66:	0003      	movs	r3, r0
 8003c68:	001a      	movs	r2, r3
 8003c6a:	0013      	movs	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	189b      	adds	r3, r3, r2
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c74:	e002      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f9      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x16e>
 8003c82:	e035      	b.n	8003cf0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2101      	movs	r1, #1
 8003c90:	4099      	lsls	r1, r3
 8003c92:	000b      	movs	r3, r1
 8003c94:	43d9      	mvns	r1, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	400a      	ands	r2, r1
 8003c9c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b10      	cmp	r3, #16
 8003ca4:	d007      	beq.n	8003cb6 <HAL_ADC_ConfigChannel+0x1ae>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b11      	cmp	r3, #17
 8003cac:	d003      	beq.n	8003cb6 <HAL_ADC_ConfigChannel+0x1ae>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b12      	cmp	r3, #18
 8003cb4:	d11c      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003cb6:	4b15      	ldr	r3, [pc, #84]	@ (8003d0c <HAL_ADC_ConfigChannel+0x204>)
 8003cb8:	6819      	ldr	r1, [r3, #0]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b10      	cmp	r3, #16
 8003cc0:	d007      	beq.n	8003cd2 <HAL_ADC_ConfigChannel+0x1ca>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b11      	cmp	r3, #17
 8003cc8:	d101      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x1c6>
 8003cca:	4b13      	ldr	r3, [pc, #76]	@ (8003d18 <HAL_ADC_ConfigChannel+0x210>)
 8003ccc:	e002      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x1cc>
 8003cce:	4b13      	ldr	r3, [pc, #76]	@ (8003d1c <HAL_ADC_ConfigChannel+0x214>)
 8003cd0:	e000      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x1cc>
 8003cd2:	4b13      	ldr	r3, [pc, #76]	@ (8003d20 <HAL_ADC_ConfigChannel+0x218>)
 8003cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8003d0c <HAL_ADC_ConfigChannel+0x204>)
 8003cd6:	400b      	ands	r3, r1
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	e009      	b.n	8003cf0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003ce8:	230f      	movs	r3, #15
 8003cea:	18fb      	adds	r3, r7, r3
 8003cec:	2201      	movs	r2, #1
 8003cee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2234      	movs	r2, #52	@ 0x34
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003cf8:	230f      	movs	r3, #15
 8003cfa:	18fb      	adds	r3, r7, r3
 8003cfc:	781b      	ldrb	r3, [r3, #0]
}
 8003cfe:	0018      	movs	r0, r3
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b004      	add	sp, #16
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	46c0      	nop			@ (mov r8, r8)
 8003d08:	00001001 	.word	0x00001001
 8003d0c:	40012708 	.word	0x40012708
 8003d10:	20000014 	.word	0x20000014
 8003d14:	000f4240 	.word	0x000f4240
 8003d18:	ffbfffff 	.word	0xffbfffff
 8003d1c:	feffffff 	.word	0xfeffffff
 8003d20:	ff7fffff 	.word	0xff7fffff

08003d24 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e0f0      	b.n	8003f18 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	5c9b      	ldrb	r3, [r3, r2]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d103      	bne.n	8003d4a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	0018      	movs	r0, r3
 8003d46:	f7ff fb51 	bl	80033ec <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2101      	movs	r1, #1
 8003d56:	430a      	orrs	r2, r1
 8003d58:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d5a:	f7ff fd8b 	bl	8003874 <HAL_GetTick>
 8003d5e:	0003      	movs	r3, r0
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d62:	e013      	b.n	8003d8c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d64:	f7ff fd86 	bl	8003874 <HAL_GetTick>
 8003d68:	0002      	movs	r2, r0
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b0a      	cmp	r3, #10
 8003d70:	d90c      	bls.n	8003d8c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d76:	2280      	movs	r2, #128	@ 0x80
 8003d78:	0292      	lsls	r2, r2, #10
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	2105      	movs	r1, #5
 8003d86:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0c5      	b.n	8003f18 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	4013      	ands	r3, r2
 8003d96:	d0e5      	beq.n	8003d64 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2102      	movs	r1, #2
 8003da4:	438a      	bics	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003da8:	f7ff fd64 	bl	8003874 <HAL_GetTick>
 8003dac:	0003      	movs	r3, r0
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003db0:	e013      	b.n	8003dda <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003db2:	f7ff fd5f 	bl	8003874 <HAL_GetTick>
 8003db6:	0002      	movs	r2, r0
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b0a      	cmp	r3, #10
 8003dbe:	d90c      	bls.n	8003dda <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc4:	2280      	movs	r2, #128	@ 0x80
 8003dc6:	0292      	lsls	r2, r2, #10
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	2105      	movs	r1, #5
 8003dd4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e09e      	b.n	8003f18 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2202      	movs	r2, #2
 8003de2:	4013      	ands	r3, r2
 8003de4:	d1e5      	bne.n	8003db2 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	7e1b      	ldrb	r3, [r3, #24]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d108      	bne.n	8003e00 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2180      	movs	r1, #128	@ 0x80
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	e007      	b.n	8003e10 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2180      	movs	r1, #128	@ 0x80
 8003e0c:	438a      	bics	r2, r1
 8003e0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	7e5b      	ldrb	r3, [r3, #25]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d108      	bne.n	8003e2a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2140      	movs	r1, #64	@ 0x40
 8003e24:	430a      	orrs	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	e007      	b.n	8003e3a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2140      	movs	r1, #64	@ 0x40
 8003e36:	438a      	bics	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	7e9b      	ldrb	r3, [r3, #26]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d108      	bne.n	8003e54 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2120      	movs	r1, #32
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	e007      	b.n	8003e64 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2120      	movs	r1, #32
 8003e60:	438a      	bics	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	7edb      	ldrb	r3, [r3, #27]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d108      	bne.n	8003e7e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2110      	movs	r1, #16
 8003e78:	438a      	bics	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	e007      	b.n	8003e8e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2110      	movs	r1, #16
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	7f1b      	ldrb	r3, [r3, #28]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d108      	bne.n	8003ea8 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2108      	movs	r1, #8
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	e007      	b.n	8003eb8 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2108      	movs	r1, #8
 8003eb4:	438a      	bics	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	7f5b      	ldrb	r3, [r3, #29]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d108      	bne.n	8003ed2 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2104      	movs	r1, #4
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	e007      	b.n	8003ee2 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2104      	movs	r1, #4
 8003ede:	438a      	bics	r2, r1
 8003ee0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	0011      	movs	r1, r2
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	1e5a      	subs	r2, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	2101      	movs	r1, #1
 8003f14:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	0018      	movs	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b004      	add	sp, #16
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f20:	b590      	push	{r4, r7, lr}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	0002      	movs	r2, r0
 8003f28:	6039      	str	r1, [r7, #0]
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f2e:	1dfb      	adds	r3, r7, #7
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f34:	d828      	bhi.n	8003f88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f36:	4a2f      	ldr	r2, [pc, #188]	@ (8003ff4 <__NVIC_SetPriority+0xd4>)
 8003f38:	1dfb      	adds	r3, r7, #7
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	b25b      	sxtb	r3, r3
 8003f3e:	089b      	lsrs	r3, r3, #2
 8003f40:	33c0      	adds	r3, #192	@ 0xc0
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	589b      	ldr	r3, [r3, r2]
 8003f46:	1dfa      	adds	r2, r7, #7
 8003f48:	7812      	ldrb	r2, [r2, #0]
 8003f4a:	0011      	movs	r1, r2
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	400a      	ands	r2, r1
 8003f50:	00d2      	lsls	r2, r2, #3
 8003f52:	21ff      	movs	r1, #255	@ 0xff
 8003f54:	4091      	lsls	r1, r2
 8003f56:	000a      	movs	r2, r1
 8003f58:	43d2      	mvns	r2, r2
 8003f5a:	401a      	ands	r2, r3
 8003f5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	019b      	lsls	r3, r3, #6
 8003f62:	22ff      	movs	r2, #255	@ 0xff
 8003f64:	401a      	ands	r2, r3
 8003f66:	1dfb      	adds	r3, r7, #7
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	4003      	ands	r3, r0
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f74:	481f      	ldr	r0, [pc, #124]	@ (8003ff4 <__NVIC_SetPriority+0xd4>)
 8003f76:	1dfb      	adds	r3, r7, #7
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	b25b      	sxtb	r3, r3
 8003f7c:	089b      	lsrs	r3, r3, #2
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	33c0      	adds	r3, #192	@ 0xc0
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003f86:	e031      	b.n	8003fec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f88:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff8 <__NVIC_SetPriority+0xd8>)
 8003f8a:	1dfb      	adds	r3, r7, #7
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	0019      	movs	r1, r3
 8003f90:	230f      	movs	r3, #15
 8003f92:	400b      	ands	r3, r1
 8003f94:	3b08      	subs	r3, #8
 8003f96:	089b      	lsrs	r3, r3, #2
 8003f98:	3306      	adds	r3, #6
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	18d3      	adds	r3, r2, r3
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	1dfa      	adds	r2, r7, #7
 8003fa4:	7812      	ldrb	r2, [r2, #0]
 8003fa6:	0011      	movs	r1, r2
 8003fa8:	2203      	movs	r2, #3
 8003faa:	400a      	ands	r2, r1
 8003fac:	00d2      	lsls	r2, r2, #3
 8003fae:	21ff      	movs	r1, #255	@ 0xff
 8003fb0:	4091      	lsls	r1, r2
 8003fb2:	000a      	movs	r2, r1
 8003fb4:	43d2      	mvns	r2, r2
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	019b      	lsls	r3, r3, #6
 8003fbe:	22ff      	movs	r2, #255	@ 0xff
 8003fc0:	401a      	ands	r2, r3
 8003fc2:	1dfb      	adds	r3, r7, #7
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	2303      	movs	r3, #3
 8003fca:	4003      	ands	r3, r0
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fd0:	4809      	ldr	r0, [pc, #36]	@ (8003ff8 <__NVIC_SetPriority+0xd8>)
 8003fd2:	1dfb      	adds	r3, r7, #7
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	001c      	movs	r4, r3
 8003fd8:	230f      	movs	r3, #15
 8003fda:	4023      	ands	r3, r4
 8003fdc:	3b08      	subs	r3, #8
 8003fde:	089b      	lsrs	r3, r3, #2
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	3306      	adds	r3, #6
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	18c3      	adds	r3, r0, r3
 8003fe8:	3304      	adds	r3, #4
 8003fea:	601a      	str	r2, [r3, #0]
}
 8003fec:	46c0      	nop			@ (mov r8, r8)
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b003      	add	sp, #12
 8003ff2:	bd90      	pop	{r4, r7, pc}
 8003ff4:	e000e100 	.word	0xe000e100
 8003ff8:	e000ed00 	.word	0xe000ed00

08003ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	1e5a      	subs	r2, r3, #1
 8004008:	2380      	movs	r3, #128	@ 0x80
 800400a:	045b      	lsls	r3, r3, #17
 800400c:	429a      	cmp	r2, r3
 800400e:	d301      	bcc.n	8004014 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004010:	2301      	movs	r3, #1
 8004012:	e010      	b.n	8004036 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004014:	4b0a      	ldr	r3, [pc, #40]	@ (8004040 <SysTick_Config+0x44>)
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	3a01      	subs	r2, #1
 800401a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800401c:	2301      	movs	r3, #1
 800401e:	425b      	negs	r3, r3
 8004020:	2103      	movs	r1, #3
 8004022:	0018      	movs	r0, r3
 8004024:	f7ff ff7c 	bl	8003f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004028:	4b05      	ldr	r3, [pc, #20]	@ (8004040 <SysTick_Config+0x44>)
 800402a:	2200      	movs	r2, #0
 800402c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800402e:	4b04      	ldr	r3, [pc, #16]	@ (8004040 <SysTick_Config+0x44>)
 8004030:	2207      	movs	r2, #7
 8004032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004034:	2300      	movs	r3, #0
}
 8004036:	0018      	movs	r0, r3
 8004038:	46bd      	mov	sp, r7
 800403a:	b002      	add	sp, #8
 800403c:	bd80      	pop	{r7, pc}
 800403e:	46c0      	nop			@ (mov r8, r8)
 8004040:	e000e010 	.word	0xe000e010

08004044 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	210f      	movs	r1, #15
 8004050:	187b      	adds	r3, r7, r1
 8004052:	1c02      	adds	r2, r0, #0
 8004054:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	187b      	adds	r3, r7, r1
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	b25b      	sxtb	r3, r3
 800405e:	0011      	movs	r1, r2
 8004060:	0018      	movs	r0, r3
 8004062:	f7ff ff5d 	bl	8003f20 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8004066:	46c0      	nop			@ (mov r8, r8)
 8004068:	46bd      	mov	sp, r7
 800406a:	b004      	add	sp, #16
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	0018      	movs	r0, r3
 800407a:	f7ff ffbf 	bl	8003ffc <SysTick_Config>
 800407e:	0003      	movs	r3, r0
}
 8004080:	0018      	movs	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	b002      	add	sp, #8
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004092:	2300      	movs	r3, #0
 8004094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004096:	e155      	b.n	8004344 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2101      	movs	r1, #1
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4091      	lsls	r1, r2
 80040a2:	000a      	movs	r2, r1
 80040a4:	4013      	ands	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d100      	bne.n	80040b0 <HAL_GPIO_Init+0x28>
 80040ae:	e146      	b.n	800433e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2203      	movs	r2, #3
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d005      	beq.n	80040c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2203      	movs	r2, #3
 80040c2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d130      	bne.n	800412a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	2203      	movs	r2, #3
 80040d4:	409a      	lsls	r2, r3
 80040d6:	0013      	movs	r3, r2
 80040d8:	43da      	mvns	r2, r3
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	4013      	ands	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	409a      	lsls	r2, r3
 80040ea:	0013      	movs	r3, r2
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040fe:	2201      	movs	r2, #1
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	409a      	lsls	r2, r3
 8004104:	0013      	movs	r3, r2
 8004106:	43da      	mvns	r2, r3
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4013      	ands	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	091b      	lsrs	r3, r3, #4
 8004114:	2201      	movs	r2, #1
 8004116:	401a      	ands	r2, r3
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	409a      	lsls	r2, r3
 800411c:	0013      	movs	r3, r2
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2203      	movs	r2, #3
 8004130:	4013      	ands	r3, r2
 8004132:	2b03      	cmp	r3, #3
 8004134:	d017      	beq.n	8004166 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	2203      	movs	r2, #3
 8004142:	409a      	lsls	r2, r3
 8004144:	0013      	movs	r3, r2
 8004146:	43da      	mvns	r2, r3
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4013      	ands	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	409a      	lsls	r2, r3
 8004158:	0013      	movs	r3, r2
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2203      	movs	r2, #3
 800416c:	4013      	ands	r3, r2
 800416e:	2b02      	cmp	r3, #2
 8004170:	d123      	bne.n	80041ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	08da      	lsrs	r2, r3, #3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3208      	adds	r2, #8
 800417a:	0092      	lsls	r2, r2, #2
 800417c:	58d3      	ldr	r3, [r2, r3]
 800417e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2207      	movs	r2, #7
 8004184:	4013      	ands	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	220f      	movs	r2, #15
 800418a:	409a      	lsls	r2, r3
 800418c:	0013      	movs	r3, r2
 800418e:	43da      	mvns	r2, r3
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	4013      	ands	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2107      	movs	r1, #7
 800419e:	400b      	ands	r3, r1
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	409a      	lsls	r2, r3
 80041a4:	0013      	movs	r3, r2
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	08da      	lsrs	r2, r3, #3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3208      	adds	r2, #8
 80041b4:	0092      	lsls	r2, r2, #2
 80041b6:	6939      	ldr	r1, [r7, #16]
 80041b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	2203      	movs	r2, #3
 80041c6:	409a      	lsls	r2, r3
 80041c8:	0013      	movs	r3, r2
 80041ca:	43da      	mvns	r2, r3
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	4013      	ands	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2203      	movs	r2, #3
 80041d8:	401a      	ands	r2, r3
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	409a      	lsls	r2, r3
 80041e0:	0013      	movs	r3, r2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	23c0      	movs	r3, #192	@ 0xc0
 80041f4:	029b      	lsls	r3, r3, #10
 80041f6:	4013      	ands	r3, r2
 80041f8:	d100      	bne.n	80041fc <HAL_GPIO_Init+0x174>
 80041fa:	e0a0      	b.n	800433e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041fc:	4b57      	ldr	r3, [pc, #348]	@ (800435c <HAL_GPIO_Init+0x2d4>)
 80041fe:	699a      	ldr	r2, [r3, #24]
 8004200:	4b56      	ldr	r3, [pc, #344]	@ (800435c <HAL_GPIO_Init+0x2d4>)
 8004202:	2101      	movs	r1, #1
 8004204:	430a      	orrs	r2, r1
 8004206:	619a      	str	r2, [r3, #24]
 8004208:	4b54      	ldr	r3, [pc, #336]	@ (800435c <HAL_GPIO_Init+0x2d4>)
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	2201      	movs	r2, #1
 800420e:	4013      	ands	r3, r2
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004214:	4a52      	ldr	r2, [pc, #328]	@ (8004360 <HAL_GPIO_Init+0x2d8>)
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	089b      	lsrs	r3, r3, #2
 800421a:	3302      	adds	r3, #2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	589b      	ldr	r3, [r3, r2]
 8004220:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2203      	movs	r2, #3
 8004226:	4013      	ands	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	220f      	movs	r2, #15
 800422c:	409a      	lsls	r2, r3
 800422e:	0013      	movs	r3, r2
 8004230:	43da      	mvns	r2, r3
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4013      	ands	r3, r2
 8004236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	2390      	movs	r3, #144	@ 0x90
 800423c:	05db      	lsls	r3, r3, #23
 800423e:	429a      	cmp	r2, r3
 8004240:	d019      	beq.n	8004276 <HAL_GPIO_Init+0x1ee>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a47      	ldr	r2, [pc, #284]	@ (8004364 <HAL_GPIO_Init+0x2dc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d013      	beq.n	8004272 <HAL_GPIO_Init+0x1ea>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a46      	ldr	r2, [pc, #280]	@ (8004368 <HAL_GPIO_Init+0x2e0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00d      	beq.n	800426e <HAL_GPIO_Init+0x1e6>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a45      	ldr	r2, [pc, #276]	@ (800436c <HAL_GPIO_Init+0x2e4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d007      	beq.n	800426a <HAL_GPIO_Init+0x1e2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a44      	ldr	r2, [pc, #272]	@ (8004370 <HAL_GPIO_Init+0x2e8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d101      	bne.n	8004266 <HAL_GPIO_Init+0x1de>
 8004262:	2304      	movs	r3, #4
 8004264:	e008      	b.n	8004278 <HAL_GPIO_Init+0x1f0>
 8004266:	2305      	movs	r3, #5
 8004268:	e006      	b.n	8004278 <HAL_GPIO_Init+0x1f0>
 800426a:	2303      	movs	r3, #3
 800426c:	e004      	b.n	8004278 <HAL_GPIO_Init+0x1f0>
 800426e:	2302      	movs	r3, #2
 8004270:	e002      	b.n	8004278 <HAL_GPIO_Init+0x1f0>
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <HAL_GPIO_Init+0x1f0>
 8004276:	2300      	movs	r3, #0
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	2103      	movs	r1, #3
 800427c:	400a      	ands	r2, r1
 800427e:	0092      	lsls	r2, r2, #2
 8004280:	4093      	lsls	r3, r2
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004288:	4935      	ldr	r1, [pc, #212]	@ (8004360 <HAL_GPIO_Init+0x2d8>)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	089b      	lsrs	r3, r3, #2
 800428e:	3302      	adds	r3, #2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004296:	4b37      	ldr	r3, [pc, #220]	@ (8004374 <HAL_GPIO_Init+0x2ec>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	43da      	mvns	r2, r3
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4013      	ands	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	2380      	movs	r3, #128	@ 0x80
 80042ac:	035b      	lsls	r3, r3, #13
 80042ae:	4013      	ands	r3, r2
 80042b0:	d003      	beq.n	80042ba <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80042ba:	4b2e      	ldr	r3, [pc, #184]	@ (8004374 <HAL_GPIO_Init+0x2ec>)
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80042c0:	4b2c      	ldr	r3, [pc, #176]	@ (8004374 <HAL_GPIO_Init+0x2ec>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	43da      	mvns	r2, r3
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	4013      	ands	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	2380      	movs	r3, #128	@ 0x80
 80042d6:	039b      	lsls	r3, r3, #14
 80042d8:	4013      	ands	r3, r2
 80042da:	d003      	beq.n	80042e4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80042e4:	4b23      	ldr	r3, [pc, #140]	@ (8004374 <HAL_GPIO_Init+0x2ec>)
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80042ea:	4b22      	ldr	r3, [pc, #136]	@ (8004374 <HAL_GPIO_Init+0x2ec>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	43da      	mvns	r2, r3
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	4013      	ands	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	2380      	movs	r3, #128	@ 0x80
 8004300:	029b      	lsls	r3, r3, #10
 8004302:	4013      	ands	r3, r2
 8004304:	d003      	beq.n	800430e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800430e:	4b19      	ldr	r3, [pc, #100]	@ (8004374 <HAL_GPIO_Init+0x2ec>)
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004314:	4b17      	ldr	r3, [pc, #92]	@ (8004374 <HAL_GPIO_Init+0x2ec>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	43da      	mvns	r2, r3
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	4013      	ands	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	2380      	movs	r3, #128	@ 0x80
 800432a:	025b      	lsls	r3, r3, #9
 800432c:	4013      	ands	r3, r2
 800432e:	d003      	beq.n	8004338 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004338:	4b0e      	ldr	r3, [pc, #56]	@ (8004374 <HAL_GPIO_Init+0x2ec>)
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	3301      	adds	r3, #1
 8004342:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	40da      	lsrs	r2, r3
 800434c:	1e13      	subs	r3, r2, #0
 800434e:	d000      	beq.n	8004352 <HAL_GPIO_Init+0x2ca>
 8004350:	e6a2      	b.n	8004098 <HAL_GPIO_Init+0x10>
  } 
}
 8004352:	46c0      	nop			@ (mov r8, r8)
 8004354:	46c0      	nop			@ (mov r8, r8)
 8004356:	46bd      	mov	sp, r7
 8004358:	b006      	add	sp, #24
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40021000 	.word	0x40021000
 8004360:	40010000 	.word	0x40010000
 8004364:	48000400 	.word	0x48000400
 8004368:	48000800 	.word	0x48000800
 800436c:	48000c00 	.word	0x48000c00
 8004370:	48001000 	.word	0x48001000
 8004374:	40010400 	.word	0x40010400

08004378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	0008      	movs	r0, r1
 8004382:	0011      	movs	r1, r2
 8004384:	1cbb      	adds	r3, r7, #2
 8004386:	1c02      	adds	r2, r0, #0
 8004388:	801a      	strh	r2, [r3, #0]
 800438a:	1c7b      	adds	r3, r7, #1
 800438c:	1c0a      	adds	r2, r1, #0
 800438e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004390:	1c7b      	adds	r3, r7, #1
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d004      	beq.n	80043a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004398:	1cbb      	adds	r3, r7, #2
 800439a:	881a      	ldrh	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043a0:	e003      	b.n	80043aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043a2:	1cbb      	adds	r3, r7, #2
 80043a4:	881a      	ldrh	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043aa:	46c0      	nop			@ (mov r8, r8)
 80043ac:	46bd      	mov	sp, r7
 80043ae:	b002      	add	sp, #8
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b088      	sub	sp, #32
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	f000 fb76 	bl	8004ab4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2201      	movs	r2, #1
 80043ce:	4013      	ands	r3, r2
 80043d0:	d100      	bne.n	80043d4 <HAL_RCC_OscConfig+0x20>
 80043d2:	e08e      	b.n	80044f2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80043d4:	4bc5      	ldr	r3, [pc, #788]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	220c      	movs	r2, #12
 80043da:	4013      	ands	r3, r2
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d00e      	beq.n	80043fe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043e0:	4bc2      	ldr	r3, [pc, #776]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	220c      	movs	r2, #12
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d117      	bne.n	800441c <HAL_RCC_OscConfig+0x68>
 80043ec:	4bbf      	ldr	r3, [pc, #764]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	23c0      	movs	r3, #192	@ 0xc0
 80043f2:	025b      	lsls	r3, r3, #9
 80043f4:	401a      	ands	r2, r3
 80043f6:	2380      	movs	r3, #128	@ 0x80
 80043f8:	025b      	lsls	r3, r3, #9
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d10e      	bne.n	800441c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043fe:	4bbb      	ldr	r3, [pc, #748]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	2380      	movs	r3, #128	@ 0x80
 8004404:	029b      	lsls	r3, r3, #10
 8004406:	4013      	ands	r3, r2
 8004408:	d100      	bne.n	800440c <HAL_RCC_OscConfig+0x58>
 800440a:	e071      	b.n	80044f0 <HAL_RCC_OscConfig+0x13c>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d000      	beq.n	8004416 <HAL_RCC_OscConfig+0x62>
 8004414:	e06c      	b.n	80044f0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	f000 fb4c 	bl	8004ab4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d107      	bne.n	8004434 <HAL_RCC_OscConfig+0x80>
 8004424:	4bb1      	ldr	r3, [pc, #708]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	4bb0      	ldr	r3, [pc, #704]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 800442a:	2180      	movs	r1, #128	@ 0x80
 800442c:	0249      	lsls	r1, r1, #9
 800442e:	430a      	orrs	r2, r1
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	e02f      	b.n	8004494 <HAL_RCC_OscConfig+0xe0>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10c      	bne.n	8004456 <HAL_RCC_OscConfig+0xa2>
 800443c:	4bab      	ldr	r3, [pc, #684]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4baa      	ldr	r3, [pc, #680]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 8004442:	49ab      	ldr	r1, [pc, #684]	@ (80046f0 <HAL_RCC_OscConfig+0x33c>)
 8004444:	400a      	ands	r2, r1
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	4ba8      	ldr	r3, [pc, #672]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4ba7      	ldr	r3, [pc, #668]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 800444e:	49a9      	ldr	r1, [pc, #676]	@ (80046f4 <HAL_RCC_OscConfig+0x340>)
 8004450:	400a      	ands	r2, r1
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	e01e      	b.n	8004494 <HAL_RCC_OscConfig+0xe0>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b05      	cmp	r3, #5
 800445c:	d10e      	bne.n	800447c <HAL_RCC_OscConfig+0xc8>
 800445e:	4ba3      	ldr	r3, [pc, #652]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4ba2      	ldr	r3, [pc, #648]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 8004464:	2180      	movs	r1, #128	@ 0x80
 8004466:	02c9      	lsls	r1, r1, #11
 8004468:	430a      	orrs	r2, r1
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	4b9f      	ldr	r3, [pc, #636]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4b9e      	ldr	r3, [pc, #632]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 8004472:	2180      	movs	r1, #128	@ 0x80
 8004474:	0249      	lsls	r1, r1, #9
 8004476:	430a      	orrs	r2, r1
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	e00b      	b.n	8004494 <HAL_RCC_OscConfig+0xe0>
 800447c:	4b9b      	ldr	r3, [pc, #620]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4b9a      	ldr	r3, [pc, #616]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 8004482:	499b      	ldr	r1, [pc, #620]	@ (80046f0 <HAL_RCC_OscConfig+0x33c>)
 8004484:	400a      	ands	r2, r1
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	4b98      	ldr	r3, [pc, #608]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4b97      	ldr	r3, [pc, #604]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 800448e:	4999      	ldr	r1, [pc, #612]	@ (80046f4 <HAL_RCC_OscConfig+0x340>)
 8004490:	400a      	ands	r2, r1
 8004492:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d014      	beq.n	80044c6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449c:	f7ff f9ea 	bl	8003874 <HAL_GetTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044a6:	f7ff f9e5 	bl	8003874 <HAL_GetTick>
 80044aa:	0002      	movs	r2, r0
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b64      	cmp	r3, #100	@ 0x64
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e2fd      	b.n	8004ab4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b8:	4b8c      	ldr	r3, [pc, #560]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	2380      	movs	r3, #128	@ 0x80
 80044be:	029b      	lsls	r3, r3, #10
 80044c0:	4013      	ands	r3, r2
 80044c2:	d0f0      	beq.n	80044a6 <HAL_RCC_OscConfig+0xf2>
 80044c4:	e015      	b.n	80044f2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c6:	f7ff f9d5 	bl	8003874 <HAL_GetTick>
 80044ca:	0003      	movs	r3, r0
 80044cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d0:	f7ff f9d0 	bl	8003874 <HAL_GetTick>
 80044d4:	0002      	movs	r2, r0
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b64      	cmp	r3, #100	@ 0x64
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e2e8      	b.n	8004ab4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e2:	4b82      	ldr	r3, [pc, #520]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	2380      	movs	r3, #128	@ 0x80
 80044e8:	029b      	lsls	r3, r3, #10
 80044ea:	4013      	ands	r3, r2
 80044ec:	d1f0      	bne.n	80044d0 <HAL_RCC_OscConfig+0x11c>
 80044ee:	e000      	b.n	80044f2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2202      	movs	r2, #2
 80044f8:	4013      	ands	r3, r2
 80044fa:	d100      	bne.n	80044fe <HAL_RCC_OscConfig+0x14a>
 80044fc:	e06c      	b.n	80045d8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80044fe:	4b7b      	ldr	r3, [pc, #492]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	220c      	movs	r2, #12
 8004504:	4013      	ands	r3, r2
 8004506:	d00e      	beq.n	8004526 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004508:	4b78      	ldr	r3, [pc, #480]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	220c      	movs	r2, #12
 800450e:	4013      	ands	r3, r2
 8004510:	2b08      	cmp	r3, #8
 8004512:	d11f      	bne.n	8004554 <HAL_RCC_OscConfig+0x1a0>
 8004514:	4b75      	ldr	r3, [pc, #468]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	23c0      	movs	r3, #192	@ 0xc0
 800451a:	025b      	lsls	r3, r3, #9
 800451c:	401a      	ands	r2, r3
 800451e:	2380      	movs	r3, #128	@ 0x80
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	429a      	cmp	r2, r3
 8004524:	d116      	bne.n	8004554 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004526:	4b71      	ldr	r3, [pc, #452]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2202      	movs	r2, #2
 800452c:	4013      	ands	r3, r2
 800452e:	d005      	beq.n	800453c <HAL_RCC_OscConfig+0x188>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d001      	beq.n	800453c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e2bb      	b.n	8004ab4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453c:	4b6b      	ldr	r3, [pc, #428]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	22f8      	movs	r2, #248	@ 0xf8
 8004542:	4393      	bics	r3, r2
 8004544:	0019      	movs	r1, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	00da      	lsls	r2, r3, #3
 800454c:	4b67      	ldr	r3, [pc, #412]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 800454e:	430a      	orrs	r2, r1
 8004550:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004552:	e041      	b.n	80045d8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d024      	beq.n	80045a6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800455c:	4b63      	ldr	r3, [pc, #396]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	4b62      	ldr	r3, [pc, #392]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 8004562:	2101      	movs	r1, #1
 8004564:	430a      	orrs	r2, r1
 8004566:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004568:	f7ff f984 	bl	8003874 <HAL_GetTick>
 800456c:	0003      	movs	r3, r0
 800456e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004572:	f7ff f97f 	bl	8003874 <HAL_GetTick>
 8004576:	0002      	movs	r2, r0
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e297      	b.n	8004ab4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004584:	4b59      	ldr	r3, [pc, #356]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2202      	movs	r2, #2
 800458a:	4013      	ands	r3, r2
 800458c:	d0f1      	beq.n	8004572 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800458e:	4b57      	ldr	r3, [pc, #348]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	22f8      	movs	r2, #248	@ 0xf8
 8004594:	4393      	bics	r3, r2
 8004596:	0019      	movs	r1, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	00da      	lsls	r2, r3, #3
 800459e:	4b53      	ldr	r3, [pc, #332]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 80045a0:	430a      	orrs	r2, r1
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	e018      	b.n	80045d8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045a6:	4b51      	ldr	r3, [pc, #324]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4b50      	ldr	r3, [pc, #320]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 80045ac:	2101      	movs	r1, #1
 80045ae:	438a      	bics	r2, r1
 80045b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b2:	f7ff f95f 	bl	8003874 <HAL_GetTick>
 80045b6:	0003      	movs	r3, r0
 80045b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045bc:	f7ff f95a 	bl	8003874 <HAL_GetTick>
 80045c0:	0002      	movs	r2, r0
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e272      	b.n	8004ab4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ce:	4b47      	ldr	r3, [pc, #284]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2202      	movs	r2, #2
 80045d4:	4013      	ands	r3, r2
 80045d6:	d1f1      	bne.n	80045bc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2208      	movs	r2, #8
 80045de:	4013      	ands	r3, r2
 80045e0:	d036      	beq.n	8004650 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d019      	beq.n	800461e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ea:	4b40      	ldr	r3, [pc, #256]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 80045ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045ee:	4b3f      	ldr	r3, [pc, #252]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 80045f0:	2101      	movs	r1, #1
 80045f2:	430a      	orrs	r2, r1
 80045f4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f6:	f7ff f93d 	bl	8003874 <HAL_GetTick>
 80045fa:	0003      	movs	r3, r0
 80045fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004600:	f7ff f938 	bl	8003874 <HAL_GetTick>
 8004604:	0002      	movs	r2, r0
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e250      	b.n	8004ab4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004612:	4b36      	ldr	r3, [pc, #216]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 8004614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004616:	2202      	movs	r2, #2
 8004618:	4013      	ands	r3, r2
 800461a:	d0f1      	beq.n	8004600 <HAL_RCC_OscConfig+0x24c>
 800461c:	e018      	b.n	8004650 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800461e:	4b33      	ldr	r3, [pc, #204]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 8004620:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004622:	4b32      	ldr	r3, [pc, #200]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 8004624:	2101      	movs	r1, #1
 8004626:	438a      	bics	r2, r1
 8004628:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800462a:	f7ff f923 	bl	8003874 <HAL_GetTick>
 800462e:	0003      	movs	r3, r0
 8004630:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004634:	f7ff f91e 	bl	8003874 <HAL_GetTick>
 8004638:	0002      	movs	r2, r0
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e236      	b.n	8004ab4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004646:	4b29      	ldr	r3, [pc, #164]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 8004648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464a:	2202      	movs	r2, #2
 800464c:	4013      	ands	r3, r2
 800464e:	d1f1      	bne.n	8004634 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2204      	movs	r2, #4
 8004656:	4013      	ands	r3, r2
 8004658:	d100      	bne.n	800465c <HAL_RCC_OscConfig+0x2a8>
 800465a:	e0b5      	b.n	80047c8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800465c:	201f      	movs	r0, #31
 800465e:	183b      	adds	r3, r7, r0
 8004660:	2200      	movs	r2, #0
 8004662:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004664:	4b21      	ldr	r3, [pc, #132]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	2380      	movs	r3, #128	@ 0x80
 800466a:	055b      	lsls	r3, r3, #21
 800466c:	4013      	ands	r3, r2
 800466e:	d110      	bne.n	8004692 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004670:	4b1e      	ldr	r3, [pc, #120]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	4b1d      	ldr	r3, [pc, #116]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 8004676:	2180      	movs	r1, #128	@ 0x80
 8004678:	0549      	lsls	r1, r1, #21
 800467a:	430a      	orrs	r2, r1
 800467c:	61da      	str	r2, [r3, #28]
 800467e:	4b1b      	ldr	r3, [pc, #108]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 8004680:	69da      	ldr	r2, [r3, #28]
 8004682:	2380      	movs	r3, #128	@ 0x80
 8004684:	055b      	lsls	r3, r3, #21
 8004686:	4013      	ands	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800468c:	183b      	adds	r3, r7, r0
 800468e:	2201      	movs	r2, #1
 8004690:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004692:	4b19      	ldr	r3, [pc, #100]	@ (80046f8 <HAL_RCC_OscConfig+0x344>)
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	2380      	movs	r3, #128	@ 0x80
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	4013      	ands	r3, r2
 800469c:	d11a      	bne.n	80046d4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800469e:	4b16      	ldr	r3, [pc, #88]	@ (80046f8 <HAL_RCC_OscConfig+0x344>)
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4b15      	ldr	r3, [pc, #84]	@ (80046f8 <HAL_RCC_OscConfig+0x344>)
 80046a4:	2180      	movs	r1, #128	@ 0x80
 80046a6:	0049      	lsls	r1, r1, #1
 80046a8:	430a      	orrs	r2, r1
 80046aa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ac:	f7ff f8e2 	bl	8003874 <HAL_GetTick>
 80046b0:	0003      	movs	r3, r0
 80046b2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b4:	e008      	b.n	80046c8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b6:	f7ff f8dd 	bl	8003874 <HAL_GetTick>
 80046ba:	0002      	movs	r2, r0
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b64      	cmp	r3, #100	@ 0x64
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e1f5      	b.n	8004ab4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c8:	4b0b      	ldr	r3, [pc, #44]	@ (80046f8 <HAL_RCC_OscConfig+0x344>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	2380      	movs	r3, #128	@ 0x80
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	4013      	ands	r3, r2
 80046d2:	d0f0      	beq.n	80046b6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d10f      	bne.n	80046fc <HAL_RCC_OscConfig+0x348>
 80046dc:	4b03      	ldr	r3, [pc, #12]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 80046de:	6a1a      	ldr	r2, [r3, #32]
 80046e0:	4b02      	ldr	r3, [pc, #8]	@ (80046ec <HAL_RCC_OscConfig+0x338>)
 80046e2:	2101      	movs	r1, #1
 80046e4:	430a      	orrs	r2, r1
 80046e6:	621a      	str	r2, [r3, #32]
 80046e8:	e036      	b.n	8004758 <HAL_RCC_OscConfig+0x3a4>
 80046ea:	46c0      	nop			@ (mov r8, r8)
 80046ec:	40021000 	.word	0x40021000
 80046f0:	fffeffff 	.word	0xfffeffff
 80046f4:	fffbffff 	.word	0xfffbffff
 80046f8:	40007000 	.word	0x40007000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10c      	bne.n	800471e <HAL_RCC_OscConfig+0x36a>
 8004704:	4bca      	ldr	r3, [pc, #808]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004706:	6a1a      	ldr	r2, [r3, #32]
 8004708:	4bc9      	ldr	r3, [pc, #804]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 800470a:	2101      	movs	r1, #1
 800470c:	438a      	bics	r2, r1
 800470e:	621a      	str	r2, [r3, #32]
 8004710:	4bc7      	ldr	r3, [pc, #796]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004712:	6a1a      	ldr	r2, [r3, #32]
 8004714:	4bc6      	ldr	r3, [pc, #792]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004716:	2104      	movs	r1, #4
 8004718:	438a      	bics	r2, r1
 800471a:	621a      	str	r2, [r3, #32]
 800471c:	e01c      	b.n	8004758 <HAL_RCC_OscConfig+0x3a4>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2b05      	cmp	r3, #5
 8004724:	d10c      	bne.n	8004740 <HAL_RCC_OscConfig+0x38c>
 8004726:	4bc2      	ldr	r3, [pc, #776]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004728:	6a1a      	ldr	r2, [r3, #32]
 800472a:	4bc1      	ldr	r3, [pc, #772]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 800472c:	2104      	movs	r1, #4
 800472e:	430a      	orrs	r2, r1
 8004730:	621a      	str	r2, [r3, #32]
 8004732:	4bbf      	ldr	r3, [pc, #764]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004734:	6a1a      	ldr	r2, [r3, #32]
 8004736:	4bbe      	ldr	r3, [pc, #760]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004738:	2101      	movs	r1, #1
 800473a:	430a      	orrs	r2, r1
 800473c:	621a      	str	r2, [r3, #32]
 800473e:	e00b      	b.n	8004758 <HAL_RCC_OscConfig+0x3a4>
 8004740:	4bbb      	ldr	r3, [pc, #748]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004742:	6a1a      	ldr	r2, [r3, #32]
 8004744:	4bba      	ldr	r3, [pc, #744]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004746:	2101      	movs	r1, #1
 8004748:	438a      	bics	r2, r1
 800474a:	621a      	str	r2, [r3, #32]
 800474c:	4bb8      	ldr	r3, [pc, #736]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 800474e:	6a1a      	ldr	r2, [r3, #32]
 8004750:	4bb7      	ldr	r3, [pc, #732]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004752:	2104      	movs	r1, #4
 8004754:	438a      	bics	r2, r1
 8004756:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d014      	beq.n	800478a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004760:	f7ff f888 	bl	8003874 <HAL_GetTick>
 8004764:	0003      	movs	r3, r0
 8004766:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004768:	e009      	b.n	800477e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800476a:	f7ff f883 	bl	8003874 <HAL_GetTick>
 800476e:	0002      	movs	r2, r0
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	4aaf      	ldr	r2, [pc, #700]	@ (8004a34 <HAL_RCC_OscConfig+0x680>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e19a      	b.n	8004ab4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800477e:	4bac      	ldr	r3, [pc, #688]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	2202      	movs	r2, #2
 8004784:	4013      	ands	r3, r2
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x3b6>
 8004788:	e013      	b.n	80047b2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478a:	f7ff f873 	bl	8003874 <HAL_GetTick>
 800478e:	0003      	movs	r3, r0
 8004790:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004792:	e009      	b.n	80047a8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004794:	f7ff f86e 	bl	8003874 <HAL_GetTick>
 8004798:	0002      	movs	r2, r0
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	4aa5      	ldr	r2, [pc, #660]	@ (8004a34 <HAL_RCC_OscConfig+0x680>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e185      	b.n	8004ab4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a8:	4ba1      	ldr	r3, [pc, #644]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	2202      	movs	r2, #2
 80047ae:	4013      	ands	r3, r2
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047b2:	231f      	movs	r3, #31
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d105      	bne.n	80047c8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047bc:	4b9c      	ldr	r3, [pc, #624]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	4b9b      	ldr	r3, [pc, #620]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 80047c2:	499d      	ldr	r1, [pc, #628]	@ (8004a38 <HAL_RCC_OscConfig+0x684>)
 80047c4:	400a      	ands	r2, r1
 80047c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2210      	movs	r2, #16
 80047ce:	4013      	ands	r3, r2
 80047d0:	d063      	beq.n	800489a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d12a      	bne.n	8004830 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80047da:	4b95      	ldr	r3, [pc, #596]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 80047dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047de:	4b94      	ldr	r3, [pc, #592]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 80047e0:	2104      	movs	r1, #4
 80047e2:	430a      	orrs	r2, r1
 80047e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80047e6:	4b92      	ldr	r3, [pc, #584]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 80047e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047ea:	4b91      	ldr	r3, [pc, #580]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 80047ec:	2101      	movs	r1, #1
 80047ee:	430a      	orrs	r2, r1
 80047f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f2:	f7ff f83f 	bl	8003874 <HAL_GetTick>
 80047f6:	0003      	movs	r3, r0
 80047f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80047fc:	f7ff f83a 	bl	8003874 <HAL_GetTick>
 8004800:	0002      	movs	r2, r0
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e152      	b.n	8004ab4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800480e:	4b88      	ldr	r3, [pc, #544]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004812:	2202      	movs	r2, #2
 8004814:	4013      	ands	r3, r2
 8004816:	d0f1      	beq.n	80047fc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004818:	4b85      	ldr	r3, [pc, #532]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 800481a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800481c:	22f8      	movs	r2, #248	@ 0xf8
 800481e:	4393      	bics	r3, r2
 8004820:	0019      	movs	r1, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	00da      	lsls	r2, r3, #3
 8004828:	4b81      	ldr	r3, [pc, #516]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 800482a:	430a      	orrs	r2, r1
 800482c:	635a      	str	r2, [r3, #52]	@ 0x34
 800482e:	e034      	b.n	800489a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	3305      	adds	r3, #5
 8004836:	d111      	bne.n	800485c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004838:	4b7d      	ldr	r3, [pc, #500]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 800483a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800483c:	4b7c      	ldr	r3, [pc, #496]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 800483e:	2104      	movs	r1, #4
 8004840:	438a      	bics	r2, r1
 8004842:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004844:	4b7a      	ldr	r3, [pc, #488]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004848:	22f8      	movs	r2, #248	@ 0xf8
 800484a:	4393      	bics	r3, r2
 800484c:	0019      	movs	r1, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	00da      	lsls	r2, r3, #3
 8004854:	4b76      	ldr	r3, [pc, #472]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004856:	430a      	orrs	r2, r1
 8004858:	635a      	str	r2, [r3, #52]	@ 0x34
 800485a:	e01e      	b.n	800489a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800485c:	4b74      	ldr	r3, [pc, #464]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 800485e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004860:	4b73      	ldr	r3, [pc, #460]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004862:	2104      	movs	r1, #4
 8004864:	430a      	orrs	r2, r1
 8004866:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004868:	4b71      	ldr	r3, [pc, #452]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 800486a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800486c:	4b70      	ldr	r3, [pc, #448]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 800486e:	2101      	movs	r1, #1
 8004870:	438a      	bics	r2, r1
 8004872:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004874:	f7fe fffe 	bl	8003874 <HAL_GetTick>
 8004878:	0003      	movs	r3, r0
 800487a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800487e:	f7fe fff9 	bl	8003874 <HAL_GetTick>
 8004882:	0002      	movs	r2, r0
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e111      	b.n	8004ab4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004890:	4b67      	ldr	r3, [pc, #412]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004894:	2202      	movs	r2, #2
 8004896:	4013      	ands	r3, r2
 8004898:	d1f1      	bne.n	800487e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2220      	movs	r2, #32
 80048a0:	4013      	ands	r3, r2
 80048a2:	d05c      	beq.n	800495e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80048a4:	4b62      	ldr	r3, [pc, #392]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	220c      	movs	r2, #12
 80048aa:	4013      	ands	r3, r2
 80048ac:	2b0c      	cmp	r3, #12
 80048ae:	d00e      	beq.n	80048ce <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80048b0:	4b5f      	ldr	r3, [pc, #380]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	220c      	movs	r2, #12
 80048b6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d114      	bne.n	80048e6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80048bc:	4b5c      	ldr	r3, [pc, #368]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	23c0      	movs	r3, #192	@ 0xc0
 80048c2:	025b      	lsls	r3, r3, #9
 80048c4:	401a      	ands	r2, r3
 80048c6:	23c0      	movs	r3, #192	@ 0xc0
 80048c8:	025b      	lsls	r3, r3, #9
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d10b      	bne.n	80048e6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80048ce:	4b58      	ldr	r3, [pc, #352]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 80048d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048d2:	2380      	movs	r3, #128	@ 0x80
 80048d4:	029b      	lsls	r3, r3, #10
 80048d6:	4013      	ands	r3, r2
 80048d8:	d040      	beq.n	800495c <HAL_RCC_OscConfig+0x5a8>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d03c      	beq.n	800495c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e0e6      	b.n	8004ab4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d01b      	beq.n	8004926 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80048ee:	4b50      	ldr	r3, [pc, #320]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 80048f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048f2:	4b4f      	ldr	r3, [pc, #316]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 80048f4:	2180      	movs	r1, #128	@ 0x80
 80048f6:	0249      	lsls	r1, r1, #9
 80048f8:	430a      	orrs	r2, r1
 80048fa:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fe ffba 	bl	8003874 <HAL_GetTick>
 8004900:	0003      	movs	r3, r0
 8004902:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004906:	f7fe ffb5 	bl	8003874 <HAL_GetTick>
 800490a:	0002      	movs	r2, r0
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e0cd      	b.n	8004ab4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004918:	4b45      	ldr	r3, [pc, #276]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 800491a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800491c:	2380      	movs	r3, #128	@ 0x80
 800491e:	029b      	lsls	r3, r3, #10
 8004920:	4013      	ands	r3, r2
 8004922:	d0f0      	beq.n	8004906 <HAL_RCC_OscConfig+0x552>
 8004924:	e01b      	b.n	800495e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004926:	4b42      	ldr	r3, [pc, #264]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004928:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800492a:	4b41      	ldr	r3, [pc, #260]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 800492c:	4943      	ldr	r1, [pc, #268]	@ (8004a3c <HAL_RCC_OscConfig+0x688>)
 800492e:	400a      	ands	r2, r1
 8004930:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004932:	f7fe ff9f 	bl	8003874 <HAL_GetTick>
 8004936:	0003      	movs	r3, r0
 8004938:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800493c:	f7fe ff9a 	bl	8003874 <HAL_GetTick>
 8004940:	0002      	movs	r2, r0
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e0b2      	b.n	8004ab4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800494e:	4b38      	ldr	r3, [pc, #224]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004950:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004952:	2380      	movs	r3, #128	@ 0x80
 8004954:	029b      	lsls	r3, r3, #10
 8004956:	4013      	ands	r3, r2
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0x588>
 800495a:	e000      	b.n	800495e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800495c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004962:	2b00      	cmp	r3, #0
 8004964:	d100      	bne.n	8004968 <HAL_RCC_OscConfig+0x5b4>
 8004966:	e0a4      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004968:	4b31      	ldr	r3, [pc, #196]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	220c      	movs	r2, #12
 800496e:	4013      	ands	r3, r2
 8004970:	2b08      	cmp	r3, #8
 8004972:	d100      	bne.n	8004976 <HAL_RCC_OscConfig+0x5c2>
 8004974:	e078      	b.n	8004a68 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497a:	2b02      	cmp	r3, #2
 800497c:	d14c      	bne.n	8004a18 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497e:	4b2c      	ldr	r3, [pc, #176]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	4b2b      	ldr	r3, [pc, #172]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004984:	492e      	ldr	r1, [pc, #184]	@ (8004a40 <HAL_RCC_OscConfig+0x68c>)
 8004986:	400a      	ands	r2, r1
 8004988:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498a:	f7fe ff73 	bl	8003874 <HAL_GetTick>
 800498e:	0003      	movs	r3, r0
 8004990:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004994:	f7fe ff6e 	bl	8003874 <HAL_GetTick>
 8004998:	0002      	movs	r2, r0
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e086      	b.n	8004ab4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049a6:	4b22      	ldr	r3, [pc, #136]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	2380      	movs	r3, #128	@ 0x80
 80049ac:	049b      	lsls	r3, r3, #18
 80049ae:	4013      	ands	r3, r2
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 80049b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b6:	220f      	movs	r2, #15
 80049b8:	4393      	bics	r3, r2
 80049ba:	0019      	movs	r1, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 80049c2:	430a      	orrs	r2, r1
 80049c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80049c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004a44 <HAL_RCC_OscConfig+0x690>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	0019      	movs	r1, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d8:	431a      	orrs	r2, r3
 80049da:	4b15      	ldr	r3, [pc, #84]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 80049dc:	430a      	orrs	r2, r1
 80049de:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049e0:	4b13      	ldr	r3, [pc, #76]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	4b12      	ldr	r3, [pc, #72]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 80049e6:	2180      	movs	r1, #128	@ 0x80
 80049e8:	0449      	lsls	r1, r1, #17
 80049ea:	430a      	orrs	r2, r1
 80049ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ee:	f7fe ff41 	bl	8003874 <HAL_GetTick>
 80049f2:	0003      	movs	r3, r0
 80049f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049f8:	f7fe ff3c 	bl	8003874 <HAL_GetTick>
 80049fc:	0002      	movs	r2, r0
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e054      	b.n	8004ab4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a0a:	4b09      	ldr	r3, [pc, #36]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	2380      	movs	r3, #128	@ 0x80
 8004a10:	049b      	lsls	r3, r3, #18
 8004a12:	4013      	ands	r3, r2
 8004a14:	d0f0      	beq.n	80049f8 <HAL_RCC_OscConfig+0x644>
 8004a16:	e04c      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a18:	4b05      	ldr	r3, [pc, #20]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4b04      	ldr	r3, [pc, #16]	@ (8004a30 <HAL_RCC_OscConfig+0x67c>)
 8004a1e:	4908      	ldr	r1, [pc, #32]	@ (8004a40 <HAL_RCC_OscConfig+0x68c>)
 8004a20:	400a      	ands	r2, r1
 8004a22:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a24:	f7fe ff26 	bl	8003874 <HAL_GetTick>
 8004a28:	0003      	movs	r3, r0
 8004a2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a2c:	e015      	b.n	8004a5a <HAL_RCC_OscConfig+0x6a6>
 8004a2e:	46c0      	nop			@ (mov r8, r8)
 8004a30:	40021000 	.word	0x40021000
 8004a34:	00001388 	.word	0x00001388
 8004a38:	efffffff 	.word	0xefffffff
 8004a3c:	fffeffff 	.word	0xfffeffff
 8004a40:	feffffff 	.word	0xfeffffff
 8004a44:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a48:	f7fe ff14 	bl	8003874 <HAL_GetTick>
 8004a4c:	0002      	movs	r2, r0
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e02c      	b.n	8004ab4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a5a:	4b18      	ldr	r3, [pc, #96]	@ (8004abc <HAL_RCC_OscConfig+0x708>)
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	2380      	movs	r3, #128	@ 0x80
 8004a60:	049b      	lsls	r3, r3, #18
 8004a62:	4013      	ands	r3, r2
 8004a64:	d1f0      	bne.n	8004a48 <HAL_RCC_OscConfig+0x694>
 8004a66:	e024      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e01f      	b.n	8004ab4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004a74:	4b11      	ldr	r3, [pc, #68]	@ (8004abc <HAL_RCC_OscConfig+0x708>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004a7a:	4b10      	ldr	r3, [pc, #64]	@ (8004abc <HAL_RCC_OscConfig+0x708>)
 8004a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	23c0      	movs	r3, #192	@ 0xc0
 8004a84:	025b      	lsls	r3, r3, #9
 8004a86:	401a      	ands	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d10e      	bne.n	8004aae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	220f      	movs	r2, #15
 8004a94:	401a      	ands	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d107      	bne.n	8004aae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	23f0      	movs	r3, #240	@ 0xf0
 8004aa2:	039b      	lsls	r3, r3, #14
 8004aa4:	401a      	ands	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d001      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e000      	b.n	8004ab4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b008      	add	sp, #32
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40021000 	.word	0x40021000

08004ac0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0bf      	b.n	8004c54 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ad4:	4b61      	ldr	r3, [pc, #388]	@ (8004c5c <HAL_RCC_ClockConfig+0x19c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	4013      	ands	r3, r2
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d911      	bls.n	8004b06 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae2:	4b5e      	ldr	r3, [pc, #376]	@ (8004c5c <HAL_RCC_ClockConfig+0x19c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	4393      	bics	r3, r2
 8004aea:	0019      	movs	r1, r3
 8004aec:	4b5b      	ldr	r3, [pc, #364]	@ (8004c5c <HAL_RCC_ClockConfig+0x19c>)
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af4:	4b59      	ldr	r3, [pc, #356]	@ (8004c5c <HAL_RCC_ClockConfig+0x19c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2201      	movs	r2, #1
 8004afa:	4013      	ands	r3, r2
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d001      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e0a6      	b.n	8004c54 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d015      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2204      	movs	r2, #4
 8004b16:	4013      	ands	r3, r2
 8004b18:	d006      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b1a:	4b51      	ldr	r3, [pc, #324]	@ (8004c60 <HAL_RCC_ClockConfig+0x1a0>)
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	4b50      	ldr	r3, [pc, #320]	@ (8004c60 <HAL_RCC_ClockConfig+0x1a0>)
 8004b20:	21e0      	movs	r1, #224	@ 0xe0
 8004b22:	00c9      	lsls	r1, r1, #3
 8004b24:	430a      	orrs	r2, r1
 8004b26:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b28:	4b4d      	ldr	r3, [pc, #308]	@ (8004c60 <HAL_RCC_ClockConfig+0x1a0>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	22f0      	movs	r2, #240	@ 0xf0
 8004b2e:	4393      	bics	r3, r2
 8004b30:	0019      	movs	r1, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689a      	ldr	r2, [r3, #8]
 8004b36:	4b4a      	ldr	r3, [pc, #296]	@ (8004c60 <HAL_RCC_ClockConfig+0x1a0>)
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2201      	movs	r2, #1
 8004b42:	4013      	ands	r3, r2
 8004b44:	d04c      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d107      	bne.n	8004b5e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b4e:	4b44      	ldr	r3, [pc, #272]	@ (8004c60 <HAL_RCC_ClockConfig+0x1a0>)
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	2380      	movs	r3, #128	@ 0x80
 8004b54:	029b      	lsls	r3, r3, #10
 8004b56:	4013      	ands	r3, r2
 8004b58:	d120      	bne.n	8004b9c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e07a      	b.n	8004c54 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d107      	bne.n	8004b76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b66:	4b3e      	ldr	r3, [pc, #248]	@ (8004c60 <HAL_RCC_ClockConfig+0x1a0>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	2380      	movs	r3, #128	@ 0x80
 8004b6c:	049b      	lsls	r3, r3, #18
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d114      	bne.n	8004b9c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e06e      	b.n	8004c54 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d107      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004b7e:	4b38      	ldr	r3, [pc, #224]	@ (8004c60 <HAL_RCC_ClockConfig+0x1a0>)
 8004b80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b82:	2380      	movs	r3, #128	@ 0x80
 8004b84:	029b      	lsls	r3, r3, #10
 8004b86:	4013      	ands	r3, r2
 8004b88:	d108      	bne.n	8004b9c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e062      	b.n	8004c54 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b8e:	4b34      	ldr	r3, [pc, #208]	@ (8004c60 <HAL_RCC_ClockConfig+0x1a0>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2202      	movs	r2, #2
 8004b94:	4013      	ands	r3, r2
 8004b96:	d101      	bne.n	8004b9c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e05b      	b.n	8004c54 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b9c:	4b30      	ldr	r3, [pc, #192]	@ (8004c60 <HAL_RCC_ClockConfig+0x1a0>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	4393      	bics	r3, r2
 8004ba4:	0019      	movs	r1, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	4b2d      	ldr	r3, [pc, #180]	@ (8004c60 <HAL_RCC_ClockConfig+0x1a0>)
 8004bac:	430a      	orrs	r2, r1
 8004bae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bb0:	f7fe fe60 	bl	8003874 <HAL_GetTick>
 8004bb4:	0003      	movs	r3, r0
 8004bb6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb8:	e009      	b.n	8004bce <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bba:	f7fe fe5b 	bl	8003874 <HAL_GetTick>
 8004bbe:	0002      	movs	r2, r0
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	4a27      	ldr	r2, [pc, #156]	@ (8004c64 <HAL_RCC_ClockConfig+0x1a4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e042      	b.n	8004c54 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bce:	4b24      	ldr	r3, [pc, #144]	@ (8004c60 <HAL_RCC_ClockConfig+0x1a0>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	220c      	movs	r2, #12
 8004bd4:	401a      	ands	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d1ec      	bne.n	8004bba <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004be0:	4b1e      	ldr	r3, [pc, #120]	@ (8004c5c <HAL_RCC_ClockConfig+0x19c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2201      	movs	r2, #1
 8004be6:	4013      	ands	r3, r2
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d211      	bcs.n	8004c12 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bee:	4b1b      	ldr	r3, [pc, #108]	@ (8004c5c <HAL_RCC_ClockConfig+0x19c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	4393      	bics	r3, r2
 8004bf6:	0019      	movs	r1, r3
 8004bf8:	4b18      	ldr	r3, [pc, #96]	@ (8004c5c <HAL_RCC_ClockConfig+0x19c>)
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c00:	4b16      	ldr	r3, [pc, #88]	@ (8004c5c <HAL_RCC_ClockConfig+0x19c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2201      	movs	r2, #1
 8004c06:	4013      	ands	r3, r2
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d001      	beq.n	8004c12 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e020      	b.n	8004c54 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2204      	movs	r2, #4
 8004c18:	4013      	ands	r3, r2
 8004c1a:	d009      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c1c:	4b10      	ldr	r3, [pc, #64]	@ (8004c60 <HAL_RCC_ClockConfig+0x1a0>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	4a11      	ldr	r2, [pc, #68]	@ (8004c68 <HAL_RCC_ClockConfig+0x1a8>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	0019      	movs	r1, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c60 <HAL_RCC_ClockConfig+0x1a0>)
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c30:	f000 f820 	bl	8004c74 <HAL_RCC_GetSysClockFreq>
 8004c34:	0001      	movs	r1, r0
 8004c36:	4b0a      	ldr	r3, [pc, #40]	@ (8004c60 <HAL_RCC_ClockConfig+0x1a0>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	091b      	lsrs	r3, r3, #4
 8004c3c:	220f      	movs	r2, #15
 8004c3e:	4013      	ands	r3, r2
 8004c40:	4a0a      	ldr	r2, [pc, #40]	@ (8004c6c <HAL_RCC_ClockConfig+0x1ac>)
 8004c42:	5cd3      	ldrb	r3, [r2, r3]
 8004c44:	000a      	movs	r2, r1
 8004c46:	40da      	lsrs	r2, r3
 8004c48:	4b09      	ldr	r3, [pc, #36]	@ (8004c70 <HAL_RCC_ClockConfig+0x1b0>)
 8004c4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004c4c:	2003      	movs	r0, #3
 8004c4e:	f7fe fdcb 	bl	80037e8 <HAL_InitTick>
  
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	0018      	movs	r0, r3
 8004c56:	46bd      	mov	sp, r7
 8004c58:	b004      	add	sp, #16
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40022000 	.word	0x40022000
 8004c60:	40021000 	.word	0x40021000
 8004c64:	00001388 	.word	0x00001388
 8004c68:	fffff8ff 	.word	0xfffff8ff
 8004c6c:	08007a9c 	.word	0x08007a9c
 8004c70:	20000014 	.word	0x20000014

08004c74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60bb      	str	r3, [r7, #8]
 8004c82:	2300      	movs	r3, #0
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	2300      	movs	r3, #0
 8004c88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004c8e:	4b2d      	ldr	r3, [pc, #180]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	220c      	movs	r2, #12
 8004c98:	4013      	ands	r3, r2
 8004c9a:	2b0c      	cmp	r3, #12
 8004c9c:	d046      	beq.n	8004d2c <HAL_RCC_GetSysClockFreq+0xb8>
 8004c9e:	d848      	bhi.n	8004d32 <HAL_RCC_GetSysClockFreq+0xbe>
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d002      	beq.n	8004caa <HAL_RCC_GetSysClockFreq+0x36>
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d003      	beq.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x3c>
 8004ca8:	e043      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004caa:	4b27      	ldr	r3, [pc, #156]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004cac:	613b      	str	r3, [r7, #16]
      break;
 8004cae:	e043      	b.n	8004d38 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	0c9b      	lsrs	r3, r3, #18
 8004cb4:	220f      	movs	r2, #15
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	4a24      	ldr	r2, [pc, #144]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0xd8>)
 8004cba:	5cd3      	ldrb	r3, [r2, r3]
 8004cbc:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004cbe:	4b21      	ldr	r3, [pc, #132]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc2:	220f      	movs	r2, #15
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	4a22      	ldr	r2, [pc, #136]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0xdc>)
 8004cc8:	5cd3      	ldrb	r3, [r2, r3]
 8004cca:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	23c0      	movs	r3, #192	@ 0xc0
 8004cd0:	025b      	lsls	r3, r3, #9
 8004cd2:	401a      	ands	r2, r3
 8004cd4:	2380      	movs	r3, #128	@ 0x80
 8004cd6:	025b      	lsls	r3, r3, #9
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d109      	bne.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	481a      	ldr	r0, [pc, #104]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ce0:	f7fb fa1a 	bl	8000118 <__udivsi3>
 8004ce4:	0003      	movs	r3, r0
 8004ce6:	001a      	movs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4353      	muls	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	e01a      	b.n	8004d26 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	23c0      	movs	r3, #192	@ 0xc0
 8004cf4:	025b      	lsls	r3, r3, #9
 8004cf6:	401a      	ands	r2, r3
 8004cf8:	23c0      	movs	r3, #192	@ 0xc0
 8004cfa:	025b      	lsls	r3, r3, #9
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d109      	bne.n	8004d14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	4814      	ldr	r0, [pc, #80]	@ (8004d54 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004d04:	f7fb fa08 	bl	8000118 <__udivsi3>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	001a      	movs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4353      	muls	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	480c      	ldr	r0, [pc, #48]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004d18:	f7fb f9fe 	bl	8000118 <__udivsi3>
 8004d1c:	0003      	movs	r3, r0
 8004d1e:	001a      	movs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4353      	muls	r3, r2
 8004d24:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	613b      	str	r3, [r7, #16]
      break;
 8004d2a:	e005      	b.n	8004d38 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004d2c:	4b09      	ldr	r3, [pc, #36]	@ (8004d54 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004d2e:	613b      	str	r3, [r7, #16]
      break;
 8004d30:	e002      	b.n	8004d38 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d32:	4b05      	ldr	r3, [pc, #20]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004d34:	613b      	str	r3, [r7, #16]
      break;
 8004d36:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004d38:	693b      	ldr	r3, [r7, #16]
}
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	b006      	add	sp, #24
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	46c0      	nop			@ (mov r8, r8)
 8004d44:	40021000 	.word	0x40021000
 8004d48:	007a1200 	.word	0x007a1200
 8004d4c:	08007ab4 	.word	0x08007ab4
 8004d50:	08007ac4 	.word	0x08007ac4
 8004d54:	02dc6c00 	.word	0x02dc6c00

08004d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d5c:	4b02      	ldr	r3, [pc, #8]	@ (8004d68 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
}
 8004d60:	0018      	movs	r0, r3
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	46c0      	nop			@ (mov r8, r8)
 8004d68:	20000014 	.word	0x20000014

08004d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004d70:	f7ff fff2 	bl	8004d58 <HAL_RCC_GetHCLKFreq>
 8004d74:	0001      	movs	r1, r0
 8004d76:	4b06      	ldr	r3, [pc, #24]	@ (8004d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	0a1b      	lsrs	r3, r3, #8
 8004d7c:	2207      	movs	r2, #7
 8004d7e:	4013      	ands	r3, r2
 8004d80:	4a04      	ldr	r2, [pc, #16]	@ (8004d94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d82:	5cd3      	ldrb	r3, [r2, r3]
 8004d84:	40d9      	lsrs	r1, r3
 8004d86:	000b      	movs	r3, r1
}    
 8004d88:	0018      	movs	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	40021000 	.word	0x40021000
 8004d94:	08007aac 	.word	0x08007aac

08004d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	2380      	movs	r3, #128	@ 0x80
 8004dae:	025b      	lsls	r3, r3, #9
 8004db0:	4013      	ands	r3, r2
 8004db2:	d100      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004db4:	e08e      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004db6:	2017      	movs	r0, #23
 8004db8:	183b      	adds	r3, r7, r0
 8004dba:	2200      	movs	r2, #0
 8004dbc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dbe:	4b6e      	ldr	r3, [pc, #440]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dc0:	69da      	ldr	r2, [r3, #28]
 8004dc2:	2380      	movs	r3, #128	@ 0x80
 8004dc4:	055b      	lsls	r3, r3, #21
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	d110      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dca:	4b6b      	ldr	r3, [pc, #428]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dcc:	69da      	ldr	r2, [r3, #28]
 8004dce:	4b6a      	ldr	r3, [pc, #424]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dd0:	2180      	movs	r1, #128	@ 0x80
 8004dd2:	0549      	lsls	r1, r1, #21
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	61da      	str	r2, [r3, #28]
 8004dd8:	4b67      	ldr	r3, [pc, #412]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dda:	69da      	ldr	r2, [r3, #28]
 8004ddc:	2380      	movs	r3, #128	@ 0x80
 8004dde:	055b      	lsls	r3, r3, #21
 8004de0:	4013      	ands	r3, r2
 8004de2:	60bb      	str	r3, [r7, #8]
 8004de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004de6:	183b      	adds	r3, r7, r0
 8004de8:	2201      	movs	r2, #1
 8004dea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dec:	4b63      	ldr	r3, [pc, #396]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	2380      	movs	r3, #128	@ 0x80
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	4013      	ands	r3, r2
 8004df6:	d11a      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004df8:	4b60      	ldr	r3, [pc, #384]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	4b5f      	ldr	r3, [pc, #380]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004dfe:	2180      	movs	r1, #128	@ 0x80
 8004e00:	0049      	lsls	r1, r1, #1
 8004e02:	430a      	orrs	r2, r1
 8004e04:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e06:	f7fe fd35 	bl	8003874 <HAL_GetTick>
 8004e0a:	0003      	movs	r3, r0
 8004e0c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e0e:	e008      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e10:	f7fe fd30 	bl	8003874 <HAL_GetTick>
 8004e14:	0002      	movs	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b64      	cmp	r3, #100	@ 0x64
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e0a6      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e22:	4b56      	ldr	r3, [pc, #344]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	2380      	movs	r3, #128	@ 0x80
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	d0f0      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e2e:	4b52      	ldr	r3, [pc, #328]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e30:	6a1a      	ldr	r2, [r3, #32]
 8004e32:	23c0      	movs	r3, #192	@ 0xc0
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4013      	ands	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d034      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	23c0      	movs	r3, #192	@ 0xc0
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4013      	ands	r3, r2
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d02c      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e50:	4b49      	ldr	r3, [pc, #292]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	4a4a      	ldr	r2, [pc, #296]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004e56:	4013      	ands	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e5a:	4b47      	ldr	r3, [pc, #284]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e5c:	6a1a      	ldr	r2, [r3, #32]
 8004e5e:	4b46      	ldr	r3, [pc, #280]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e60:	2180      	movs	r1, #128	@ 0x80
 8004e62:	0249      	lsls	r1, r1, #9
 8004e64:	430a      	orrs	r2, r1
 8004e66:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e68:	4b43      	ldr	r3, [pc, #268]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e6a:	6a1a      	ldr	r2, [r3, #32]
 8004e6c:	4b42      	ldr	r3, [pc, #264]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e6e:	4945      	ldr	r1, [pc, #276]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004e70:	400a      	ands	r2, r1
 8004e72:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e74:	4b40      	ldr	r3, [pc, #256]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	4013      	ands	r3, r2
 8004e80:	d013      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e82:	f7fe fcf7 	bl	8003874 <HAL_GetTick>
 8004e86:	0003      	movs	r3, r0
 8004e88:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e8a:	e009      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e8c:	f7fe fcf2 	bl	8003874 <HAL_GetTick>
 8004e90:	0002      	movs	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	4a3c      	ldr	r2, [pc, #240]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e067      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea0:	4b35      	ldr	r3, [pc, #212]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	d0f0      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eaa:	4b33      	ldr	r3, [pc, #204]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	4a34      	ldr	r2, [pc, #208]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	0019      	movs	r1, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	4b2f      	ldr	r3, [pc, #188]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ebe:	2317      	movs	r3, #23
 8004ec0:	18fb      	adds	r3, r7, r3
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d105      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004eca:	69da      	ldr	r2, [r3, #28]
 8004ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ece:	492f      	ldr	r1, [pc, #188]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004ed0:	400a      	ands	r2, r1
 8004ed2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	4013      	ands	r3, r2
 8004edc:	d009      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ede:	4b26      	ldr	r3, [pc, #152]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee2:	2203      	movs	r2, #3
 8004ee4:	4393      	bics	r3, r2
 8004ee6:	0019      	movs	r1, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	4b22      	ldr	r3, [pc, #136]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	4013      	ands	r3, r2
 8004efa:	d009      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004efc:	4b1e      	ldr	r3, [pc, #120]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f00:	4a23      	ldr	r2, [pc, #140]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	0019      	movs	r1, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	2380      	movs	r3, #128	@ 0x80
 8004f16:	02db      	lsls	r3, r3, #11
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d009      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f1c:	4b16      	ldr	r3, [pc, #88]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f20:	4a1c      	ldr	r2, [pc, #112]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	0019      	movs	r1, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691a      	ldr	r2, [r3, #16]
 8004f2a:	4b13      	ldr	r3, [pc, #76]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2220      	movs	r2, #32
 8004f36:	4013      	ands	r3, r2
 8004f38:	d009      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3e:	2210      	movs	r2, #16
 8004f40:	4393      	bics	r3, r2
 8004f42:	0019      	movs	r1, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	695a      	ldr	r2, [r3, #20]
 8004f48:	4b0b      	ldr	r3, [pc, #44]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	2380      	movs	r3, #128	@ 0x80
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	4013      	ands	r3, r2
 8004f58:	d009      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f5a:	4b07      	ldr	r3, [pc, #28]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5e:	2240      	movs	r2, #64	@ 0x40
 8004f60:	4393      	bics	r3, r2
 8004f62:	0019      	movs	r1, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699a      	ldr	r2, [r3, #24]
 8004f68:	4b03      	ldr	r3, [pc, #12]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	0018      	movs	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	b006      	add	sp, #24
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	40007000 	.word	0x40007000
 8004f80:	fffffcff 	.word	0xfffffcff
 8004f84:	fffeffff 	.word	0xfffeffff
 8004f88:	00001388 	.word	0x00001388
 8004f8c:	efffffff 	.word	0xefffffff
 8004f90:	fffcffff 	.word	0xfffcffff
 8004f94:	fff3ffff 	.word	0xfff3ffff

08004f98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e0a8      	b.n	80050fc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d109      	bne.n	8004fc6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	2382      	movs	r3, #130	@ 0x82
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d009      	beq.n	8004fd2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	61da      	str	r2, [r3, #28]
 8004fc4:	e005      	b.n	8004fd2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	225d      	movs	r2, #93	@ 0x5d
 8004fdc:	5c9b      	ldrb	r3, [r3, r2]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d107      	bne.n	8004ff4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	225c      	movs	r2, #92	@ 0x5c
 8004fe8:	2100      	movs	r1, #0
 8004fea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	0018      	movs	r0, r3
 8004ff0:	f7fe fa4a 	bl	8003488 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	225d      	movs	r2, #93	@ 0x5d
 8004ff8:	2102      	movs	r1, #2
 8004ffa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2140      	movs	r1, #64	@ 0x40
 8005008:	438a      	bics	r2, r1
 800500a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	23e0      	movs	r3, #224	@ 0xe0
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	429a      	cmp	r2, r3
 8005016:	d902      	bls.n	800501e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005018:	2300      	movs	r3, #0
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	e002      	b.n	8005024 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800501e:	2380      	movs	r3, #128	@ 0x80
 8005020:	015b      	lsls	r3, r3, #5
 8005022:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	23f0      	movs	r3, #240	@ 0xf0
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	429a      	cmp	r2, r3
 800502e:	d008      	beq.n	8005042 <HAL_SPI_Init+0xaa>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	23e0      	movs	r3, #224	@ 0xe0
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	429a      	cmp	r2, r3
 800503a:	d002      	beq.n	8005042 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	2382      	movs	r3, #130	@ 0x82
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	401a      	ands	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6899      	ldr	r1, [r3, #8]
 8005050:	2384      	movs	r3, #132	@ 0x84
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	400b      	ands	r3, r1
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2102      	movs	r1, #2
 800505e:	400b      	ands	r3, r1
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	2101      	movs	r1, #1
 8005068:	400b      	ands	r3, r1
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6999      	ldr	r1, [r3, #24]
 8005070:	2380      	movs	r3, #128	@ 0x80
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	400b      	ands	r3, r1
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	2138      	movs	r1, #56	@ 0x38
 800507e:	400b      	ands	r3, r1
 8005080:	431a      	orrs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	2180      	movs	r1, #128	@ 0x80
 8005088:	400b      	ands	r3, r1
 800508a:	431a      	orrs	r2, r3
 800508c:	0011      	movs	r1, r2
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005092:	2380      	movs	r3, #128	@ 0x80
 8005094:	019b      	lsls	r3, r3, #6
 8005096:	401a      	ands	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	0c1b      	lsrs	r3, r3, #16
 80050a6:	2204      	movs	r2, #4
 80050a8:	401a      	ands	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ae:	2110      	movs	r1, #16
 80050b0:	400b      	ands	r3, r1
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b8:	2108      	movs	r1, #8
 80050ba:	400b      	ands	r3, r1
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68d9      	ldr	r1, [r3, #12]
 80050c2:	23f0      	movs	r3, #240	@ 0xf0
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	400b      	ands	r3, r1
 80050c8:	431a      	orrs	r2, r3
 80050ca:	0011      	movs	r1, r2
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	2380      	movs	r3, #128	@ 0x80
 80050d0:	015b      	lsls	r3, r3, #5
 80050d2:	401a      	ands	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	69da      	ldr	r2, [r3, #28]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4907      	ldr	r1, [pc, #28]	@ (8005104 <HAL_SPI_Init+0x16c>)
 80050e8:	400a      	ands	r2, r1
 80050ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	225d      	movs	r2, #93	@ 0x5d
 80050f6:	2101      	movs	r1, #1
 80050f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	0018      	movs	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	b004      	add	sp, #16
 8005102:	bd80      	pop	{r7, pc}
 8005104:	fffff7ff 	.word	0xfffff7ff

08005108 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	@ 0x28
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	001a      	movs	r2, r3
 8005116:	1cbb      	adds	r3, r7, #2
 8005118:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800511a:	2301      	movs	r3, #1
 800511c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800511e:	2323      	movs	r3, #35	@ 0x23
 8005120:	18fb      	adds	r3, r7, r3
 8005122:	2200      	movs	r2, #0
 8005124:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	225c      	movs	r2, #92	@ 0x5c
 800512a:	5c9b      	ldrb	r3, [r3, r2]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_SPI_TransmitReceive+0x2c>
 8005130:	2302      	movs	r3, #2
 8005132:	e1c4      	b.n	80054be <HAL_SPI_TransmitReceive+0x3b6>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	225c      	movs	r2, #92	@ 0x5c
 8005138:	2101      	movs	r1, #1
 800513a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800513c:	f7fe fb9a 	bl	8003874 <HAL_GetTick>
 8005140:	0003      	movs	r3, r0
 8005142:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005144:	201b      	movs	r0, #27
 8005146:	183b      	adds	r3, r7, r0
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	215d      	movs	r1, #93	@ 0x5d
 800514c:	5c52      	ldrb	r2, [r2, r1]
 800514e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005156:	2312      	movs	r3, #18
 8005158:	18fb      	adds	r3, r7, r3
 800515a:	1cba      	adds	r2, r7, #2
 800515c:	8812      	ldrh	r2, [r2, #0]
 800515e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005160:	183b      	adds	r3, r7, r0
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d011      	beq.n	800518c <HAL_SPI_TransmitReceive+0x84>
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	2382      	movs	r3, #130	@ 0x82
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	429a      	cmp	r2, r3
 8005170:	d107      	bne.n	8005182 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d103      	bne.n	8005182 <HAL_SPI_TransmitReceive+0x7a>
 800517a:	183b      	adds	r3, r7, r0
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b04      	cmp	r3, #4
 8005180:	d004      	beq.n	800518c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005182:	2323      	movs	r3, #35	@ 0x23
 8005184:	18fb      	adds	r3, r7, r3
 8005186:	2202      	movs	r2, #2
 8005188:	701a      	strb	r2, [r3, #0]
    goto error;
 800518a:	e191      	b.n	80054b0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d006      	beq.n	80051a0 <HAL_SPI_TransmitReceive+0x98>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_SPI_TransmitReceive+0x98>
 8005198:	1cbb      	adds	r3, r7, #2
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d104      	bne.n	80051aa <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80051a0:	2323      	movs	r3, #35	@ 0x23
 80051a2:	18fb      	adds	r3, r7, r3
 80051a4:	2201      	movs	r2, #1
 80051a6:	701a      	strb	r2, [r3, #0]
    goto error;
 80051a8:	e182      	b.n	80054b0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	225d      	movs	r2, #93	@ 0x5d
 80051ae:	5c9b      	ldrb	r3, [r3, r2]
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d003      	beq.n	80051be <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	225d      	movs	r2, #93	@ 0x5d
 80051ba:	2105      	movs	r1, #5
 80051bc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	1cba      	adds	r2, r7, #2
 80051ce:	2146      	movs	r1, #70	@ 0x46
 80051d0:	8812      	ldrh	r2, [r2, #0]
 80051d2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	1cba      	adds	r2, r7, #2
 80051d8:	2144      	movs	r1, #68	@ 0x44
 80051da:	8812      	ldrh	r2, [r2, #0]
 80051dc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	1cba      	adds	r2, r7, #2
 80051e8:	8812      	ldrh	r2, [r2, #0]
 80051ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	1cba      	adds	r2, r7, #2
 80051f0:	8812      	ldrh	r2, [r2, #0]
 80051f2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	23e0      	movs	r3, #224	@ 0xe0
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	429a      	cmp	r2, r3
 800520a:	d908      	bls.n	800521e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	49ac      	ldr	r1, [pc, #688]	@ (80054c8 <HAL_SPI_TransmitReceive+0x3c0>)
 8005218:	400a      	ands	r2, r1
 800521a:	605a      	str	r2, [r3, #4]
 800521c:	e008      	b.n	8005230 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2180      	movs	r1, #128	@ 0x80
 800522a:	0149      	lsls	r1, r1, #5
 800522c:	430a      	orrs	r2, r1
 800522e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2240      	movs	r2, #64	@ 0x40
 8005238:	4013      	ands	r3, r2
 800523a:	2b40      	cmp	r3, #64	@ 0x40
 800523c:	d007      	beq.n	800524e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2140      	movs	r1, #64	@ 0x40
 800524a:	430a      	orrs	r2, r1
 800524c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	23e0      	movs	r3, #224	@ 0xe0
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	429a      	cmp	r2, r3
 8005258:	d800      	bhi.n	800525c <HAL_SPI_TransmitReceive+0x154>
 800525a:	e083      	b.n	8005364 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_SPI_TransmitReceive+0x168>
 8005264:	2312      	movs	r3, #18
 8005266:	18fb      	adds	r3, r7, r3
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d000      	beq.n	8005270 <HAL_SPI_TransmitReceive+0x168>
 800526e:	e06d      	b.n	800534c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005274:	881a      	ldrh	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005280:	1c9a      	adds	r2, r3, #2
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800528a:	b29b      	uxth	r3, r3
 800528c:	3b01      	subs	r3, #1
 800528e:	b29a      	uxth	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005294:	e05a      	b.n	800534c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2202      	movs	r2, #2
 800529e:	4013      	ands	r3, r2
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d11b      	bne.n	80052dc <HAL_SPI_TransmitReceive+0x1d4>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d016      	beq.n	80052dc <HAL_SPI_TransmitReceive+0x1d4>
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d113      	bne.n	80052dc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b8:	881a      	ldrh	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c4:	1c9a      	adds	r2, r3, #2
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	3b01      	subs	r3, #1
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	2201      	movs	r2, #1
 80052e4:	4013      	ands	r3, r2
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d11c      	bne.n	8005324 <HAL_SPI_TransmitReceive+0x21c>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2246      	movs	r2, #70	@ 0x46
 80052ee:	5a9b      	ldrh	r3, [r3, r2]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d016      	beq.n	8005324 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005300:	b292      	uxth	r2, r2
 8005302:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005308:	1c9a      	adds	r2, r3, #2
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2246      	movs	r2, #70	@ 0x46
 8005312:	5a9b      	ldrh	r3, [r3, r2]
 8005314:	b29b      	uxth	r3, r3
 8005316:	3b01      	subs	r3, #1
 8005318:	b299      	uxth	r1, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2246      	movs	r2, #70	@ 0x46
 800531e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005320:	2301      	movs	r3, #1
 8005322:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005324:	f7fe faa6 	bl	8003874 <HAL_GetTick>
 8005328:	0002      	movs	r2, r0
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005330:	429a      	cmp	r2, r3
 8005332:	d80b      	bhi.n	800534c <HAL_SPI_TransmitReceive+0x244>
 8005334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005336:	3301      	adds	r3, #1
 8005338:	d008      	beq.n	800534c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800533a:	2323      	movs	r3, #35	@ 0x23
 800533c:	18fb      	adds	r3, r7, r3
 800533e:	2203      	movs	r2, #3
 8005340:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	225d      	movs	r2, #93	@ 0x5d
 8005346:	2101      	movs	r1, #1
 8005348:	5499      	strb	r1, [r3, r2]
        goto error;
 800534a:	e0b1      	b.n	80054b0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d19f      	bne.n	8005296 <HAL_SPI_TransmitReceive+0x18e>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2246      	movs	r2, #70	@ 0x46
 800535a:	5a9b      	ldrh	r3, [r3, r2]
 800535c:	b29b      	uxth	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d199      	bne.n	8005296 <HAL_SPI_TransmitReceive+0x18e>
 8005362:	e089      	b.n	8005478 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <HAL_SPI_TransmitReceive+0x270>
 800536c:	2312      	movs	r3, #18
 800536e:	18fb      	adds	r3, r7, r3
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d000      	beq.n	8005378 <HAL_SPI_TransmitReceive+0x270>
 8005376:	e074      	b.n	8005462 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	330c      	adds	r3, #12
 8005382:	7812      	ldrb	r2, [r2, #0]
 8005384:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800539e:	e060      	b.n	8005462 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2202      	movs	r2, #2
 80053a8:	4013      	ands	r3, r2
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d11c      	bne.n	80053e8 <HAL_SPI_TransmitReceive+0x2e0>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d017      	beq.n	80053e8 <HAL_SPI_TransmitReceive+0x2e0>
 80053b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d114      	bne.n	80053e8 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	330c      	adds	r3, #12
 80053c8:	7812      	ldrb	r2, [r2, #0]
 80053ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	2201      	movs	r2, #1
 80053f0:	4013      	ands	r3, r2
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d11e      	bne.n	8005434 <HAL_SPI_TransmitReceive+0x32c>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2246      	movs	r2, #70	@ 0x46
 80053fa:	5a9b      	ldrh	r3, [r3, r2]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d018      	beq.n	8005434 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	330c      	adds	r3, #12
 8005408:	001a      	movs	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540e:	7812      	ldrb	r2, [r2, #0]
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2246      	movs	r2, #70	@ 0x46
 8005422:	5a9b      	ldrh	r3, [r3, r2]
 8005424:	b29b      	uxth	r3, r3
 8005426:	3b01      	subs	r3, #1
 8005428:	b299      	uxth	r1, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2246      	movs	r2, #70	@ 0x46
 800542e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005430:	2301      	movs	r3, #1
 8005432:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005434:	f7fe fa1e 	bl	8003874 <HAL_GetTick>
 8005438:	0002      	movs	r2, r0
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005440:	429a      	cmp	r2, r3
 8005442:	d802      	bhi.n	800544a <HAL_SPI_TransmitReceive+0x342>
 8005444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005446:	3301      	adds	r3, #1
 8005448:	d102      	bne.n	8005450 <HAL_SPI_TransmitReceive+0x348>
 800544a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544c:	2b00      	cmp	r3, #0
 800544e:	d108      	bne.n	8005462 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8005450:	2323      	movs	r3, #35	@ 0x23
 8005452:	18fb      	adds	r3, r7, r3
 8005454:	2203      	movs	r2, #3
 8005456:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	225d      	movs	r2, #93	@ 0x5d
 800545c:	2101      	movs	r1, #1
 800545e:	5499      	strb	r1, [r3, r2]
        goto error;
 8005460:	e026      	b.n	80054b0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d199      	bne.n	80053a0 <HAL_SPI_TransmitReceive+0x298>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2246      	movs	r2, #70	@ 0x46
 8005470:	5a9b      	ldrh	r3, [r3, r2]
 8005472:	b29b      	uxth	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d193      	bne.n	80053a0 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005478:	69fa      	ldr	r2, [r7, #28]
 800547a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	0018      	movs	r0, r3
 8005480:	f000 f954 	bl	800572c <SPI_EndRxTxTransaction>
 8005484:	1e03      	subs	r3, r0, #0
 8005486:	d006      	beq.n	8005496 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8005488:	2323      	movs	r3, #35	@ 0x23
 800548a:	18fb      	adds	r3, r7, r3
 800548c:	2201      	movs	r2, #1
 800548e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800549a:	2b00      	cmp	r3, #0
 800549c:	d004      	beq.n	80054a8 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800549e:	2323      	movs	r3, #35	@ 0x23
 80054a0:	18fb      	adds	r3, r7, r3
 80054a2:	2201      	movs	r2, #1
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	e003      	b.n	80054b0 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	225d      	movs	r2, #93	@ 0x5d
 80054ac:	2101      	movs	r1, #1
 80054ae:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	225c      	movs	r2, #92	@ 0x5c
 80054b4:	2100      	movs	r1, #0
 80054b6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80054b8:	2323      	movs	r3, #35	@ 0x23
 80054ba:	18fb      	adds	r3, r7, r3
 80054bc:	781b      	ldrb	r3, [r3, #0]
}
 80054be:	0018      	movs	r0, r3
 80054c0:	46bd      	mov	sp, r7
 80054c2:	b00a      	add	sp, #40	@ 0x28
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	46c0      	nop			@ (mov r8, r8)
 80054c8:	ffffefff 	.word	0xffffefff

080054cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	603b      	str	r3, [r7, #0]
 80054d8:	1dfb      	adds	r3, r7, #7
 80054da:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054dc:	f7fe f9ca 	bl	8003874 <HAL_GetTick>
 80054e0:	0002      	movs	r2, r0
 80054e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	18d3      	adds	r3, r2, r3
 80054ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054ec:	f7fe f9c2 	bl	8003874 <HAL_GetTick>
 80054f0:	0003      	movs	r3, r0
 80054f2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054f4:	4b3a      	ldr	r3, [pc, #232]	@ (80055e0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	015b      	lsls	r3, r3, #5
 80054fa:	0d1b      	lsrs	r3, r3, #20
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	4353      	muls	r3, r2
 8005500:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005502:	e058      	b.n	80055b6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	3301      	adds	r3, #1
 8005508:	d055      	beq.n	80055b6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800550a:	f7fe f9b3 	bl	8003874 <HAL_GetTick>
 800550e:	0002      	movs	r2, r0
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	69fa      	ldr	r2, [r7, #28]
 8005516:	429a      	cmp	r2, r3
 8005518:	d902      	bls.n	8005520 <SPI_WaitFlagStateUntilTimeout+0x54>
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d142      	bne.n	80055a6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	21e0      	movs	r1, #224	@ 0xe0
 800552c:	438a      	bics	r2, r1
 800552e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	2382      	movs	r3, #130	@ 0x82
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	429a      	cmp	r2, r3
 800553a:	d113      	bne.n	8005564 <SPI_WaitFlagStateUntilTimeout+0x98>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	2380      	movs	r3, #128	@ 0x80
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	429a      	cmp	r2, r3
 8005546:	d005      	beq.n	8005554 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	2380      	movs	r3, #128	@ 0x80
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	429a      	cmp	r2, r3
 8005552:	d107      	bne.n	8005564 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2140      	movs	r1, #64	@ 0x40
 8005560:	438a      	bics	r2, r1
 8005562:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005568:	2380      	movs	r3, #128	@ 0x80
 800556a:	019b      	lsls	r3, r3, #6
 800556c:	429a      	cmp	r2, r3
 800556e:	d110      	bne.n	8005592 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	491a      	ldr	r1, [pc, #104]	@ (80055e4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800557c:	400a      	ands	r2, r1
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2180      	movs	r1, #128	@ 0x80
 800558c:	0189      	lsls	r1, r1, #6
 800558e:	430a      	orrs	r2, r1
 8005590:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	225d      	movs	r2, #93	@ 0x5d
 8005596:	2101      	movs	r1, #1
 8005598:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	225c      	movs	r2, #92	@ 0x5c
 800559e:	2100      	movs	r1, #0
 80055a0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e017      	b.n	80055d6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	4013      	ands	r3, r2
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	425a      	negs	r2, r3
 80055c6:	4153      	adcs	r3, r2
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	001a      	movs	r2, r3
 80055cc:	1dfb      	adds	r3, r7, #7
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d197      	bne.n	8005504 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	0018      	movs	r0, r3
 80055d8:	46bd      	mov	sp, r7
 80055da:	b008      	add	sp, #32
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	46c0      	nop			@ (mov r8, r8)
 80055e0:	20000014 	.word	0x20000014
 80055e4:	ffffdfff 	.word	0xffffdfff

080055e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08a      	sub	sp, #40	@ 0x28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80055f6:	2317      	movs	r3, #23
 80055f8:	18fb      	adds	r3, r7, r3
 80055fa:	2200      	movs	r2, #0
 80055fc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80055fe:	f7fe f939 	bl	8003874 <HAL_GetTick>
 8005602:	0002      	movs	r2, r0
 8005604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	18d3      	adds	r3, r2, r3
 800560c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800560e:	f7fe f931 	bl	8003874 <HAL_GetTick>
 8005612:	0003      	movs	r3, r0
 8005614:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	330c      	adds	r3, #12
 800561c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800561e:	4b41      	ldr	r3, [pc, #260]	@ (8005724 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	0013      	movs	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	189b      	adds	r3, r3, r2
 8005628:	00da      	lsls	r2, r3, #3
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	0d1b      	lsrs	r3, r3, #20
 800562e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005630:	4353      	muls	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005634:	e068      	b.n	8005708 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	23c0      	movs	r3, #192	@ 0xc0
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	429a      	cmp	r2, r3
 800563e:	d10a      	bne.n	8005656 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d107      	bne.n	8005656 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	b2da      	uxtb	r2, r3
 800564c:	2117      	movs	r1, #23
 800564e:	187b      	adds	r3, r7, r1
 8005650:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005652:	187b      	adds	r3, r7, r1
 8005654:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	3301      	adds	r3, #1
 800565a:	d055      	beq.n	8005708 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800565c:	f7fe f90a 	bl	8003874 <HAL_GetTick>
 8005660:	0002      	movs	r2, r0
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005668:	429a      	cmp	r2, r3
 800566a:	d902      	bls.n	8005672 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800566c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566e:	2b00      	cmp	r3, #0
 8005670:	d142      	bne.n	80056f8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	21e0      	movs	r1, #224	@ 0xe0
 800567e:	438a      	bics	r2, r1
 8005680:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	2382      	movs	r3, #130	@ 0x82
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	429a      	cmp	r2, r3
 800568c:	d113      	bne.n	80056b6 <SPI_WaitFifoStateUntilTimeout+0xce>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	2380      	movs	r3, #128	@ 0x80
 8005694:	021b      	lsls	r3, r3, #8
 8005696:	429a      	cmp	r2, r3
 8005698:	d005      	beq.n	80056a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	2380      	movs	r3, #128	@ 0x80
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d107      	bne.n	80056b6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2140      	movs	r1, #64	@ 0x40
 80056b2:	438a      	bics	r2, r1
 80056b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056ba:	2380      	movs	r3, #128	@ 0x80
 80056bc:	019b      	lsls	r3, r3, #6
 80056be:	429a      	cmp	r2, r3
 80056c0:	d110      	bne.n	80056e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4916      	ldr	r1, [pc, #88]	@ (8005728 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80056ce:	400a      	ands	r2, r1
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2180      	movs	r1, #128	@ 0x80
 80056de:	0189      	lsls	r1, r1, #6
 80056e0:	430a      	orrs	r2, r1
 80056e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	225d      	movs	r2, #93	@ 0x5d
 80056e8:	2101      	movs	r1, #1
 80056ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	225c      	movs	r2, #92	@ 0x5c
 80056f0:	2100      	movs	r1, #0
 80056f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e010      	b.n	800571a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80056fe:	2300      	movs	r3, #0
 8005700:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	3b01      	subs	r3, #1
 8005706:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	4013      	ands	r3, r2
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	429a      	cmp	r2, r3
 8005716:	d18e      	bne.n	8005636 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	0018      	movs	r0, r3
 800571c:	46bd      	mov	sp, r7
 800571e:	b00a      	add	sp, #40	@ 0x28
 8005720:	bd80      	pop	{r7, pc}
 8005722:	46c0      	nop			@ (mov r8, r8)
 8005724:	20000014 	.word	0x20000014
 8005728:	ffffdfff 	.word	0xffffdfff

0800572c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af02      	add	r7, sp, #8
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	23c0      	movs	r3, #192	@ 0xc0
 800573c:	0159      	lsls	r1, r3, #5
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	0013      	movs	r3, r2
 8005746:	2200      	movs	r2, #0
 8005748:	f7ff ff4e 	bl	80055e8 <SPI_WaitFifoStateUntilTimeout>
 800574c:	1e03      	subs	r3, r0, #0
 800574e:	d007      	beq.n	8005760 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005754:	2220      	movs	r2, #32
 8005756:	431a      	orrs	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e027      	b.n	80057b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	0013      	movs	r3, r2
 800576a:	2200      	movs	r2, #0
 800576c:	2180      	movs	r1, #128	@ 0x80
 800576e:	f7ff fead 	bl	80054cc <SPI_WaitFlagStateUntilTimeout>
 8005772:	1e03      	subs	r3, r0, #0
 8005774:	d007      	beq.n	8005786 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800577a:	2220      	movs	r2, #32
 800577c:	431a      	orrs	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e014      	b.n	80057b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	23c0      	movs	r3, #192	@ 0xc0
 800578a:	00d9      	lsls	r1, r3, #3
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	0013      	movs	r3, r2
 8005794:	2200      	movs	r2, #0
 8005796:	f7ff ff27 	bl	80055e8 <SPI_WaitFifoStateUntilTimeout>
 800579a:	1e03      	subs	r3, r0, #0
 800579c:	d007      	beq.n	80057ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057a2:	2220      	movs	r2, #32
 80057a4:	431a      	orrs	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e000      	b.n	80057b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	0018      	movs	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	b004      	add	sp, #16
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e042      	b.n	8005850 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	223d      	movs	r2, #61	@ 0x3d
 80057ce:	5c9b      	ldrb	r3, [r3, r2]
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d107      	bne.n	80057e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	223c      	movs	r2, #60	@ 0x3c
 80057da:	2100      	movs	r1, #0
 80057dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	0018      	movs	r0, r3
 80057e2:	f7fd fe9f 	bl	8003524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	223d      	movs	r2, #61	@ 0x3d
 80057ea:	2102      	movs	r1, #2
 80057ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3304      	adds	r3, #4
 80057f6:	0019      	movs	r1, r3
 80057f8:	0010      	movs	r0, r2
 80057fa:	f000 f901 	bl	8005a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2246      	movs	r2, #70	@ 0x46
 8005802:	2101      	movs	r1, #1
 8005804:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	223e      	movs	r2, #62	@ 0x3e
 800580a:	2101      	movs	r1, #1
 800580c:	5499      	strb	r1, [r3, r2]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	223f      	movs	r2, #63	@ 0x3f
 8005812:	2101      	movs	r1, #1
 8005814:	5499      	strb	r1, [r3, r2]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2240      	movs	r2, #64	@ 0x40
 800581a:	2101      	movs	r1, #1
 800581c:	5499      	strb	r1, [r3, r2]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2241      	movs	r2, #65	@ 0x41
 8005822:	2101      	movs	r1, #1
 8005824:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2242      	movs	r2, #66	@ 0x42
 800582a:	2101      	movs	r1, #1
 800582c:	5499      	strb	r1, [r3, r2]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2243      	movs	r2, #67	@ 0x43
 8005832:	2101      	movs	r1, #1
 8005834:	5499      	strb	r1, [r3, r2]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2244      	movs	r2, #68	@ 0x44
 800583a:	2101      	movs	r1, #1
 800583c:	5499      	strb	r1, [r3, r2]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2245      	movs	r2, #69	@ 0x45
 8005842:	2101      	movs	r1, #1
 8005844:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	223d      	movs	r2, #61	@ 0x3d
 800584a:	2101      	movs	r1, #1
 800584c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	0018      	movs	r0, r3
 8005852:	46bd      	mov	sp, r7
 8005854:	b002      	add	sp, #8
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005862:	230f      	movs	r3, #15
 8005864:	18fb      	adds	r3, r7, r3
 8005866:	2200      	movs	r2, #0
 8005868:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	223c      	movs	r2, #60	@ 0x3c
 800586e:	5c9b      	ldrb	r3, [r3, r2]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_TIM_ConfigClockSource+0x20>
 8005874:	2302      	movs	r3, #2
 8005876:	e0bc      	b.n	80059f2 <HAL_TIM_ConfigClockSource+0x19a>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	223c      	movs	r2, #60	@ 0x3c
 800587c:	2101      	movs	r1, #1
 800587e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	223d      	movs	r2, #61	@ 0x3d
 8005884:	2102      	movs	r1, #2
 8005886:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2277      	movs	r2, #119	@ 0x77
 8005894:	4393      	bics	r3, r2
 8005896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4a58      	ldr	r2, [pc, #352]	@ (80059fc <HAL_TIM_ConfigClockSource+0x1a4>)
 800589c:	4013      	ands	r3, r2
 800589e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2280      	movs	r2, #128	@ 0x80
 80058ae:	0192      	lsls	r2, r2, #6
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d040      	beq.n	8005936 <HAL_TIM_ConfigClockSource+0xde>
 80058b4:	2280      	movs	r2, #128	@ 0x80
 80058b6:	0192      	lsls	r2, r2, #6
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d900      	bls.n	80058be <HAL_TIM_ConfigClockSource+0x66>
 80058bc:	e088      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
 80058be:	2280      	movs	r2, #128	@ 0x80
 80058c0:	0152      	lsls	r2, r2, #5
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d100      	bne.n	80058c8 <HAL_TIM_ConfigClockSource+0x70>
 80058c6:	e088      	b.n	80059da <HAL_TIM_ConfigClockSource+0x182>
 80058c8:	2280      	movs	r2, #128	@ 0x80
 80058ca:	0152      	lsls	r2, r2, #5
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d900      	bls.n	80058d2 <HAL_TIM_ConfigClockSource+0x7a>
 80058d0:	e07e      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
 80058d2:	2b70      	cmp	r3, #112	@ 0x70
 80058d4:	d018      	beq.n	8005908 <HAL_TIM_ConfigClockSource+0xb0>
 80058d6:	d900      	bls.n	80058da <HAL_TIM_ConfigClockSource+0x82>
 80058d8:	e07a      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
 80058da:	2b60      	cmp	r3, #96	@ 0x60
 80058dc:	d04f      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x126>
 80058de:	d900      	bls.n	80058e2 <HAL_TIM_ConfigClockSource+0x8a>
 80058e0:	e076      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
 80058e2:	2b50      	cmp	r3, #80	@ 0x50
 80058e4:	d03b      	beq.n	800595e <HAL_TIM_ConfigClockSource+0x106>
 80058e6:	d900      	bls.n	80058ea <HAL_TIM_ConfigClockSource+0x92>
 80058e8:	e072      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
 80058ea:	2b40      	cmp	r3, #64	@ 0x40
 80058ec:	d057      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x146>
 80058ee:	d900      	bls.n	80058f2 <HAL_TIM_ConfigClockSource+0x9a>
 80058f0:	e06e      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
 80058f2:	2b30      	cmp	r3, #48	@ 0x30
 80058f4:	d063      	beq.n	80059be <HAL_TIM_ConfigClockSource+0x166>
 80058f6:	d86b      	bhi.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
 80058f8:	2b20      	cmp	r3, #32
 80058fa:	d060      	beq.n	80059be <HAL_TIM_ConfigClockSource+0x166>
 80058fc:	d868      	bhi.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d05d      	beq.n	80059be <HAL_TIM_ConfigClockSource+0x166>
 8005902:	2b10      	cmp	r3, #16
 8005904:	d05b      	beq.n	80059be <HAL_TIM_ConfigClockSource+0x166>
 8005906:	e063      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005918:	f000 f97a 	bl	8005c10 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2277      	movs	r2, #119	@ 0x77
 8005928:	4313      	orrs	r3, r2
 800592a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	609a      	str	r2, [r3, #8]
      break;
 8005934:	e052      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005946:	f000 f963 	bl	8005c10 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2180      	movs	r1, #128	@ 0x80
 8005956:	01c9      	lsls	r1, r1, #7
 8005958:	430a      	orrs	r2, r1
 800595a:	609a      	str	r2, [r3, #8]
      break;
 800595c:	e03e      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800596a:	001a      	movs	r2, r3
 800596c:	f000 f8d6 	bl	8005b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2150      	movs	r1, #80	@ 0x50
 8005976:	0018      	movs	r0, r3
 8005978:	f000 f930 	bl	8005bdc <TIM_ITRx_SetConfig>
      break;
 800597c:	e02e      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800598a:	001a      	movs	r2, r3
 800598c:	f000 f8f4 	bl	8005b78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2160      	movs	r1, #96	@ 0x60
 8005996:	0018      	movs	r0, r3
 8005998:	f000 f920 	bl	8005bdc <TIM_ITRx_SetConfig>
      break;
 800599c:	e01e      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059aa:	001a      	movs	r2, r3
 80059ac:	f000 f8b6 	bl	8005b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2140      	movs	r1, #64	@ 0x40
 80059b6:	0018      	movs	r0, r3
 80059b8:	f000 f910 	bl	8005bdc <TIM_ITRx_SetConfig>
      break;
 80059bc:	e00e      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	0019      	movs	r1, r3
 80059c8:	0010      	movs	r0, r2
 80059ca:	f000 f907 	bl	8005bdc <TIM_ITRx_SetConfig>
      break;
 80059ce:	e005      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80059d0:	230f      	movs	r3, #15
 80059d2:	18fb      	adds	r3, r7, r3
 80059d4:	2201      	movs	r2, #1
 80059d6:	701a      	strb	r2, [r3, #0]
      break;
 80059d8:	e000      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80059da:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	223d      	movs	r2, #61	@ 0x3d
 80059e0:	2101      	movs	r1, #1
 80059e2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	223c      	movs	r2, #60	@ 0x3c
 80059e8:	2100      	movs	r1, #0
 80059ea:	5499      	strb	r1, [r3, r2]

  return status;
 80059ec:	230f      	movs	r3, #15
 80059ee:	18fb      	adds	r3, r7, r3
 80059f0:	781b      	ldrb	r3, [r3, #0]
}
 80059f2:	0018      	movs	r0, r3
 80059f4:	46bd      	mov	sp, r7
 80059f6:	b004      	add	sp, #16
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	46c0      	nop			@ (mov r8, r8)
 80059fc:	ffff00ff 	.word	0xffff00ff

08005a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a3b      	ldr	r2, [pc, #236]	@ (8005b00 <TIM_Base_SetConfig+0x100>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d008      	beq.n	8005a2a <TIM_Base_SetConfig+0x2a>
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	2380      	movs	r3, #128	@ 0x80
 8005a1c:	05db      	lsls	r3, r3, #23
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d003      	beq.n	8005a2a <TIM_Base_SetConfig+0x2a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a37      	ldr	r2, [pc, #220]	@ (8005b04 <TIM_Base_SetConfig+0x104>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d108      	bne.n	8005a3c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2270      	movs	r2, #112	@ 0x70
 8005a2e:	4393      	bics	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a30      	ldr	r2, [pc, #192]	@ (8005b00 <TIM_Base_SetConfig+0x100>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d018      	beq.n	8005a76 <TIM_Base_SetConfig+0x76>
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	2380      	movs	r3, #128	@ 0x80
 8005a48:	05db      	lsls	r3, r3, #23
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d013      	beq.n	8005a76 <TIM_Base_SetConfig+0x76>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a2c      	ldr	r2, [pc, #176]	@ (8005b04 <TIM_Base_SetConfig+0x104>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00f      	beq.n	8005a76 <TIM_Base_SetConfig+0x76>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a2b      	ldr	r2, [pc, #172]	@ (8005b08 <TIM_Base_SetConfig+0x108>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00b      	beq.n	8005a76 <TIM_Base_SetConfig+0x76>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a2a      	ldr	r2, [pc, #168]	@ (8005b0c <TIM_Base_SetConfig+0x10c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d007      	beq.n	8005a76 <TIM_Base_SetConfig+0x76>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a29      	ldr	r2, [pc, #164]	@ (8005b10 <TIM_Base_SetConfig+0x110>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d003      	beq.n	8005a76 <TIM_Base_SetConfig+0x76>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a28      	ldr	r2, [pc, #160]	@ (8005b14 <TIM_Base_SetConfig+0x114>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d108      	bne.n	8005a88 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4a27      	ldr	r2, [pc, #156]	@ (8005b18 <TIM_Base_SetConfig+0x118>)
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2280      	movs	r2, #128	@ 0x80
 8005a8c:	4393      	bics	r3, r2
 8005a8e:	001a      	movs	r2, r3
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a13      	ldr	r2, [pc, #76]	@ (8005b00 <TIM_Base_SetConfig+0x100>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00b      	beq.n	8005ace <TIM_Base_SetConfig+0xce>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a14      	ldr	r2, [pc, #80]	@ (8005b0c <TIM_Base_SetConfig+0x10c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d007      	beq.n	8005ace <TIM_Base_SetConfig+0xce>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a13      	ldr	r2, [pc, #76]	@ (8005b10 <TIM_Base_SetConfig+0x110>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d003      	beq.n	8005ace <TIM_Base_SetConfig+0xce>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a12      	ldr	r2, [pc, #72]	@ (8005b14 <TIM_Base_SetConfig+0x114>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d103      	bne.n	8005ad6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	691a      	ldr	r2, [r3, #16]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d106      	bne.n	8005af6 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	2201      	movs	r2, #1
 8005aee:	4393      	bics	r3, r2
 8005af0:	001a      	movs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	611a      	str	r2, [r3, #16]
  }
}
 8005af6:	46c0      	nop			@ (mov r8, r8)
 8005af8:	46bd      	mov	sp, r7
 8005afa:	b004      	add	sp, #16
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	46c0      	nop			@ (mov r8, r8)
 8005b00:	40012c00 	.word	0x40012c00
 8005b04:	40000400 	.word	0x40000400
 8005b08:	40002000 	.word	0x40002000
 8005b0c:	40014000 	.word	0x40014000
 8005b10:	40014400 	.word	0x40014400
 8005b14:	40014800 	.word	0x40014800
 8005b18:	fffffcff 	.word	0xfffffcff

08005b1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	2201      	movs	r2, #1
 8005b34:	4393      	bics	r3, r2
 8005b36:	001a      	movs	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	22f0      	movs	r2, #240	@ 0xf0
 8005b46:	4393      	bics	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	011b      	lsls	r3, r3, #4
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	220a      	movs	r2, #10
 8005b58:	4393      	bics	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	621a      	str	r2, [r3, #32]
}
 8005b70:	46c0      	nop			@ (mov r8, r8)
 8005b72:	46bd      	mov	sp, r7
 8005b74:	b006      	add	sp, #24
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	2210      	movs	r2, #16
 8005b90:	4393      	bics	r3, r2
 8005b92:	001a      	movs	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8005bd8 <TIM_TI2_ConfigInputStage+0x60>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	031b      	lsls	r3, r3, #12
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	22a0      	movs	r2, #160	@ 0xa0
 8005bb4:	4393      	bics	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	46c0      	nop			@ (mov r8, r8)
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	b006      	add	sp, #24
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	46c0      	nop			@ (mov r8, r8)
 8005bd8:	ffff0fff 	.word	0xffff0fff

08005bdc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2270      	movs	r2, #112	@ 0x70
 8005bf0:	4393      	bics	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	2207      	movs	r2, #7
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	609a      	str	r2, [r3, #8]
}
 8005c06:	46c0      	nop			@ (mov r8, r8)
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	b004      	add	sp, #16
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	4a09      	ldr	r2, [pc, #36]	@ (8005c4c <TIM_ETR_SetConfig+0x3c>)
 8005c28:	4013      	ands	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	021a      	lsls	r2, r3, #8
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	431a      	orrs	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	609a      	str	r2, [r3, #8]
}
 8005c44:	46c0      	nop			@ (mov r8, r8)
 8005c46:	46bd      	mov	sp, r7
 8005c48:	b006      	add	sp, #24
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	ffff00ff 	.word	0xffff00ff

08005c50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	223c      	movs	r2, #60	@ 0x3c
 8005c5e:	5c9b      	ldrb	r3, [r3, r2]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e047      	b.n	8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	223c      	movs	r2, #60	@ 0x3c
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	223d      	movs	r2, #61	@ 0x3d
 8005c74:	2102      	movs	r1, #2
 8005c76:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2270      	movs	r2, #112	@ 0x70
 8005c8c:	4393      	bics	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a16      	ldr	r2, [pc, #88]	@ (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00f      	beq.n	8005ccc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	2380      	movs	r3, #128	@ 0x80
 8005cb2:	05db      	lsls	r3, r3, #23
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d009      	beq.n	8005ccc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a11      	ldr	r2, [pc, #68]	@ (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d004      	beq.n	8005ccc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a10      	ldr	r2, [pc, #64]	@ (8005d08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d10c      	bne.n	8005ce6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2280      	movs	r2, #128	@ 0x80
 8005cd0:	4393      	bics	r3, r2
 8005cd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	223d      	movs	r2, #61	@ 0x3d
 8005cea:	2101      	movs	r1, #1
 8005cec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	223c      	movs	r2, #60	@ 0x3c
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	b004      	add	sp, #16
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	40012c00 	.word	0x40012c00
 8005d04:	40000400 	.word	0x40000400
 8005d08:	40014000 	.word	0x40014000

08005d0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e044      	b.n	8005da8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d107      	bne.n	8005d36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2278      	movs	r2, #120	@ 0x78
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	0018      	movs	r0, r3
 8005d32:	f7fd fc13 	bl	800355c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2224      	movs	r2, #36	@ 0x24
 8005d3a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2101      	movs	r1, #1
 8005d48:	438a      	bics	r2, r1
 8005d4a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d003      	beq.n	8005d5c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	0018      	movs	r0, r3
 8005d58:	f000 fab4 	bl	80062c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f000 f8c8 	bl	8005ef4 <UART_SetConfig>
 8005d64:	0003      	movs	r3, r0
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d101      	bne.n	8005d6e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e01c      	b.n	8005da8 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	490d      	ldr	r1, [pc, #52]	@ (8005db0 <HAL_UART_Init+0xa4>)
 8005d7a:	400a      	ands	r2, r1
 8005d7c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	212a      	movs	r1, #42	@ 0x2a
 8005d8a:	438a      	bics	r2, r1
 8005d8c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2101      	movs	r1, #1
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	0018      	movs	r0, r3
 8005da2:	f000 fb43 	bl	800642c <UART_CheckIdleState>
 8005da6:	0003      	movs	r3, r0
}
 8005da8:	0018      	movs	r0, r3
 8005daa:	46bd      	mov	sp, r7
 8005dac:	b002      	add	sp, #8
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	ffffb7ff 	.word	0xffffb7ff

08005db4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08a      	sub	sp, #40	@ 0x28
 8005db8:	af02      	add	r7, sp, #8
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	1dbb      	adds	r3, r7, #6
 8005dc2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d000      	beq.n	8005dce <HAL_UART_Transmit+0x1a>
 8005dcc:	e08c      	b.n	8005ee8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <HAL_UART_Transmit+0x28>
 8005dd4:	1dbb      	adds	r3, r7, #6
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e084      	b.n	8005eea <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	2380      	movs	r3, #128	@ 0x80
 8005de6:	015b      	lsls	r3, r3, #5
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d109      	bne.n	8005e00 <HAL_UART_Transmit+0x4c>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d105      	bne.n	8005e00 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2201      	movs	r2, #1
 8005df8:	4013      	ands	r3, r2
 8005dfa:	d001      	beq.n	8005e00 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e074      	b.n	8005eea <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2284      	movs	r2, #132	@ 0x84
 8005e04:	2100      	movs	r1, #0
 8005e06:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2221      	movs	r2, #33	@ 0x21
 8005e0c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e0e:	f7fd fd31 	bl	8003874 <HAL_GetTick>
 8005e12:	0003      	movs	r3, r0
 8005e14:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	1dba      	adds	r2, r7, #6
 8005e1a:	2150      	movs	r1, #80	@ 0x50
 8005e1c:	8812      	ldrh	r2, [r2, #0]
 8005e1e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	1dba      	adds	r2, r7, #6
 8005e24:	2152      	movs	r1, #82	@ 0x52
 8005e26:	8812      	ldrh	r2, [r2, #0]
 8005e28:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	2380      	movs	r3, #128	@ 0x80
 8005e30:	015b      	lsls	r3, r3, #5
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d108      	bne.n	8005e48 <HAL_UART_Transmit+0x94>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d104      	bne.n	8005e48 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	61bb      	str	r3, [r7, #24]
 8005e46:	e003      	b.n	8005e50 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e50:	e02f      	b.n	8005eb2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	0013      	movs	r3, r2
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2180      	movs	r1, #128	@ 0x80
 8005e60:	f000 fb8c 	bl	800657c <UART_WaitOnFlagUntilTimeout>
 8005e64:	1e03      	subs	r3, r0, #0
 8005e66:	d004      	beq.n	8005e72 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e03b      	b.n	8005eea <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10b      	bne.n	8005e90 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	881a      	ldrh	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	05d2      	lsls	r2, r2, #23
 8005e82:	0dd2      	lsrs	r2, r2, #23
 8005e84:	b292      	uxth	r2, r2
 8005e86:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	3302      	adds	r3, #2
 8005e8c:	61bb      	str	r3, [r7, #24]
 8005e8e:	e007      	b.n	8005ea0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	781a      	ldrb	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2252      	movs	r2, #82	@ 0x52
 8005ea4:	5a9b      	ldrh	r3, [r3, r2]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	b299      	uxth	r1, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2252      	movs	r2, #82	@ 0x52
 8005eb0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2252      	movs	r2, #82	@ 0x52
 8005eb6:	5a9b      	ldrh	r3, [r3, r2]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1c9      	bne.n	8005e52 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	0013      	movs	r3, r2
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2140      	movs	r1, #64	@ 0x40
 8005ecc:	f000 fb56 	bl	800657c <UART_WaitOnFlagUntilTimeout>
 8005ed0:	1e03      	subs	r3, r0, #0
 8005ed2:	d004      	beq.n	8005ede <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e005      	b.n	8005eea <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	e000      	b.n	8005eea <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005ee8:	2302      	movs	r3, #2
  }
}
 8005eea:	0018      	movs	r0, r3
 8005eec:	46bd      	mov	sp, r7
 8005eee:	b008      	add	sp, #32
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005efc:	231e      	movs	r3, #30
 8005efe:	18fb      	adds	r3, r7, r3
 8005f00:	2200      	movs	r2, #0
 8005f02:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4abe      	ldr	r2, [pc, #760]	@ (800621c <UART_SetConfig+0x328>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	0019      	movs	r1, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	4ab9      	ldr	r2, [pc, #740]	@ (8006220 <UART_SetConfig+0x32c>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	0019      	movs	r1, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	4ab0      	ldr	r2, [pc, #704]	@ (8006224 <UART_SetConfig+0x330>)
 8005f62:	4013      	ands	r3, r2
 8005f64:	0019      	movs	r1, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4aac      	ldr	r2, [pc, #688]	@ (8006228 <UART_SetConfig+0x334>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d127      	bne.n	8005fca <UART_SetConfig+0xd6>
 8005f7a:	4bac      	ldr	r3, [pc, #688]	@ (800622c <UART_SetConfig+0x338>)
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f7e:	2203      	movs	r2, #3
 8005f80:	4013      	ands	r3, r2
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d00d      	beq.n	8005fa2 <UART_SetConfig+0xae>
 8005f86:	d81b      	bhi.n	8005fc0 <UART_SetConfig+0xcc>
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d014      	beq.n	8005fb6 <UART_SetConfig+0xc2>
 8005f8c:	d818      	bhi.n	8005fc0 <UART_SetConfig+0xcc>
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <UART_SetConfig+0xa4>
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d00a      	beq.n	8005fac <UART_SetConfig+0xb8>
 8005f96:	e013      	b.n	8005fc0 <UART_SetConfig+0xcc>
 8005f98:	231f      	movs	r3, #31
 8005f9a:	18fb      	adds	r3, r7, r3
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	701a      	strb	r2, [r3, #0]
 8005fa0:	e0bd      	b.n	800611e <UART_SetConfig+0x22a>
 8005fa2:	231f      	movs	r3, #31
 8005fa4:	18fb      	adds	r3, r7, r3
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	701a      	strb	r2, [r3, #0]
 8005faa:	e0b8      	b.n	800611e <UART_SetConfig+0x22a>
 8005fac:	231f      	movs	r3, #31
 8005fae:	18fb      	adds	r3, r7, r3
 8005fb0:	2204      	movs	r2, #4
 8005fb2:	701a      	strb	r2, [r3, #0]
 8005fb4:	e0b3      	b.n	800611e <UART_SetConfig+0x22a>
 8005fb6:	231f      	movs	r3, #31
 8005fb8:	18fb      	adds	r3, r7, r3
 8005fba:	2208      	movs	r2, #8
 8005fbc:	701a      	strb	r2, [r3, #0]
 8005fbe:	e0ae      	b.n	800611e <UART_SetConfig+0x22a>
 8005fc0:	231f      	movs	r3, #31
 8005fc2:	18fb      	adds	r3, r7, r3
 8005fc4:	2210      	movs	r2, #16
 8005fc6:	701a      	strb	r2, [r3, #0]
 8005fc8:	e0a9      	b.n	800611e <UART_SetConfig+0x22a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a98      	ldr	r2, [pc, #608]	@ (8006230 <UART_SetConfig+0x33c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d134      	bne.n	800603e <UART_SetConfig+0x14a>
 8005fd4:	4b95      	ldr	r3, [pc, #596]	@ (800622c <UART_SetConfig+0x338>)
 8005fd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fd8:	23c0      	movs	r3, #192	@ 0xc0
 8005fda:	029b      	lsls	r3, r3, #10
 8005fdc:	4013      	ands	r3, r2
 8005fde:	22c0      	movs	r2, #192	@ 0xc0
 8005fe0:	0292      	lsls	r2, r2, #10
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d017      	beq.n	8006016 <UART_SetConfig+0x122>
 8005fe6:	22c0      	movs	r2, #192	@ 0xc0
 8005fe8:	0292      	lsls	r2, r2, #10
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d822      	bhi.n	8006034 <UART_SetConfig+0x140>
 8005fee:	2280      	movs	r2, #128	@ 0x80
 8005ff0:	0292      	lsls	r2, r2, #10
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d019      	beq.n	800602a <UART_SetConfig+0x136>
 8005ff6:	2280      	movs	r2, #128	@ 0x80
 8005ff8:	0292      	lsls	r2, r2, #10
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d81a      	bhi.n	8006034 <UART_SetConfig+0x140>
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d004      	beq.n	800600c <UART_SetConfig+0x118>
 8006002:	2280      	movs	r2, #128	@ 0x80
 8006004:	0252      	lsls	r2, r2, #9
 8006006:	4293      	cmp	r3, r2
 8006008:	d00a      	beq.n	8006020 <UART_SetConfig+0x12c>
 800600a:	e013      	b.n	8006034 <UART_SetConfig+0x140>
 800600c:	231f      	movs	r3, #31
 800600e:	18fb      	adds	r3, r7, r3
 8006010:	2200      	movs	r2, #0
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	e083      	b.n	800611e <UART_SetConfig+0x22a>
 8006016:	231f      	movs	r3, #31
 8006018:	18fb      	adds	r3, r7, r3
 800601a:	2202      	movs	r2, #2
 800601c:	701a      	strb	r2, [r3, #0]
 800601e:	e07e      	b.n	800611e <UART_SetConfig+0x22a>
 8006020:	231f      	movs	r3, #31
 8006022:	18fb      	adds	r3, r7, r3
 8006024:	2204      	movs	r2, #4
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	e079      	b.n	800611e <UART_SetConfig+0x22a>
 800602a:	231f      	movs	r3, #31
 800602c:	18fb      	adds	r3, r7, r3
 800602e:	2208      	movs	r2, #8
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	e074      	b.n	800611e <UART_SetConfig+0x22a>
 8006034:	231f      	movs	r3, #31
 8006036:	18fb      	adds	r3, r7, r3
 8006038:	2210      	movs	r2, #16
 800603a:	701a      	strb	r2, [r3, #0]
 800603c:	e06f      	b.n	800611e <UART_SetConfig+0x22a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a7c      	ldr	r2, [pc, #496]	@ (8006234 <UART_SetConfig+0x340>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d134      	bne.n	80060b2 <UART_SetConfig+0x1be>
 8006048:	4b78      	ldr	r3, [pc, #480]	@ (800622c <UART_SetConfig+0x338>)
 800604a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800604c:	23c0      	movs	r3, #192	@ 0xc0
 800604e:	031b      	lsls	r3, r3, #12
 8006050:	4013      	ands	r3, r2
 8006052:	22c0      	movs	r2, #192	@ 0xc0
 8006054:	0312      	lsls	r2, r2, #12
 8006056:	4293      	cmp	r3, r2
 8006058:	d017      	beq.n	800608a <UART_SetConfig+0x196>
 800605a:	22c0      	movs	r2, #192	@ 0xc0
 800605c:	0312      	lsls	r2, r2, #12
 800605e:	4293      	cmp	r3, r2
 8006060:	d822      	bhi.n	80060a8 <UART_SetConfig+0x1b4>
 8006062:	2280      	movs	r2, #128	@ 0x80
 8006064:	0312      	lsls	r2, r2, #12
 8006066:	4293      	cmp	r3, r2
 8006068:	d019      	beq.n	800609e <UART_SetConfig+0x1aa>
 800606a:	2280      	movs	r2, #128	@ 0x80
 800606c:	0312      	lsls	r2, r2, #12
 800606e:	4293      	cmp	r3, r2
 8006070:	d81a      	bhi.n	80060a8 <UART_SetConfig+0x1b4>
 8006072:	2b00      	cmp	r3, #0
 8006074:	d004      	beq.n	8006080 <UART_SetConfig+0x18c>
 8006076:	2280      	movs	r2, #128	@ 0x80
 8006078:	02d2      	lsls	r2, r2, #11
 800607a:	4293      	cmp	r3, r2
 800607c:	d00a      	beq.n	8006094 <UART_SetConfig+0x1a0>
 800607e:	e013      	b.n	80060a8 <UART_SetConfig+0x1b4>
 8006080:	231f      	movs	r3, #31
 8006082:	18fb      	adds	r3, r7, r3
 8006084:	2200      	movs	r2, #0
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	e049      	b.n	800611e <UART_SetConfig+0x22a>
 800608a:	231f      	movs	r3, #31
 800608c:	18fb      	adds	r3, r7, r3
 800608e:	2202      	movs	r2, #2
 8006090:	701a      	strb	r2, [r3, #0]
 8006092:	e044      	b.n	800611e <UART_SetConfig+0x22a>
 8006094:	231f      	movs	r3, #31
 8006096:	18fb      	adds	r3, r7, r3
 8006098:	2204      	movs	r2, #4
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	e03f      	b.n	800611e <UART_SetConfig+0x22a>
 800609e:	231f      	movs	r3, #31
 80060a0:	18fb      	adds	r3, r7, r3
 80060a2:	2208      	movs	r2, #8
 80060a4:	701a      	strb	r2, [r3, #0]
 80060a6:	e03a      	b.n	800611e <UART_SetConfig+0x22a>
 80060a8:	231f      	movs	r3, #31
 80060aa:	18fb      	adds	r3, r7, r3
 80060ac:	2210      	movs	r2, #16
 80060ae:	701a      	strb	r2, [r3, #0]
 80060b0:	e035      	b.n	800611e <UART_SetConfig+0x22a>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a60      	ldr	r2, [pc, #384]	@ (8006238 <UART_SetConfig+0x344>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d104      	bne.n	80060c6 <UART_SetConfig+0x1d2>
 80060bc:	231f      	movs	r3, #31
 80060be:	18fb      	adds	r3, r7, r3
 80060c0:	2200      	movs	r2, #0
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	e02b      	b.n	800611e <UART_SetConfig+0x22a>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a5c      	ldr	r2, [pc, #368]	@ (800623c <UART_SetConfig+0x348>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d104      	bne.n	80060da <UART_SetConfig+0x1e6>
 80060d0:	231f      	movs	r3, #31
 80060d2:	18fb      	adds	r3, r7, r3
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
 80060d8:	e021      	b.n	800611e <UART_SetConfig+0x22a>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a58      	ldr	r2, [pc, #352]	@ (8006240 <UART_SetConfig+0x34c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d104      	bne.n	80060ee <UART_SetConfig+0x1fa>
 80060e4:	231f      	movs	r3, #31
 80060e6:	18fb      	adds	r3, r7, r3
 80060e8:	2200      	movs	r2, #0
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	e017      	b.n	800611e <UART_SetConfig+0x22a>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a54      	ldr	r2, [pc, #336]	@ (8006244 <UART_SetConfig+0x350>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d104      	bne.n	8006102 <UART_SetConfig+0x20e>
 80060f8:	231f      	movs	r3, #31
 80060fa:	18fb      	adds	r3, r7, r3
 80060fc:	2200      	movs	r2, #0
 80060fe:	701a      	strb	r2, [r3, #0]
 8006100:	e00d      	b.n	800611e <UART_SetConfig+0x22a>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a50      	ldr	r2, [pc, #320]	@ (8006248 <UART_SetConfig+0x354>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d104      	bne.n	8006116 <UART_SetConfig+0x222>
 800610c:	231f      	movs	r3, #31
 800610e:	18fb      	adds	r3, r7, r3
 8006110:	2200      	movs	r2, #0
 8006112:	701a      	strb	r2, [r3, #0]
 8006114:	e003      	b.n	800611e <UART_SetConfig+0x22a>
 8006116:	231f      	movs	r3, #31
 8006118:	18fb      	adds	r3, r7, r3
 800611a:	2210      	movs	r2, #16
 800611c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69da      	ldr	r2, [r3, #28]
 8006122:	2380      	movs	r3, #128	@ 0x80
 8006124:	021b      	lsls	r3, r3, #8
 8006126:	429a      	cmp	r2, r3
 8006128:	d15c      	bne.n	80061e4 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 800612a:	231f      	movs	r3, #31
 800612c:	18fb      	adds	r3, r7, r3
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b08      	cmp	r3, #8
 8006132:	d015      	beq.n	8006160 <UART_SetConfig+0x26c>
 8006134:	dc18      	bgt.n	8006168 <UART_SetConfig+0x274>
 8006136:	2b04      	cmp	r3, #4
 8006138:	d00d      	beq.n	8006156 <UART_SetConfig+0x262>
 800613a:	dc15      	bgt.n	8006168 <UART_SetConfig+0x274>
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <UART_SetConfig+0x252>
 8006140:	2b02      	cmp	r3, #2
 8006142:	d005      	beq.n	8006150 <UART_SetConfig+0x25c>
 8006144:	e010      	b.n	8006168 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006146:	f7fe fe11 	bl	8004d6c <HAL_RCC_GetPCLK1Freq>
 800614a:	0003      	movs	r3, r0
 800614c:	61bb      	str	r3, [r7, #24]
        break;
 800614e:	e012      	b.n	8006176 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006150:	4b3e      	ldr	r3, [pc, #248]	@ (800624c <UART_SetConfig+0x358>)
 8006152:	61bb      	str	r3, [r7, #24]
        break;
 8006154:	e00f      	b.n	8006176 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006156:	f7fe fd8d 	bl	8004c74 <HAL_RCC_GetSysClockFreq>
 800615a:	0003      	movs	r3, r0
 800615c:	61bb      	str	r3, [r7, #24]
        break;
 800615e:	e00a      	b.n	8006176 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006160:	2380      	movs	r3, #128	@ 0x80
 8006162:	021b      	lsls	r3, r3, #8
 8006164:	61bb      	str	r3, [r7, #24]
        break;
 8006166:	e006      	b.n	8006176 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800616c:	231e      	movs	r3, #30
 800616e:	18fb      	adds	r3, r7, r3
 8006170:	2201      	movs	r2, #1
 8006172:	701a      	strb	r2, [r3, #0]
        break;
 8006174:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d100      	bne.n	800617e <UART_SetConfig+0x28a>
 800617c:	e095      	b.n	80062aa <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	005a      	lsls	r2, r3, #1
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	085b      	lsrs	r3, r3, #1
 8006188:	18d2      	adds	r2, r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	0019      	movs	r1, r3
 8006190:	0010      	movs	r0, r2
 8006192:	f7f9 ffc1 	bl	8000118 <__udivsi3>
 8006196:	0003      	movs	r3, r0
 8006198:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	2b0f      	cmp	r3, #15
 800619e:	d91c      	bls.n	80061da <UART_SetConfig+0x2e6>
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	2380      	movs	r3, #128	@ 0x80
 80061a4:	025b      	lsls	r3, r3, #9
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d217      	bcs.n	80061da <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	200e      	movs	r0, #14
 80061b0:	183b      	adds	r3, r7, r0
 80061b2:	210f      	movs	r1, #15
 80061b4:	438a      	bics	r2, r1
 80061b6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	085b      	lsrs	r3, r3, #1
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2207      	movs	r2, #7
 80061c0:	4013      	ands	r3, r2
 80061c2:	b299      	uxth	r1, r3
 80061c4:	183b      	adds	r3, r7, r0
 80061c6:	183a      	adds	r2, r7, r0
 80061c8:	8812      	ldrh	r2, [r2, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	183a      	adds	r2, r7, r0
 80061d4:	8812      	ldrh	r2, [r2, #0]
 80061d6:	60da      	str	r2, [r3, #12]
 80061d8:	e067      	b.n	80062aa <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80061da:	231e      	movs	r3, #30
 80061dc:	18fb      	adds	r3, r7, r3
 80061de:	2201      	movs	r2, #1
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	e062      	b.n	80062aa <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061e4:	231f      	movs	r3, #31
 80061e6:	18fb      	adds	r3, r7, r3
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	2b08      	cmp	r3, #8
 80061ec:	d030      	beq.n	8006250 <UART_SetConfig+0x35c>
 80061ee:	dc33      	bgt.n	8006258 <UART_SetConfig+0x364>
 80061f0:	2b04      	cmp	r3, #4
 80061f2:	d00d      	beq.n	8006210 <UART_SetConfig+0x31c>
 80061f4:	dc30      	bgt.n	8006258 <UART_SetConfig+0x364>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <UART_SetConfig+0x30c>
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d005      	beq.n	800620a <UART_SetConfig+0x316>
 80061fe:	e02b      	b.n	8006258 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006200:	f7fe fdb4 	bl	8004d6c <HAL_RCC_GetPCLK1Freq>
 8006204:	0003      	movs	r3, r0
 8006206:	61bb      	str	r3, [r7, #24]
        break;
 8006208:	e02d      	b.n	8006266 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800620a:	4b10      	ldr	r3, [pc, #64]	@ (800624c <UART_SetConfig+0x358>)
 800620c:	61bb      	str	r3, [r7, #24]
        break;
 800620e:	e02a      	b.n	8006266 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006210:	f7fe fd30 	bl	8004c74 <HAL_RCC_GetSysClockFreq>
 8006214:	0003      	movs	r3, r0
 8006216:	61bb      	str	r3, [r7, #24]
        break;
 8006218:	e025      	b.n	8006266 <UART_SetConfig+0x372>
 800621a:	46c0      	nop			@ (mov r8, r8)
 800621c:	efff69f3 	.word	0xefff69f3
 8006220:	ffffcfff 	.word	0xffffcfff
 8006224:	fffff4ff 	.word	0xfffff4ff
 8006228:	40013800 	.word	0x40013800
 800622c:	40021000 	.word	0x40021000
 8006230:	40004400 	.word	0x40004400
 8006234:	40004800 	.word	0x40004800
 8006238:	40004c00 	.word	0x40004c00
 800623c:	40005000 	.word	0x40005000
 8006240:	40011400 	.word	0x40011400
 8006244:	40011800 	.word	0x40011800
 8006248:	40011c00 	.word	0x40011c00
 800624c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006250:	2380      	movs	r3, #128	@ 0x80
 8006252:	021b      	lsls	r3, r3, #8
 8006254:	61bb      	str	r3, [r7, #24]
        break;
 8006256:	e006      	b.n	8006266 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800625c:	231e      	movs	r3, #30
 800625e:	18fb      	adds	r3, r7, r3
 8006260:	2201      	movs	r2, #1
 8006262:	701a      	strb	r2, [r3, #0]
        break;
 8006264:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01e      	beq.n	80062aa <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	085a      	lsrs	r2, r3, #1
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	18d2      	adds	r2, r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	0019      	movs	r1, r3
 800627c:	0010      	movs	r0, r2
 800627e:	f7f9 ff4b 	bl	8000118 <__udivsi3>
 8006282:	0003      	movs	r3, r0
 8006284:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	2b0f      	cmp	r3, #15
 800628a:	d90a      	bls.n	80062a2 <UART_SetConfig+0x3ae>
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	2380      	movs	r3, #128	@ 0x80
 8006290:	025b      	lsls	r3, r3, #9
 8006292:	429a      	cmp	r2, r3
 8006294:	d205      	bcs.n	80062a2 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	b29a      	uxth	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60da      	str	r2, [r3, #12]
 80062a0:	e003      	b.n	80062aa <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80062a2:	231e      	movs	r3, #30
 80062a4:	18fb      	adds	r3, r7, r3
 80062a6:	2201      	movs	r2, #1
 80062a8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80062b6:	231e      	movs	r3, #30
 80062b8:	18fb      	adds	r3, r7, r3
 80062ba:	781b      	ldrb	r3, [r3, #0]
}
 80062bc:	0018      	movs	r0, r3
 80062be:	46bd      	mov	sp, r7
 80062c0:	b008      	add	sp, #32
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d0:	2208      	movs	r2, #8
 80062d2:	4013      	ands	r3, r2
 80062d4:	d00b      	beq.n	80062ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	4a4a      	ldr	r2, [pc, #296]	@ (8006408 <UART_AdvFeatureConfig+0x144>)
 80062de:	4013      	ands	r3, r2
 80062e0:	0019      	movs	r1, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f2:	2201      	movs	r2, #1
 80062f4:	4013      	ands	r3, r2
 80062f6:	d00b      	beq.n	8006310 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	4a43      	ldr	r2, [pc, #268]	@ (800640c <UART_AdvFeatureConfig+0x148>)
 8006300:	4013      	ands	r3, r2
 8006302:	0019      	movs	r1, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006314:	2202      	movs	r2, #2
 8006316:	4013      	ands	r3, r2
 8006318:	d00b      	beq.n	8006332 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	4a3b      	ldr	r2, [pc, #236]	@ (8006410 <UART_AdvFeatureConfig+0x14c>)
 8006322:	4013      	ands	r3, r2
 8006324:	0019      	movs	r1, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006336:	2204      	movs	r2, #4
 8006338:	4013      	ands	r3, r2
 800633a:	d00b      	beq.n	8006354 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	4a34      	ldr	r2, [pc, #208]	@ (8006414 <UART_AdvFeatureConfig+0x150>)
 8006344:	4013      	ands	r3, r2
 8006346:	0019      	movs	r1, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006358:	2210      	movs	r2, #16
 800635a:	4013      	ands	r3, r2
 800635c:	d00b      	beq.n	8006376 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	4a2c      	ldr	r2, [pc, #176]	@ (8006418 <UART_AdvFeatureConfig+0x154>)
 8006366:	4013      	ands	r3, r2
 8006368:	0019      	movs	r1, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637a:	2220      	movs	r2, #32
 800637c:	4013      	ands	r3, r2
 800637e:	d00b      	beq.n	8006398 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	4a25      	ldr	r2, [pc, #148]	@ (800641c <UART_AdvFeatureConfig+0x158>)
 8006388:	4013      	ands	r3, r2
 800638a:	0019      	movs	r1, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639c:	2240      	movs	r2, #64	@ 0x40
 800639e:	4013      	ands	r3, r2
 80063a0:	d01d      	beq.n	80063de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006420 <UART_AdvFeatureConfig+0x15c>)
 80063aa:	4013      	ands	r3, r2
 80063ac:	0019      	movs	r1, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063be:	2380      	movs	r3, #128	@ 0x80
 80063c0:	035b      	lsls	r3, r3, #13
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d10b      	bne.n	80063de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	4a15      	ldr	r2, [pc, #84]	@ (8006424 <UART_AdvFeatureConfig+0x160>)
 80063ce:	4013      	ands	r3, r2
 80063d0:	0019      	movs	r1, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e2:	2280      	movs	r2, #128	@ 0x80
 80063e4:	4013      	ands	r3, r2
 80063e6:	d00b      	beq.n	8006400 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	4a0e      	ldr	r2, [pc, #56]	@ (8006428 <UART_AdvFeatureConfig+0x164>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	0019      	movs	r1, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	605a      	str	r2, [r3, #4]
  }
}
 8006400:	46c0      	nop			@ (mov r8, r8)
 8006402:	46bd      	mov	sp, r7
 8006404:	b002      	add	sp, #8
 8006406:	bd80      	pop	{r7, pc}
 8006408:	ffff7fff 	.word	0xffff7fff
 800640c:	fffdffff 	.word	0xfffdffff
 8006410:	fffeffff 	.word	0xfffeffff
 8006414:	fffbffff 	.word	0xfffbffff
 8006418:	ffffefff 	.word	0xffffefff
 800641c:	ffffdfff 	.word	0xffffdfff
 8006420:	ffefffff 	.word	0xffefffff
 8006424:	ff9fffff 	.word	0xff9fffff
 8006428:	fff7ffff 	.word	0xfff7ffff

0800642c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b092      	sub	sp, #72	@ 0x48
 8006430:	af02      	add	r7, sp, #8
 8006432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2284      	movs	r2, #132	@ 0x84
 8006438:	2100      	movs	r1, #0
 800643a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800643c:	f7fd fa1a 	bl	8003874 <HAL_GetTick>
 8006440:	0003      	movs	r3, r0
 8006442:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2208      	movs	r2, #8
 800644c:	4013      	ands	r3, r2
 800644e:	2b08      	cmp	r3, #8
 8006450:	d12c      	bne.n	80064ac <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006454:	2280      	movs	r2, #128	@ 0x80
 8006456:	0391      	lsls	r1, r2, #14
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	4a46      	ldr	r2, [pc, #280]	@ (8006574 <UART_CheckIdleState+0x148>)
 800645c:	9200      	str	r2, [sp, #0]
 800645e:	2200      	movs	r2, #0
 8006460:	f000 f88c 	bl	800657c <UART_WaitOnFlagUntilTimeout>
 8006464:	1e03      	subs	r3, r0, #0
 8006466:	d021      	beq.n	80064ac <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006468:	f3ef 8310 	mrs	r3, PRIMASK
 800646c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800646e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006470:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006472:	2301      	movs	r3, #1
 8006474:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006478:	f383 8810 	msr	PRIMASK, r3
}
 800647c:	46c0      	nop			@ (mov r8, r8)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2180      	movs	r1, #128	@ 0x80
 800648a:	438a      	bics	r2, r1
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006490:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006494:	f383 8810 	msr	PRIMASK, r3
}
 8006498:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2220      	movs	r2, #32
 800649e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2278      	movs	r2, #120	@ 0x78
 80064a4:	2100      	movs	r1, #0
 80064a6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e05f      	b.n	800656c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2204      	movs	r2, #4
 80064b4:	4013      	ands	r3, r2
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	d146      	bne.n	8006548 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064bc:	2280      	movs	r2, #128	@ 0x80
 80064be:	03d1      	lsls	r1, r2, #15
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	4a2c      	ldr	r2, [pc, #176]	@ (8006574 <UART_CheckIdleState+0x148>)
 80064c4:	9200      	str	r2, [sp, #0]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f000 f858 	bl	800657c <UART_WaitOnFlagUntilTimeout>
 80064cc:	1e03      	subs	r3, r0, #0
 80064ce:	d03b      	beq.n	8006548 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064d0:	f3ef 8310 	mrs	r3, PRIMASK
 80064d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80064d6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80064da:	2301      	movs	r3, #1
 80064dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f383 8810 	msr	PRIMASK, r3
}
 80064e4:	46c0      	nop			@ (mov r8, r8)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4921      	ldr	r1, [pc, #132]	@ (8006578 <UART_CheckIdleState+0x14c>)
 80064f2:	400a      	ands	r2, r1
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f383 8810 	msr	PRIMASK, r3
}
 8006500:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006502:	f3ef 8310 	mrs	r3, PRIMASK
 8006506:	61bb      	str	r3, [r7, #24]
  return(result);
 8006508:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800650a:	633b      	str	r3, [r7, #48]	@ 0x30
 800650c:	2301      	movs	r3, #1
 800650e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	f383 8810 	msr	PRIMASK, r3
}
 8006516:	46c0      	nop			@ (mov r8, r8)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2101      	movs	r1, #1
 8006524:	438a      	bics	r2, r1
 8006526:	609a      	str	r2, [r3, #8]
 8006528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	f383 8810 	msr	PRIMASK, r3
}
 8006532:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2280      	movs	r2, #128	@ 0x80
 8006538:	2120      	movs	r1, #32
 800653a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2278      	movs	r2, #120	@ 0x78
 8006540:	2100      	movs	r1, #0
 8006542:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e011      	b.n	800656c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2220      	movs	r2, #32
 800654c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2280      	movs	r2, #128	@ 0x80
 8006552:	2120      	movs	r1, #32
 8006554:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2278      	movs	r2, #120	@ 0x78
 8006566:	2100      	movs	r1, #0
 8006568:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	0018      	movs	r0, r3
 800656e:	46bd      	mov	sp, r7
 8006570:	b010      	add	sp, #64	@ 0x40
 8006572:	bd80      	pop	{r7, pc}
 8006574:	01ffffff 	.word	0x01ffffff
 8006578:	fffffedf 	.word	0xfffffedf

0800657c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	603b      	str	r3, [r7, #0]
 8006588:	1dfb      	adds	r3, r7, #7
 800658a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800658c:	e051      	b.n	8006632 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	3301      	adds	r3, #1
 8006592:	d04e      	beq.n	8006632 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006594:	f7fd f96e 	bl	8003874 <HAL_GetTick>
 8006598:	0002      	movs	r2, r0
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d302      	bcc.n	80065aa <UART_WaitOnFlagUntilTimeout+0x2e>
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e051      	b.n	8006652 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2204      	movs	r2, #4
 80065b6:	4013      	ands	r3, r2
 80065b8:	d03b      	beq.n	8006632 <UART_WaitOnFlagUntilTimeout+0xb6>
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2b80      	cmp	r3, #128	@ 0x80
 80065be:	d038      	beq.n	8006632 <UART_WaitOnFlagUntilTimeout+0xb6>
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2b40      	cmp	r3, #64	@ 0x40
 80065c4:	d035      	beq.n	8006632 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	2208      	movs	r2, #8
 80065ce:	4013      	ands	r3, r2
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	d111      	bne.n	80065f8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2208      	movs	r2, #8
 80065da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	0018      	movs	r0, r3
 80065e0:	f000 f83c 	bl	800665c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2284      	movs	r2, #132	@ 0x84
 80065e8:	2108      	movs	r1, #8
 80065ea:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2278      	movs	r2, #120	@ 0x78
 80065f0:	2100      	movs	r1, #0
 80065f2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e02c      	b.n	8006652 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	69da      	ldr	r2, [r3, #28]
 80065fe:	2380      	movs	r3, #128	@ 0x80
 8006600:	011b      	lsls	r3, r3, #4
 8006602:	401a      	ands	r2, r3
 8006604:	2380      	movs	r3, #128	@ 0x80
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	429a      	cmp	r2, r3
 800660a:	d112      	bne.n	8006632 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2280      	movs	r2, #128	@ 0x80
 8006612:	0112      	lsls	r2, r2, #4
 8006614:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	0018      	movs	r0, r3
 800661a:	f000 f81f 	bl	800665c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2284      	movs	r2, #132	@ 0x84
 8006622:	2120      	movs	r1, #32
 8006624:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2278      	movs	r2, #120	@ 0x78
 800662a:	2100      	movs	r1, #0
 800662c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e00f      	b.n	8006652 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	4013      	ands	r3, r2
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	425a      	negs	r2, r3
 8006642:	4153      	adcs	r3, r2
 8006644:	b2db      	uxtb	r3, r3
 8006646:	001a      	movs	r2, r3
 8006648:	1dfb      	adds	r3, r7, #7
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	429a      	cmp	r2, r3
 800664e:	d09e      	beq.n	800658e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	0018      	movs	r0, r3
 8006654:	46bd      	mov	sp, r7
 8006656:	b004      	add	sp, #16
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b08e      	sub	sp, #56	@ 0x38
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006664:	f3ef 8310 	mrs	r3, PRIMASK
 8006668:	617b      	str	r3, [r7, #20]
  return(result);
 800666a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800666c:	637b      	str	r3, [r7, #52]	@ 0x34
 800666e:	2301      	movs	r3, #1
 8006670:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	f383 8810 	msr	PRIMASK, r3
}
 8006678:	46c0      	nop			@ (mov r8, r8)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4926      	ldr	r1, [pc, #152]	@ (8006720 <UART_EndRxTransfer+0xc4>)
 8006686:	400a      	ands	r2, r1
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800668c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	f383 8810 	msr	PRIMASK, r3
}
 8006694:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006696:	f3ef 8310 	mrs	r3, PRIMASK
 800669a:	623b      	str	r3, [r7, #32]
  return(result);
 800669c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800669e:	633b      	str	r3, [r7, #48]	@ 0x30
 80066a0:	2301      	movs	r3, #1
 80066a2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a6:	f383 8810 	msr	PRIMASK, r3
}
 80066aa:	46c0      	nop			@ (mov r8, r8)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689a      	ldr	r2, [r3, #8]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2101      	movs	r1, #1
 80066b8:	438a      	bics	r2, r1
 80066ba:	609a      	str	r2, [r3, #8]
 80066bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066be:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c2:	f383 8810 	msr	PRIMASK, r3
}
 80066c6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d118      	bne.n	8006702 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066d0:	f3ef 8310 	mrs	r3, PRIMASK
 80066d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80066d6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066da:	2301      	movs	r3, #1
 80066dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f383 8810 	msr	PRIMASK, r3
}
 80066e4:	46c0      	nop			@ (mov r8, r8)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2110      	movs	r1, #16
 80066f2:	438a      	bics	r2, r1
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f383 8810 	msr	PRIMASK, r3
}
 8006700:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2280      	movs	r2, #128	@ 0x80
 8006706:	2120      	movs	r1, #32
 8006708:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006716:	46c0      	nop			@ (mov r8, r8)
 8006718:	46bd      	mov	sp, r7
 800671a:	b00e      	add	sp, #56	@ 0x38
 800671c:	bd80      	pop	{r7, pc}
 800671e:	46c0      	nop			@ (mov r8, r8)
 8006720:	fffffedf 	.word	0xfffffedf

08006724 <malloc>:
 8006724:	b510      	push	{r4, lr}
 8006726:	4b03      	ldr	r3, [pc, #12]	@ (8006734 <malloc+0x10>)
 8006728:	0001      	movs	r1, r0
 800672a:	6818      	ldr	r0, [r3, #0]
 800672c:	f000 f830 	bl	8006790 <_malloc_r>
 8006730:	bd10      	pop	{r4, pc}
 8006732:	46c0      	nop			@ (mov r8, r8)
 8006734:	2000002c 	.word	0x2000002c

08006738 <free>:
 8006738:	b510      	push	{r4, lr}
 800673a:	4b03      	ldr	r3, [pc, #12]	@ (8006748 <free+0x10>)
 800673c:	0001      	movs	r1, r0
 800673e:	6818      	ldr	r0, [r3, #0]
 8006740:	f000 fb76 	bl	8006e30 <_free_r>
 8006744:	bd10      	pop	{r4, pc}
 8006746:	46c0      	nop			@ (mov r8, r8)
 8006748:	2000002c 	.word	0x2000002c

0800674c <sbrk_aligned>:
 800674c:	b570      	push	{r4, r5, r6, lr}
 800674e:	4e0f      	ldr	r6, [pc, #60]	@ (800678c <sbrk_aligned+0x40>)
 8006750:	000d      	movs	r5, r1
 8006752:	6831      	ldr	r1, [r6, #0]
 8006754:	0004      	movs	r4, r0
 8006756:	2900      	cmp	r1, #0
 8006758:	d102      	bne.n	8006760 <sbrk_aligned+0x14>
 800675a:	f000 fb15 	bl	8006d88 <_sbrk_r>
 800675e:	6030      	str	r0, [r6, #0]
 8006760:	0029      	movs	r1, r5
 8006762:	0020      	movs	r0, r4
 8006764:	f000 fb10 	bl	8006d88 <_sbrk_r>
 8006768:	1c43      	adds	r3, r0, #1
 800676a:	d103      	bne.n	8006774 <sbrk_aligned+0x28>
 800676c:	2501      	movs	r5, #1
 800676e:	426d      	negs	r5, r5
 8006770:	0028      	movs	r0, r5
 8006772:	bd70      	pop	{r4, r5, r6, pc}
 8006774:	2303      	movs	r3, #3
 8006776:	1cc5      	adds	r5, r0, #3
 8006778:	439d      	bics	r5, r3
 800677a:	42a8      	cmp	r0, r5
 800677c:	d0f8      	beq.n	8006770 <sbrk_aligned+0x24>
 800677e:	1a29      	subs	r1, r5, r0
 8006780:	0020      	movs	r0, r4
 8006782:	f000 fb01 	bl	8006d88 <_sbrk_r>
 8006786:	3001      	adds	r0, #1
 8006788:	d1f2      	bne.n	8006770 <sbrk_aligned+0x24>
 800678a:	e7ef      	b.n	800676c <sbrk_aligned+0x20>
 800678c:	2000129c 	.word	0x2000129c

08006790 <_malloc_r>:
 8006790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006792:	2203      	movs	r2, #3
 8006794:	1ccb      	adds	r3, r1, #3
 8006796:	4393      	bics	r3, r2
 8006798:	3308      	adds	r3, #8
 800679a:	0005      	movs	r5, r0
 800679c:	001f      	movs	r7, r3
 800679e:	2b0c      	cmp	r3, #12
 80067a0:	d234      	bcs.n	800680c <_malloc_r+0x7c>
 80067a2:	270c      	movs	r7, #12
 80067a4:	42b9      	cmp	r1, r7
 80067a6:	d833      	bhi.n	8006810 <_malloc_r+0x80>
 80067a8:	0028      	movs	r0, r5
 80067aa:	f000 f871 	bl	8006890 <__malloc_lock>
 80067ae:	4e37      	ldr	r6, [pc, #220]	@ (800688c <_malloc_r+0xfc>)
 80067b0:	6833      	ldr	r3, [r6, #0]
 80067b2:	001c      	movs	r4, r3
 80067b4:	2c00      	cmp	r4, #0
 80067b6:	d12f      	bne.n	8006818 <_malloc_r+0x88>
 80067b8:	0039      	movs	r1, r7
 80067ba:	0028      	movs	r0, r5
 80067bc:	f7ff ffc6 	bl	800674c <sbrk_aligned>
 80067c0:	0004      	movs	r4, r0
 80067c2:	1c43      	adds	r3, r0, #1
 80067c4:	d15f      	bne.n	8006886 <_malloc_r+0xf6>
 80067c6:	6834      	ldr	r4, [r6, #0]
 80067c8:	9400      	str	r4, [sp, #0]
 80067ca:	9b00      	ldr	r3, [sp, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d14a      	bne.n	8006866 <_malloc_r+0xd6>
 80067d0:	2c00      	cmp	r4, #0
 80067d2:	d052      	beq.n	800687a <_malloc_r+0xea>
 80067d4:	6823      	ldr	r3, [r4, #0]
 80067d6:	0028      	movs	r0, r5
 80067d8:	18e3      	adds	r3, r4, r3
 80067da:	9900      	ldr	r1, [sp, #0]
 80067dc:	9301      	str	r3, [sp, #4]
 80067de:	f000 fad3 	bl	8006d88 <_sbrk_r>
 80067e2:	9b01      	ldr	r3, [sp, #4]
 80067e4:	4283      	cmp	r3, r0
 80067e6:	d148      	bne.n	800687a <_malloc_r+0xea>
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	0028      	movs	r0, r5
 80067ec:	1aff      	subs	r7, r7, r3
 80067ee:	0039      	movs	r1, r7
 80067f0:	f7ff ffac 	bl	800674c <sbrk_aligned>
 80067f4:	3001      	adds	r0, #1
 80067f6:	d040      	beq.n	800687a <_malloc_r+0xea>
 80067f8:	6823      	ldr	r3, [r4, #0]
 80067fa:	19db      	adds	r3, r3, r7
 80067fc:	6023      	str	r3, [r4, #0]
 80067fe:	6833      	ldr	r3, [r6, #0]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	2a00      	cmp	r2, #0
 8006804:	d133      	bne.n	800686e <_malloc_r+0xde>
 8006806:	9b00      	ldr	r3, [sp, #0]
 8006808:	6033      	str	r3, [r6, #0]
 800680a:	e019      	b.n	8006840 <_malloc_r+0xb0>
 800680c:	2b00      	cmp	r3, #0
 800680e:	dac9      	bge.n	80067a4 <_malloc_r+0x14>
 8006810:	230c      	movs	r3, #12
 8006812:	602b      	str	r3, [r5, #0]
 8006814:	2000      	movs	r0, #0
 8006816:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006818:	6821      	ldr	r1, [r4, #0]
 800681a:	1bc9      	subs	r1, r1, r7
 800681c:	d420      	bmi.n	8006860 <_malloc_r+0xd0>
 800681e:	290b      	cmp	r1, #11
 8006820:	d90a      	bls.n	8006838 <_malloc_r+0xa8>
 8006822:	19e2      	adds	r2, r4, r7
 8006824:	6027      	str	r7, [r4, #0]
 8006826:	42a3      	cmp	r3, r4
 8006828:	d104      	bne.n	8006834 <_malloc_r+0xa4>
 800682a:	6032      	str	r2, [r6, #0]
 800682c:	6863      	ldr	r3, [r4, #4]
 800682e:	6011      	str	r1, [r2, #0]
 8006830:	6053      	str	r3, [r2, #4]
 8006832:	e005      	b.n	8006840 <_malloc_r+0xb0>
 8006834:	605a      	str	r2, [r3, #4]
 8006836:	e7f9      	b.n	800682c <_malloc_r+0x9c>
 8006838:	6862      	ldr	r2, [r4, #4]
 800683a:	42a3      	cmp	r3, r4
 800683c:	d10e      	bne.n	800685c <_malloc_r+0xcc>
 800683e:	6032      	str	r2, [r6, #0]
 8006840:	0028      	movs	r0, r5
 8006842:	f000 f82d 	bl	80068a0 <__malloc_unlock>
 8006846:	0020      	movs	r0, r4
 8006848:	2207      	movs	r2, #7
 800684a:	300b      	adds	r0, #11
 800684c:	1d23      	adds	r3, r4, #4
 800684e:	4390      	bics	r0, r2
 8006850:	1ac2      	subs	r2, r0, r3
 8006852:	4298      	cmp	r0, r3
 8006854:	d0df      	beq.n	8006816 <_malloc_r+0x86>
 8006856:	1a1b      	subs	r3, r3, r0
 8006858:	50a3      	str	r3, [r4, r2]
 800685a:	e7dc      	b.n	8006816 <_malloc_r+0x86>
 800685c:	605a      	str	r2, [r3, #4]
 800685e:	e7ef      	b.n	8006840 <_malloc_r+0xb0>
 8006860:	0023      	movs	r3, r4
 8006862:	6864      	ldr	r4, [r4, #4]
 8006864:	e7a6      	b.n	80067b4 <_malloc_r+0x24>
 8006866:	9c00      	ldr	r4, [sp, #0]
 8006868:	6863      	ldr	r3, [r4, #4]
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	e7ad      	b.n	80067ca <_malloc_r+0x3a>
 800686e:	001a      	movs	r2, r3
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	42a3      	cmp	r3, r4
 8006874:	d1fb      	bne.n	800686e <_malloc_r+0xde>
 8006876:	2300      	movs	r3, #0
 8006878:	e7da      	b.n	8006830 <_malloc_r+0xa0>
 800687a:	230c      	movs	r3, #12
 800687c:	0028      	movs	r0, r5
 800687e:	602b      	str	r3, [r5, #0]
 8006880:	f000 f80e 	bl	80068a0 <__malloc_unlock>
 8006884:	e7c6      	b.n	8006814 <_malloc_r+0x84>
 8006886:	6007      	str	r7, [r0, #0]
 8006888:	e7da      	b.n	8006840 <_malloc_r+0xb0>
 800688a:	46c0      	nop			@ (mov r8, r8)
 800688c:	200012a0 	.word	0x200012a0

08006890 <__malloc_lock>:
 8006890:	b510      	push	{r4, lr}
 8006892:	4802      	ldr	r0, [pc, #8]	@ (800689c <__malloc_lock+0xc>)
 8006894:	f000 fac9 	bl	8006e2a <__retarget_lock_acquire_recursive>
 8006898:	bd10      	pop	{r4, pc}
 800689a:	46c0      	nop			@ (mov r8, r8)
 800689c:	200013e4 	.word	0x200013e4

080068a0 <__malloc_unlock>:
 80068a0:	b510      	push	{r4, lr}
 80068a2:	4802      	ldr	r0, [pc, #8]	@ (80068ac <__malloc_unlock+0xc>)
 80068a4:	f000 fac2 	bl	8006e2c <__retarget_lock_release_recursive>
 80068a8:	bd10      	pop	{r4, pc}
 80068aa:	46c0      	nop			@ (mov r8, r8)
 80068ac:	200013e4 	.word	0x200013e4

080068b0 <std>:
 80068b0:	2300      	movs	r3, #0
 80068b2:	b510      	push	{r4, lr}
 80068b4:	0004      	movs	r4, r0
 80068b6:	6003      	str	r3, [r0, #0]
 80068b8:	6043      	str	r3, [r0, #4]
 80068ba:	6083      	str	r3, [r0, #8]
 80068bc:	8181      	strh	r1, [r0, #12]
 80068be:	6643      	str	r3, [r0, #100]	@ 0x64
 80068c0:	81c2      	strh	r2, [r0, #14]
 80068c2:	6103      	str	r3, [r0, #16]
 80068c4:	6143      	str	r3, [r0, #20]
 80068c6:	6183      	str	r3, [r0, #24]
 80068c8:	0019      	movs	r1, r3
 80068ca:	2208      	movs	r2, #8
 80068cc:	305c      	adds	r0, #92	@ 0x5c
 80068ce:	f000 fa19 	bl	8006d04 <memset>
 80068d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006900 <std+0x50>)
 80068d4:	6224      	str	r4, [r4, #32]
 80068d6:	6263      	str	r3, [r4, #36]	@ 0x24
 80068d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006904 <std+0x54>)
 80068da:	62a3      	str	r3, [r4, #40]	@ 0x28
 80068dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006908 <std+0x58>)
 80068de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80068e0:	4b0a      	ldr	r3, [pc, #40]	@ (800690c <std+0x5c>)
 80068e2:	6323      	str	r3, [r4, #48]	@ 0x30
 80068e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006910 <std+0x60>)
 80068e6:	429c      	cmp	r4, r3
 80068e8:	d005      	beq.n	80068f6 <std+0x46>
 80068ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006914 <std+0x64>)
 80068ec:	429c      	cmp	r4, r3
 80068ee:	d002      	beq.n	80068f6 <std+0x46>
 80068f0:	4b09      	ldr	r3, [pc, #36]	@ (8006918 <std+0x68>)
 80068f2:	429c      	cmp	r4, r3
 80068f4:	d103      	bne.n	80068fe <std+0x4e>
 80068f6:	0020      	movs	r0, r4
 80068f8:	3058      	adds	r0, #88	@ 0x58
 80068fa:	f000 fa95 	bl	8006e28 <__retarget_lock_init_recursive>
 80068fe:	bd10      	pop	{r4, pc}
 8006900:	08006b2d 	.word	0x08006b2d
 8006904:	08006b55 	.word	0x08006b55
 8006908:	08006b8d 	.word	0x08006b8d
 800690c:	08006bb9 	.word	0x08006bb9
 8006910:	200012a4 	.word	0x200012a4
 8006914:	2000130c 	.word	0x2000130c
 8006918:	20001374 	.word	0x20001374

0800691c <stdio_exit_handler>:
 800691c:	b510      	push	{r4, lr}
 800691e:	4a03      	ldr	r2, [pc, #12]	@ (800692c <stdio_exit_handler+0x10>)
 8006920:	4903      	ldr	r1, [pc, #12]	@ (8006930 <stdio_exit_handler+0x14>)
 8006922:	4804      	ldr	r0, [pc, #16]	@ (8006934 <stdio_exit_handler+0x18>)
 8006924:	f000 f86c 	bl	8006a00 <_fwalk_sglue>
 8006928:	bd10      	pop	{r4, pc}
 800692a:	46c0      	nop			@ (mov r8, r8)
 800692c:	20000020 	.word	0x20000020
 8006930:	08007551 	.word	0x08007551
 8006934:	20000030 	.word	0x20000030

08006938 <cleanup_stdio>:
 8006938:	6841      	ldr	r1, [r0, #4]
 800693a:	4b0b      	ldr	r3, [pc, #44]	@ (8006968 <cleanup_stdio+0x30>)
 800693c:	b510      	push	{r4, lr}
 800693e:	0004      	movs	r4, r0
 8006940:	4299      	cmp	r1, r3
 8006942:	d001      	beq.n	8006948 <cleanup_stdio+0x10>
 8006944:	f000 fe04 	bl	8007550 <_fflush_r>
 8006948:	68a1      	ldr	r1, [r4, #8]
 800694a:	4b08      	ldr	r3, [pc, #32]	@ (800696c <cleanup_stdio+0x34>)
 800694c:	4299      	cmp	r1, r3
 800694e:	d002      	beq.n	8006956 <cleanup_stdio+0x1e>
 8006950:	0020      	movs	r0, r4
 8006952:	f000 fdfd 	bl	8007550 <_fflush_r>
 8006956:	68e1      	ldr	r1, [r4, #12]
 8006958:	4b05      	ldr	r3, [pc, #20]	@ (8006970 <cleanup_stdio+0x38>)
 800695a:	4299      	cmp	r1, r3
 800695c:	d002      	beq.n	8006964 <cleanup_stdio+0x2c>
 800695e:	0020      	movs	r0, r4
 8006960:	f000 fdf6 	bl	8007550 <_fflush_r>
 8006964:	bd10      	pop	{r4, pc}
 8006966:	46c0      	nop			@ (mov r8, r8)
 8006968:	200012a4 	.word	0x200012a4
 800696c:	2000130c 	.word	0x2000130c
 8006970:	20001374 	.word	0x20001374

08006974 <global_stdio_init.part.0>:
 8006974:	b510      	push	{r4, lr}
 8006976:	4b09      	ldr	r3, [pc, #36]	@ (800699c <global_stdio_init.part.0+0x28>)
 8006978:	4a09      	ldr	r2, [pc, #36]	@ (80069a0 <global_stdio_init.part.0+0x2c>)
 800697a:	2104      	movs	r1, #4
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	4809      	ldr	r0, [pc, #36]	@ (80069a4 <global_stdio_init.part.0+0x30>)
 8006980:	2200      	movs	r2, #0
 8006982:	f7ff ff95 	bl	80068b0 <std>
 8006986:	2201      	movs	r2, #1
 8006988:	2109      	movs	r1, #9
 800698a:	4807      	ldr	r0, [pc, #28]	@ (80069a8 <global_stdio_init.part.0+0x34>)
 800698c:	f7ff ff90 	bl	80068b0 <std>
 8006990:	2202      	movs	r2, #2
 8006992:	2112      	movs	r1, #18
 8006994:	4805      	ldr	r0, [pc, #20]	@ (80069ac <global_stdio_init.part.0+0x38>)
 8006996:	f7ff ff8b 	bl	80068b0 <std>
 800699a:	bd10      	pop	{r4, pc}
 800699c:	200013dc 	.word	0x200013dc
 80069a0:	0800691d 	.word	0x0800691d
 80069a4:	200012a4 	.word	0x200012a4
 80069a8:	2000130c 	.word	0x2000130c
 80069ac:	20001374 	.word	0x20001374

080069b0 <__sfp_lock_acquire>:
 80069b0:	b510      	push	{r4, lr}
 80069b2:	4802      	ldr	r0, [pc, #8]	@ (80069bc <__sfp_lock_acquire+0xc>)
 80069b4:	f000 fa39 	bl	8006e2a <__retarget_lock_acquire_recursive>
 80069b8:	bd10      	pop	{r4, pc}
 80069ba:	46c0      	nop			@ (mov r8, r8)
 80069bc:	200013e5 	.word	0x200013e5

080069c0 <__sfp_lock_release>:
 80069c0:	b510      	push	{r4, lr}
 80069c2:	4802      	ldr	r0, [pc, #8]	@ (80069cc <__sfp_lock_release+0xc>)
 80069c4:	f000 fa32 	bl	8006e2c <__retarget_lock_release_recursive>
 80069c8:	bd10      	pop	{r4, pc}
 80069ca:	46c0      	nop			@ (mov r8, r8)
 80069cc:	200013e5 	.word	0x200013e5

080069d0 <__sinit>:
 80069d0:	b510      	push	{r4, lr}
 80069d2:	0004      	movs	r4, r0
 80069d4:	f7ff ffec 	bl	80069b0 <__sfp_lock_acquire>
 80069d8:	6a23      	ldr	r3, [r4, #32]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d002      	beq.n	80069e4 <__sinit+0x14>
 80069de:	f7ff ffef 	bl	80069c0 <__sfp_lock_release>
 80069e2:	bd10      	pop	{r4, pc}
 80069e4:	4b04      	ldr	r3, [pc, #16]	@ (80069f8 <__sinit+0x28>)
 80069e6:	6223      	str	r3, [r4, #32]
 80069e8:	4b04      	ldr	r3, [pc, #16]	@ (80069fc <__sinit+0x2c>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1f6      	bne.n	80069de <__sinit+0xe>
 80069f0:	f7ff ffc0 	bl	8006974 <global_stdio_init.part.0>
 80069f4:	e7f3      	b.n	80069de <__sinit+0xe>
 80069f6:	46c0      	nop			@ (mov r8, r8)
 80069f8:	08006939 	.word	0x08006939
 80069fc:	200013dc 	.word	0x200013dc

08006a00 <_fwalk_sglue>:
 8006a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a02:	0014      	movs	r4, r2
 8006a04:	2600      	movs	r6, #0
 8006a06:	9000      	str	r0, [sp, #0]
 8006a08:	9101      	str	r1, [sp, #4]
 8006a0a:	68a5      	ldr	r5, [r4, #8]
 8006a0c:	6867      	ldr	r7, [r4, #4]
 8006a0e:	3f01      	subs	r7, #1
 8006a10:	d504      	bpl.n	8006a1c <_fwalk_sglue+0x1c>
 8006a12:	6824      	ldr	r4, [r4, #0]
 8006a14:	2c00      	cmp	r4, #0
 8006a16:	d1f8      	bne.n	8006a0a <_fwalk_sglue+0xa>
 8006a18:	0030      	movs	r0, r6
 8006a1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a1c:	89ab      	ldrh	r3, [r5, #12]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d908      	bls.n	8006a34 <_fwalk_sglue+0x34>
 8006a22:	220e      	movs	r2, #14
 8006a24:	5eab      	ldrsh	r3, [r5, r2]
 8006a26:	3301      	adds	r3, #1
 8006a28:	d004      	beq.n	8006a34 <_fwalk_sglue+0x34>
 8006a2a:	0029      	movs	r1, r5
 8006a2c:	9800      	ldr	r0, [sp, #0]
 8006a2e:	9b01      	ldr	r3, [sp, #4]
 8006a30:	4798      	blx	r3
 8006a32:	4306      	orrs	r6, r0
 8006a34:	3568      	adds	r5, #104	@ 0x68
 8006a36:	e7ea      	b.n	8006a0e <_fwalk_sglue+0xe>

08006a38 <iprintf>:
 8006a38:	b40f      	push	{r0, r1, r2, r3}
 8006a3a:	b507      	push	{r0, r1, r2, lr}
 8006a3c:	4905      	ldr	r1, [pc, #20]	@ (8006a54 <iprintf+0x1c>)
 8006a3e:	ab04      	add	r3, sp, #16
 8006a40:	6808      	ldr	r0, [r1, #0]
 8006a42:	cb04      	ldmia	r3!, {r2}
 8006a44:	6881      	ldr	r1, [r0, #8]
 8006a46:	9301      	str	r3, [sp, #4]
 8006a48:	f000 fa64 	bl	8006f14 <_vfiprintf_r>
 8006a4c:	b003      	add	sp, #12
 8006a4e:	bc08      	pop	{r3}
 8006a50:	b004      	add	sp, #16
 8006a52:	4718      	bx	r3
 8006a54:	2000002c 	.word	0x2000002c

08006a58 <putchar>:
 8006a58:	b510      	push	{r4, lr}
 8006a5a:	4b03      	ldr	r3, [pc, #12]	@ (8006a68 <putchar+0x10>)
 8006a5c:	0001      	movs	r1, r0
 8006a5e:	6818      	ldr	r0, [r3, #0]
 8006a60:	6882      	ldr	r2, [r0, #8]
 8006a62:	f000 fe0c 	bl	800767e <_putc_r>
 8006a66:	bd10      	pop	{r4, pc}
 8006a68:	2000002c 	.word	0x2000002c

08006a6c <_puts_r>:
 8006a6c:	6a03      	ldr	r3, [r0, #32]
 8006a6e:	b570      	push	{r4, r5, r6, lr}
 8006a70:	0005      	movs	r5, r0
 8006a72:	000e      	movs	r6, r1
 8006a74:	6884      	ldr	r4, [r0, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <_puts_r+0x12>
 8006a7a:	f7ff ffa9 	bl	80069d0 <__sinit>
 8006a7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a80:	07db      	lsls	r3, r3, #31
 8006a82:	d405      	bmi.n	8006a90 <_puts_r+0x24>
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	059b      	lsls	r3, r3, #22
 8006a88:	d402      	bmi.n	8006a90 <_puts_r+0x24>
 8006a8a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a8c:	f000 f9cd 	bl	8006e2a <__retarget_lock_acquire_recursive>
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	071b      	lsls	r3, r3, #28
 8006a94:	d502      	bpl.n	8006a9c <_puts_r+0x30>
 8006a96:	6923      	ldr	r3, [r4, #16]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d11f      	bne.n	8006adc <_puts_r+0x70>
 8006a9c:	0021      	movs	r1, r4
 8006a9e:	0028      	movs	r0, r5
 8006aa0:	f000 f8d2 	bl	8006c48 <__swsetup_r>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	d019      	beq.n	8006adc <_puts_r+0x70>
 8006aa8:	2501      	movs	r5, #1
 8006aaa:	426d      	negs	r5, r5
 8006aac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006aae:	07db      	lsls	r3, r3, #31
 8006ab0:	d405      	bmi.n	8006abe <_puts_r+0x52>
 8006ab2:	89a3      	ldrh	r3, [r4, #12]
 8006ab4:	059b      	lsls	r3, r3, #22
 8006ab6:	d402      	bmi.n	8006abe <_puts_r+0x52>
 8006ab8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006aba:	f000 f9b7 	bl	8006e2c <__retarget_lock_release_recursive>
 8006abe:	0028      	movs	r0, r5
 8006ac0:	bd70      	pop	{r4, r5, r6, pc}
 8006ac2:	3601      	adds	r6, #1
 8006ac4:	60a3      	str	r3, [r4, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	da04      	bge.n	8006ad4 <_puts_r+0x68>
 8006aca:	69a2      	ldr	r2, [r4, #24]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	dc16      	bgt.n	8006afe <_puts_r+0x92>
 8006ad0:	290a      	cmp	r1, #10
 8006ad2:	d014      	beq.n	8006afe <_puts_r+0x92>
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	1c5a      	adds	r2, r3, #1
 8006ad8:	6022      	str	r2, [r4, #0]
 8006ada:	7019      	strb	r1, [r3, #0]
 8006adc:	68a3      	ldr	r3, [r4, #8]
 8006ade:	7831      	ldrb	r1, [r6, #0]
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	2900      	cmp	r1, #0
 8006ae4:	d1ed      	bne.n	8006ac2 <_puts_r+0x56>
 8006ae6:	60a3      	str	r3, [r4, #8]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	da0f      	bge.n	8006b0c <_puts_r+0xa0>
 8006aec:	0022      	movs	r2, r4
 8006aee:	0028      	movs	r0, r5
 8006af0:	310a      	adds	r1, #10
 8006af2:	f000 f867 	bl	8006bc4 <__swbuf_r>
 8006af6:	3001      	adds	r0, #1
 8006af8:	d0d6      	beq.n	8006aa8 <_puts_r+0x3c>
 8006afa:	250a      	movs	r5, #10
 8006afc:	e7d6      	b.n	8006aac <_puts_r+0x40>
 8006afe:	0022      	movs	r2, r4
 8006b00:	0028      	movs	r0, r5
 8006b02:	f000 f85f 	bl	8006bc4 <__swbuf_r>
 8006b06:	3001      	adds	r0, #1
 8006b08:	d1e8      	bne.n	8006adc <_puts_r+0x70>
 8006b0a:	e7cd      	b.n	8006aa8 <_puts_r+0x3c>
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	1c5a      	adds	r2, r3, #1
 8006b10:	6022      	str	r2, [r4, #0]
 8006b12:	220a      	movs	r2, #10
 8006b14:	701a      	strb	r2, [r3, #0]
 8006b16:	e7f0      	b.n	8006afa <_puts_r+0x8e>

08006b18 <puts>:
 8006b18:	b510      	push	{r4, lr}
 8006b1a:	4b03      	ldr	r3, [pc, #12]	@ (8006b28 <puts+0x10>)
 8006b1c:	0001      	movs	r1, r0
 8006b1e:	6818      	ldr	r0, [r3, #0]
 8006b20:	f7ff ffa4 	bl	8006a6c <_puts_r>
 8006b24:	bd10      	pop	{r4, pc}
 8006b26:	46c0      	nop			@ (mov r8, r8)
 8006b28:	2000002c 	.word	0x2000002c

08006b2c <__sread>:
 8006b2c:	b570      	push	{r4, r5, r6, lr}
 8006b2e:	000c      	movs	r4, r1
 8006b30:	250e      	movs	r5, #14
 8006b32:	5f49      	ldrsh	r1, [r1, r5]
 8006b34:	f000 f914 	bl	8006d60 <_read_r>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	db03      	blt.n	8006b44 <__sread+0x18>
 8006b3c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006b3e:	181b      	adds	r3, r3, r0
 8006b40:	6563      	str	r3, [r4, #84]	@ 0x54
 8006b42:	bd70      	pop	{r4, r5, r6, pc}
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	4a02      	ldr	r2, [pc, #8]	@ (8006b50 <__sread+0x24>)
 8006b48:	4013      	ands	r3, r2
 8006b4a:	81a3      	strh	r3, [r4, #12]
 8006b4c:	e7f9      	b.n	8006b42 <__sread+0x16>
 8006b4e:	46c0      	nop			@ (mov r8, r8)
 8006b50:	ffffefff 	.word	0xffffefff

08006b54 <__swrite>:
 8006b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b56:	001f      	movs	r7, r3
 8006b58:	898b      	ldrh	r3, [r1, #12]
 8006b5a:	0005      	movs	r5, r0
 8006b5c:	000c      	movs	r4, r1
 8006b5e:	0016      	movs	r6, r2
 8006b60:	05db      	lsls	r3, r3, #23
 8006b62:	d505      	bpl.n	8006b70 <__swrite+0x1c>
 8006b64:	230e      	movs	r3, #14
 8006b66:	5ec9      	ldrsh	r1, [r1, r3]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	f000 f8e4 	bl	8006d38 <_lseek_r>
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	4a05      	ldr	r2, [pc, #20]	@ (8006b88 <__swrite+0x34>)
 8006b74:	0028      	movs	r0, r5
 8006b76:	4013      	ands	r3, r2
 8006b78:	81a3      	strh	r3, [r4, #12]
 8006b7a:	0032      	movs	r2, r6
 8006b7c:	230e      	movs	r3, #14
 8006b7e:	5ee1      	ldrsh	r1, [r4, r3]
 8006b80:	003b      	movs	r3, r7
 8006b82:	f000 f913 	bl	8006dac <_write_r>
 8006b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b88:	ffffefff 	.word	0xffffefff

08006b8c <__sseek>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	000c      	movs	r4, r1
 8006b90:	250e      	movs	r5, #14
 8006b92:	5f49      	ldrsh	r1, [r1, r5]
 8006b94:	f000 f8d0 	bl	8006d38 <_lseek_r>
 8006b98:	89a3      	ldrh	r3, [r4, #12]
 8006b9a:	1c42      	adds	r2, r0, #1
 8006b9c:	d103      	bne.n	8006ba6 <__sseek+0x1a>
 8006b9e:	4a05      	ldr	r2, [pc, #20]	@ (8006bb4 <__sseek+0x28>)
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	81a3      	strh	r3, [r4, #12]
 8006ba4:	bd70      	pop	{r4, r5, r6, pc}
 8006ba6:	2280      	movs	r2, #128	@ 0x80
 8006ba8:	0152      	lsls	r2, r2, #5
 8006baa:	4313      	orrs	r3, r2
 8006bac:	81a3      	strh	r3, [r4, #12]
 8006bae:	6560      	str	r0, [r4, #84]	@ 0x54
 8006bb0:	e7f8      	b.n	8006ba4 <__sseek+0x18>
 8006bb2:	46c0      	nop			@ (mov r8, r8)
 8006bb4:	ffffefff 	.word	0xffffefff

08006bb8 <__sclose>:
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	230e      	movs	r3, #14
 8006bbc:	5ec9      	ldrsh	r1, [r1, r3]
 8006bbe:	f000 f8a9 	bl	8006d14 <_close_r>
 8006bc2:	bd10      	pop	{r4, pc}

08006bc4 <__swbuf_r>:
 8006bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc6:	0006      	movs	r6, r0
 8006bc8:	000d      	movs	r5, r1
 8006bca:	0014      	movs	r4, r2
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d004      	beq.n	8006bda <__swbuf_r+0x16>
 8006bd0:	6a03      	ldr	r3, [r0, #32]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <__swbuf_r+0x16>
 8006bd6:	f7ff fefb 	bl	80069d0 <__sinit>
 8006bda:	69a3      	ldr	r3, [r4, #24]
 8006bdc:	60a3      	str	r3, [r4, #8]
 8006bde:	89a3      	ldrh	r3, [r4, #12]
 8006be0:	071b      	lsls	r3, r3, #28
 8006be2:	d502      	bpl.n	8006bea <__swbuf_r+0x26>
 8006be4:	6923      	ldr	r3, [r4, #16]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d109      	bne.n	8006bfe <__swbuf_r+0x3a>
 8006bea:	0021      	movs	r1, r4
 8006bec:	0030      	movs	r0, r6
 8006bee:	f000 f82b 	bl	8006c48 <__swsetup_r>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	d003      	beq.n	8006bfe <__swbuf_r+0x3a>
 8006bf6:	2501      	movs	r5, #1
 8006bf8:	426d      	negs	r5, r5
 8006bfa:	0028      	movs	r0, r5
 8006bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bfe:	6923      	ldr	r3, [r4, #16]
 8006c00:	6820      	ldr	r0, [r4, #0]
 8006c02:	b2ef      	uxtb	r7, r5
 8006c04:	1ac0      	subs	r0, r0, r3
 8006c06:	6963      	ldr	r3, [r4, #20]
 8006c08:	b2ed      	uxtb	r5, r5
 8006c0a:	4283      	cmp	r3, r0
 8006c0c:	dc05      	bgt.n	8006c1a <__swbuf_r+0x56>
 8006c0e:	0021      	movs	r1, r4
 8006c10:	0030      	movs	r0, r6
 8006c12:	f000 fc9d 	bl	8007550 <_fflush_r>
 8006c16:	2800      	cmp	r0, #0
 8006c18:	d1ed      	bne.n	8006bf6 <__swbuf_r+0x32>
 8006c1a:	68a3      	ldr	r3, [r4, #8]
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	60a3      	str	r3, [r4, #8]
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	6022      	str	r2, [r4, #0]
 8006c28:	701f      	strb	r7, [r3, #0]
 8006c2a:	6963      	ldr	r3, [r4, #20]
 8006c2c:	4283      	cmp	r3, r0
 8006c2e:	d004      	beq.n	8006c3a <__swbuf_r+0x76>
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	07db      	lsls	r3, r3, #31
 8006c34:	d5e1      	bpl.n	8006bfa <__swbuf_r+0x36>
 8006c36:	2d0a      	cmp	r5, #10
 8006c38:	d1df      	bne.n	8006bfa <__swbuf_r+0x36>
 8006c3a:	0021      	movs	r1, r4
 8006c3c:	0030      	movs	r0, r6
 8006c3e:	f000 fc87 	bl	8007550 <_fflush_r>
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d0d9      	beq.n	8006bfa <__swbuf_r+0x36>
 8006c46:	e7d6      	b.n	8006bf6 <__swbuf_r+0x32>

08006c48 <__swsetup_r>:
 8006c48:	4b2d      	ldr	r3, [pc, #180]	@ (8006d00 <__swsetup_r+0xb8>)
 8006c4a:	b570      	push	{r4, r5, r6, lr}
 8006c4c:	0005      	movs	r5, r0
 8006c4e:	6818      	ldr	r0, [r3, #0]
 8006c50:	000c      	movs	r4, r1
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d004      	beq.n	8006c60 <__swsetup_r+0x18>
 8006c56:	6a03      	ldr	r3, [r0, #32]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <__swsetup_r+0x18>
 8006c5c:	f7ff feb8 	bl	80069d0 <__sinit>
 8006c60:	220c      	movs	r2, #12
 8006c62:	5ea3      	ldrsh	r3, [r4, r2]
 8006c64:	071a      	lsls	r2, r3, #28
 8006c66:	d423      	bmi.n	8006cb0 <__swsetup_r+0x68>
 8006c68:	06da      	lsls	r2, r3, #27
 8006c6a:	d407      	bmi.n	8006c7c <__swsetup_r+0x34>
 8006c6c:	2209      	movs	r2, #9
 8006c6e:	602a      	str	r2, [r5, #0]
 8006c70:	2240      	movs	r2, #64	@ 0x40
 8006c72:	2001      	movs	r0, #1
 8006c74:	4313      	orrs	r3, r2
 8006c76:	81a3      	strh	r3, [r4, #12]
 8006c78:	4240      	negs	r0, r0
 8006c7a:	e03a      	b.n	8006cf2 <__swsetup_r+0xaa>
 8006c7c:	075b      	lsls	r3, r3, #29
 8006c7e:	d513      	bpl.n	8006ca8 <__swsetup_r+0x60>
 8006c80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c82:	2900      	cmp	r1, #0
 8006c84:	d008      	beq.n	8006c98 <__swsetup_r+0x50>
 8006c86:	0023      	movs	r3, r4
 8006c88:	3344      	adds	r3, #68	@ 0x44
 8006c8a:	4299      	cmp	r1, r3
 8006c8c:	d002      	beq.n	8006c94 <__swsetup_r+0x4c>
 8006c8e:	0028      	movs	r0, r5
 8006c90:	f000 f8ce 	bl	8006e30 <_free_r>
 8006c94:	2300      	movs	r3, #0
 8006c96:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c98:	2224      	movs	r2, #36	@ 0x24
 8006c9a:	89a3      	ldrh	r3, [r4, #12]
 8006c9c:	4393      	bics	r3, r2
 8006c9e:	81a3      	strh	r3, [r4, #12]
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	6063      	str	r3, [r4, #4]
 8006ca4:	6923      	ldr	r3, [r4, #16]
 8006ca6:	6023      	str	r3, [r4, #0]
 8006ca8:	2308      	movs	r3, #8
 8006caa:	89a2      	ldrh	r2, [r4, #12]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	81a3      	strh	r3, [r4, #12]
 8006cb0:	6923      	ldr	r3, [r4, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10b      	bne.n	8006cce <__swsetup_r+0x86>
 8006cb6:	21a0      	movs	r1, #160	@ 0xa0
 8006cb8:	2280      	movs	r2, #128	@ 0x80
 8006cba:	89a3      	ldrh	r3, [r4, #12]
 8006cbc:	0089      	lsls	r1, r1, #2
 8006cbe:	0092      	lsls	r2, r2, #2
 8006cc0:	400b      	ands	r3, r1
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d003      	beq.n	8006cce <__swsetup_r+0x86>
 8006cc6:	0021      	movs	r1, r4
 8006cc8:	0028      	movs	r0, r5
 8006cca:	f000 fc97 	bl	80075fc <__smakebuf_r>
 8006cce:	220c      	movs	r2, #12
 8006cd0:	5ea3      	ldrsh	r3, [r4, r2]
 8006cd2:	2101      	movs	r1, #1
 8006cd4:	001a      	movs	r2, r3
 8006cd6:	400a      	ands	r2, r1
 8006cd8:	420b      	tst	r3, r1
 8006cda:	d00b      	beq.n	8006cf4 <__swsetup_r+0xac>
 8006cdc:	2200      	movs	r2, #0
 8006cde:	60a2      	str	r2, [r4, #8]
 8006ce0:	6962      	ldr	r2, [r4, #20]
 8006ce2:	4252      	negs	r2, r2
 8006ce4:	61a2      	str	r2, [r4, #24]
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	6922      	ldr	r2, [r4, #16]
 8006cea:	4282      	cmp	r2, r0
 8006cec:	d101      	bne.n	8006cf2 <__swsetup_r+0xaa>
 8006cee:	061a      	lsls	r2, r3, #24
 8006cf0:	d4be      	bmi.n	8006c70 <__swsetup_r+0x28>
 8006cf2:	bd70      	pop	{r4, r5, r6, pc}
 8006cf4:	0799      	lsls	r1, r3, #30
 8006cf6:	d400      	bmi.n	8006cfa <__swsetup_r+0xb2>
 8006cf8:	6962      	ldr	r2, [r4, #20]
 8006cfa:	60a2      	str	r2, [r4, #8]
 8006cfc:	e7f3      	b.n	8006ce6 <__swsetup_r+0x9e>
 8006cfe:	46c0      	nop			@ (mov r8, r8)
 8006d00:	2000002c 	.word	0x2000002c

08006d04 <memset>:
 8006d04:	0003      	movs	r3, r0
 8006d06:	1882      	adds	r2, r0, r2
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d100      	bne.n	8006d0e <memset+0xa>
 8006d0c:	4770      	bx	lr
 8006d0e:	7019      	strb	r1, [r3, #0]
 8006d10:	3301      	adds	r3, #1
 8006d12:	e7f9      	b.n	8006d08 <memset+0x4>

08006d14 <_close_r>:
 8006d14:	2300      	movs	r3, #0
 8006d16:	b570      	push	{r4, r5, r6, lr}
 8006d18:	4d06      	ldr	r5, [pc, #24]	@ (8006d34 <_close_r+0x20>)
 8006d1a:	0004      	movs	r4, r0
 8006d1c:	0008      	movs	r0, r1
 8006d1e:	602b      	str	r3, [r5, #0]
 8006d20:	f7fc fcbc 	bl	800369c <_close>
 8006d24:	1c43      	adds	r3, r0, #1
 8006d26:	d103      	bne.n	8006d30 <_close_r+0x1c>
 8006d28:	682b      	ldr	r3, [r5, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d000      	beq.n	8006d30 <_close_r+0x1c>
 8006d2e:	6023      	str	r3, [r4, #0]
 8006d30:	bd70      	pop	{r4, r5, r6, pc}
 8006d32:	46c0      	nop			@ (mov r8, r8)
 8006d34:	200013e0 	.word	0x200013e0

08006d38 <_lseek_r>:
 8006d38:	b570      	push	{r4, r5, r6, lr}
 8006d3a:	0004      	movs	r4, r0
 8006d3c:	0008      	movs	r0, r1
 8006d3e:	0011      	movs	r1, r2
 8006d40:	001a      	movs	r2, r3
 8006d42:	2300      	movs	r3, #0
 8006d44:	4d05      	ldr	r5, [pc, #20]	@ (8006d5c <_lseek_r+0x24>)
 8006d46:	602b      	str	r3, [r5, #0]
 8006d48:	f7fc fcc9 	bl	80036de <_lseek>
 8006d4c:	1c43      	adds	r3, r0, #1
 8006d4e:	d103      	bne.n	8006d58 <_lseek_r+0x20>
 8006d50:	682b      	ldr	r3, [r5, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d000      	beq.n	8006d58 <_lseek_r+0x20>
 8006d56:	6023      	str	r3, [r4, #0]
 8006d58:	bd70      	pop	{r4, r5, r6, pc}
 8006d5a:	46c0      	nop			@ (mov r8, r8)
 8006d5c:	200013e0 	.word	0x200013e0

08006d60 <_read_r>:
 8006d60:	b570      	push	{r4, r5, r6, lr}
 8006d62:	0004      	movs	r4, r0
 8006d64:	0008      	movs	r0, r1
 8006d66:	0011      	movs	r1, r2
 8006d68:	001a      	movs	r2, r3
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	4d05      	ldr	r5, [pc, #20]	@ (8006d84 <_read_r+0x24>)
 8006d6e:	602b      	str	r3, [r5, #0]
 8006d70:	f7fc fc5b 	bl	800362a <_read>
 8006d74:	1c43      	adds	r3, r0, #1
 8006d76:	d103      	bne.n	8006d80 <_read_r+0x20>
 8006d78:	682b      	ldr	r3, [r5, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d000      	beq.n	8006d80 <_read_r+0x20>
 8006d7e:	6023      	str	r3, [r4, #0]
 8006d80:	bd70      	pop	{r4, r5, r6, pc}
 8006d82:	46c0      	nop			@ (mov r8, r8)
 8006d84:	200013e0 	.word	0x200013e0

08006d88 <_sbrk_r>:
 8006d88:	2300      	movs	r3, #0
 8006d8a:	b570      	push	{r4, r5, r6, lr}
 8006d8c:	4d06      	ldr	r5, [pc, #24]	@ (8006da8 <_sbrk_r+0x20>)
 8006d8e:	0004      	movs	r4, r0
 8006d90:	0008      	movs	r0, r1
 8006d92:	602b      	str	r3, [r5, #0]
 8006d94:	f7fc fcae 	bl	80036f4 <_sbrk>
 8006d98:	1c43      	adds	r3, r0, #1
 8006d9a:	d103      	bne.n	8006da4 <_sbrk_r+0x1c>
 8006d9c:	682b      	ldr	r3, [r5, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d000      	beq.n	8006da4 <_sbrk_r+0x1c>
 8006da2:	6023      	str	r3, [r4, #0]
 8006da4:	bd70      	pop	{r4, r5, r6, pc}
 8006da6:	46c0      	nop			@ (mov r8, r8)
 8006da8:	200013e0 	.word	0x200013e0

08006dac <_write_r>:
 8006dac:	b570      	push	{r4, r5, r6, lr}
 8006dae:	0004      	movs	r4, r0
 8006db0:	0008      	movs	r0, r1
 8006db2:	0011      	movs	r1, r2
 8006db4:	001a      	movs	r2, r3
 8006db6:	2300      	movs	r3, #0
 8006db8:	4d05      	ldr	r5, [pc, #20]	@ (8006dd0 <_write_r+0x24>)
 8006dba:	602b      	str	r3, [r5, #0]
 8006dbc:	f7fc fc52 	bl	8003664 <_write>
 8006dc0:	1c43      	adds	r3, r0, #1
 8006dc2:	d103      	bne.n	8006dcc <_write_r+0x20>
 8006dc4:	682b      	ldr	r3, [r5, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d000      	beq.n	8006dcc <_write_r+0x20>
 8006dca:	6023      	str	r3, [r4, #0]
 8006dcc:	bd70      	pop	{r4, r5, r6, pc}
 8006dce:	46c0      	nop			@ (mov r8, r8)
 8006dd0:	200013e0 	.word	0x200013e0

08006dd4 <__errno>:
 8006dd4:	4b01      	ldr	r3, [pc, #4]	@ (8006ddc <__errno+0x8>)
 8006dd6:	6818      	ldr	r0, [r3, #0]
 8006dd8:	4770      	bx	lr
 8006dda:	46c0      	nop			@ (mov r8, r8)
 8006ddc:	2000002c 	.word	0x2000002c

08006de0 <__libc_init_array>:
 8006de0:	b570      	push	{r4, r5, r6, lr}
 8006de2:	2600      	movs	r6, #0
 8006de4:	4c0c      	ldr	r4, [pc, #48]	@ (8006e18 <__libc_init_array+0x38>)
 8006de6:	4d0d      	ldr	r5, [pc, #52]	@ (8006e1c <__libc_init_array+0x3c>)
 8006de8:	1b64      	subs	r4, r4, r5
 8006dea:	10a4      	asrs	r4, r4, #2
 8006dec:	42a6      	cmp	r6, r4
 8006dee:	d109      	bne.n	8006e04 <__libc_init_array+0x24>
 8006df0:	2600      	movs	r6, #0
 8006df2:	f000 fcab 	bl	800774c <_init>
 8006df6:	4c0a      	ldr	r4, [pc, #40]	@ (8006e20 <__libc_init_array+0x40>)
 8006df8:	4d0a      	ldr	r5, [pc, #40]	@ (8006e24 <__libc_init_array+0x44>)
 8006dfa:	1b64      	subs	r4, r4, r5
 8006dfc:	10a4      	asrs	r4, r4, #2
 8006dfe:	42a6      	cmp	r6, r4
 8006e00:	d105      	bne.n	8006e0e <__libc_init_array+0x2e>
 8006e02:	bd70      	pop	{r4, r5, r6, pc}
 8006e04:	00b3      	lsls	r3, r6, #2
 8006e06:	58eb      	ldr	r3, [r5, r3]
 8006e08:	4798      	blx	r3
 8006e0a:	3601      	adds	r6, #1
 8006e0c:	e7ee      	b.n	8006dec <__libc_init_array+0xc>
 8006e0e:	00b3      	lsls	r3, r6, #2
 8006e10:	58eb      	ldr	r3, [r5, r3]
 8006e12:	4798      	blx	r3
 8006e14:	3601      	adds	r6, #1
 8006e16:	e7f2      	b.n	8006dfe <__libc_init_array+0x1e>
 8006e18:	08007b08 	.word	0x08007b08
 8006e1c:	08007b08 	.word	0x08007b08
 8006e20:	08007b0c 	.word	0x08007b0c
 8006e24:	08007b08 	.word	0x08007b08

08006e28 <__retarget_lock_init_recursive>:
 8006e28:	4770      	bx	lr

08006e2a <__retarget_lock_acquire_recursive>:
 8006e2a:	4770      	bx	lr

08006e2c <__retarget_lock_release_recursive>:
 8006e2c:	4770      	bx	lr
	...

08006e30 <_free_r>:
 8006e30:	b570      	push	{r4, r5, r6, lr}
 8006e32:	0005      	movs	r5, r0
 8006e34:	1e0c      	subs	r4, r1, #0
 8006e36:	d010      	beq.n	8006e5a <_free_r+0x2a>
 8006e38:	3c04      	subs	r4, #4
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	da00      	bge.n	8006e42 <_free_r+0x12>
 8006e40:	18e4      	adds	r4, r4, r3
 8006e42:	0028      	movs	r0, r5
 8006e44:	f7ff fd24 	bl	8006890 <__malloc_lock>
 8006e48:	4a1d      	ldr	r2, [pc, #116]	@ (8006ec0 <_free_r+0x90>)
 8006e4a:	6813      	ldr	r3, [r2, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d105      	bne.n	8006e5c <_free_r+0x2c>
 8006e50:	6063      	str	r3, [r4, #4]
 8006e52:	6014      	str	r4, [r2, #0]
 8006e54:	0028      	movs	r0, r5
 8006e56:	f7ff fd23 	bl	80068a0 <__malloc_unlock>
 8006e5a:	bd70      	pop	{r4, r5, r6, pc}
 8006e5c:	42a3      	cmp	r3, r4
 8006e5e:	d908      	bls.n	8006e72 <_free_r+0x42>
 8006e60:	6820      	ldr	r0, [r4, #0]
 8006e62:	1821      	adds	r1, r4, r0
 8006e64:	428b      	cmp	r3, r1
 8006e66:	d1f3      	bne.n	8006e50 <_free_r+0x20>
 8006e68:	6819      	ldr	r1, [r3, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	1809      	adds	r1, r1, r0
 8006e6e:	6021      	str	r1, [r4, #0]
 8006e70:	e7ee      	b.n	8006e50 <_free_r+0x20>
 8006e72:	001a      	movs	r2, r3
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <_free_r+0x4e>
 8006e7a:	42a3      	cmp	r3, r4
 8006e7c:	d9f9      	bls.n	8006e72 <_free_r+0x42>
 8006e7e:	6811      	ldr	r1, [r2, #0]
 8006e80:	1850      	adds	r0, r2, r1
 8006e82:	42a0      	cmp	r0, r4
 8006e84:	d10b      	bne.n	8006e9e <_free_r+0x6e>
 8006e86:	6820      	ldr	r0, [r4, #0]
 8006e88:	1809      	adds	r1, r1, r0
 8006e8a:	1850      	adds	r0, r2, r1
 8006e8c:	6011      	str	r1, [r2, #0]
 8006e8e:	4283      	cmp	r3, r0
 8006e90:	d1e0      	bne.n	8006e54 <_free_r+0x24>
 8006e92:	6818      	ldr	r0, [r3, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	1841      	adds	r1, r0, r1
 8006e98:	6011      	str	r1, [r2, #0]
 8006e9a:	6053      	str	r3, [r2, #4]
 8006e9c:	e7da      	b.n	8006e54 <_free_r+0x24>
 8006e9e:	42a0      	cmp	r0, r4
 8006ea0:	d902      	bls.n	8006ea8 <_free_r+0x78>
 8006ea2:	230c      	movs	r3, #12
 8006ea4:	602b      	str	r3, [r5, #0]
 8006ea6:	e7d5      	b.n	8006e54 <_free_r+0x24>
 8006ea8:	6820      	ldr	r0, [r4, #0]
 8006eaa:	1821      	adds	r1, r4, r0
 8006eac:	428b      	cmp	r3, r1
 8006eae:	d103      	bne.n	8006eb8 <_free_r+0x88>
 8006eb0:	6819      	ldr	r1, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	1809      	adds	r1, r1, r0
 8006eb6:	6021      	str	r1, [r4, #0]
 8006eb8:	6063      	str	r3, [r4, #4]
 8006eba:	6054      	str	r4, [r2, #4]
 8006ebc:	e7ca      	b.n	8006e54 <_free_r+0x24>
 8006ebe:	46c0      	nop			@ (mov r8, r8)
 8006ec0:	200012a0 	.word	0x200012a0

08006ec4 <__sfputc_r>:
 8006ec4:	6893      	ldr	r3, [r2, #8]
 8006ec6:	b510      	push	{r4, lr}
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	6093      	str	r3, [r2, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	da04      	bge.n	8006eda <__sfputc_r+0x16>
 8006ed0:	6994      	ldr	r4, [r2, #24]
 8006ed2:	42a3      	cmp	r3, r4
 8006ed4:	db07      	blt.n	8006ee6 <__sfputc_r+0x22>
 8006ed6:	290a      	cmp	r1, #10
 8006ed8:	d005      	beq.n	8006ee6 <__sfputc_r+0x22>
 8006eda:	6813      	ldr	r3, [r2, #0]
 8006edc:	1c58      	adds	r0, r3, #1
 8006ede:	6010      	str	r0, [r2, #0]
 8006ee0:	7019      	strb	r1, [r3, #0]
 8006ee2:	0008      	movs	r0, r1
 8006ee4:	bd10      	pop	{r4, pc}
 8006ee6:	f7ff fe6d 	bl	8006bc4 <__swbuf_r>
 8006eea:	0001      	movs	r1, r0
 8006eec:	e7f9      	b.n	8006ee2 <__sfputc_r+0x1e>

08006eee <__sfputs_r>:
 8006eee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef0:	0006      	movs	r6, r0
 8006ef2:	000f      	movs	r7, r1
 8006ef4:	0014      	movs	r4, r2
 8006ef6:	18d5      	adds	r5, r2, r3
 8006ef8:	42ac      	cmp	r4, r5
 8006efa:	d101      	bne.n	8006f00 <__sfputs_r+0x12>
 8006efc:	2000      	movs	r0, #0
 8006efe:	e007      	b.n	8006f10 <__sfputs_r+0x22>
 8006f00:	7821      	ldrb	r1, [r4, #0]
 8006f02:	003a      	movs	r2, r7
 8006f04:	0030      	movs	r0, r6
 8006f06:	f7ff ffdd 	bl	8006ec4 <__sfputc_r>
 8006f0a:	3401      	adds	r4, #1
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d1f3      	bne.n	8006ef8 <__sfputs_r+0xa>
 8006f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f14 <_vfiprintf_r>:
 8006f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f16:	b0a1      	sub	sp, #132	@ 0x84
 8006f18:	000f      	movs	r7, r1
 8006f1a:	0015      	movs	r5, r2
 8006f1c:	001e      	movs	r6, r3
 8006f1e:	9003      	str	r0, [sp, #12]
 8006f20:	2800      	cmp	r0, #0
 8006f22:	d004      	beq.n	8006f2e <_vfiprintf_r+0x1a>
 8006f24:	6a03      	ldr	r3, [r0, #32]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <_vfiprintf_r+0x1a>
 8006f2a:	f7ff fd51 	bl	80069d0 <__sinit>
 8006f2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f30:	07db      	lsls	r3, r3, #31
 8006f32:	d405      	bmi.n	8006f40 <_vfiprintf_r+0x2c>
 8006f34:	89bb      	ldrh	r3, [r7, #12]
 8006f36:	059b      	lsls	r3, r3, #22
 8006f38:	d402      	bmi.n	8006f40 <_vfiprintf_r+0x2c>
 8006f3a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006f3c:	f7ff ff75 	bl	8006e2a <__retarget_lock_acquire_recursive>
 8006f40:	89bb      	ldrh	r3, [r7, #12]
 8006f42:	071b      	lsls	r3, r3, #28
 8006f44:	d502      	bpl.n	8006f4c <_vfiprintf_r+0x38>
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d113      	bne.n	8006f74 <_vfiprintf_r+0x60>
 8006f4c:	0039      	movs	r1, r7
 8006f4e:	9803      	ldr	r0, [sp, #12]
 8006f50:	f7ff fe7a 	bl	8006c48 <__swsetup_r>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d00d      	beq.n	8006f74 <_vfiprintf_r+0x60>
 8006f58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f5a:	07db      	lsls	r3, r3, #31
 8006f5c:	d503      	bpl.n	8006f66 <_vfiprintf_r+0x52>
 8006f5e:	2001      	movs	r0, #1
 8006f60:	4240      	negs	r0, r0
 8006f62:	b021      	add	sp, #132	@ 0x84
 8006f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f66:	89bb      	ldrh	r3, [r7, #12]
 8006f68:	059b      	lsls	r3, r3, #22
 8006f6a:	d4f8      	bmi.n	8006f5e <_vfiprintf_r+0x4a>
 8006f6c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006f6e:	f7ff ff5d 	bl	8006e2c <__retarget_lock_release_recursive>
 8006f72:	e7f4      	b.n	8006f5e <_vfiprintf_r+0x4a>
 8006f74:	2300      	movs	r3, #0
 8006f76:	ac08      	add	r4, sp, #32
 8006f78:	6163      	str	r3, [r4, #20]
 8006f7a:	3320      	adds	r3, #32
 8006f7c:	7663      	strb	r3, [r4, #25]
 8006f7e:	3310      	adds	r3, #16
 8006f80:	76a3      	strb	r3, [r4, #26]
 8006f82:	9607      	str	r6, [sp, #28]
 8006f84:	002e      	movs	r6, r5
 8006f86:	7833      	ldrb	r3, [r6, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <_vfiprintf_r+0x7c>
 8006f8c:	2b25      	cmp	r3, #37	@ 0x25
 8006f8e:	d148      	bne.n	8007022 <_vfiprintf_r+0x10e>
 8006f90:	1b73      	subs	r3, r6, r5
 8006f92:	9305      	str	r3, [sp, #20]
 8006f94:	42ae      	cmp	r6, r5
 8006f96:	d00b      	beq.n	8006fb0 <_vfiprintf_r+0x9c>
 8006f98:	002a      	movs	r2, r5
 8006f9a:	0039      	movs	r1, r7
 8006f9c:	9803      	ldr	r0, [sp, #12]
 8006f9e:	f7ff ffa6 	bl	8006eee <__sfputs_r>
 8006fa2:	3001      	adds	r0, #1
 8006fa4:	d100      	bne.n	8006fa8 <_vfiprintf_r+0x94>
 8006fa6:	e0ae      	b.n	8007106 <_vfiprintf_r+0x1f2>
 8006fa8:	6963      	ldr	r3, [r4, #20]
 8006faa:	9a05      	ldr	r2, [sp, #20]
 8006fac:	189b      	adds	r3, r3, r2
 8006fae:	6163      	str	r3, [r4, #20]
 8006fb0:	7833      	ldrb	r3, [r6, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d100      	bne.n	8006fb8 <_vfiprintf_r+0xa4>
 8006fb6:	e0a6      	b.n	8007106 <_vfiprintf_r+0x1f2>
 8006fb8:	2201      	movs	r2, #1
 8006fba:	2300      	movs	r3, #0
 8006fbc:	4252      	negs	r2, r2
 8006fbe:	6062      	str	r2, [r4, #4]
 8006fc0:	a904      	add	r1, sp, #16
 8006fc2:	3254      	adds	r2, #84	@ 0x54
 8006fc4:	1852      	adds	r2, r2, r1
 8006fc6:	1c75      	adds	r5, r6, #1
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	60e3      	str	r3, [r4, #12]
 8006fcc:	60a3      	str	r3, [r4, #8]
 8006fce:	7013      	strb	r3, [r2, #0]
 8006fd0:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006fd2:	4b59      	ldr	r3, [pc, #356]	@ (8007138 <_vfiprintf_r+0x224>)
 8006fd4:	2205      	movs	r2, #5
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	7829      	ldrb	r1, [r5, #0]
 8006fda:	9305      	str	r3, [sp, #20]
 8006fdc:	f000 fbaa 	bl	8007734 <memchr>
 8006fe0:	1c6e      	adds	r6, r5, #1
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d11f      	bne.n	8007026 <_vfiprintf_r+0x112>
 8006fe6:	6822      	ldr	r2, [r4, #0]
 8006fe8:	06d3      	lsls	r3, r2, #27
 8006fea:	d504      	bpl.n	8006ff6 <_vfiprintf_r+0xe2>
 8006fec:	2353      	movs	r3, #83	@ 0x53
 8006fee:	a904      	add	r1, sp, #16
 8006ff0:	185b      	adds	r3, r3, r1
 8006ff2:	2120      	movs	r1, #32
 8006ff4:	7019      	strb	r1, [r3, #0]
 8006ff6:	0713      	lsls	r3, r2, #28
 8006ff8:	d504      	bpl.n	8007004 <_vfiprintf_r+0xf0>
 8006ffa:	2353      	movs	r3, #83	@ 0x53
 8006ffc:	a904      	add	r1, sp, #16
 8006ffe:	185b      	adds	r3, r3, r1
 8007000:	212b      	movs	r1, #43	@ 0x2b
 8007002:	7019      	strb	r1, [r3, #0]
 8007004:	782b      	ldrb	r3, [r5, #0]
 8007006:	2b2a      	cmp	r3, #42	@ 0x2a
 8007008:	d016      	beq.n	8007038 <_vfiprintf_r+0x124>
 800700a:	002e      	movs	r6, r5
 800700c:	2100      	movs	r1, #0
 800700e:	200a      	movs	r0, #10
 8007010:	68e3      	ldr	r3, [r4, #12]
 8007012:	7832      	ldrb	r2, [r6, #0]
 8007014:	1c75      	adds	r5, r6, #1
 8007016:	3a30      	subs	r2, #48	@ 0x30
 8007018:	2a09      	cmp	r2, #9
 800701a:	d950      	bls.n	80070be <_vfiprintf_r+0x1aa>
 800701c:	2900      	cmp	r1, #0
 800701e:	d111      	bne.n	8007044 <_vfiprintf_r+0x130>
 8007020:	e017      	b.n	8007052 <_vfiprintf_r+0x13e>
 8007022:	3601      	adds	r6, #1
 8007024:	e7af      	b.n	8006f86 <_vfiprintf_r+0x72>
 8007026:	9b05      	ldr	r3, [sp, #20]
 8007028:	6822      	ldr	r2, [r4, #0]
 800702a:	1ac0      	subs	r0, r0, r3
 800702c:	2301      	movs	r3, #1
 800702e:	4083      	lsls	r3, r0
 8007030:	4313      	orrs	r3, r2
 8007032:	0035      	movs	r5, r6
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	e7cc      	b.n	8006fd2 <_vfiprintf_r+0xbe>
 8007038:	9b07      	ldr	r3, [sp, #28]
 800703a:	1d19      	adds	r1, r3, #4
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	9107      	str	r1, [sp, #28]
 8007040:	2b00      	cmp	r3, #0
 8007042:	db01      	blt.n	8007048 <_vfiprintf_r+0x134>
 8007044:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007046:	e004      	b.n	8007052 <_vfiprintf_r+0x13e>
 8007048:	425b      	negs	r3, r3
 800704a:	60e3      	str	r3, [r4, #12]
 800704c:	2302      	movs	r3, #2
 800704e:	4313      	orrs	r3, r2
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	7833      	ldrb	r3, [r6, #0]
 8007054:	2b2e      	cmp	r3, #46	@ 0x2e
 8007056:	d10c      	bne.n	8007072 <_vfiprintf_r+0x15e>
 8007058:	7873      	ldrb	r3, [r6, #1]
 800705a:	2b2a      	cmp	r3, #42	@ 0x2a
 800705c:	d134      	bne.n	80070c8 <_vfiprintf_r+0x1b4>
 800705e:	9b07      	ldr	r3, [sp, #28]
 8007060:	3602      	adds	r6, #2
 8007062:	1d1a      	adds	r2, r3, #4
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	9207      	str	r2, [sp, #28]
 8007068:	2b00      	cmp	r3, #0
 800706a:	da01      	bge.n	8007070 <_vfiprintf_r+0x15c>
 800706c:	2301      	movs	r3, #1
 800706e:	425b      	negs	r3, r3
 8007070:	9309      	str	r3, [sp, #36]	@ 0x24
 8007072:	4d32      	ldr	r5, [pc, #200]	@ (800713c <_vfiprintf_r+0x228>)
 8007074:	2203      	movs	r2, #3
 8007076:	0028      	movs	r0, r5
 8007078:	7831      	ldrb	r1, [r6, #0]
 800707a:	f000 fb5b 	bl	8007734 <memchr>
 800707e:	2800      	cmp	r0, #0
 8007080:	d006      	beq.n	8007090 <_vfiprintf_r+0x17c>
 8007082:	2340      	movs	r3, #64	@ 0x40
 8007084:	1b40      	subs	r0, r0, r5
 8007086:	4083      	lsls	r3, r0
 8007088:	6822      	ldr	r2, [r4, #0]
 800708a:	3601      	adds	r6, #1
 800708c:	4313      	orrs	r3, r2
 800708e:	6023      	str	r3, [r4, #0]
 8007090:	7831      	ldrb	r1, [r6, #0]
 8007092:	2206      	movs	r2, #6
 8007094:	482a      	ldr	r0, [pc, #168]	@ (8007140 <_vfiprintf_r+0x22c>)
 8007096:	1c75      	adds	r5, r6, #1
 8007098:	7621      	strb	r1, [r4, #24]
 800709a:	f000 fb4b 	bl	8007734 <memchr>
 800709e:	2800      	cmp	r0, #0
 80070a0:	d040      	beq.n	8007124 <_vfiprintf_r+0x210>
 80070a2:	4b28      	ldr	r3, [pc, #160]	@ (8007144 <_vfiprintf_r+0x230>)
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d122      	bne.n	80070ee <_vfiprintf_r+0x1da>
 80070a8:	2207      	movs	r2, #7
 80070aa:	9b07      	ldr	r3, [sp, #28]
 80070ac:	3307      	adds	r3, #7
 80070ae:	4393      	bics	r3, r2
 80070b0:	3308      	adds	r3, #8
 80070b2:	9307      	str	r3, [sp, #28]
 80070b4:	6963      	ldr	r3, [r4, #20]
 80070b6:	9a04      	ldr	r2, [sp, #16]
 80070b8:	189b      	adds	r3, r3, r2
 80070ba:	6163      	str	r3, [r4, #20]
 80070bc:	e762      	b.n	8006f84 <_vfiprintf_r+0x70>
 80070be:	4343      	muls	r3, r0
 80070c0:	002e      	movs	r6, r5
 80070c2:	2101      	movs	r1, #1
 80070c4:	189b      	adds	r3, r3, r2
 80070c6:	e7a4      	b.n	8007012 <_vfiprintf_r+0xfe>
 80070c8:	2300      	movs	r3, #0
 80070ca:	200a      	movs	r0, #10
 80070cc:	0019      	movs	r1, r3
 80070ce:	3601      	adds	r6, #1
 80070d0:	6063      	str	r3, [r4, #4]
 80070d2:	7832      	ldrb	r2, [r6, #0]
 80070d4:	1c75      	adds	r5, r6, #1
 80070d6:	3a30      	subs	r2, #48	@ 0x30
 80070d8:	2a09      	cmp	r2, #9
 80070da:	d903      	bls.n	80070e4 <_vfiprintf_r+0x1d0>
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d0c8      	beq.n	8007072 <_vfiprintf_r+0x15e>
 80070e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80070e2:	e7c6      	b.n	8007072 <_vfiprintf_r+0x15e>
 80070e4:	4341      	muls	r1, r0
 80070e6:	002e      	movs	r6, r5
 80070e8:	2301      	movs	r3, #1
 80070ea:	1889      	adds	r1, r1, r2
 80070ec:	e7f1      	b.n	80070d2 <_vfiprintf_r+0x1be>
 80070ee:	aa07      	add	r2, sp, #28
 80070f0:	9200      	str	r2, [sp, #0]
 80070f2:	0021      	movs	r1, r4
 80070f4:	003a      	movs	r2, r7
 80070f6:	4b14      	ldr	r3, [pc, #80]	@ (8007148 <_vfiprintf_r+0x234>)
 80070f8:	9803      	ldr	r0, [sp, #12]
 80070fa:	e000      	b.n	80070fe <_vfiprintf_r+0x1ea>
 80070fc:	bf00      	nop
 80070fe:	9004      	str	r0, [sp, #16]
 8007100:	9b04      	ldr	r3, [sp, #16]
 8007102:	3301      	adds	r3, #1
 8007104:	d1d6      	bne.n	80070b4 <_vfiprintf_r+0x1a0>
 8007106:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007108:	07db      	lsls	r3, r3, #31
 800710a:	d405      	bmi.n	8007118 <_vfiprintf_r+0x204>
 800710c:	89bb      	ldrh	r3, [r7, #12]
 800710e:	059b      	lsls	r3, r3, #22
 8007110:	d402      	bmi.n	8007118 <_vfiprintf_r+0x204>
 8007112:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007114:	f7ff fe8a 	bl	8006e2c <__retarget_lock_release_recursive>
 8007118:	89bb      	ldrh	r3, [r7, #12]
 800711a:	065b      	lsls	r3, r3, #25
 800711c:	d500      	bpl.n	8007120 <_vfiprintf_r+0x20c>
 800711e:	e71e      	b.n	8006f5e <_vfiprintf_r+0x4a>
 8007120:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007122:	e71e      	b.n	8006f62 <_vfiprintf_r+0x4e>
 8007124:	aa07      	add	r2, sp, #28
 8007126:	9200      	str	r2, [sp, #0]
 8007128:	0021      	movs	r1, r4
 800712a:	003a      	movs	r2, r7
 800712c:	4b06      	ldr	r3, [pc, #24]	@ (8007148 <_vfiprintf_r+0x234>)
 800712e:	9803      	ldr	r0, [sp, #12]
 8007130:	f000 f87c 	bl	800722c <_printf_i>
 8007134:	e7e3      	b.n	80070fe <_vfiprintf_r+0x1ea>
 8007136:	46c0      	nop			@ (mov r8, r8)
 8007138:	08007ad4 	.word	0x08007ad4
 800713c:	08007ada 	.word	0x08007ada
 8007140:	08007ade 	.word	0x08007ade
 8007144:	00000000 	.word	0x00000000
 8007148:	08006eef 	.word	0x08006eef

0800714c <_printf_common>:
 800714c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800714e:	0016      	movs	r6, r2
 8007150:	9301      	str	r3, [sp, #4]
 8007152:	688a      	ldr	r2, [r1, #8]
 8007154:	690b      	ldr	r3, [r1, #16]
 8007156:	000c      	movs	r4, r1
 8007158:	9000      	str	r0, [sp, #0]
 800715a:	4293      	cmp	r3, r2
 800715c:	da00      	bge.n	8007160 <_printf_common+0x14>
 800715e:	0013      	movs	r3, r2
 8007160:	0022      	movs	r2, r4
 8007162:	6033      	str	r3, [r6, #0]
 8007164:	3243      	adds	r2, #67	@ 0x43
 8007166:	7812      	ldrb	r2, [r2, #0]
 8007168:	2a00      	cmp	r2, #0
 800716a:	d001      	beq.n	8007170 <_printf_common+0x24>
 800716c:	3301      	adds	r3, #1
 800716e:	6033      	str	r3, [r6, #0]
 8007170:	6823      	ldr	r3, [r4, #0]
 8007172:	069b      	lsls	r3, r3, #26
 8007174:	d502      	bpl.n	800717c <_printf_common+0x30>
 8007176:	6833      	ldr	r3, [r6, #0]
 8007178:	3302      	adds	r3, #2
 800717a:	6033      	str	r3, [r6, #0]
 800717c:	6822      	ldr	r2, [r4, #0]
 800717e:	2306      	movs	r3, #6
 8007180:	0015      	movs	r5, r2
 8007182:	401d      	ands	r5, r3
 8007184:	421a      	tst	r2, r3
 8007186:	d027      	beq.n	80071d8 <_printf_common+0x8c>
 8007188:	0023      	movs	r3, r4
 800718a:	3343      	adds	r3, #67	@ 0x43
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	1e5a      	subs	r2, r3, #1
 8007190:	4193      	sbcs	r3, r2
 8007192:	6822      	ldr	r2, [r4, #0]
 8007194:	0692      	lsls	r2, r2, #26
 8007196:	d430      	bmi.n	80071fa <_printf_common+0xae>
 8007198:	0022      	movs	r2, r4
 800719a:	9901      	ldr	r1, [sp, #4]
 800719c:	9800      	ldr	r0, [sp, #0]
 800719e:	9d08      	ldr	r5, [sp, #32]
 80071a0:	3243      	adds	r2, #67	@ 0x43
 80071a2:	47a8      	blx	r5
 80071a4:	3001      	adds	r0, #1
 80071a6:	d025      	beq.n	80071f4 <_printf_common+0xa8>
 80071a8:	2206      	movs	r2, #6
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	2500      	movs	r5, #0
 80071ae:	4013      	ands	r3, r2
 80071b0:	2b04      	cmp	r3, #4
 80071b2:	d105      	bne.n	80071c0 <_printf_common+0x74>
 80071b4:	6833      	ldr	r3, [r6, #0]
 80071b6:	68e5      	ldr	r5, [r4, #12]
 80071b8:	1aed      	subs	r5, r5, r3
 80071ba:	43eb      	mvns	r3, r5
 80071bc:	17db      	asrs	r3, r3, #31
 80071be:	401d      	ands	r5, r3
 80071c0:	68a3      	ldr	r3, [r4, #8]
 80071c2:	6922      	ldr	r2, [r4, #16]
 80071c4:	4293      	cmp	r3, r2
 80071c6:	dd01      	ble.n	80071cc <_printf_common+0x80>
 80071c8:	1a9b      	subs	r3, r3, r2
 80071ca:	18ed      	adds	r5, r5, r3
 80071cc:	2600      	movs	r6, #0
 80071ce:	42b5      	cmp	r5, r6
 80071d0:	d120      	bne.n	8007214 <_printf_common+0xc8>
 80071d2:	2000      	movs	r0, #0
 80071d4:	e010      	b.n	80071f8 <_printf_common+0xac>
 80071d6:	3501      	adds	r5, #1
 80071d8:	68e3      	ldr	r3, [r4, #12]
 80071da:	6832      	ldr	r2, [r6, #0]
 80071dc:	1a9b      	subs	r3, r3, r2
 80071de:	42ab      	cmp	r3, r5
 80071e0:	ddd2      	ble.n	8007188 <_printf_common+0x3c>
 80071e2:	0022      	movs	r2, r4
 80071e4:	2301      	movs	r3, #1
 80071e6:	9901      	ldr	r1, [sp, #4]
 80071e8:	9800      	ldr	r0, [sp, #0]
 80071ea:	9f08      	ldr	r7, [sp, #32]
 80071ec:	3219      	adds	r2, #25
 80071ee:	47b8      	blx	r7
 80071f0:	3001      	adds	r0, #1
 80071f2:	d1f0      	bne.n	80071d6 <_printf_common+0x8a>
 80071f4:	2001      	movs	r0, #1
 80071f6:	4240      	negs	r0, r0
 80071f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071fa:	2030      	movs	r0, #48	@ 0x30
 80071fc:	18e1      	adds	r1, r4, r3
 80071fe:	3143      	adds	r1, #67	@ 0x43
 8007200:	7008      	strb	r0, [r1, #0]
 8007202:	0021      	movs	r1, r4
 8007204:	1c5a      	adds	r2, r3, #1
 8007206:	3145      	adds	r1, #69	@ 0x45
 8007208:	7809      	ldrb	r1, [r1, #0]
 800720a:	18a2      	adds	r2, r4, r2
 800720c:	3243      	adds	r2, #67	@ 0x43
 800720e:	3302      	adds	r3, #2
 8007210:	7011      	strb	r1, [r2, #0]
 8007212:	e7c1      	b.n	8007198 <_printf_common+0x4c>
 8007214:	0022      	movs	r2, r4
 8007216:	2301      	movs	r3, #1
 8007218:	9901      	ldr	r1, [sp, #4]
 800721a:	9800      	ldr	r0, [sp, #0]
 800721c:	9f08      	ldr	r7, [sp, #32]
 800721e:	321a      	adds	r2, #26
 8007220:	47b8      	blx	r7
 8007222:	3001      	adds	r0, #1
 8007224:	d0e6      	beq.n	80071f4 <_printf_common+0xa8>
 8007226:	3601      	adds	r6, #1
 8007228:	e7d1      	b.n	80071ce <_printf_common+0x82>
	...

0800722c <_printf_i>:
 800722c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800722e:	b08b      	sub	sp, #44	@ 0x2c
 8007230:	9206      	str	r2, [sp, #24]
 8007232:	000a      	movs	r2, r1
 8007234:	3243      	adds	r2, #67	@ 0x43
 8007236:	9307      	str	r3, [sp, #28]
 8007238:	9005      	str	r0, [sp, #20]
 800723a:	9203      	str	r2, [sp, #12]
 800723c:	7e0a      	ldrb	r2, [r1, #24]
 800723e:	000c      	movs	r4, r1
 8007240:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007242:	2a78      	cmp	r2, #120	@ 0x78
 8007244:	d809      	bhi.n	800725a <_printf_i+0x2e>
 8007246:	2a62      	cmp	r2, #98	@ 0x62
 8007248:	d80b      	bhi.n	8007262 <_printf_i+0x36>
 800724a:	2a00      	cmp	r2, #0
 800724c:	d100      	bne.n	8007250 <_printf_i+0x24>
 800724e:	e0ba      	b.n	80073c6 <_printf_i+0x19a>
 8007250:	497a      	ldr	r1, [pc, #488]	@ (800743c <_printf_i+0x210>)
 8007252:	9104      	str	r1, [sp, #16]
 8007254:	2a58      	cmp	r2, #88	@ 0x58
 8007256:	d100      	bne.n	800725a <_printf_i+0x2e>
 8007258:	e08e      	b.n	8007378 <_printf_i+0x14c>
 800725a:	0025      	movs	r5, r4
 800725c:	3542      	adds	r5, #66	@ 0x42
 800725e:	702a      	strb	r2, [r5, #0]
 8007260:	e022      	b.n	80072a8 <_printf_i+0x7c>
 8007262:	0010      	movs	r0, r2
 8007264:	3863      	subs	r0, #99	@ 0x63
 8007266:	2815      	cmp	r0, #21
 8007268:	d8f7      	bhi.n	800725a <_printf_i+0x2e>
 800726a:	f7f8 ff4b 	bl	8000104 <__gnu_thumb1_case_shi>
 800726e:	0016      	.short	0x0016
 8007270:	fff6001f 	.word	0xfff6001f
 8007274:	fff6fff6 	.word	0xfff6fff6
 8007278:	001ffff6 	.word	0x001ffff6
 800727c:	fff6fff6 	.word	0xfff6fff6
 8007280:	fff6fff6 	.word	0xfff6fff6
 8007284:	0036009f 	.word	0x0036009f
 8007288:	fff6007e 	.word	0xfff6007e
 800728c:	00b0fff6 	.word	0x00b0fff6
 8007290:	0036fff6 	.word	0x0036fff6
 8007294:	fff6fff6 	.word	0xfff6fff6
 8007298:	0082      	.short	0x0082
 800729a:	0025      	movs	r5, r4
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	3542      	adds	r5, #66	@ 0x42
 80072a0:	1d11      	adds	r1, r2, #4
 80072a2:	6019      	str	r1, [r3, #0]
 80072a4:	6813      	ldr	r3, [r2, #0]
 80072a6:	702b      	strb	r3, [r5, #0]
 80072a8:	2301      	movs	r3, #1
 80072aa:	e09e      	b.n	80073ea <_printf_i+0x1be>
 80072ac:	6818      	ldr	r0, [r3, #0]
 80072ae:	6809      	ldr	r1, [r1, #0]
 80072b0:	1d02      	adds	r2, r0, #4
 80072b2:	060d      	lsls	r5, r1, #24
 80072b4:	d50b      	bpl.n	80072ce <_printf_i+0xa2>
 80072b6:	6806      	ldr	r6, [r0, #0]
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	2e00      	cmp	r6, #0
 80072bc:	da03      	bge.n	80072c6 <_printf_i+0x9a>
 80072be:	232d      	movs	r3, #45	@ 0x2d
 80072c0:	9a03      	ldr	r2, [sp, #12]
 80072c2:	4276      	negs	r6, r6
 80072c4:	7013      	strb	r3, [r2, #0]
 80072c6:	4b5d      	ldr	r3, [pc, #372]	@ (800743c <_printf_i+0x210>)
 80072c8:	270a      	movs	r7, #10
 80072ca:	9304      	str	r3, [sp, #16]
 80072cc:	e018      	b.n	8007300 <_printf_i+0xd4>
 80072ce:	6806      	ldr	r6, [r0, #0]
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	0649      	lsls	r1, r1, #25
 80072d4:	d5f1      	bpl.n	80072ba <_printf_i+0x8e>
 80072d6:	b236      	sxth	r6, r6
 80072d8:	e7ef      	b.n	80072ba <_printf_i+0x8e>
 80072da:	6808      	ldr	r0, [r1, #0]
 80072dc:	6819      	ldr	r1, [r3, #0]
 80072de:	c940      	ldmia	r1!, {r6}
 80072e0:	0605      	lsls	r5, r0, #24
 80072e2:	d402      	bmi.n	80072ea <_printf_i+0xbe>
 80072e4:	0640      	lsls	r0, r0, #25
 80072e6:	d500      	bpl.n	80072ea <_printf_i+0xbe>
 80072e8:	b2b6      	uxth	r6, r6
 80072ea:	6019      	str	r1, [r3, #0]
 80072ec:	4b53      	ldr	r3, [pc, #332]	@ (800743c <_printf_i+0x210>)
 80072ee:	270a      	movs	r7, #10
 80072f0:	9304      	str	r3, [sp, #16]
 80072f2:	2a6f      	cmp	r2, #111	@ 0x6f
 80072f4:	d100      	bne.n	80072f8 <_printf_i+0xcc>
 80072f6:	3f02      	subs	r7, #2
 80072f8:	0023      	movs	r3, r4
 80072fa:	2200      	movs	r2, #0
 80072fc:	3343      	adds	r3, #67	@ 0x43
 80072fe:	701a      	strb	r2, [r3, #0]
 8007300:	6863      	ldr	r3, [r4, #4]
 8007302:	60a3      	str	r3, [r4, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	db06      	blt.n	8007316 <_printf_i+0xea>
 8007308:	2104      	movs	r1, #4
 800730a:	6822      	ldr	r2, [r4, #0]
 800730c:	9d03      	ldr	r5, [sp, #12]
 800730e:	438a      	bics	r2, r1
 8007310:	6022      	str	r2, [r4, #0]
 8007312:	4333      	orrs	r3, r6
 8007314:	d00c      	beq.n	8007330 <_printf_i+0x104>
 8007316:	9d03      	ldr	r5, [sp, #12]
 8007318:	0030      	movs	r0, r6
 800731a:	0039      	movs	r1, r7
 800731c:	f7f8 ff82 	bl	8000224 <__aeabi_uidivmod>
 8007320:	9b04      	ldr	r3, [sp, #16]
 8007322:	3d01      	subs	r5, #1
 8007324:	5c5b      	ldrb	r3, [r3, r1]
 8007326:	702b      	strb	r3, [r5, #0]
 8007328:	0033      	movs	r3, r6
 800732a:	0006      	movs	r6, r0
 800732c:	429f      	cmp	r7, r3
 800732e:	d9f3      	bls.n	8007318 <_printf_i+0xec>
 8007330:	2f08      	cmp	r7, #8
 8007332:	d109      	bne.n	8007348 <_printf_i+0x11c>
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	07db      	lsls	r3, r3, #31
 8007338:	d506      	bpl.n	8007348 <_printf_i+0x11c>
 800733a:	6862      	ldr	r2, [r4, #4]
 800733c:	6923      	ldr	r3, [r4, #16]
 800733e:	429a      	cmp	r2, r3
 8007340:	dc02      	bgt.n	8007348 <_printf_i+0x11c>
 8007342:	2330      	movs	r3, #48	@ 0x30
 8007344:	3d01      	subs	r5, #1
 8007346:	702b      	strb	r3, [r5, #0]
 8007348:	9b03      	ldr	r3, [sp, #12]
 800734a:	1b5b      	subs	r3, r3, r5
 800734c:	6123      	str	r3, [r4, #16]
 800734e:	9b07      	ldr	r3, [sp, #28]
 8007350:	0021      	movs	r1, r4
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	9805      	ldr	r0, [sp, #20]
 8007356:	9b06      	ldr	r3, [sp, #24]
 8007358:	aa09      	add	r2, sp, #36	@ 0x24
 800735a:	f7ff fef7 	bl	800714c <_printf_common>
 800735e:	3001      	adds	r0, #1
 8007360:	d148      	bne.n	80073f4 <_printf_i+0x1c8>
 8007362:	2001      	movs	r0, #1
 8007364:	4240      	negs	r0, r0
 8007366:	b00b      	add	sp, #44	@ 0x2c
 8007368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800736a:	2220      	movs	r2, #32
 800736c:	6809      	ldr	r1, [r1, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	6022      	str	r2, [r4, #0]
 8007372:	2278      	movs	r2, #120	@ 0x78
 8007374:	4932      	ldr	r1, [pc, #200]	@ (8007440 <_printf_i+0x214>)
 8007376:	9104      	str	r1, [sp, #16]
 8007378:	0021      	movs	r1, r4
 800737a:	3145      	adds	r1, #69	@ 0x45
 800737c:	700a      	strb	r2, [r1, #0]
 800737e:	6819      	ldr	r1, [r3, #0]
 8007380:	6822      	ldr	r2, [r4, #0]
 8007382:	c940      	ldmia	r1!, {r6}
 8007384:	0610      	lsls	r0, r2, #24
 8007386:	d402      	bmi.n	800738e <_printf_i+0x162>
 8007388:	0650      	lsls	r0, r2, #25
 800738a:	d500      	bpl.n	800738e <_printf_i+0x162>
 800738c:	b2b6      	uxth	r6, r6
 800738e:	6019      	str	r1, [r3, #0]
 8007390:	07d3      	lsls	r3, r2, #31
 8007392:	d502      	bpl.n	800739a <_printf_i+0x16e>
 8007394:	2320      	movs	r3, #32
 8007396:	4313      	orrs	r3, r2
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	2e00      	cmp	r6, #0
 800739c:	d001      	beq.n	80073a2 <_printf_i+0x176>
 800739e:	2710      	movs	r7, #16
 80073a0:	e7aa      	b.n	80072f8 <_printf_i+0xcc>
 80073a2:	2220      	movs	r2, #32
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	4393      	bics	r3, r2
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	e7f8      	b.n	800739e <_printf_i+0x172>
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	680d      	ldr	r5, [r1, #0]
 80073b0:	1d10      	adds	r0, r2, #4
 80073b2:	6949      	ldr	r1, [r1, #20]
 80073b4:	6018      	str	r0, [r3, #0]
 80073b6:	6813      	ldr	r3, [r2, #0]
 80073b8:	062e      	lsls	r6, r5, #24
 80073ba:	d501      	bpl.n	80073c0 <_printf_i+0x194>
 80073bc:	6019      	str	r1, [r3, #0]
 80073be:	e002      	b.n	80073c6 <_printf_i+0x19a>
 80073c0:	066d      	lsls	r5, r5, #25
 80073c2:	d5fb      	bpl.n	80073bc <_printf_i+0x190>
 80073c4:	8019      	strh	r1, [r3, #0]
 80073c6:	2300      	movs	r3, #0
 80073c8:	9d03      	ldr	r5, [sp, #12]
 80073ca:	6123      	str	r3, [r4, #16]
 80073cc:	e7bf      	b.n	800734e <_printf_i+0x122>
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	1d11      	adds	r1, r2, #4
 80073d2:	6019      	str	r1, [r3, #0]
 80073d4:	6815      	ldr	r5, [r2, #0]
 80073d6:	2100      	movs	r1, #0
 80073d8:	0028      	movs	r0, r5
 80073da:	6862      	ldr	r2, [r4, #4]
 80073dc:	f000 f9aa 	bl	8007734 <memchr>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d001      	beq.n	80073e8 <_printf_i+0x1bc>
 80073e4:	1b40      	subs	r0, r0, r5
 80073e6:	6060      	str	r0, [r4, #4]
 80073e8:	6863      	ldr	r3, [r4, #4]
 80073ea:	6123      	str	r3, [r4, #16]
 80073ec:	2300      	movs	r3, #0
 80073ee:	9a03      	ldr	r2, [sp, #12]
 80073f0:	7013      	strb	r3, [r2, #0]
 80073f2:	e7ac      	b.n	800734e <_printf_i+0x122>
 80073f4:	002a      	movs	r2, r5
 80073f6:	6923      	ldr	r3, [r4, #16]
 80073f8:	9906      	ldr	r1, [sp, #24]
 80073fa:	9805      	ldr	r0, [sp, #20]
 80073fc:	9d07      	ldr	r5, [sp, #28]
 80073fe:	47a8      	blx	r5
 8007400:	3001      	adds	r0, #1
 8007402:	d0ae      	beq.n	8007362 <_printf_i+0x136>
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	079b      	lsls	r3, r3, #30
 8007408:	d415      	bmi.n	8007436 <_printf_i+0x20a>
 800740a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800740c:	68e0      	ldr	r0, [r4, #12]
 800740e:	4298      	cmp	r0, r3
 8007410:	daa9      	bge.n	8007366 <_printf_i+0x13a>
 8007412:	0018      	movs	r0, r3
 8007414:	e7a7      	b.n	8007366 <_printf_i+0x13a>
 8007416:	0022      	movs	r2, r4
 8007418:	2301      	movs	r3, #1
 800741a:	9906      	ldr	r1, [sp, #24]
 800741c:	9805      	ldr	r0, [sp, #20]
 800741e:	9e07      	ldr	r6, [sp, #28]
 8007420:	3219      	adds	r2, #25
 8007422:	47b0      	blx	r6
 8007424:	3001      	adds	r0, #1
 8007426:	d09c      	beq.n	8007362 <_printf_i+0x136>
 8007428:	3501      	adds	r5, #1
 800742a:	68e3      	ldr	r3, [r4, #12]
 800742c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800742e:	1a9b      	subs	r3, r3, r2
 8007430:	42ab      	cmp	r3, r5
 8007432:	dcf0      	bgt.n	8007416 <_printf_i+0x1ea>
 8007434:	e7e9      	b.n	800740a <_printf_i+0x1de>
 8007436:	2500      	movs	r5, #0
 8007438:	e7f7      	b.n	800742a <_printf_i+0x1fe>
 800743a:	46c0      	nop			@ (mov r8, r8)
 800743c:	08007ae5 	.word	0x08007ae5
 8007440:	08007af6 	.word	0x08007af6

08007444 <__sflush_r>:
 8007444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007446:	220c      	movs	r2, #12
 8007448:	5e8b      	ldrsh	r3, [r1, r2]
 800744a:	0005      	movs	r5, r0
 800744c:	000c      	movs	r4, r1
 800744e:	071a      	lsls	r2, r3, #28
 8007450:	d456      	bmi.n	8007500 <__sflush_r+0xbc>
 8007452:	684a      	ldr	r2, [r1, #4]
 8007454:	2a00      	cmp	r2, #0
 8007456:	dc02      	bgt.n	800745e <__sflush_r+0x1a>
 8007458:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800745a:	2a00      	cmp	r2, #0
 800745c:	dd4e      	ble.n	80074fc <__sflush_r+0xb8>
 800745e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007460:	2f00      	cmp	r7, #0
 8007462:	d04b      	beq.n	80074fc <__sflush_r+0xb8>
 8007464:	2200      	movs	r2, #0
 8007466:	2080      	movs	r0, #128	@ 0x80
 8007468:	682e      	ldr	r6, [r5, #0]
 800746a:	602a      	str	r2, [r5, #0]
 800746c:	001a      	movs	r2, r3
 800746e:	0140      	lsls	r0, r0, #5
 8007470:	6a21      	ldr	r1, [r4, #32]
 8007472:	4002      	ands	r2, r0
 8007474:	4203      	tst	r3, r0
 8007476:	d033      	beq.n	80074e0 <__sflush_r+0x9c>
 8007478:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800747a:	89a3      	ldrh	r3, [r4, #12]
 800747c:	075b      	lsls	r3, r3, #29
 800747e:	d506      	bpl.n	800748e <__sflush_r+0x4a>
 8007480:	6863      	ldr	r3, [r4, #4]
 8007482:	1ad2      	subs	r2, r2, r3
 8007484:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <__sflush_r+0x4a>
 800748a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800748c:	1ad2      	subs	r2, r2, r3
 800748e:	2300      	movs	r3, #0
 8007490:	0028      	movs	r0, r5
 8007492:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007494:	6a21      	ldr	r1, [r4, #32]
 8007496:	47b8      	blx	r7
 8007498:	89a2      	ldrh	r2, [r4, #12]
 800749a:	1c43      	adds	r3, r0, #1
 800749c:	d106      	bne.n	80074ac <__sflush_r+0x68>
 800749e:	6829      	ldr	r1, [r5, #0]
 80074a0:	291d      	cmp	r1, #29
 80074a2:	d846      	bhi.n	8007532 <__sflush_r+0xee>
 80074a4:	4b29      	ldr	r3, [pc, #164]	@ (800754c <__sflush_r+0x108>)
 80074a6:	40cb      	lsrs	r3, r1
 80074a8:	07db      	lsls	r3, r3, #31
 80074aa:	d542      	bpl.n	8007532 <__sflush_r+0xee>
 80074ac:	2300      	movs	r3, #0
 80074ae:	6063      	str	r3, [r4, #4]
 80074b0:	6923      	ldr	r3, [r4, #16]
 80074b2:	6023      	str	r3, [r4, #0]
 80074b4:	04d2      	lsls	r2, r2, #19
 80074b6:	d505      	bpl.n	80074c4 <__sflush_r+0x80>
 80074b8:	1c43      	adds	r3, r0, #1
 80074ba:	d102      	bne.n	80074c2 <__sflush_r+0x7e>
 80074bc:	682b      	ldr	r3, [r5, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d100      	bne.n	80074c4 <__sflush_r+0x80>
 80074c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80074c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074c6:	602e      	str	r6, [r5, #0]
 80074c8:	2900      	cmp	r1, #0
 80074ca:	d017      	beq.n	80074fc <__sflush_r+0xb8>
 80074cc:	0023      	movs	r3, r4
 80074ce:	3344      	adds	r3, #68	@ 0x44
 80074d0:	4299      	cmp	r1, r3
 80074d2:	d002      	beq.n	80074da <__sflush_r+0x96>
 80074d4:	0028      	movs	r0, r5
 80074d6:	f7ff fcab 	bl	8006e30 <_free_r>
 80074da:	2300      	movs	r3, #0
 80074dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80074de:	e00d      	b.n	80074fc <__sflush_r+0xb8>
 80074e0:	2301      	movs	r3, #1
 80074e2:	0028      	movs	r0, r5
 80074e4:	47b8      	blx	r7
 80074e6:	0002      	movs	r2, r0
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d1c6      	bne.n	800747a <__sflush_r+0x36>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d0c3      	beq.n	800747a <__sflush_r+0x36>
 80074f2:	2b1d      	cmp	r3, #29
 80074f4:	d001      	beq.n	80074fa <__sflush_r+0xb6>
 80074f6:	2b16      	cmp	r3, #22
 80074f8:	d11a      	bne.n	8007530 <__sflush_r+0xec>
 80074fa:	602e      	str	r6, [r5, #0]
 80074fc:	2000      	movs	r0, #0
 80074fe:	e01e      	b.n	800753e <__sflush_r+0xfa>
 8007500:	690e      	ldr	r6, [r1, #16]
 8007502:	2e00      	cmp	r6, #0
 8007504:	d0fa      	beq.n	80074fc <__sflush_r+0xb8>
 8007506:	680f      	ldr	r7, [r1, #0]
 8007508:	600e      	str	r6, [r1, #0]
 800750a:	1bba      	subs	r2, r7, r6
 800750c:	9201      	str	r2, [sp, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	079b      	lsls	r3, r3, #30
 8007512:	d100      	bne.n	8007516 <__sflush_r+0xd2>
 8007514:	694a      	ldr	r2, [r1, #20]
 8007516:	60a2      	str	r2, [r4, #8]
 8007518:	9b01      	ldr	r3, [sp, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	ddee      	ble.n	80074fc <__sflush_r+0xb8>
 800751e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007520:	0032      	movs	r2, r6
 8007522:	001f      	movs	r7, r3
 8007524:	0028      	movs	r0, r5
 8007526:	9b01      	ldr	r3, [sp, #4]
 8007528:	6a21      	ldr	r1, [r4, #32]
 800752a:	47b8      	blx	r7
 800752c:	2800      	cmp	r0, #0
 800752e:	dc07      	bgt.n	8007540 <__sflush_r+0xfc>
 8007530:	89a2      	ldrh	r2, [r4, #12]
 8007532:	2340      	movs	r3, #64	@ 0x40
 8007534:	2001      	movs	r0, #1
 8007536:	4313      	orrs	r3, r2
 8007538:	b21b      	sxth	r3, r3
 800753a:	81a3      	strh	r3, [r4, #12]
 800753c:	4240      	negs	r0, r0
 800753e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007540:	9b01      	ldr	r3, [sp, #4]
 8007542:	1836      	adds	r6, r6, r0
 8007544:	1a1b      	subs	r3, r3, r0
 8007546:	9301      	str	r3, [sp, #4]
 8007548:	e7e6      	b.n	8007518 <__sflush_r+0xd4>
 800754a:	46c0      	nop			@ (mov r8, r8)
 800754c:	20400001 	.word	0x20400001

08007550 <_fflush_r>:
 8007550:	690b      	ldr	r3, [r1, #16]
 8007552:	b570      	push	{r4, r5, r6, lr}
 8007554:	0005      	movs	r5, r0
 8007556:	000c      	movs	r4, r1
 8007558:	2b00      	cmp	r3, #0
 800755a:	d102      	bne.n	8007562 <_fflush_r+0x12>
 800755c:	2500      	movs	r5, #0
 800755e:	0028      	movs	r0, r5
 8007560:	bd70      	pop	{r4, r5, r6, pc}
 8007562:	2800      	cmp	r0, #0
 8007564:	d004      	beq.n	8007570 <_fflush_r+0x20>
 8007566:	6a03      	ldr	r3, [r0, #32]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <_fflush_r+0x20>
 800756c:	f7ff fa30 	bl	80069d0 <__sinit>
 8007570:	220c      	movs	r2, #12
 8007572:	5ea3      	ldrsh	r3, [r4, r2]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d0f1      	beq.n	800755c <_fflush_r+0xc>
 8007578:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800757a:	07d2      	lsls	r2, r2, #31
 800757c:	d404      	bmi.n	8007588 <_fflush_r+0x38>
 800757e:	059b      	lsls	r3, r3, #22
 8007580:	d402      	bmi.n	8007588 <_fflush_r+0x38>
 8007582:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007584:	f7ff fc51 	bl	8006e2a <__retarget_lock_acquire_recursive>
 8007588:	0028      	movs	r0, r5
 800758a:	0021      	movs	r1, r4
 800758c:	f7ff ff5a 	bl	8007444 <__sflush_r>
 8007590:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007592:	0005      	movs	r5, r0
 8007594:	07db      	lsls	r3, r3, #31
 8007596:	d4e2      	bmi.n	800755e <_fflush_r+0xe>
 8007598:	89a3      	ldrh	r3, [r4, #12]
 800759a:	059b      	lsls	r3, r3, #22
 800759c:	d4df      	bmi.n	800755e <_fflush_r+0xe>
 800759e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075a0:	f7ff fc44 	bl	8006e2c <__retarget_lock_release_recursive>
 80075a4:	e7db      	b.n	800755e <_fflush_r+0xe>
	...

080075a8 <__swhatbuf_r>:
 80075a8:	b570      	push	{r4, r5, r6, lr}
 80075aa:	000e      	movs	r6, r1
 80075ac:	001d      	movs	r5, r3
 80075ae:	230e      	movs	r3, #14
 80075b0:	5ec9      	ldrsh	r1, [r1, r3]
 80075b2:	0014      	movs	r4, r2
 80075b4:	b096      	sub	sp, #88	@ 0x58
 80075b6:	2900      	cmp	r1, #0
 80075b8:	da0c      	bge.n	80075d4 <__swhatbuf_r+0x2c>
 80075ba:	89b2      	ldrh	r2, [r6, #12]
 80075bc:	2380      	movs	r3, #128	@ 0x80
 80075be:	0011      	movs	r1, r2
 80075c0:	4019      	ands	r1, r3
 80075c2:	421a      	tst	r2, r3
 80075c4:	d114      	bne.n	80075f0 <__swhatbuf_r+0x48>
 80075c6:	2380      	movs	r3, #128	@ 0x80
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	2000      	movs	r0, #0
 80075cc:	6029      	str	r1, [r5, #0]
 80075ce:	6023      	str	r3, [r4, #0]
 80075d0:	b016      	add	sp, #88	@ 0x58
 80075d2:	bd70      	pop	{r4, r5, r6, pc}
 80075d4:	466a      	mov	r2, sp
 80075d6:	f000 f889 	bl	80076ec <_fstat_r>
 80075da:	2800      	cmp	r0, #0
 80075dc:	dbed      	blt.n	80075ba <__swhatbuf_r+0x12>
 80075de:	23f0      	movs	r3, #240	@ 0xf0
 80075e0:	9901      	ldr	r1, [sp, #4]
 80075e2:	021b      	lsls	r3, r3, #8
 80075e4:	4019      	ands	r1, r3
 80075e6:	4b04      	ldr	r3, [pc, #16]	@ (80075f8 <__swhatbuf_r+0x50>)
 80075e8:	18c9      	adds	r1, r1, r3
 80075ea:	424b      	negs	r3, r1
 80075ec:	4159      	adcs	r1, r3
 80075ee:	e7ea      	b.n	80075c6 <__swhatbuf_r+0x1e>
 80075f0:	2100      	movs	r1, #0
 80075f2:	2340      	movs	r3, #64	@ 0x40
 80075f4:	e7e9      	b.n	80075ca <__swhatbuf_r+0x22>
 80075f6:	46c0      	nop			@ (mov r8, r8)
 80075f8:	ffffe000 	.word	0xffffe000

080075fc <__smakebuf_r>:
 80075fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075fe:	2602      	movs	r6, #2
 8007600:	898b      	ldrh	r3, [r1, #12]
 8007602:	0005      	movs	r5, r0
 8007604:	000c      	movs	r4, r1
 8007606:	b085      	sub	sp, #20
 8007608:	4233      	tst	r3, r6
 800760a:	d007      	beq.n	800761c <__smakebuf_r+0x20>
 800760c:	0023      	movs	r3, r4
 800760e:	3347      	adds	r3, #71	@ 0x47
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	6123      	str	r3, [r4, #16]
 8007614:	2301      	movs	r3, #1
 8007616:	6163      	str	r3, [r4, #20]
 8007618:	b005      	add	sp, #20
 800761a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800761c:	ab03      	add	r3, sp, #12
 800761e:	aa02      	add	r2, sp, #8
 8007620:	f7ff ffc2 	bl	80075a8 <__swhatbuf_r>
 8007624:	9f02      	ldr	r7, [sp, #8]
 8007626:	9001      	str	r0, [sp, #4]
 8007628:	0039      	movs	r1, r7
 800762a:	0028      	movs	r0, r5
 800762c:	f7ff f8b0 	bl	8006790 <_malloc_r>
 8007630:	2800      	cmp	r0, #0
 8007632:	d108      	bne.n	8007646 <__smakebuf_r+0x4a>
 8007634:	220c      	movs	r2, #12
 8007636:	5ea3      	ldrsh	r3, [r4, r2]
 8007638:	059a      	lsls	r2, r3, #22
 800763a:	d4ed      	bmi.n	8007618 <__smakebuf_r+0x1c>
 800763c:	2203      	movs	r2, #3
 800763e:	4393      	bics	r3, r2
 8007640:	431e      	orrs	r6, r3
 8007642:	81a6      	strh	r6, [r4, #12]
 8007644:	e7e2      	b.n	800760c <__smakebuf_r+0x10>
 8007646:	2380      	movs	r3, #128	@ 0x80
 8007648:	89a2      	ldrh	r2, [r4, #12]
 800764a:	6020      	str	r0, [r4, #0]
 800764c:	4313      	orrs	r3, r2
 800764e:	81a3      	strh	r3, [r4, #12]
 8007650:	9b03      	ldr	r3, [sp, #12]
 8007652:	6120      	str	r0, [r4, #16]
 8007654:	6167      	str	r7, [r4, #20]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00c      	beq.n	8007674 <__smakebuf_r+0x78>
 800765a:	0028      	movs	r0, r5
 800765c:	230e      	movs	r3, #14
 800765e:	5ee1      	ldrsh	r1, [r4, r3]
 8007660:	f000 f856 	bl	8007710 <_isatty_r>
 8007664:	2800      	cmp	r0, #0
 8007666:	d005      	beq.n	8007674 <__smakebuf_r+0x78>
 8007668:	2303      	movs	r3, #3
 800766a:	89a2      	ldrh	r2, [r4, #12]
 800766c:	439a      	bics	r2, r3
 800766e:	3b02      	subs	r3, #2
 8007670:	4313      	orrs	r3, r2
 8007672:	81a3      	strh	r3, [r4, #12]
 8007674:	89a3      	ldrh	r3, [r4, #12]
 8007676:	9a01      	ldr	r2, [sp, #4]
 8007678:	4313      	orrs	r3, r2
 800767a:	81a3      	strh	r3, [r4, #12]
 800767c:	e7cc      	b.n	8007618 <__smakebuf_r+0x1c>

0800767e <_putc_r>:
 800767e:	b570      	push	{r4, r5, r6, lr}
 8007680:	0006      	movs	r6, r0
 8007682:	000d      	movs	r5, r1
 8007684:	0014      	movs	r4, r2
 8007686:	2800      	cmp	r0, #0
 8007688:	d004      	beq.n	8007694 <_putc_r+0x16>
 800768a:	6a03      	ldr	r3, [r0, #32]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <_putc_r+0x16>
 8007690:	f7ff f99e 	bl	80069d0 <__sinit>
 8007694:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007696:	07db      	lsls	r3, r3, #31
 8007698:	d405      	bmi.n	80076a6 <_putc_r+0x28>
 800769a:	89a3      	ldrh	r3, [r4, #12]
 800769c:	059b      	lsls	r3, r3, #22
 800769e:	d402      	bmi.n	80076a6 <_putc_r+0x28>
 80076a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076a2:	f7ff fbc2 	bl	8006e2a <__retarget_lock_acquire_recursive>
 80076a6:	68a3      	ldr	r3, [r4, #8]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	60a3      	str	r3, [r4, #8]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	da05      	bge.n	80076bc <_putc_r+0x3e>
 80076b0:	69a2      	ldr	r2, [r4, #24]
 80076b2:	4293      	cmp	r3, r2
 80076b4:	db12      	blt.n	80076dc <_putc_r+0x5e>
 80076b6:	b2eb      	uxtb	r3, r5
 80076b8:	2b0a      	cmp	r3, #10
 80076ba:	d00f      	beq.n	80076dc <_putc_r+0x5e>
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	1c5a      	adds	r2, r3, #1
 80076c0:	6022      	str	r2, [r4, #0]
 80076c2:	701d      	strb	r5, [r3, #0]
 80076c4:	b2ed      	uxtb	r5, r5
 80076c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076c8:	07db      	lsls	r3, r3, #31
 80076ca:	d405      	bmi.n	80076d8 <_putc_r+0x5a>
 80076cc:	89a3      	ldrh	r3, [r4, #12]
 80076ce:	059b      	lsls	r3, r3, #22
 80076d0:	d402      	bmi.n	80076d8 <_putc_r+0x5a>
 80076d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076d4:	f7ff fbaa 	bl	8006e2c <__retarget_lock_release_recursive>
 80076d8:	0028      	movs	r0, r5
 80076da:	bd70      	pop	{r4, r5, r6, pc}
 80076dc:	0029      	movs	r1, r5
 80076de:	0022      	movs	r2, r4
 80076e0:	0030      	movs	r0, r6
 80076e2:	f7ff fa6f 	bl	8006bc4 <__swbuf_r>
 80076e6:	0005      	movs	r5, r0
 80076e8:	e7ed      	b.n	80076c6 <_putc_r+0x48>
	...

080076ec <_fstat_r>:
 80076ec:	2300      	movs	r3, #0
 80076ee:	b570      	push	{r4, r5, r6, lr}
 80076f0:	4d06      	ldr	r5, [pc, #24]	@ (800770c <_fstat_r+0x20>)
 80076f2:	0004      	movs	r4, r0
 80076f4:	0008      	movs	r0, r1
 80076f6:	0011      	movs	r1, r2
 80076f8:	602b      	str	r3, [r5, #0]
 80076fa:	f7fb ffd9 	bl	80036b0 <_fstat>
 80076fe:	1c43      	adds	r3, r0, #1
 8007700:	d103      	bne.n	800770a <_fstat_r+0x1e>
 8007702:	682b      	ldr	r3, [r5, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d000      	beq.n	800770a <_fstat_r+0x1e>
 8007708:	6023      	str	r3, [r4, #0]
 800770a:	bd70      	pop	{r4, r5, r6, pc}
 800770c:	200013e0 	.word	0x200013e0

08007710 <_isatty_r>:
 8007710:	2300      	movs	r3, #0
 8007712:	b570      	push	{r4, r5, r6, lr}
 8007714:	4d06      	ldr	r5, [pc, #24]	@ (8007730 <_isatty_r+0x20>)
 8007716:	0004      	movs	r4, r0
 8007718:	0008      	movs	r0, r1
 800771a:	602b      	str	r3, [r5, #0]
 800771c:	f7fb ffd6 	bl	80036cc <_isatty>
 8007720:	1c43      	adds	r3, r0, #1
 8007722:	d103      	bne.n	800772c <_isatty_r+0x1c>
 8007724:	682b      	ldr	r3, [r5, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d000      	beq.n	800772c <_isatty_r+0x1c>
 800772a:	6023      	str	r3, [r4, #0]
 800772c:	bd70      	pop	{r4, r5, r6, pc}
 800772e:	46c0      	nop			@ (mov r8, r8)
 8007730:	200013e0 	.word	0x200013e0

08007734 <memchr>:
 8007734:	b2c9      	uxtb	r1, r1
 8007736:	1882      	adds	r2, r0, r2
 8007738:	4290      	cmp	r0, r2
 800773a:	d101      	bne.n	8007740 <memchr+0xc>
 800773c:	2000      	movs	r0, #0
 800773e:	4770      	bx	lr
 8007740:	7803      	ldrb	r3, [r0, #0]
 8007742:	428b      	cmp	r3, r1
 8007744:	d0fb      	beq.n	800773e <memchr+0xa>
 8007746:	3001      	adds	r0, #1
 8007748:	e7f6      	b.n	8007738 <memchr+0x4>
	...

0800774c <_init>:
 800774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774e:	46c0      	nop			@ (mov r8, r8)
 8007750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007752:	bc08      	pop	{r3}
 8007754:	469e      	mov	lr, r3
 8007756:	4770      	bx	lr

08007758 <_fini>:
 8007758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775a:	46c0      	nop			@ (mov r8, r8)
 800775c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775e:	bc08      	pop	{r3}
 8007760:	469e      	mov	lr, r3
 8007762:	4770      	bx	lr
